// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBasicInfo {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub stamina: u32,
    #[prost(uint32, tag = "5")]
    pub mcoin: u32,
    #[prost(uint32, tag = "6")]
    pub hcoin: u32,
    #[prost(uint32, tag = "7")]
    pub scoin: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountInfo {
    #[prost(uint32, tag = "1")]
    pub cur_amount: u32,
    #[prost(uint32, tag = "2")]
    pub max_amount: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BlackInfo {
    #[prost(int64, tag = "1")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub limit_level: u32,
    #[prost(uint32, tag = "4")]
    pub ban_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VersionCount {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadData {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(int64, tag = "2")]
    pub time: i64,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "4")]
    pub njddjhapnbo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadData {
    #[prost(bytes = "vec", tag = "1")]
    pub dljjaldbjdh: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub gldmpcpnkbp: ::core::option::Option<ClientDownloadData>,
    #[prost(message, repeated, tag = "3")]
    pub minaokpaidn: ::prost::alloc::vec::Vec<ClientDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientUploadData {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchParam {
    #[prost(uint32, repeated, tag = "1")]
    pub param_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchInfo {
    #[prost(enumeration = "Kfpiggpbgik", tag = "1")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "2")]
    pub switch_list: ::prost::alloc::vec::Vec<FeatureSwitchParam>,
    #[prost(bool, tag = "3")]
    pub is_all_closed: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExtraDeviceInfo {
    #[prost(string, tag = "1")]
    pub hpnagdmgmoj: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub codifkkhbca: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub mfdbbhpcjfa: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub gofdlahieid: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub bnpfhkhmkmm: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub bnhhigcgkaf: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub aimjbcidcek: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplayInfo {
    #[prost(uint64, tag = "1")]
    pub aimnhioblef: u64,
    #[prost(enumeration = "Jaopmddbnhf", tag = "2")]
    pub logebidmfjd: i32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(string, tag = "5")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub head_icon: u32,
    #[prost(string, tag = "7")]
    pub obedjnaheec: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub sent_time: u64,
    #[prost(uint32, tag = "9")]
    pub gcpfdfinjfm: u32,
    #[prost(uint32, tag = "10")]
    pub kmeaphppmmn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PunkLordBattleAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecord {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub damage_hp: u32,
    #[prost(bool, tag = "3")]
    pub is_final_hit: bool,
    #[prost(uint32, tag = "4")]
    pub over_kill_damage_hp: u32,
    #[prost(string, tag = "5")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<PunkLordBattleAvatar>,
    #[prost(uint32, tag = "7")]
    pub assist_score: u32,
    #[prost(uint32, tag = "8")]
    pub damage_score: u32,
    #[prost(uint32, tag = "9")]
    pub final_hit_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Labojlhcmph {
    #[prost(message, repeated, tag = "1")]
    pub lmjjejmpmcj: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmeokppcbhl {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckemklhhefo {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub config_id: u32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(int64, tag = "5")]
    pub sent_time: i64,
    #[prost(uint32, tag = "6")]
    pub left_hp: u32,
    #[prost(uint32, tag = "7")]
    pub hngpnadjidp: u32,
    #[prost(enumeration = "Aiphgapcafg", tag = "8")]
    pub apjbcnfndhl: i32,
    #[prost(bool, tag = "9")]
    pub hgaibecfcpl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleReplay {
    #[prost(string, tag = "1")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub replay_info: ::core::option::Option<ReplayInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnbcdccanhi {
    #[prost(uint64, tag = "1")]
    pub eefbhbmocpl: u64,
    #[prost(uint32, tag = "2")]
    pub djnelabfjlf: u32,
    #[prost(uint32, tag = "3")]
    pub bondmlpocmg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnmebdfajjp {
    #[prost(oneof = "mnmebdfajjp::Abmagmfomkl", tags = "101")]
    pub abmagmfomkl: ::core::option::Option<mnmebdfajjp::Abmagmfomkl>,
}
/// Nested message and enum types in `MNMEBDFAJJP`.
pub mod mnmebdfajjp {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Abmagmfomkl {
        #[prost(message, tag = "101")]
        Ikajcnajhfg(super::Nnbcdccanhi),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegionInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub dispatch_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub env_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dispatch {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub top_sever_region_name: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub region_list: ::prost::alloc::vec::Vec<RegionInfo>,
    #[prost(string, tag = "5")]
    pub stop_desc: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanSettings {
    #[prost(uint32, tag = "1")]
    pub rarity_bitset: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub relic_set_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub body_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub foot_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub sphere_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub rope_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_include_filter_sub_property: bool,
    #[prost(uint32, tag = "8")]
    pub sub_property_num: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub sub_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub head_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub hand_main_property_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleOp {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub action_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub target_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub op_type: u32,
    #[prost(uint32, tag = "6")]
    pub skill_index: u32,
    #[prost(uint32, tag = "7")]
    pub operation_counter: u32,
    #[prost(string, tag = "8")]
    pub kkpmjejnlnb: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEquipment {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRelic {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub relic_id: u32,
    #[prost(uint32, tag = "7")]
    pub slot: u32,
    #[prost(uint32, tag = "8")]
    pub rarity: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarSkillTree {
    #[prost(uint32, tag = "1")]
    pub point_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAffix {
    #[prost(uint32, tag = "1")]
    pub affix_id: u32,
    #[prost(uint32, tag = "2")]
    pub cnt: u32,
    #[prost(uint32, tag = "3")]
    pub step: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgjbmpedgfm {
    #[prost(bool, tag = "1")]
    pub ljjfgkamaii: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub kdnaeeadbdc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub imifomifjfi: u32,
    #[prost(uint32, tag = "4")]
    pub oeeiolnbcok: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(message, repeated, tag = "6")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "7")]
    pub equipment_list: ::prost::alloc::vec::Vec<BattleEquipment>,
    #[prost(uint32, tag = "8")]
    pub hp: u32,
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "11")]
    pub relic_list: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub assist_uid: u32,
    #[prost(message, optional, tag = "15")]
    pub kaciocmfanp: ::core::option::Option<Pgjbmpedgfm>,
    #[prost(message, optional, tag = "16")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "17")]
    pub bfodmckimlf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonsterParam {
    #[prost(uint32, tag = "1")]
    pub ochjfchenbe: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub ailddaklbkk: u32,
    #[prost(uint32, tag = "4")]
    pub phlbeclkbhh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleMonster {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "3")]
    pub max_hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleMonsterWave {
    #[prost(message, repeated, tag = "1")]
    pub monster_list: ::prost::alloc::vec::Vec<BattleMonster>,
    #[prost(message, optional, tag = "2")]
    pub wave_param: ::core::option::Option<BattleMonsterParam>,
    #[prost(uint32, tag = "3")]
    pub monster_stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub wave_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuff {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub owner_id: u32,
    #[prost(uint32, tag = "4")]
    pub wave_flag: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub target_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "string, float", tag = "6")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ngpdpaafgmk {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub knbohelckol: u32,
    #[prost(uint32, tag = "3")]
    pub bnnmfgbnlag: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmcnjllhbli {
    #[prost(uint32, tag = "1")]
    pub nkldjdmifdc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lljnckpekeb {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub knbohelckol: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmoaafdpgcd {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleTarget {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(uint32, tag = "3")]
    pub total_progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleTargetList {
    #[prost(message, repeated, tag = "1")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llkohfcicjb {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
    #[prost(map = "uint32, message", tag = "9")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, optional, tag = "10")]
    pub lnefjmmomkb: ::core::option::Option<Hmcnjllhbli>,
    #[prost(message, repeated, tag = "11")]
    pub jcfnbcabdnb: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, optional, tag = "12")]
    pub kahoekaefhd: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "13")]
    pub dhndkifpolf: ::core::option::Option<Kejjggccgan>,
    #[prost(message, optional, tag = "14")]
    pub epecbkpmbhe: ::core::option::Option<Bimkjohkbno>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kejjggccgan {
    #[prost(map = "uint32, uint32", tag = "1")]
    pub pmlokankokb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub nampnolboek: u32,
    #[prost(uint32, tag = "3")]
    pub cmldnjedcah: u32,
    #[prost(uint32, tag = "4")]
    pub kkelnnehbin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phcbnlnifmi {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub ghemjlaklok: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Hlhclmaoeie", tag = "5")]
    pub nhknnmpbgoj: i32,
    #[prost(message, optional, tag = "6")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ennggpfcfda {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Phcbnlnifmi>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<BattleMonsterWave>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caagkblbkja {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub phmadfpfead: u32,
    #[prost(uint32, tag = "3")]
    pub hfbechjalhj: u32,
    #[prost(message, repeated, tag = "4")]
    pub oekpniddpgc: ::prost::alloc::vec::Vec<Afjhbijobbd>,
    #[prost(message, repeated, tag = "5")]
    pub hgfenfjhjgi: ::prost::alloc::vec::Vec<Pkhidjdakkl>,
    #[prost(uint32, tag = "6")]
    pub hbonnbkblla: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajnomhnkada {
    #[prost(bool, tag = "1")]
    pub lhbgehohfii: bool,
    #[prost(uint32, tag = "2")]
    pub likkdmimklo: u32,
    #[prost(bool, tag = "3")]
    pub jpahniiebbd: bool,
    #[prost(string, tag = "4")]
    pub bomokdknepl: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub kkpmdmppofe: bool,
    #[prost(bool, tag = "6")]
    pub fmbmebbkfae: bool,
    #[prost(uint32, tag = "7")]
    pub knoihoadgoc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppfdbjblmlp {
    #[prost(uint32, repeated, tag = "1")]
    pub gblfcabbjal: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub jncoajoggkh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub eehfkpeijdb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub gkpbibiilpo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffalieipajf {
    #[prost(uint32, tag = "1")]
    pub djbdnonffnp: u32,
    #[prost(uint32, tag = "2")]
    pub nfhfiiflnpd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foaeckdjhho {
    #[prost(bool, tag = "1")]
    pub lpkgpphjjng: bool,
    #[prost(map = "string, message", tag = "2")]
    pub hhknhgdhdcl: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Ffalieipajf,
    >,
    #[prost(bytes = "vec", tag = "3")]
    pub fgccelbhgnc: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdglmhjojoj {
    #[prost(message, repeated, tag = "1")]
    pub jnjhklkmmob: ::prost::alloc::vec::Vec<Caagkblbkja>,
    #[prost(string, tag = "2")]
    pub apeogcfecjh: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub dkmflegefdk: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub lgdlacndlfo: ::prost::alloc::vec::Vec<Mbdpancjaap>,
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
    #[prost(uint32, tag = "7")]
    pub afaelfgnigl: u32,
    #[prost(uint32, tag = "8")]
    pub pafgfgcipic: u32,
    #[prost(message, optional, tag = "9")]
    pub jdijhgnbanb: ::core::option::Option<Foaeckdjhho>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blijkdcojjn {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub logic_random_seed: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<Llkohfcicjb>,
    #[prost(message, repeated, tag = "5")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(bytes = "vec", tag = "6")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    pub kfbfkkfdgpa: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub gmpfhbbggnl: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub gfomlcjfbdk: bool,
    #[prost(enumeration = "Lbijnkkhhej", tag = "10")]
    pub knkakbijapn: i32,
    #[prost(enumeration = "Begiaaohfkf", tag = "11")]
    pub oningcjekgj: i32,
    #[prost(message, repeated, tag = "12")]
    pub event_battle_info_list: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub rounds_limit: u32,
    #[prost(message, optional, tag = "15")]
    pub bopfaefmpfe: ::core::option::Option<Ajnomhnkada>,
    #[prost(bytes = "vec", tag = "16")]
    pub bgeokcbgchh: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "17")]
    pub ilpblhdflkl: u32,
    #[prost(uint32, tag = "18")]
    pub kalinkeddbe: u32,
    #[prost(message, optional, tag = "19")]
    pub chjfnpjljeg: ::core::option::Option<Ennggpfcfda>,
    #[prost(message, optional, tag = "100")]
    pub agnlkflbcff: ::core::option::Option<Fdglmhjojoj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbdpancjaap {
    #[prost(int32, tag = "1")]
    pub ddehldbkhol: i32,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub speed: f64,
    #[prost(double, tag = "5")]
    pub left_hp: f64,
    #[prost(double, tag = "6")]
    pub left_sp: f64,
    #[prost(double, tag = "7")]
    pub max_sp: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipmentProperty {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttackDamageProperty {
    #[prost(string, tag = "1")]
    pub miehehejffm: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkillUseProperty {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(string, tag = "2")]
    pub bpafkihjjco: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub fiidgpnoede: u32,
    #[prost(uint32, tag = "4")]
    pub ecbimnbdgom: u32,
    #[prost(uint32, tag = "5")]
    pub accbpefdpee: u32,
    #[prost(uint32, tag = "6")]
    pub mcaomcmjgkh: u32,
    #[prost(uint32, tag = "7")]
    pub lchlflcpgpl: u32,
    #[prost(uint32, tag = "8")]
    pub giefonppggn: u32,
    #[prost(uint32, tag = "9")]
    pub helicmllehc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleSkillInfo {
    #[prost(uint32, tag = "1")]
    pub skill_id: u32,
    #[prost(double, tag = "2")]
    pub kdmlajflpfa: f64,
    #[prost(uint32, repeated, tag = "3")]
    pub battle_target_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(double, tag = "4")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpAddSource {
    #[prost(string, tag = "1")]
    pub source: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub sp_add: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AbilityUseStt {
    #[prost(string, tag = "1")]
    pub aadohpmkang: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarBattleInfo {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub avatar_level: u32,
    #[prost(uint32, tag = "4")]
    pub avatar_rank: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_promotion: u32,
    #[prost(message, optional, tag = "6")]
    pub avatar_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "7")]
    pub avatar_skill: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "8")]
    pub avatar_equipment: ::prost::alloc::vec::Vec<EquipmentProperty>,
    #[prost(uint32, tag = "9")]
    pub total_turns: u32,
    #[prost(double, tag = "10")]
    pub total_damage: f64,
    #[prost(double, tag = "11")]
    pub total_heal: f64,
    #[prost(double, tag = "12")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    #[prost(double, tag = "14")]
    pub total_sp_cost: f64,
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    #[prost(uint32, tag = "16")]
    pub stage_type: u32,
    #[prost(double, tag = "17")]
    pub total_break_damage: f64,
    #[prost(message, repeated, tag = "18")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "19")]
    pub attack_type_break_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "20")]
    pub attack_type_max_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "21")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "22")]
    pub delay_cumulate: f64,
    #[prost(uint32, tag = "23")]
    pub total_sp_add: u32,
    #[prost(message, repeated, tag = "24")]
    pub sp_add_source: ::prost::alloc::vec::Vec<SpAddSource>,
    #[prost(uint32, tag = "25")]
    pub total_bp_cost: u32,
    #[prost(uint32, tag = "26")]
    pub die_times: u32,
    #[prost(uint32, tag = "27")]
    pub revive_times: u32,
    #[prost(uint32, tag = "28")]
    pub break_times: u32,
    #[prost(uint32, tag = "29")]
    pub extra_turns: u32,
    #[prost(double, tag = "30")]
    pub total_shield: f64,
    #[prost(double, tag = "31")]
    pub total_shield_taken: f64,
    #[prost(double, tag = "32")]
    pub total_shield_damage: f64,
    #[prost(message, optional, tag = "33")]
    pub initial_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "34")]
    pub battle_relic_list: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "35")]
    pub assist_uid: u32,
    #[prost(message, repeated, tag = "36")]
    pub omnjiilgfod: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "37")]
    pub hliklmcgmfj: f64,
    #[prost(double, tag = "38")]
    pub bdkcjljhgki: f64,
    #[prost(double, tag = "39")]
    pub dleddihfjep: f64,
    #[prost(double, tag = "40")]
    pub dgaedjdhjbf: f64,
    #[prost(message, repeated, tag = "41")]
    pub ahkpckkbpgn: ::prost::alloc::vec::Vec<AbilityUseStt>,
    #[prost(uint32, tag = "42")]
    pub ddhhlleadlg: u32,
    #[prost(uint32, tag = "43")]
    pub nbiaphbajee: u32,
    #[prost(double, tag = "44")]
    pub gimocfeehjm: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub janjnglgafb: f64,
    #[prost(double, tag = "5")]
    pub speed: f64,
    #[prost(double, tag = "6")]
    pub left_hp: f64,
    #[prost(double, tag = "7")]
    pub hlmoecpidhf: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterPhaseStt {
    #[prost(uint32, tag = "1")]
    pub fbhhgdocapd: u32,
    #[prost(double, tag = "2")]
    pub oonhlcbofhp: f64,
    #[prost(uint32, tag = "3")]
    pub hfmohmkggek: u32,
    #[prost(uint32, tag = "4")]
    pub break_times: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonsterBattleInfo {
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub monster_template_id: u32,
    #[prost(uint32, tag = "4")]
    pub monster_level: u32,
    #[prost(message, optional, tag = "5")]
    pub monster_status: ::core::option::Option<MonsterProperty>,
    #[prost(uint32, tag = "6")]
    pub total_turns: u32,
    #[prost(double, tag = "7")]
    pub total_damage: f64,
    #[prost(double, tag = "8")]
    pub total_heal: f64,
    #[prost(double, tag = "9")]
    pub total_damage_taken: f64,
    #[prost(double, tag = "10")]
    pub total_stance_damage_taken: f64,
    #[prost(double, tag = "11")]
    pub total_hp_recover: f64,
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub battle_id: u32,
    #[prost(uint32, tag = "14")]
    pub monster_type: u32,
    #[prost(message, repeated, tag = "15")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "16")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(uint32, tag = "17")]
    pub stage_type: u32,
    #[prost(double, tag = "18")]
    pub total_break_damage_taken: f64,
    #[prost(double, tag = "19")]
    pub delay_cumulate: f64,
    #[prost(enumeration = "Ggailhiffge", tag = "20")]
    pub death_source: i32,
    #[prost(uint32, tag = "21")]
    pub monster_wave: u32,
    #[prost(int32, tag = "22")]
    pub index_in_wave: i32,
    #[prost(uint32, tag = "23")]
    pub phase: u32,
    #[prost(uint32, tag = "24")]
    pub max_phase: u32,
    #[prost(enumeration = "Fhmfbfffhih", tag = "25")]
    pub battle_tag: i32,
    #[prost(message, repeated, tag = "26")]
    pub kkikgppkhip: ::prost::alloc::vec::Vec<BattleSkillInfo>,
    #[prost(uint32, tag = "27")]
    pub ikgfjlaejha: u32,
    #[prost(message, repeated, tag = "28")]
    pub kjfajabidmn: ::prost::alloc::vec::Vec<MonsterPhaseStt>,
    #[prost(uint32, tag = "29")]
    pub ocjgncmogdj: u32,
    #[prost(uint32, tag = "30")]
    pub plnbgkfbboc: u32,
    #[prost(enumeration = "Jghoecbncgj", tag = "31")]
    pub agngpihgjpf: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleEventInitedData {
    #[prost(message, optional, tag = "2")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleEventBattleInfo {
    #[prost(uint32, tag = "1")]
    pub ibgjndjhdfj: u32,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<BattleEventInitedData>,
    #[prost(message, repeated, tag = "3")]
    pub kkikgppkhip: ::prost::alloc::vec::Vec<BattleSkillInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScoreInfo {
    #[prost(uint32, tag = "1")]
    pub ahmoohapcmc: u32,
    #[prost(uint32, tag = "2")]
    pub score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Homhnapnmoj {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub pnpmeacmbpp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub source: u32,
    #[prost(double, tag = "4")]
    pub damage: f64,
    #[prost(uint32, repeated, tag = "5")]
    pub npeaknhdhhh: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "6")]
    pub bldndnllkch: i32,
    #[prost(double, tag = "7")]
    pub pfpgccmkhij: f64,
    #[prost(uint32, tag = "8")]
    pub mdcmidkjlel: u32,
    #[prost(uint32, tag = "9")]
    pub monster_wave: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmdblnmblbc {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(int32, tag = "2")]
    pub onpfcalogfl: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opfmjdahfnh {
    #[prost(uint32, tag = "1")]
    pub fbhhgdocapd: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub oaaamhdfdah: ::prost::alloc::vec::Vec<Kmdblnmblbc>,
    #[prost(uint32, tag = "4")]
    pub kdmlajflpfa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjjhdbebaca {
    #[prost(enumeration = "Lkjaemohlml", tag = "1")]
    pub slot: i32,
    #[prost(uint32, tag = "2")]
    pub lnaakkmbcch: u32,
    #[prost(uint32, tag = "3")]
    pub bpgofipcnla: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmnomcjdcii {
    #[prost(uint32, tag = "1")]
    pub mnladfaepgb: u32,
    #[prost(uint32, tag = "2")]
    pub blcholppjbc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anbdaibnoai {
    #[prost(uint32, tag = "1")]
    pub ppmhfdbefcn: u32,
    #[prost(bool, tag = "2")]
    pub pagmfidolpd: bool,
    #[prost(message, optional, tag = "3")]
    pub fcdgjfmekjl: ::core::option::Option<Fmnomcjdcii>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lenkfnkphdk {
    #[prost(uint32, tag = "1")]
    pub cpfjgbnjabl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildGearDamageInfo {
    #[prost(uint32, tag = "1")]
    pub gear_id: u32,
    #[prost(double, tag = "2")]
    pub damage: f64,
    #[prost(double, tag = "3")]
    pub hp_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gficabefofd {
    #[prost(uint32, repeated, tag = "1")]
    pub fokgfdipagi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bklpeooflpl {
    #[prost(uint32, tag = "1")]
    pub monster_wave: u32,
    #[prost(uint32, tag = "2")]
    pub score: u32,
    #[prost(uint32, tag = "3")]
    pub ilapbolnhil: u32,
    #[prost(message, repeated, tag = "4")]
    pub bkmndoapbnb: ::prost::alloc::vec::Vec<Fmnomcjdcii>,
    #[prost(float, tag = "5")]
    pub kdmlajflpfa: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phdmpffloea {
    #[prost(uint32, tag = "1")]
    pub fbfkfbljdeg: u32,
    #[prost(message, repeated, tag = "2")]
    pub nheaafnomia: ::prost::alloc::vec::Vec<Bklpeooflpl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildBattleInfo {
    #[prost(uint32, tag = "1")]
    pub cur_level_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_period: u32,
    #[prost(uint32, tag = "3")]
    pub cur_coin: u32,
    #[prost(message, repeated, tag = "4")]
    pub weapon_slot_list: ::prost::alloc::vec::Vec<Anbdaibnoai>,
    #[prost(message, repeated, tag = "5")]
    pub accessory_slot_list: ::prost::alloc::vec::Vec<Anbdaibnoai>,
    #[prost(uint32, repeated, tag = "6")]
    pub ban_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub collection: ::core::option::Option<Gficabefofd>,
    #[prost(uint32, repeated, tag = "8")]
    pub allowed_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub cur_exp: u32,
    #[prost(uint32, tag = "10")]
    pub cur_reroll: u32,
    #[prost(uint32, tag = "11")]
    pub cur_treasure_miss_cnt: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub cur_gear_lost_cnt: u32,
    #[prost(uint32, tag = "14")]
    pub cur_wave: u32,
    #[prost(bool, tag = "15")]
    pub is_unlock_gear_reroll: bool,
    #[prost(bool, tag = "16")]
    pub is_unlock_gear_ban: bool,
    #[prost(message, repeated, tag = "17")]
    pub card_list: ::prost::alloc::vec::Vec<Lenkfnkphdk>,
    #[prost(message, repeated, tag = "18")]
    pub gear_damage_list: ::prost::alloc::vec::Vec<EvolveBuildGearDamageInfo>,
    #[prost(uint32, repeated, tag = "19")]
    pub stat_params: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "20")]
    pub is_giveup: bool,
    #[prost(uint32, tag = "21")]
    pub cur_unused_round_cnt: u32,
    #[prost(message, optional, tag = "22")]
    pub stat_log_info: ::core::option::Option<Phdmpffloea>,
    #[prost(uint32, tag = "23")]
    pub period_first_random_seed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anckjoiokjk {
    #[prost(string, tag = "1")]
    pub phase: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub nokijjlibkj: f32,
    #[prost(float, tag = "3")]
    pub mbcodmmadog: f32,
    #[prost(uint32, tag = "4")]
    pub kaobpgaeikd: u32,
    #[prost(uint32, tag = "5")]
    pub neafnchefjb: u32,
    #[prost(uint32, tag = "6")]
    pub pafaonmdchf: u32,
    #[prost(uint32, tag = "7")]
    pub kmhpdjfmlon: u32,
    #[prost(uint32, tag = "8")]
    pub nbafmiibhlf: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub daifcbefkeb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub keemnkhdifj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdmobglkkec {
    #[prost(uint32, tag = "1")]
    pub ngchgijjcpd: u32,
    #[prost(uint32, tag = "2")]
    pub kfbbmenjoal: u32,
    #[prost(uint32, tag = "3")]
    pub dbfphlooakg: u32,
    #[prost(uint32, tag = "4")]
    pub mkfccomhocc: u32,
    #[prost(uint32, tag = "5")]
    pub eoebmcfaeol: u32,
    #[prost(uint32, tag = "6")]
    pub ledaooabnmh: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub boss_info: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub hcdclppodfd: ::prost::alloc::vec::Vec<Anckjoiokjk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jiiemipiohi {
    #[prost(uint32, tag = "1")]
    pub monster_wave: u32,
    #[prost(double, tag = "2")]
    pub mcoebpmkkeg: f64,
    #[prost(double, tag = "3")]
    pub moepkjhgalj: f64,
    #[prost(uint32, tag = "4")]
    pub eiajdabakbn: u32,
    #[prost(uint32, tag = "5")]
    pub gbheoepeolk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmkjgnpdmdf {
    #[prost(string, tag = "1")]
    pub key: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub value: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cijjendfjlo {
    #[prost(uint32, tag = "1")]
    pub kklaobblgce: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipjkaaipoll {
    #[prost(uint32, tag = "1")]
    pub eiganlcjpoi: u32,
    #[prost(uint32, tag = "2")]
    pub kdjdjompbbh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhafniaobhm {
    #[prost(uint32, tag = "1")]
    pub idgalmegdij: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(bool, tag = "3")]
    pub pagmfidolpd: bool,
    #[prost(uint32, tag = "4")]
    pub khocgagjlfd: u32,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub lmdkfhmggbm: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikdpgeaoijl {
    #[prost(uint32, tag = "1")]
    pub imeenehmhcf: u32,
    #[prost(message, repeated, tag = "2")]
    pub mmlanfifpjj: ::prost::alloc::vec::Vec<Dhafniaobhm>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub blhkefpjgfg: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lccepoaolkk {
    #[prost(message, optional, tag = "1")]
    pub hinpjpbnnfj: ::core::option::Option<Ipjkaaipoll>,
    #[prost(message, repeated, tag = "2")]
    pub mijlfboegfg: ::prost::alloc::vec::Vec<Ikdpgeaoijl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djnnngfnmpj {
    #[prost(oneof = "djnnngfnmpj::Hafbbhdccej", tags = "1")]
    pub hafbbhdccej: ::core::option::Option<djnnngfnmpj::Hafbbhdccej>,
}
/// Nested message and enum types in `DJNNNGFNMPJ`.
pub mod djnnngfnmpj {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hafbbhdccej {
        #[prost(message, tag = "1")]
        Cfbhgfcnjam(super::Lccepoaolkk),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bimkjohkbno {
    #[prost(message, optional, tag = "1")]
    pub jdigfnaljfn: ::core::option::Option<Cijjendfjlo>,
    #[prost(message, optional, tag = "2")]
    pub player_detail_info: ::core::option::Option<Djnnngfnmpj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcgbccnkfdn {
    #[prost(uint32, tag = "1")]
    pub imeenehmhcf: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(double, tag = "3")]
    pub total_damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojpdpeielfn {
    #[prost(uint32, tag = "1")]
    pub dmbleekealc: u32,
    #[prost(uint32, tag = "2")]
    pub behcahedolo: u32,
    #[prost(message, repeated, tag = "3")]
    pub oahbgedgmlg: ::prost::alloc::vec::Vec<Bcgbccnkfdn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dajhfpchdmm {
    #[prost(message, optional, tag = "1")]
    pub gmcffihhafi: ::core::option::Option<Ojpdpeielfn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dpjfkjbdcoh {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub bepekkhifke: u32,
    #[prost(uint32, tag = "3")]
    pub eiajdabakbn: u32,
    #[prost(uint32, tag = "4")]
    pub gbheoepeolk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ebglblbnnme {
    #[prost(uint32, tag = "1")]
    pub anolipjigmn: u32,
    #[prost(double, tag = "2")]
    pub iajhmelejob: f64,
    #[prost(double, tag = "3")]
    pub olpbenmdnjl: f64,
    #[prost(uint32, tag = "4")]
    pub monster_wave: u32,
    #[prost(uint32, tag = "5")]
    pub bepekkhifke: u32,
    #[prost(double, tag = "6")]
    pub fmjpikhpdjg: f64,
    #[prost(double, tag = "7")]
    pub npmlanodkjm: f64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kiccjehbdcp {
    #[prost(uint32, tag = "1")]
    pub hebokleidmo: u32,
    #[prost(uint32, tag = "2")]
    pub lpckfaopolh: u32,
    #[prost(double, tag = "3")]
    pub mbmjdaccdnf: f64,
    #[prost(uint32, tag = "4")]
    pub monster_wave: u32,
    #[prost(uint32, tag = "5")]
    pub bepekkhifke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdajkafacaj {
    #[prost(message, repeated, tag = "1")]
    pub akmokndollc: ::prost::alloc::vec::Vec<Dpjfkjbdcoh>,
    #[prost(message, repeated, tag = "2")]
    pub dialpcocakp: ::prost::alloc::vec::Vec<Ebglblbnnme>,
    #[prost(message, repeated, tag = "3")]
    pub appblcbhopk: ::prost::alloc::vec::Vec<Kiccjehbdcp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njbiognjjmd {
    #[prost(message, optional, tag = "1")]
    pub mpjpkdcipje: ::core::option::Option<Mdajkafacaj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ackembbhapi {
    #[prost(uint32, tag = "1")]
    pub ecpckopkcoa: u32,
    #[prost(double, tag = "2")]
    pub iajhmelejob: f64,
    #[prost(double, tag = "3")]
    pub olpbenmdnjl: f64,
    #[prost(uint32, tag = "4")]
    pub bfeelfcpocd: u32,
    #[prost(uint32, tag = "5")]
    pub dmmhekojlgc: u32,
    #[prost(uint32, tag = "6")]
    pub lmcadmlonpl: u32,
    #[prost(uint32, tag = "7")]
    pub hobcdlddbee: u32,
    #[prost(double, tag = "8")]
    pub fmjpikhpdjg: f64,
    #[prost(uint32, tag = "9")]
    pub jlnenfkafph: u32,
    #[prost(uint32, tag = "10")]
    pub nmmmghpebna: u32,
    #[prost(double, tag = "11")]
    pub npmlanodkjm: f64,
    #[prost(uint32, tag = "12")]
    pub dbfphlooakg: u32,
    #[prost(uint32, tag = "13")]
    pub eoebmcfaeol: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpajcmpcogb {
    #[prost(uint32, tag = "1")]
    pub dbfphlooakg: u32,
    #[prost(uint32, tag = "2")]
    pub eoebmcfaeol: u32,
    #[prost(uint32, tag = "3")]
    pub chohfhalecf: u32,
    #[prost(message, repeated, tag = "4")]
    pub dialpcocakp: ::prost::alloc::vec::Vec<Ackembbhapi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleStatistics {
    #[prost(uint32, tag = "1")]
    pub total_battle_turns: u32,
    #[prost(uint32, tag = "2")]
    pub total_auto_turns: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ultra_cnt: u32,
    #[prost(double, tag = "5")]
    pub total_delay_cumulate: f64,
    #[prost(double, tag = "6")]
    pub cost_time: f64,
    #[prost(message, repeated, tag = "7")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<AvatarBattleInfo>,
    #[prost(message, repeated, tag = "8")]
    pub battle_monster_list: ::prost::alloc::vec::Vec<MonsterBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub round_cnt: u32,
    #[prost(uint32, tag = "10")]
    pub cocoon_dead_wave: u32,
    #[prost(uint32, tag = "11")]
    pub avatar_battle_turns: u32,
    #[prost(uint32, tag = "12")]
    pub monster_battle_turns: u32,
    #[prost(map = "string, float", tag = "13")]
    pub custom_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "14")]
    pub battle_score: u32,
    #[prost(message, repeated, tag = "16")]
    pub focoblgnpmg: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(enumeration = "BattleEndReason", tag = "19")]
    pub end_reason: i32,
    #[prost(message, repeated, tag = "21")]
    pub dnoippclede: ::prost::alloc::vec::Vec<Homhnapnmoj>,
    #[prost(int32, repeated, tag = "22")]
    pub hmpldbhpdll: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "23")]
    pub dpckiejemnk: ::prost::alloc::vec::Vec<Opfmjdahfnh>,
    #[prost(message, repeated, tag = "26")]
    pub eepgajekapc: ::prost::alloc::vec::Vec<Pjjhdbebaca>,
    #[prost(message, repeated, tag = "27")]
    pub hhheihbdhnj: ::prost::alloc::vec::Vec<Lmaabnnonab>,
    #[prost(map = "uint32, message", tag = "28")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, repeated, tag = "29")]
    pub bnkncbkgkag: ::prost::alloc::vec::Vec<Lhcdpdebagb>,
    #[prost(message, optional, tag = "30")]
    pub kahoekaefhd: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "31")]
    pub hhpldbgihkh: ::core::option::Option<Cdmobglkkec>,
    #[prost(bool, tag = "32")]
    pub kidhpnpjhjo: bool,
    #[prost(message, repeated, tag = "33")]
    pub nheaafnomia: ::prost::alloc::vec::Vec<Jiiemipiohi>,
    #[prost(message, repeated, tag = "34")]
    pub hcnndinhmih: ::prost::alloc::vec::Vec<Cmkjgnpdmdf>,
    #[prost(uint32, tag = "35")]
    pub kmchdapgoic: u32,
    #[prost(message, optional, tag = "36")]
    pub lniffkgionn: ::core::option::Option<Dajhfpchdmm>,
    #[prost(message, optional, tag = "37")]
    pub gbbndmpheca: ::core::option::Option<Njbiognjjmd>,
    #[prost(message, optional, tag = "38")]
    pub phedlbgbnhn: ::core::option::Option<Gpajcmpcogb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhcdpdebagb {
    #[prost(uint32, tag = "1")]
    pub dmohfhmljhi: u32,
    #[prost(uint32, tag = "2")]
    pub gompogcojpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmaabnnonab {
    #[prost(enumeration = "Hlhclmaoeie", tag = "1")]
    pub slot: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(message, optional, tag = "3")]
    pub sp: ::core::option::Option<AmountInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlkoadlaecn {
    #[prost(uint32, tag = "1")]
    pub bpcgjpknbni: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anpmmmobkpp {
    #[prost(enumeration = "Ldbbmppnico", tag = "1")]
    pub retcode: i32,
    #[prost(enumeration = "BattleEndStatus", tag = "2")]
    pub end_status: i32,
    #[prost(message, optional, tag = "3")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(bytes = "vec", tag = "4")]
    pub bgeokcbgchh: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, uint32", tag = "5")]
    pub ofcaciifbdf: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "6")]
    pub lifaaoccejd: u32,
    #[prost(uint32, tag = "7")]
    pub pbnhhabfhmn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afjhbijobbd {
    #[prost(uint32, tag = "1")]
    pub ppimnckjhle: u32,
    #[prost(uint64, repeated, tag = "2")]
    pub cnidkmcccad: ::prost::alloc::vec::Vec<u64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkhidjdakkl {
    #[prost(string, tag = "1")]
    pub inblmocllpa: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pghafcdcnhh {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub pdfleijnpeb: u32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform_type: i32,
    #[prost(string, tag = "6")]
    pub poojfebmgkf: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub mihkadcocfm: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub version: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgkagnkkkbh {
    #[prost(enumeration = "Okbbdenhlbo", tag = "1")]
    pub dldoeachoip: i32,
    #[prost(enumeration = "Ghfikfbhdoj", tag = "2")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjmgilalbdc {
    #[prost(uint32, tag = "1")]
    pub aiplkchckdl: u32,
    #[prost(bool, tag = "2")]
    pub ieoaioobmda: bool,
    #[prost(uint32, tag = "3")]
    pub occgcjekjpo: u32,
    #[prost(uint32, tag = "4")]
    pub mibphjeleai: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcednempmaj {
    #[prost(string, repeated, tag = "1")]
    pub mmmfagenchj: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub cnmoonmohhb: bool,
    #[prost(oneof = "jcednempmaj::Ijbnhpegccj", tags = "1001")]
    pub ijbnhpegccj: ::core::option::Option<jcednempmaj::Ijbnhpegccj>,
}
/// Nested message and enum types in `JCEDNEMPMAJ`.
pub mod jcednempmaj {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Ijbnhpegccj {
        #[prost(message, tag = "1001")]
        Odidealacai(super::Pjmgilalbdc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbbloflaamh {
    #[prost(message, optional, tag = "1")]
    pub basic_info: ::core::option::Option<Pghafcdcnhh>,
    #[prost(message, optional, tag = "2")]
    pub dinooabnaba: ::core::option::Option<Lgkagnkkkbh>,
    #[prost(message, optional, tag = "3")]
    pub ext_info: ::core::option::Option<Jcednempmaj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlbkadjebna {
    #[prost(uint32, tag = "1")]
    pub jbdjjglgiap: u32,
    #[prost(uint32, tag = "2")]
    pub ceojmjkpmie: u32,
    #[prost(uint32, tag = "3")]
    pub gpolphbkpee: u32,
    #[prost(uint32, tag = "4")]
    pub bnbmhicnnah: u32,
    #[prost(uint32, tag = "5")]
    pub acajkfkmlhn: u32,
    #[prost(uint32, tag = "6")]
    pub mdiigcheblf: u32,
    #[prost(uint32, tag = "7")]
    pub ipgipfbaacf: u32,
    #[prost(uint32, tag = "8")]
    pub pgcbicdhlaf: u32,
    #[prost(uint32, tag = "9")]
    pub pfhlibnmhai: u32,
    #[prost(uint32, tag = "10")]
    pub fhodbaeipjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnfbaokfopm {
    #[prost(uint64, tag = "1")]
    pub aahbpgbhcem: u64,
    #[prost(enumeration = "Gldklemmpmi", tag = "2")]
    pub oobappmolma: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lblliccpihe {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(enumeration = "Gldklemmpmi", tag = "2")]
    pub mkbmipelmob: i32,
    #[prost(message, repeated, tag = "3")]
    pub ejbjdgimipp: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(enumeration = "Kmpglailidf", tag = "4")]
    pub slot: i32,
    #[prost(uint64, tag = "5")]
    pub eefbhbmocpl: u64,
    #[prost(uint64, tag = "6")]
    pub fficmjhmfjg: u64,
    #[prost(uint32, tag = "7")]
    pub monnadejjgm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbmdlinkhpf {
    #[prost(uint32, tag = "6")]
    pub nnibgplpcmc: u32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub iidlipcpmok: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginActivityCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginActivityScRsp {
    #[prost(message, repeated, tag = "5")]
    pub mmdinjicacj: ::prost::alloc::vec::Vec<Nbmdlinkhpf>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardCsReq {
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "5")]
    pub nklcejljded: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeLoginActivityRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "14")]
    pub nklcejljded: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityScheduleInfo {
    #[prost(int64, tag = "6")]
    pub begin_time: i64,
    #[prost(int64, tag = "3")]
    pub end_time: i64,
    #[prost(uint32, tag = "14")]
    pub module_id: u32,
    #[prost(uint32, tag = "13")]
    pub pjlcaokihkk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActivityScheduleConfigScRsp {
    #[prost(message, repeated, tag = "12")]
    pub activity_schedule_list: ::prost::alloc::vec::Vec<ActivityScheduleInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khdeagcenmd {
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(bool, tag = "13")]
    pub taken_reward: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTrialActivityDataScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub oebbdfeelbj: ::prost::alloc::vec::Vec<Khdeagcenmd>,
    #[prost(uint32, tag = "14")]
    pub ahkelhdhocp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialActivityDataChangeScNotify {
    #[prost(message, optional, tag = "5")]
    pub bpaigpilehn: ::core::option::Option<Khdeagcenmd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageCsReq {
    #[prost(uint32, tag = "9")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterTrialActivityStageScRsp {
    #[prost(message, optional, tag = "1")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardCsReq {
    #[prost(uint32, tag = "7")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTrialActivityRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityCsReq {
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTrialActivityScRsp {
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityCsReq {
    #[prost(uint32, tag = "5")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveTrialActivityScRsp {
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurTrialActivityScNotify {
    #[prost(uint32, tag = "5")]
    pub ahkelhdhocp: u32,
    #[prost(enumeration = "Ickijppdppe", tag = "2")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkoeiclblok {
    #[prost(bool, tag = "5")]
    pub nkecmfcfjak: bool,
    #[prost(uint32, tag = "4")]
    pub mncfmfjeoig: u32,
    #[prost(bool, tag = "6")]
    pub lmdbfndmgib: bool,
    #[prost(uint32, tag = "13")]
    pub module_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaterialSubmitActivityDataScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub ofkpcmopaob: ::prost::alloc::vec::Vec<Fkoeiclblok>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialCsReq {
    #[prost(uint32, tag = "3")]
    pub mncfmfjeoig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SubmitMaterialSubmitActivityMaterialScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub abeaifnddca: ::core::option::Option<Fkoeiclblok>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardCsReq {
    #[prost(uint32, tag = "7")]
    pub mncfmfjeoig: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMaterialSubmitActivityRewardScRsp {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub mncfmfjeoig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAdventureCsReq {
    #[prost(uint32, tag = "11")]
    pub rouge_map_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterAdventureScRsp {
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FarmStageGachaInfo {
    #[prost(int64, tag = "13")]
    pub begin_time: i64,
    #[prost(uint32, tag = "9")]
    pub gacha_id: u32,
    #[prost(int64, tag = "15")]
    pub end_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub farm_stage_gacha_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFarmStageGachaInfoScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub farm_stage_gacha_info_list: ::prost::alloc::vec::Vec<FarmStageGachaInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneCsReq {
    #[prost(uint32, tag = "3")]
    pub gkojbdlinlp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterAetherDivideSceneScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub gkojbdlinlp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveAetherDivideSceneScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleCsReq {
    #[prost(message, repeated, tag = "2")]
    pub assist_monster_wave_list: ::prost::alloc::vec::Vec<AssistMonsterWave>,
    #[prost(uint32, repeated, tag = "7")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "10")]
    pub caster_id: u32,
    #[prost(uint32, tag = "3")]
    pub skill_index: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideSceneBattleScRsp {
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<Bnakofpambi>,
    #[prost(uint32, tag = "5")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleCsReq {
    #[prost(uint32, tag = "1")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "12")]
    pub bncnmegfhpm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideChallengeBattleScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<Bnakofpambi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PassiveSkillItem {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "10")]
    pub slot_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritInfo {
    #[prost(message, repeated, tag = "13")]
    pub ghemjlaklok: ::prost::alloc::vec::Vec<PassiveSkillItem>,
    #[prost(message, optional, tag = "14")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "12")]
    pub gbeabpkgnhd: u32,
    #[prost(uint32, tag = "3")]
    pub cegcjjlpdal: u32,
    #[prost(uint32, tag = "2")]
    pub promotion: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideLineupInfo {
    #[prost(uint32, tag = "10")]
    pub slot_type: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub dhkagbmbnno: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherSkillInfo {
    #[prost(uint32, tag = "9")]
    pub cijbgkhbhbl: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "4")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAetherDivideInfoScRsp {
    #[prost(message, repeated, tag = "15")]
    pub agnhbplhfop: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
    #[prost(uint32, tag = "4")]
    pub iippfoaiogl: u32,
    #[prost(message, repeated, tag = "5")]
    pub knoijliaeia: ::prost::alloc::vec::Vec<AetherSkillInfo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub andlddeklag: u32,
    #[prost(uint32, tag = "12")]
    pub akfmfbkkeoi: u32,
    #[prost(message, repeated, tag = "8")]
    pub lineup_list: ::prost::alloc::vec::Vec<AetherDivideLineupInfo>,
    #[prost(uint32, tag = "6")]
    pub jacohdbpfcc: u32,
    #[prost(uint32, tag = "10")]
    pub inhmkiagdad: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpCsReq {
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAetherDivideLineUpScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillCsReq {
    #[prost(uint32, tag = "1")]
    pub gbeabpkgnhd: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "12")]
    pub slot_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipAetherDividePassiveSkillScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub hbocmbobjng: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, optional, tag = "1")]
    pub aeabhijbfcj: ::core::option::Option<AetherSkillInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearAetherDividePassiveSkillCsReq {
    #[prost(uint32, tag = "5")]
    pub slot_type: u32,
    #[prost(uint32, tag = "1")]
    pub gbeabpkgnhd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearAetherDividePassiveSkillScRsp {
    #[prost(message, optional, tag = "15")]
    pub aeabhijbfcj: ::core::option::Option<AetherSkillInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub hbocmbobjng: ::core::option::Option<AetherDivideSpiritInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritExpUpCsReq {
    #[prost(uint32, tag = "1")]
    pub akfmfbkkeoi: u32,
    #[prost(uint32, tag = "7")]
    pub mlebclfeaal: u32,
    #[prost(uint32, tag = "3")]
    pub gbeabpkgnhd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritExpUpScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub akfmfbkkeoi: u32,
    #[prost(message, optional, tag = "15")]
    pub hbocmbobjng: ::core::option::Option<AetherDivideSpiritInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchAetherDivideLineUpSlotCsReq {
    #[prost(uint32, tag = "12")]
    pub bncnmegfhpm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchAetherDivideLineUpSlotScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub bncnmegfhpm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAetherDivideStageBattleCsReq {
    #[prost(uint32, tag = "6")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartAetherDivideStageBattleScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<Bnakofpambi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideLineupScNotify {
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<AetherDivideLineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideSpiritInfoScNotify {
    #[prost(message, optional, tag = "4")]
    pub hbocmbobjng: ::core::option::Option<AetherDivideSpiritInfo>,
    #[prost(message, repeated, tag = "5")]
    pub hmlahcfilki: ::prost::alloc::vec::Vec<AetherDivideSpiritInfo>,
    #[prost(uint32, tag = "15")]
    pub akfmfbkkeoi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAetherDivideChallengeInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAetherDivideChallengeInfoScRsp {
    #[prost(uint32, repeated, tag = "5")]
    pub mefnjkoflnd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub kdiafemleoe: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub agcbcobpgmf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideFinishChallengeScNotify {
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideTainerInfoScNotify {
    #[prost(uint32, tag = "4")]
    pub jacohdbpfcc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideSkillItemScNotify {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "11")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub inhmkiagdad: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideRefreshEndlessScNotify {
    #[prost(uint32, tag = "7")]
    pub inhmkiagdad: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AetherDivideTakeChallengeRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AetherDivideTakeChallengeRewardScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cgbhoaddgbk {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihnpcemhimb {
    #[prost(uint32, tag = "11")]
    pub dlkaipjhnma: u32,
    #[prost(uint32, tag = "3")]
    pub rouge_map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAlleyInfoCsReq {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub shop_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkhlaaoboek {
    #[prost(message, repeated, tag = "10")]
    pub caafccengbl: ::prost::alloc::vec::Vec<Ihnpcemhimb>,
    #[prost(uint32, repeated, tag = "2")]
    pub fkiacggjljd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "12")]
    pub bgkjhmdjdcl: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(message, repeated, tag = "1")]
    pub jkdiggiabmb: ::prost::alloc::vec::Vec<Jbjmnmfplph>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAlleyInfoScRsp {
    #[prost(uint32, repeated, tag = "3")]
    pub lhchbpnphfl: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub hfkcmkjnncj: ::core::option::Option<Lfiejohpdhl>,
    #[prost(message, optional, tag = "14")]
    pub cpamdplgphm: ::core::option::Option<Pkhlaaoboek>,
    #[prost(message, repeated, tag = "12")]
    pub mplabmdjanb: ::prost::alloc::vec::Vec<Dcmcllpddjo>,
    #[prost(uint32, repeated, tag = "6")]
    pub iegmepkcfdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub hbecmcgobgd: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub capnjoianhj: ::std::collections::HashMap<u32, u32>,
    #[prost(message, optional, tag = "11")]
    pub mcmempmlbmp: ::core::option::Option<Bpimhaoakfl>,
    #[prost(uint32, tag = "13")]
    pub mlfllkmiade: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub hjbgpdlkcjn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omilehfejbm {
    #[prost(uint32, tag = "3")]
    pub obcnknlafmb: u32,
    #[prost(uint32, tag = "13")]
    pub kifpapbmpgf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpmpllfbbfp {
    #[prost(message, repeated, tag = "7")]
    pub oaphchidmne: ::prost::alloc::vec::Vec<Omilehfejbm>,
    #[prost(uint32, tag = "3")]
    pub goods_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingShip {
    #[prost(uint32, tag = "15")]
    pub ship_id: u32,
    #[prost(message, repeated, tag = "6")]
    pub goods_list: ::prost::alloc::vec::Vec<Jpmpllfbbfp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingGameCsReq {
    #[prost(uint32, tag = "7")]
    pub ofnnffijfhb: u32,
    #[prost(uint32, tag = "10")]
    pub hakdfmmhboa: u32,
    #[prost(uint32, tag = "4")]
    pub lmhkmeoaphg: u32,
    #[prost(message, optional, tag = "13")]
    pub loifammmpne: ::core::option::Option<AlleyPlacingShip>,
    #[prost(uint32, tag = "3")]
    pub ledmifjdbhl: u32,
    #[prost(uint32, tag = "1")]
    pub chcnojaongf: u32,
    #[prost(uint32, tag = "15")]
    pub kclhngckjem: u32,
    #[prost(uint32, tag = "8")]
    pub cost_time: u32,
    #[prost(uint32, tag = "11")]
    pub hdcepmkimmg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyPlacingGameScRsp {
    #[prost(uint32, tag = "3")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub pnnfejildkd: u32,
    #[prost(uint32, tag = "7")]
    pub ldjopbimddm: u32,
    #[prost(uint32, tag = "13")]
    pub gaabgdgldab: u32,
    #[prost(uint32, tag = "14")]
    pub pcbpamgcigg: u32,
    #[prost(uint32, tag = "4")]
    pub iamjmdnofco: u32,
    #[prost(uint32, tag = "2")]
    pub ddnldmobgpc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityRaidPlacingGameCsReq {
    #[prost(message, optional, tag = "10")]
    pub loifammmpne: ::core::option::Option<AlleyPlacingShip>,
    #[prost(oneof = "activity_raid_placing_game_cs_req::Fpcpgnhdbll", tags = "15, 11")]
    pub fpcpgnhdbll: ::core::option::Option<
        activity_raid_placing_game_cs_req::Fpcpgnhdbll,
    >,
}
/// Nested message and enum types in `ActivityRaidPlacingGameCsReq`.
pub mod activity_raid_placing_game_cs_req {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Fpcpgnhdbll {
        #[prost(uint32, tag = "15")]
        Bjbpkkopbmc(u32),
        #[prost(uint32, tag = "11")]
        Hdcepmkimmg(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivityRaidPlacingGameScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(oneof = "activity_raid_placing_game_sc_rsp::Fpcpgnhdbll", tags = "1, 10")]
    pub fpcpgnhdbll: ::core::option::Option<
        activity_raid_placing_game_sc_rsp::Fpcpgnhdbll,
    >,
}
/// Nested message and enum types in `ActivityRaidPlacingGameScRsp`.
pub mod activity_raid_placing_game_sc_rsp {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Fpcpgnhdbll {
        #[prost(uint32, tag = "1")]
        Bjbpkkopbmc(u32),
        #[prost(uint32, tag = "10")]
        Hdcepmkimmg(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfiejohpdhl {
    #[prost(uint32, repeated, tag = "7")]
    pub ehfieeljiae: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub monjokkfpnh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub flnofoddjeo: u32,
    #[prost(uint32, tag = "10")]
    pub jjojgpoahfc: u32,
    #[prost(uint32, tag = "12")]
    pub gmdfmommaff: u32,
    #[prost(bool, tag = "4")]
    pub ekabpinklhh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyOrderChangedScNotify {
    #[prost(message, optional, tag = "5")]
    pub aaajkmikmbb: ::core::option::Option<Lfiejohpdhl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyShipUnlockScNotify {
    #[prost(uint32, tag = "15")]
    pub kldjbjmgopb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kngakdffpac {
    #[prost(uint32, repeated, tag = "13")]
    pub iblacdldikb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub inmjjgoempo: u32,
    #[prost(uint32, tag = "7")]
    pub jcabagafilo: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub plbdchfphfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub shop_id: u32,
    #[prost(uint32, tag = "14")]
    pub cglimndckbi: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub ankiolgbbhb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbjmnmfplph {
    #[prost(uint32, tag = "6")]
    pub cost_time: u32,
    #[prost(uint32, tag = "7")]
    pub rouge_map_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub cgfnphjcnjg: ::prost::alloc::vec::Vec<Kngakdffpac>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScore {
    #[prost(uint32, tag = "6")]
    pub last_max_score: u32,
    #[prost(uint32, tag = "3")]
    pub max_score: u32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub map_id: u32,
    #[prost(uint32, tag = "9")]
    pub unlock_level: u32,
    #[prost(uint32, tag = "2")]
    pub last_level: u32,
    #[prost(uint32, tag = "14")]
    pub cur_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsGameCsReq {
    #[prost(message, repeated, tag = "1")]
    pub cijhmedohde: ::prost::alloc::vec::Vec<Jbjmnmfplph>,
    #[prost(bool, tag = "5")]
    pub hapedfldgkn: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScoreRewardSyncInfoScNotify {
    #[prost(message, repeated, tag = "9")]
    pub bgkjhmdjdcl: ::prost::alloc::vec::Vec<LogisticsScore>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsGameScRsp {
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub bgkjhmdjdcl: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(bool, tag = "11")]
    pub hapedfldgkn: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcmcllpddjo {
    #[prost(enumeration = "Cjgfgplalem", tag = "10")]
    pub state: i32,
    #[prost(uint32, tag = "1")]
    pub agiengeknkl: u32,
    #[prost(uint32, tag = "15")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAlleyEventCsReq {
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartAlleyEventScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyEventChangeNotify {
    #[prost(uint32, tag = "12")]
    pub fpknchkbhpk: u32,
    #[prost(message, optional, tag = "8")]
    pub ompjnnijnpl: ::core::option::Option<Dcmcllpddjo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyEventEffectNotify {
    #[prost(uint32, tag = "11")]
    pub lphmppfnlnn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePrestigeRewardCsReq {
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePrestigeRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrestigeLevelUpCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PrestigeLevelUpScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyFundsScNotify {
    #[prost(uint32, tag = "12")]
    pub mlfllkmiade: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveLogisticsCsReq {
    #[prost(message, repeated, tag = "1")]
    pub cijhmedohde: ::prost::alloc::vec::Vec<Jbjmnmfplph>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SaveLogisticsScRsp {
    #[prost(message, repeated, tag = "11")]
    pub cijhmedohde: ::prost::alloc::vec::Vec<Jbjmnmfplph>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsInfoScNotify {
    #[prost(message, optional, tag = "9")]
    pub cpamdplgphm: ::core::option::Option<Pkhlaaoboek>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpimhaoakfl {
    #[prost(map = "uint32, uint32", tag = "7")]
    pub opiceeiidin: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "10")]
    pub gacmjhahmoh: u32,
    #[prost(uint32, tag = "15")]
    pub ibjnbibolgb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyShipmentEventEffectsScNotify {
    #[prost(message, optional, tag = "2")]
    pub ehhidnfhcpc: ::core::option::Option<Bpimhaoakfl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSaveLogisticsMapCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSaveLogisticsMapScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub jkdiggiabmb: ::prost::alloc::vec::Vec<Jbjmnmfplph>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyShipUsedCountScNotify {
    #[prost(map = "uint32, uint32", tag = "15")]
    pub capnjoianhj: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyGuaranteedFundsCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyGuaranteedFundsScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub pbicdgadnjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlleyTakeEventRewardCsReq {
    #[prost(uint32, tag = "15")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyTakeEventRewardScRsp {
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogisticsDetonateStarSkiffCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LogisticsDetonateStarSkiffScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicArchive {
    #[prost(uint32, tag = "11")]
    pub slot: u32,
    #[prost(uint32, tag = "13")]
    pub relic_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonsterArchive {
    #[prost(uint32, tag = "4")]
    pub num: u32,
    #[prost(uint32, tag = "5")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveData {
    #[prost(uint32, repeated, tag = "12")]
    pub lkaphnhgmhd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub relic_list: ::prost::alloc::vec::Vec<RelicArchive>,
    #[prost(message, repeated, tag = "15")]
    pub archive_monster_id_list: ::prost::alloc::vec::Vec<MonsterArchive>,
    #[prost(uint32, repeated, tag = "13")]
    pub pgdjdilbjgd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub emmfeajdlgi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetArchiveDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArchiveDataScRsp {
    #[prost(message, optional, tag = "11")]
    pub archive_data: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUpdatedArchiveDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUpdatedArchiveDataScRsp {
    #[prost(message, optional, tag = "2")]
    pub archive_data: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "2")]
    pub is_get_all: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EquipRelic {
    #[prost(uint32, tag = "9")]
    pub relic_unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub slot: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Avatar {
    #[prost(uint32, tag = "12")]
    pub promotion: u32,
    #[prost(uint32, tag = "13")]
    pub rank: u32,
    #[prost(uint32, tag = "7")]
    pub adchkacbhbk: u32,
    #[prost(uint32, tag = "1")]
    pub equipment_unique_id: u32,
    #[prost(uint32, tag = "11")]
    pub exp: u32,
    #[prost(uint64, tag = "15")]
    pub first_met_timestamp: u64,
    #[prost(message, repeated, tag = "14")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "5")]
    pub is_marked: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub taken_rewards: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(message, repeated, tag = "10")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataScRsp {
    #[prost(bool, tag = "12")]
    pub is_get_all: bool,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub unlocked_skin_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpCsReq {
    #[prost(uint32, tag = "6")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "10")]
    pub use_item_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarExpUpScRsp {
    #[prost(message, repeated, tag = "11")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeCsReq {
    #[prost(uint32, tag = "11")]
    pub point_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
    #[prost(uint32, tag = "6")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockSkilltreeScRsp {
    #[prost(uint32, tag = "9")]
    pub point_id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteAvatarCsReq {
    #[prost(uint32, tag = "5")]
    pub base_avatar_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteAvatarScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarCsReq {
    #[prost(uint32, tag = "9")]
    pub equipment_unique_id: u32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentCsReq {
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddAvatarScNotify {
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(enumeration = "Bgcbdajjebp", tag = "8")]
    pub nibghgmegmg: i32,
    #[prost(bool, tag = "9")]
    pub is_new: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpAvatarCsReq {
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "15")]
    pub rank: u32,
    #[prost(message, optional, tag = "7")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpAvatarScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicParam {
    #[prost(uint32, tag = "13")]
    pub relic_type: u32,
    #[prost(uint32, tag = "10")]
    pub relic_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarCsReq {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(message, repeated, tag = "14")]
    pub param_list: ::prost::alloc::vec::Vec<RelicParam>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOffRelicCsReq {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub slot_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffRelicScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardCsReq {
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(uint32, tag = "9")]
    pub base_avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakePromotionRewardScRsp {
    #[prost(message, optional, tag = "5")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinCsReq {
    #[prost(uint32, tag = "6")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub ecamknopnel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DressAvatarSkinScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinCsReq {
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeOffAvatarSkinScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarSkinScNotify {
    #[prost(uint32, tag = "6")]
    pub ecamknopnel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarCsReq {
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
    #[prost(bool, tag = "11")]
    pub is_marked: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkAvatarScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub is_marked: bool,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultCsReq {
    #[prost(enumeration = "BattleEndStatus", tag = "7")]
    pub end_status: i32,
    #[prost(uint32, tag = "5")]
    pub battle_id: u32,
    #[prost(string, tag = "9")]
    pub dkmflegefdk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub cost_time: u32,
    #[prost(bool, tag = "15")]
    pub jpahniiebbd: bool,
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(bool, tag = "8")]
    pub ogpicfmnoed: bool,
    #[prost(map = "string, uint32", tag = "14")]
    pub bfaabmcloij: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "10")]
    pub client_res_version: u32,
    #[prost(message, optional, tag = "12")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(uint32, tag = "11")]
    pub ilpblhdflkl: u32,
    #[prost(bytes = "vec", tag = "4")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "1")]
    pub gfomlcjfbdk: bool,
    #[prost(uint32, tag = "13")]
    pub echfpfbkdeo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultScRsp {
    #[prost(message, optional, tag = "8")]
    pub pificpibgji: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "14")]
    pub lifaaoccejd: u32,
    #[prost(message, optional, tag = "772")]
    pub afgnoplaeda: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub jnomcfaejca: u32,
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "5")]
    pub pfjllgdaabn: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "9")]
    pub check_identical: bool,
    #[prost(string, tag = "11")]
    pub aogdcbcjpfn: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "13")]
    pub pve_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub cihhffmdbdd: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub battle_id: u32,
    #[prost(string, tag = "10")]
    pub gafogljciln: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub ncjmakdmafn: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "4")]
    pub end_status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitBattleCsReq {
    #[prost(enumeration = "Oelnndobekp", tag = "11")]
    pub ajmdfdmdman: i32,
    #[prost(message, optional, tag = "9")]
    pub stt: ::core::option::Option<BattleStatistics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurBattleInfoScRsp {
    #[prost(uint32, tag = "7")]
    pub oepgajomaep: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "15")]
    pub epcgagldlih: i32,
    #[prost(message, optional, tag = "10")]
    pub nkmijcinekp: ::core::option::Option<Bnakofpambi>,
    #[prost(message, optional, tag = "1")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionCsReq {
    #[prost(uint32, tag = "1")]
    pub client_res_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncClientResVersionScRsp {
    #[prost(uint32, tag = "12")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitBattleScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattleLogReportScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(bool, tag = "9")]
    pub gcgmhnhkpbl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ServerSimulateBattleFinishScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReBattleAfterBattleLoseCsNotify {
    #[prost(bool, tag = "1")]
    pub egpeneekjmb: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RebattleByClientCsNotify {
    #[prost(message, optional, tag = "7")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(enumeration = "Oelnndobekp", tag = "10")]
    pub ajmdfdmdman: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBattleCollegeDataScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub iagdnefgggm: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub gcmgmapnmfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleCollegeDataChangeScNotify {
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "3")]
    pub gcmgmapnmfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub iagdnefgggm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeCsReq {
    #[prost(uint32, tag = "9")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartBattleCollegeScRsp {
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BattlePassInfoNotify {
    #[prost(uint64, tag = "6")]
    pub jmhmebokbff: u64,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub hhoankhlgmh: u32,
    #[prost(uint64, tag = "15")]
    pub bhagafhplpp: u64,
    #[prost(uint32, tag = "4")]
    pub pkbcbnjeknf: u32,
    #[prost(uint32, tag = "1")]
    pub exp: u32,
    #[prost(enumeration = "BpTierType", tag = "9")]
    pub bp_tier_type: i32,
    #[prost(uint64, tag = "12")]
    pub fhejenffjhf: u64,
    #[prost(uint64, tag = "10")]
    pub gdknoamhbfg: u64,
    #[prost(uint64, tag = "13")]
    pub jiofgghcbhg: u64,
    #[prost(uint64, tag = "14")]
    pub epnpcpodedf: u64,
    #[prost(uint64, tag = "11")]
    pub hbhmceekdhn: u64,
    #[prost(uint64, tag = "7")]
    pub angamldaoae: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeBpRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub optional_reward_id: u32,
    #[prost(enumeration = "Lnafgdhgdek", tag = "4")]
    pub slot: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeBpRewardScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyBpLevelCsReq {
    #[prost(uint32, tag = "2")]
    pub lednolccpao: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyBpLevelScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalReward {
    #[prost(uint32, tag = "10")]
    pub optional_reward_id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllRewardCsReq {
    #[prost(message, repeated, tag = "15")]
    pub pfjjfjkianh: ::prost::alloc::vec::Vec<OptionalReward>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllRewardScRsp {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmlbibphbpl {
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkfbmlkmomj {
    #[prost(uint32, tag = "6")]
    pub gdghfkmdibb: u32,
    #[prost(bool, tag = "1")]
    pub afjedlhmoha: bool,
    #[prost(uint32, tag = "5")]
    pub figbhjofbne: u32,
    #[prost(uint32, tag = "11")]
    pub injieffneln: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub gpphjggfmcb: ::prost::alloc::vec::Vec<Mmlbibphbpl>,
    #[prost(uint32, tag = "15")]
    pub bnpoooejbma: u32,
    #[prost(uint32, tag = "12")]
    pub cihnmecifni: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub fcmiljbohlp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBoxingClubInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBoxingClubInfoScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub challenge_list: ::prost::alloc::vec::Vec<Hkfbmlkmomj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbieelkjmgl {
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchBoxingClubOpponentCsReq {
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub gpphjggfmcb: ::prost::alloc::vec::Vec<Cbieelkjmgl>,
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MatchBoxingClubOpponentScRsp {
    #[prost(message, optional, tag = "14")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubResonanceCsReq {
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "8")]
    pub bnpoooejbma: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubResonanceScRsp {
    #[prost(message, optional, tag = "14")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoxingClubResonanceLineupCsReq {
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub gpphjggfmcb: ::prost::alloc::vec::Vec<Cbieelkjmgl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoxingClubResonanceLineupScRsp {
    #[prost(message, optional, tag = "5")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubStageOptionalBuffCsReq {
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "7")]
    pub fhemokpmgcc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChooseBoxingClubStageOptionalBuffScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartBoxingClubBattleCsReq {
    #[prost(uint32, tag = "6")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartBoxingClubBattleScRsp {
    #[prost(uint32, tag = "9")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GiveUpBoxingClubChallengeCsReq {
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(bool, tag = "8")]
    pub ijbcllkijij: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GiveUpBoxingClubChallengeScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoxingClubRewardScNotify {
    #[prost(uint32, tag = "8")]
    pub gdghfkmdibb: u32,
    #[prost(bool, tag = "6")]
    pub is_win: bool,
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoxingClubChallengeUpdateScNotify {
    #[prost(message, optional, tag = "7")]
    pub akfanijhpcn: ::core::option::Option<Hkfbmlkmomj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Challenge {
    #[prost(uint32, tag = "15")]
    pub taken_reward: u32,
    #[prost(uint32, tag = "11")]
    pub attempts: u32,
    #[prost(bool, tag = "1")]
    pub mdglhfifflc: bool,
    #[prost(message, optional, tag = "3")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
    #[prost(uint32, tag = "9")]
    pub score: u32,
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "4")]
    pub stars: u32,
    #[prost(uint32, tag = "8")]
    pub score_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeReward {
    #[prost(uint64, tag = "2")]
    pub taken_challenge_reward: u64,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeHistoryMaxLevel {
    #[prost(uint32, tag = "10")]
    pub noopmpomdga: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeScRsp {
    #[prost(message, repeated, tag = "10")]
    pub jpjambngbgd: ::prost::alloc::vec::Vec<ChallengeHistoryMaxLevel>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub ahcjhhlihcl: u32,
    #[prost(message, repeated, tag = "7")]
    pub challenge_reward_list: ::prost::alloc::vec::Vec<ChallengeReward>,
    #[prost(message, repeated, tag = "8")]
    pub challenge_list: ::prost::alloc::vec::Vec<Challenge>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeStoryBuffInfo {
    #[prost(uint32, tag = "8")]
    pub pbclkhacean: u32,
    #[prost(uint32, tag = "13")]
    pub ifcobclmeia: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeBossBuffInfo {
    #[prost(uint32, tag = "14")]
    pub ifcobclmeia: u32,
    #[prost(uint32, tag = "5")]
    pub pbclkhacean: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartChallengeInfo {
    #[prost(oneof = "start_challenge_info::ChallengeInfoCase", tags = "1, 10")]
    pub challenge_info_case: ::core::option::Option<
        start_challenge_info::ChallengeInfoCase,
    >,
}
/// Nested message and enum types in `StartChallengeInfo`.
pub mod start_challenge_info {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1")]
        StoryBuffInfo(super::StartChallengeStoryBuffInfo),
        #[prost(message, tag = "10")]
        BossInfo(super::StartChallengeBossBuffInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub mmljpjgfieo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub ext_info: ::core::option::Option<StartChallengeInfo>,
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub oeoomalhndh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartChallengeScRsp {
    #[prost(message, optional, tag = "10")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<ChallengeExtInfo>,
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, repeated, tag = "4")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeCsReq {
    #[prost(bool, tag = "13")]
    pub is_first_half: bool,
    #[prost(uint32, tag = "11")]
    pub buff_id: u32,
    #[prost(uint32, tag = "15")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartPartialChallengeScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, optional, tag = "12")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LeaveChallengeScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeSettleNotify {
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub kjlellmhocc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub stars: u32,
    #[prost(message, optional, tag = "11")]
    pub max_level: ::core::option::Option<ChallengeHistoryMaxLevel>,
    #[prost(uint32, tag = "4")]
    pub score_one: u32,
    #[prost(bool, tag = "3")]
    pub is_win: bool,
    #[prost(message, optional, tag = "12")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(uint32, tag = "8")]
    pub ahcjhhlihcl: u32,
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub score_two: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct KillMonsterInfo {
    #[prost(uint32, tag = "7")]
    pub kill_num: u32,
    #[prost(uint32, tag = "3")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryBuffInfo {
    #[prost(uint32, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossBuffInfo {
    #[prost(uint32, repeated, tag = "6")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub boss_buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBuffInfo {
    #[prost(oneof = "challenge_buff_info::ChallengeInfoCase", tags = "5, 8")]
    pub challenge_info_case: ::core::option::Option<
        challenge_buff_info::ChallengeInfoCase,
    >,
}
/// Nested message and enum types in `ChallengeBuffInfo`.
pub mod challenge_buff_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "5")]
        CurStoryBuffs(super::ChallengeStoryBuffInfo),
        #[prost(message, tag = "8")]
        CurBossBuffs(super::ChallengeBossBuffInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeInfo {
    #[prost(uint32, tag = "6")]
    pub ogojjhpoagg: u32,
    #[prost(uint32, tag = "13")]
    pub score: u32,
    #[prost(enumeration = "ChallengeStatus", tag = "15")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub score_two: u32,
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<ChallengeBuffInfo>,
    #[prost(message, repeated, tag = "12")]
    pub archive_monster_id_list: ::prost::alloc::vec::Vec<KillMonsterInfo>,
    #[prost(enumeration = "ExtraLineupType", tag = "4")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "2")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "9")]
    pub round_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurChallengeCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurChallengeScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub challenge_info: ::core::option::Option<ChallengeInfo>,
    #[prost(message, repeated, tag = "7")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeLineupNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "8")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardCsReq {
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeChallengeRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub taken_reward_list: ::prost::alloc::vec::Vec<TakenChallengeRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakenChallengeRewardInfo {
    #[prost(uint32, tag = "2")]
    pub star_count: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeMemoryStats {
    #[prost(uint32, tag = "9")]
    pub attempts: u32,
    #[prost(message, optional, tag = "1")]
    pub clear_info: ::core::option::Option<ChallengeMemoryClearInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryStats {
    #[prost(uint32, tag = "5")]
    pub attempts: u32,
    #[prost(message, optional, tag = "3")]
    pub clear_info: ::core::option::Option<ChallengeStoryClearInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossStats {
    #[prost(message, optional, tag = "10")]
    pub clear_info: ::core::option::Option<ChallengeBossClearInfo>,
    #[prost(uint32, tag = "6")]
    pub attempts: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeMemoryClearInfo {
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub highest_difficulty: u32,
    #[prost(uint32, tag = "8")]
    pub round_count: u32,
    #[prost(message, repeated, tag = "11")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeStoryClearInfo {
    #[prost(uint32, tag = "1")]
    pub pbclkhacean: u32,
    #[prost(uint32, tag = "13")]
    pub score: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub ifcobclmeia: u32,
    #[prost(uint32, tag = "10")]
    pub highest_difficulty: u32,
    #[prost(message, repeated, tag = "11")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossClearInfo {
    #[prost(uint32, tag = "3")]
    pub highest_difficulty: u32,
    #[prost(uint32, tag = "9")]
    pub ifcobclmeia: u32,
    #[prost(uint32, tag = "14")]
    pub pbclkhacean: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub score: u32,
    #[prost(message, repeated, tag = "1")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeLineup {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<ChallengeLineupMember>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeLineupMember {
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsCsReq {
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeGroupStatisticsScRsp {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(
        oneof = "get_challenge_group_statistics_sc_rsp::GroupInfoCase",
        tags = "2, 5, 6"
    )]
    pub group_info_case: ::core::option::Option<
        get_challenge_group_statistics_sc_rsp::GroupInfoCase,
    >,
}
/// Nested message and enum types in `GetChallengeGroupStatisticsScRsp`.
pub mod get_challenge_group_statistics_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GroupInfoCase {
        #[prost(message, tag = "2")]
        MemoryStats(super::ChallengeMemoryStats),
        #[prost(message, tag = "5")]
        StoryStats(super::ChallengeStoryStats),
        #[prost(message, tag = "6")]
        BossStats(super::ChallengeBossStats),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossStageInfo {
    #[prost(uint32, tag = "14")]
    pub stage_score: u32,
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
    #[prost(bool, tag = "6")]
    pub is_win: bool,
    #[prost(bool, tag = "11")]
    pub ncajeefknhm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChallengeBossEquipment {
    #[prost(uint32, tag = "11")]
    pub unique_id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub rank: u32,
    #[prost(uint32, tag = "15")]
    pub tid: u32,
    #[prost(uint32, tag = "4")]
    pub promotion: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossRelicMap {
    #[prost(uint32, tag = "1")]
    pub tid: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "12")]
    pub main_affix_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossRelic {
    #[prost(map = "uint32, message", tag = "6")]
    pub relic_map: ::std::collections::HashMap<u32, ChallengeBossRelicMap>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossInfo {
    #[prost(message, optional, tag = "6")]
    pub kcededekncb: ::core::option::Option<ChallengeBossStageInfo>,
    #[prost(uint32, repeated, tag = "5")]
    pub oeoomalhndh: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, message", tag = "10")]
    pub equipments: ::std::collections::HashMap<u32, ChallengeBossEquipment>,
    #[prost(map = "uint32, message", tag = "7")]
    pub relics: ::std::collections::HashMap<u32, ChallengeBossRelic>,
    #[prost(bool, tag = "14")]
    pub bcmdaakcnba: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub mmljpjgfieo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "1")]
    pub ohjicjdmhak: ::core::option::Option<ChallengeBossStageInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeExtInfo {
    #[prost(oneof = "challenge_ext_info::ChallengeInfoCase", tags = "1")]
    pub challenge_info_case: ::core::option::Option<
        challenge_ext_info::ChallengeInfoCase,
    >,
}
/// Nested message and enum types in `ChallengeExtInfo`.
pub mod challenge_ext_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1")]
        BossInfo(super::ChallengeBossInfo),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RestartChallengePhaseScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterChallengeNextPhaseScRsp {
    #[prost(message, optional, tag = "4")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeBossPhaseSettleNotify {
    #[prost(uint32, tag = "15")]
    pub stars: u32,
    #[prost(uint32, tag = "11")]
    pub dbddgfjgggb: u32,
    #[prost(bool, tag = "4")]
    pub is_win: bool,
    #[prost(uint32, tag = "12")]
    pub phase: u32,
    #[prost(message, repeated, tag = "10")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(uint32, tag = "9")]
    pub score_one: u32,
    #[prost(uint32, tag = "13")]
    pub score_two: u32,
    #[prost(uint32, tag = "5")]
    pub challenge_id: u32,
    #[prost(bool, tag = "6")]
    pub iegnkpbdbgg: bool,
    #[prost(bool, tag = "14")]
    pub ojigjjlkbhm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgCsReq {
    #[prost(uint32, tag = "11")]
    pub emote: u32,
    #[prost(string, tag = "8")]
    pub text: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "6")]
    pub to_uid_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "ChatType", tag = "1")]
    pub chat_type: i32,
    #[prost(enumeration = "MsgType", tag = "3")]
    pub msg_type: i32,
    #[prost(message, optional, tag = "7")]
    pub ohinldbelba: ::core::option::Option<Mnmebdfajjp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SendMsgScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint64, tag = "8")]
    pub end_time: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chat {
    #[prost(uint32, tag = "14")]
    pub emote: u32,
    #[prost(enumeration = "MsgType", tag = "10")]
    pub msg_type: i32,
    #[prost(string, tag = "1")]
    pub word: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub sender_chat: u32,
    #[prost(uint64, tag = "5")]
    pub sent_time: u64,
    #[prost(message, optional, tag = "6")]
    pub ohinldbelba: ::core::option::Option<Mnmebdfajjp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevcMsgScNotify {
    #[prost(enumeration = "MsgType", tag = "3")]
    pub msg_type: i32,
    #[prost(string, tag = "4")]
    pub text: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub emote: u32,
    #[prost(uint32, tag = "12")]
    pub ikelkonfnkp: u32,
    #[prost(message, optional, tag = "8")]
    pub ohinldbelba: ::core::option::Option<Mnmebdfajjp>,
    #[prost(uint32, tag = "9")]
    pub ecohffmnjnp: u32,
    #[prost(enumeration = "ChatType", tag = "5")]
    pub chat_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivateMsgOfflineUsersScNotify {
    #[prost(uint32, repeated, tag = "14")]
    pub ehibbcnkeik: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryCsReq {
    #[prost(uint32, tag = "4")]
    pub sender_uid: u32,
    #[prost(uint32, tag = "5")]
    pub target_uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryScRsp {
    #[prost(message, repeated, tag = "4")]
    pub chat_list: ::prost::alloc::vec::Vec<Chat>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub sender_uid: u32,
    #[prost(uint32, tag = "2")]
    pub target_uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ejkhacphakp {
    #[prost(int64, tag = "9")]
    pub kjefpefpbic: i64,
    #[prost(uint32, tag = "2")]
    pub target_uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatFriendHistoryScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub dcfififpbki: ::prost::alloc::vec::Vec<Ejkhacphakp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChatEmojiListScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub ibaegifmmkd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiCsReq {
    #[prost(bool, tag = "12")]
    pub aammdfebimp: bool,
    #[prost(uint32, tag = "1")]
    pub emote: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkChatEmojiScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub emote: u32,
    #[prost(bool, tag = "13")]
    pub aammdfebimp: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub cfhefenkkpd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMarkChatEmojiScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub cfhefenkkpd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLoginChatInfoScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ehibbcnkeik: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogmcfcjmije {
    #[prost(message, optional, tag = "12")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nboicpbanic {
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "13")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cknibadcanc {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub dakginmemjl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiiknogbkaf {
    #[prost(message, repeated, tag = "10")]
    pub ndcgbpbagbf: ::prost::alloc::vec::Vec<Cknibadcanc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueNousDice {
    #[prost(uint32, repeated, tag = "1442")]
    pub nhchlekioli: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub lbbddekikii: u32,
    #[prost(uint32, tag = "12")]
    pub lmojjangnai: u32,
    #[prost(message, optional, tag = "198")]
    pub efgngpjkoaa: ::core::option::Option<Fockflepfcf>,
    #[prost(message, optional, tag = "417")]
    pub njnfgbjgolj: ::core::option::Option<Hhejbaaimfe>,
    #[prost(uint32, tag = "11")]
    pub ogohdnihbgi: u32,
    #[prost(uint32, tag = "14")]
    pub mhmjmecknnf: u32,
    #[prost(bool, tag = "1")]
    pub hakcdmkjhfg: bool,
    #[prost(bool, tag = "222")]
    pub dekgegfgled: bool,
    #[prost(uint32, tag = "4")]
    pub nipeacdaddd: u32,
    #[prost(message, optional, tag = "538")]
    pub loiogpdkfhl: ::core::option::Option<Nmkhmioopjn>,
    #[prost(uint32, tag = "15")]
    pub lpelhhcdbim: u32,
    #[prost(uint32, tag = "3")]
    pub gikpkgegobo: u32,
    #[prost(enumeration = "Dkgdpgpjfkj", tag = "2")]
    pub ffpkldimfed: i32,
    #[prost(int32, tag = "1526")]
    pub ehkmbfkmipj: i32,
    #[prost(enumeration = "Dipbaengolm", tag = "13")]
    pub cejhpgpjace: i32,
    #[prost(uint32, tag = "7")]
    pub bibfjdmpjhm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueRollDiceCsReq {
    #[prost(uint32, tag = "13")]
    pub ieiofdmmmhh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueRollDiceScRsp {
    #[prost(uint32, tag = "8")]
    pub opojbbkedbl: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGoAheadCsReq {
    #[prost(uint32, tag = "12")]
    pub naimnifdkfj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGoAheadScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub naimnifdkfj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhkdhpeomgm {
    #[prost(uint32, tag = "1")]
    pub meljdnkblja: u32,
    #[prost(uint32, tag = "13")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cggnpncknnb {
    #[prost(message, repeated, tag = "11")]
    pub papghfoheoo: ::prost::alloc::vec::Vec<Dhkdhpeomgm>,
    #[prost(bool, tag = "8")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, tag = "10")]
    pub pffioblmgpl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmfdedpdcgk {
    #[prost(uint32, repeated, tag = "12")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub ghmkbaihjcl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lodgmabjhnc {
    #[prost(message, optional, tag = "3")]
    pub lgmgmjpcklf: ::core::option::Option<Cggnpncknnb>,
    #[prost(message, optional, tag = "5")]
    pub pmmfkojcbco: ::core::option::Option<Gmfdedpdcgk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfadeckjckf {
    #[prost(oneof = "lfadeckjckf::Pemcgnnoonk", tags = "15, 13, 2")]
    pub pemcgnnoonk: ::core::option::Option<lfadeckjckf::Pemcgnnoonk>,
}
/// Nested message and enum types in `LFADECKJCKF`.
pub mod lfadeckjckf {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Pemcgnnoonk {
        #[prost(message, tag = "15")]
        Lgmgmjpcklf(super::Cggnpncknnb),
        #[prost(message, tag = "13")]
        Pmmfkojcbco(super::Gmfdedpdcgk),
        #[prost(message, tag = "2")]
        Oafelkeemfe(super::Lodgmabjhnc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eghkppgadbn {
    #[prost(uint32, tag = "5")]
    pub oemflfebjlg: u32,
    #[prost(bool, tag = "7")]
    pub inkhhpljbnd: bool,
    #[prost(uint32, tag = "1")]
    pub hgmfeggjefb: u32,
    #[prost(uint32, tag = "6")]
    pub kglccbgoebo: u32,
    #[prost(bool, tag = "8")]
    pub placeeoajoe: bool,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(message, optional, tag = "9")]
    pub ext_info: ::core::option::Option<Lfadeckjckf>,
    #[prost(uint32, tag = "3")]
    pub jipfgechfbm: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub aibmbkdapfk: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Pcbifjfhegk", tag = "14")]
    pub dnppppeljni: i32,
    #[prost(uint32, tag = "10")]
    pub dbejigjngkh: u32,
    #[prost(enumeration = "Ccjdfdemcjl", tag = "12")]
    pub gnbkhjfchid: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfgjipkoopj {
    #[prost(uint32, tag = "11")]
    pub penjhingigc: u32,
    #[prost(uint32, tag = "12")]
    pub fhbplgnbcbg: u32,
    #[prost(uint32, tag = "4")]
    pub mkpfflfmihj: u32,
    #[prost(message, repeated, tag = "6")]
    pub ikimfhfldnn: ::prost::alloc::vec::Vec<Eghkppgadbn>,
    #[prost(uint32, tag = "5")]
    pub dcbagjmcheb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bddbmhelcmo {
    #[prost(uint32, tag = "4")]
    pub hgmfeggjefb: u32,
    #[prost(uint32, tag = "5")]
    pub naimnifdkfj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndfcfdpnejb {
    #[prost(uint32, tag = "3")]
    pub glhagjkpdmo: u32,
    #[prost(message, optional, tag = "2")]
    pub jhbnookjioa: ::core::option::Option<Fockflepfcf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcmhfobcjap {
    #[prost(uint32, repeated, tag = "8")]
    pub gepflmfchbi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub jdnooclhple: ::core::option::Option<Pfgjipkoopj>,
    #[prost(uint32, tag = "12")]
    pub bajmoaelmho: u32,
    #[prost(message, optional, tag = "11")]
    pub ommbiafigmb: ::core::option::Option<Ndfcfdpnejb>,
    #[prost(uint32, tag = "1")]
    pub neihhoimfjh: u32,
    #[prost(enumeration = "Pcbifjfhegk", tag = "4")]
    pub gdkholcegfc: i32,
    #[prost(message, repeated, tag = "13")]
    pub ofgefdepncm: ::prost::alloc::vec::Vec<Bddbmhelcmo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnknfjkmjie {
    #[prost(message, optional, tag = "4")]
    pub nkbcldkkhic: ::core::option::Option<Mcmhfobcjap>,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(int32, tag = "6")]
    pub gbmaajiknaj: i32,
    #[prost(uint32, repeated, tag = "3")]
    pub daelbdidmmh: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "7")]
    pub gcgapaldnlk: i32,
    #[prost(uint32, tag = "12")]
    pub igodafnldck: u32,
    #[prost(uint32, tag = "13")]
    pub pfgahnoaphb: u32,
    #[prost(uint32, tag = "11")]
    pub heedlfmbnjh: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub eamjpkmkkhk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oplgfilfldo {
    #[prost(uint32, tag = "11")]
    pub buff_aeon_id: u32,
    #[prost(uint32, tag = "3")]
    pub iagdnefgggm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkgkoemfgeo {
    #[prost(message, repeated, tag = "10")]
    pub eegkdbjhepf: ::prost::alloc::vec::Vec<Oplgfilfldo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agfnmlebejd {
    #[prost(message, optional, tag = "9")]
    pub nediblkmfao: ::core::option::Option<Fkgkoemfgeo>,
    #[prost(int32, tag = "10")]
    pub jaepijofhec: i32,
    #[prost(message, optional, tag = "6")]
    pub jhbnookjioa: ::core::option::Option<Fockflepfcf>,
    #[prost(uint32, repeated, tag = "12")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub hkplkkpgpii: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mgobpaeconf {
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub hghjdopfmcb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgalanananf {
    #[prost(message, repeated, tag = "1")]
    pub fnegfijfkgc: ::prost::alloc::vec::Vec<Mgobpaeconf>,
    #[prost(message, optional, tag = "6")]
    pub modehmlelln: ::core::option::Option<Ogmcfcjmije>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhadppbciap {
    #[prost(uint32, tag = "4")]
    pub ipeenglmglg: u32,
    #[prost(bool, tag = "11")]
    pub mlmmajbpggj: bool,
    #[prost(uint32, tag = "2")]
    pub iccdobigcln: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub pdkomjcahfd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueNousValue {
    #[prost(int32, tag = "8")]
    pub bmakeadnmog: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpklomephef {
    #[prost(uint32, repeated, tag = "1")]
    pub bfhbdhcfmfg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgnajfogfbj {
    #[prost(message, optional, tag = "6")]
    pub nous_value: ::core::option::Option<ChessRogueNousValue>,
    #[prost(message, optional, tag = "8")]
    pub ooieepcbnoi: ::core::option::Option<RogueVirtualItem>,
    #[prost(message, optional, tag = "13")]
    pub nemgeopcbao: ::core::option::Option<Jgalanananf>,
    #[prost(message, optional, tag = "1")]
    pub rogue_virtual_item_info: ::core::option::Option<Giipeenecmb>,
    #[prost(message, optional, tag = "1327")]
    pub nndpggjcpog: ::core::option::Option<Bpklomephef>,
    #[prost(uint32, tag = "9")]
    pub pdhdkbjjofj: u32,
    #[prost(message, optional, tag = "3")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
    #[prost(message, optional, tag = "11")]
    pub fheodgileep: ::core::option::Option<Icnphjaadde>,
    #[prost(message, optional, tag = "7")]
    pub ncoaibhnpoh: ::core::option::Option<Fiidpggkano>,
    #[prost(message, optional, tag = "15")]
    pub story_buff_info: ::core::option::Option<Hhadppbciap>,
    #[prost(message, repeated, tag = "4")]
    pub piannpmkhfo: ::prost::alloc::vec::Vec<Bgpokppmebi>,
    #[prost(message, optional, tag = "2")]
    pub amlcaeijmee: ::core::option::Option<Hpoepjidfce>,
    #[prost(message, optional, tag = "5")]
    pub bcbjpfikphg: ::core::option::Option<Bnknfjkmjie>,
    #[prost(message, optional, tag = "14")]
    pub rogue_aeon_info: ::core::option::Option<Agfnmlebejd>,
    #[prost(message, optional, tag = "10")]
    pub aldgjpggbej: ::core::option::Option<Chapnfebfik>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apkpmohibkj {
    #[prost(message, optional, tag = "15")]
    pub gihphohbgfg: ::core::option::Option<Emeghpnhpfg>,
    #[prost(message, optional, tag = "8")]
    pub rogue_virtual_item_info: ::core::option::Option<Giipeenecmb>,
    #[prost(message, optional, tag = "7")]
    pub nndpggjcpog: ::core::option::Option<Cfhnfghejob>,
    #[prost(uint32, repeated, tag = "6")]
    pub daelbdidmmh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub nediblkmfao: ::core::option::Option<Fkgkoemfgeo>,
    #[prost(uint32, repeated, tag = "2")]
    pub eamjpkmkkhk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub ofhkchgpkhe: ::core::option::Option<Acdoieahokk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbghjicbpmn {
    #[prost(uint32, tag = "8")]
    pub pdhdkbjjofj: u32,
    #[prost(message, repeated, tag = "9")]
    pub piannpmkhfo: ::prost::alloc::vec::Vec<Bgpokppmebi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifnchapemhd {
    #[prost(message, optional, tag = "11")]
    pub nediblkmfao: ::core::option::Option<Fkgkoemfgeo>,
    #[prost(message, optional, tag = "9")]
    pub nndpggjcpog: ::core::option::Option<Cfhnfghejob>,
    #[prost(message, optional, tag = "10")]
    pub ofhkchgpkhe: ::core::option::Option<Acdoieahokk>,
    #[prost(uint32, repeated, tag = "1")]
    pub eamjpkmkkhk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "14")]
    pub gihphohbgfg: ::core::option::Option<Emeghpnhpfg>,
    #[prost(uint32, repeated, tag = "8")]
    pub daelbdidmmh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmphodoehcn {
    #[prost(uint32, tag = "1567")]
    pub okpenllbmgi: u32,
    #[prost(message, optional, tag = "9")]
    pub ncoaibhnpoh: ::core::option::Option<Agbncfbcclc>,
    #[prost(message, optional, tag = "5")]
    pub kchgjdienje: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "533")]
    pub khciddjfpbf: u32,
    #[prost(message, optional, tag = "15")]
    pub fheodgileep: ::core::option::Option<Hjclkikhmln>,
    #[prost(message, optional, tag = "14")]
    pub kmfjleoomea: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "1")]
    pub ccjnibolcmi: u32,
    #[prost(uint32, tag = "11")]
    pub gefpdfldlhd: u32,
    #[prost(message, optional, tag = "161")]
    pub aldgjpggbej: ::core::option::Option<Chapnfebfik>,
    #[prost(uint32, tag = "1673")]
    pub pdhdkbjjofj: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub lhpdbamhbkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "4")]
    pub gijjaepohgk: bool,
    #[prost(uint32, tag = "3")]
    pub lbmipljocfe: u32,
    #[prost(uint32, tag = "1332")]
    pub score: u32,
    #[prost(uint32, tag = "737")]
    pub pnbkjelmabk: u32,
    #[prost(uint32, tag = "6")]
    pub iepdbjpfegc: u32,
    #[prost(uint32, tag = "7")]
    pub ccochcfkhnk: u32,
    #[prost(uint32, tag = "2")]
    pub dldcgkaoolm: u32,
    #[prost(enumeration = "Gjnepiieicj", tag = "13")]
    pub lppdlgaojlh: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjoabohehih {
    #[prost(uint32, tag = "4")]
    pub ffkgkhpkhab: u32,
    #[prost(message, repeated, tag = "15")]
    pub ikimfhfldnn: ::prost::alloc::vec::Vec<Eghkppgadbn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjgnjmepial {
    #[prost(uint32, tag = "7")]
    pub lbmipljocfe: u32,
    #[prost(uint32, tag = "15")]
    pub cehlehncnof: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jeackchjhhn {
    #[prost(uint32, tag = "1")]
    pub cogefbimlma: u32,
    #[prost(uint32, tag = "4")]
    pub iccdobigcln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryScRsp {
    #[prost(message, optional, tag = "13")]
    pub aplcckhhpkc: ::core::option::Option<Lmphodoehcn>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub score_reward_info: ::core::option::Option<Jgnajfogfbj>,
    #[prost(message, optional, tag = "10")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
    #[prost(message, optional, tag = "1")]
    pub jocejhghlem: ::core::option::Option<Apkpmohibkj>,
    #[prost(message, optional, tag = "4")]
    pub rogue_info_data: ::core::option::Option<Ifnchapemhd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCellCsReq {
    #[prost(uint32, tag = "3")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "7")]
    pub ojpbiknalin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCellScRsp {
    #[prost(uint32, tag = "7")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
    #[prost(message, optional, tag = "11")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "8")]
    pub score_reward_info: ::core::option::Option<Jgnajfogfbj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterCsReq {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterScRsp {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(message, optional, tag = "11")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "12")]
    pub score_reward_info: ::core::option::Option<Jgnajfogfbj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueLeaveCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLeaveScRsp {
    #[prost(message, optional, tag = "5")]
    pub rogue_aeon_info: ::core::option::Option<Agfnmlebejd>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub rogue_info_data: ::core::option::Option<Ifnchapemhd>,
    #[prost(message, optional, tag = "9")]
    pub jocejhghlem: ::core::option::Option<Apkpmohibkj>,
    #[prost(message, optional, tag = "6")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueGiveUpScRsp {
    #[prost(message, optional, tag = "12")]
    pub aplcckhhpkc: ::core::option::Option<Lmphodoehcn>,
    #[prost(message, optional, tag = "5")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "11")]
    pub jocejhghlem: ::core::option::Option<Apkpmohibkj>,
    #[prost(message, optional, tag = "10")]
    pub rogue_aeon_info: ::core::option::Option<Agfnmlebejd>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub rogue_info_data: ::core::option::Option<Ifnchapemhd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueStartCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub haphbjcmfmb: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub jccfcjenggp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub onlldnlphef: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub buff_aeon_id: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueStartScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "1")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "13")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
    #[prost(message, optional, tag = "9")]
    pub mfbenodfgoj: ::core::option::Option<Kjoabohehih>,
    #[prost(message, optional, tag = "3")]
    pub score_reward_info: ::core::option::Option<Jgnajfogfbj>,
    #[prost(message, optional, tag = "6")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeonDimensionsCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryAeonDimensionsScRsp {
    #[prost(message, optional, tag = "4")]
    pub score_reward_info: ::core::option::Option<Fkgkoemfgeo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueChangeyAeonDimensionNotify {
    #[prost(message, optional, tag = "2")]
    pub score_reward_info: ::core::option::Option<Oplgfilfldo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectCellCsReq {
    #[prost(uint32, tag = "3")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "9")]
    pub ojpbiknalin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectCellScRsp {
    #[prost(uint32, tag = "9")]
    pub ojpbiknalin: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub naimnifdkfj: u32,
    #[prost(message, optional, tag = "7")]
    pub cemcfkfefpd: ::core::option::Option<Imbmfnlhnfk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryBpCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueQueryBpScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub score_reward_info: ::core::option::Option<Jiiknogbkaf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectBpCsReq {
    #[prost(uint32, tag = "13")]
    pub phhkjllgbkk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSelectBpScRsp {
    #[prost(uint32, tag = "7")]
    pub phhkjllgbkk: u32,
    #[prost(message, optional, tag = "13")]
    pub plifgmfhfie: ::core::option::Option<Cknibadcanc>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueLayerAccountInfoNotify {
    #[prost(uint32, tag = "2")]
    pub igodafnldck: u32,
    #[prost(uint32, tag = "8")]
    pub gefpdfldlhd: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub lhpdbamhbkb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub bcbjpfikphg: ::core::option::Option<Bnknfjkmjie>,
    #[prost(message, optional, tag = "6")]
    pub aplcckhhpkc: ::core::option::Option<Lmphodoehcn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChessRogueBuffEnhanceInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChessRogueBuffEnhanceInfoScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub shop_info: ::core::option::Option<Aaemicfolka>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnhanceChessRogueBuffCsReq {
    #[prost(uint32, tag = "2")]
    pub rouge_buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnhanceChessRogueBuffScRsp {
    #[prost(bool, tag = "3")]
    pub is_succ: bool,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub shop_info: ::core::option::Option<Aaemicfolka>,
    #[prost(message, optional, tag = "4")]
    pub rogue_buff: ::core::option::Option<RogueCommonBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRoguePickAvatarCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRoguePickAvatarScRsp {
    #[prost(uint32, repeated, tag = "12")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub nemgeopcbao: ::core::option::Option<Jgalanananf>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReviveAvatarCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReviveAvatarScRsp {
    #[prost(message, optional, tag = "8")]
    pub modehmlelln: ::core::option::Option<Ogmcfcjmije>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateReviveInfoScNotify {
    #[prost(message, optional, tag = "12")]
    pub modehmlelln: ::core::option::Option<Ogmcfcjmije>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateMoneyInfoScNotify {
    #[prost(message, optional, tag = "10")]
    pub ooieepcbnoi: ::core::option::Option<RogueVirtualItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateDiceInfoScNotify {
    #[prost(message, optional, tag = "2")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateLevelBaseInfoScNotify {
    #[prost(enumeration = "Ggilddcjlga", tag = "12")]
    pub pfgahnoaphb: i32,
    #[prost(enumeration = "Mkckfooagpf", tag = "11")]
    pub reason: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateAllowedSelectCellScNotify {
    #[prost(uint32, tag = "2")]
    pub mapleijnlmf: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub gepflmfchbi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateBoardScNotify {
    #[prost(message, optional, tag = "15")]
    pub nnimibklapi: ::core::option::Option<Pfgjipkoopj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateAeonModifierValueScNotify {
    #[prost(uint32, tag = "5")]
    pub buff_aeon_id: u32,
    #[prost(int32, tag = "13")]
    pub jaepijofhec: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateDicePassiveAccumulateValueScNotify {
    #[prost(int32, tag = "4")]
    pub enpboabdoml: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub skip_reward_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueUpdateUnlockLevelScNotify {
    #[prost(uint32, repeated, tag = "9")]
    pub daelbdidmmh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterNextLayerCsReq {
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueEnterNextLayerScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub rogue_info: ::core::option::Option<Jgnajfogfbj>,
    #[prost(message, optional, tag = "3")]
    pub mfbenodfgoj: ::core::option::Option<Kjoabohehih>,
    #[prost(message, optional, tag = "6")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "12")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueReRollDiceCsReq {
    #[prost(uint32, tag = "13")]
    pub ieiofdmmmhh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueReRollDiceScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueConfirmRollCsReq {
    #[prost(uint32, tag = "14")]
    pub ieiofdmmmhh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueConfirmRollScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChessRogueCheatRollCsReq {
    #[prost(uint32, tag = "4")]
    pub ieiofdmmmhh: u32,
    #[prost(uint32, tag = "9")]
    pub iglpniohomj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueCheatRollScRsp {
    #[prost(uint32, tag = "13")]
    pub iglpniohomj: u32,
    #[prost(message, optional, tag = "9")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub mmebfmkebcl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjomfbigcja {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bplpmnbicin {
    #[prost(message, optional, tag = "6")]
    pub nous_dice: ::core::option::Option<ChessRogueNousDice>,
    #[prost(message, optional, tag = "5")]
    pub ajohoaicbfd: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdmmfmjjpod {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnghngaefnf {
    #[prost(message, optional, tag = "2")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(message, optional, tag = "12")]
    pub bcbjpfikphg: ::core::option::Option<Bnknfjkmjie>,
    #[prost(message, optional, tag = "1")]
    pub aplcckhhpkc: ::core::option::Option<Lmphodoehcn>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub rogue_info_data: ::core::option::Option<Ifnchapemhd>,
    #[prost(message, optional, tag = "8")]
    pub score_reward_info: ::core::option::Option<Jgnajfogfbj>,
    #[prost(message, optional, tag = "11")]
    pub rogue_current_info: ::core::option::Option<Fbghjicbpmn>,
    #[prost(message, optional, tag = "13")]
    pub rogue_aeon_info: ::core::option::Option<Agfnmlebejd>,
    #[prost(message, optional, tag = "9")]
    pub jocejhghlem: ::core::option::Option<Apkpmohibkj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oknocdfhbam {
    #[prost(message, optional, tag = "1")]
    pub bcbjpfikphg: ::core::option::Option<Bnknfjkmjie>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oilpldijbah {
    #[prost(uint32, tag = "2")]
    pub lgmomdhgfob: u32,
    #[prost(message, optional, tag = "13")]
    pub jdnooclhple: ::core::option::Option<Pfgjipkoopj>,
    #[prost(uint32, tag = "14")]
    pub fkabgmjjkao: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcenclbpjib {
    #[prost(enumeration = "Aanmenpdodi", tag = "8")]
    pub reason: i32,
    #[prost(message, repeated, tag = "11")]
    pub ikimfhfldnn: ::prost::alloc::vec::Vec<Eghkppgadbn>,
    #[prost(uint32, tag = "1")]
    pub mapleijnlmf: u32,
    #[prost(enumeration = "Bkfplkgjofi", tag = "9")]
    pub oambgglnnmj: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bogdckoecnf {
    #[prost(uint32, tag = "13")]
    pub eocnmiibcng: u32,
    #[prost(uint32, tag = "7")]
    pub fjhbefphdih: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjmoeflhndm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beiachlbbfm {
    #[prost(message, repeated, tag = "8")]
    pub iijljpkkalg: ::prost::alloc::vec::Vec<Jeackchjhhn>,
    #[prost(message, repeated, tag = "14")]
    pub ghjfcdlifkm: ::prost::alloc::vec::Vec<Bjgnjmepial>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ooimngcpina {
    #[prost(uint32, tag = "3")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "13")]
    pub ibgbnajcihd: u32,
    #[prost(uint32, tag = "2")]
    pub nmehgpbpmig: u32,
    #[prost(uint32, tag = "8")]
    pub iccdobigcln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijimheiimbn {
    #[prost(uint32, tag = "7")]
    pub iccdobigcln: u32,
    #[prost(uint32, tag = "11")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "9")]
    pub nmehgpbpmig: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ibgbnajcihd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiladkikfao {
    #[prost(uint32, tag = "9")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "13")]
    pub ibgbnajcihd: u32,
    #[prost(uint32, tag = "7")]
    pub iccdobigcln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Moioaclajhi {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "15")]
    pub lbmipljocfe: u32,
    #[prost(uint32, tag = "3")]
    pub ibgbnajcihd: u32,
    #[prost(uint32, tag = "4")]
    pub iccdobigcln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkligmmohnm {
    #[prost(int32, tag = "11")]
    pub gbmaajiknaj: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpcfgphpcma {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaaldhknecp {
    #[prost(message, optional, tag = "7")]
    pub ext_info: ::core::option::Option<Nboicpbanic>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddpbbdifcjh {
    #[prost(uint32, tag = "6")]
    pub nglokpibfpn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okcbcdenldj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub nglokpibfpn: u32,
    #[prost(map = "uint32, uint32", tag = "11")]
    pub midpepggjel: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhdpppopnbb {
    #[prost(uint32, tag = "10")]
    pub lbmipljocfe: u32,
    #[prost(uint32, tag = "12")]
    pub cehlehncnof: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jekccnnmmle {
    #[prost(message, optional, tag = "5")]
    pub nous_value: ::core::option::Option<ChessRogueNousValue>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icjbbcppcco {
    #[prost(uint32, tag = "1")]
    pub lbmipljocfe: u32,
    #[prost(enumeration = "Elgemhkfoii", tag = "13")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cohocipbijd {
    #[prost(uint32, tag = "15")]
    pub pghaphchhda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lpeckpgandl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjjmbphbcpd {
    #[prost(message, repeated, tag = "10")]
    pub iijljpkkalg: ::prost::alloc::vec::Vec<Cohocipbijd>,
    #[prost(message, repeated, tag = "13")]
    pub ghjfcdlifkm: ::prost::alloc::vec::Vec<Icjbbcppcco>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmifkoipkam {
    #[prost(uint32, tag = "6")]
    pub nmehgpbpmig: u32,
    #[prost(uint32, tag = "12")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "4")]
    pub ibgbnajcihd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfdfcnogeog {
    #[prost(uint32, tag = "1")]
    pub nmehgpbpmig: u32,
    #[prost(uint32, tag = "9")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "8")]
    pub ibgbnajcihd: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Coblickmbhg {
    #[prost(uint32, tag = "15")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "4")]
    pub ibgbnajcihd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nehkdapaapk {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub ibgbnajcihd: u32,
    #[prost(uint32, tag = "4")]
    pub pghaphchhda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfejfphomhj {
    #[prost(uint32, tag = "3")]
    pub pghaphchhda: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acciajdhkdk {
    #[prost(message, repeated, tag = "5")]
    pub ghjfcdlifkm: ::prost::alloc::vec::Vec<Icjbbcppcco>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chapnfebfik {
    #[prost(uint32, repeated, tag = "7")]
    pub ojnncenaheg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "14")]
    pub cnlibkkmgab: bool,
    #[prost(uint32, tag = "15")]
    pub pghaphchhda: u32,
    #[prost(uint32, tag = "2")]
    pub pliipndmhgl: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub gnfohbaickm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub booncbkejjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub mlmmajbpggj: bool,
    #[prost(uint32, tag = "12")]
    pub lbmipljocfe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfjpjcganbb {
    #[prost(uint32, tag = "1")]
    pub khocgagjlfd: u32,
    #[prost(uint32, tag = "14")]
    pub iglpniohomj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmkhmioopjn {
    #[prost(uint32, tag = "10")]
    pub nkbeepkdjgi: u32,
    #[prost(uint32, tag = "5")]
    pub haphbjcmfmb: u32,
    #[prost(message, repeated, tag = "9")]
    pub higkkcfcmec: ::prost::alloc::vec::Vec<Cfjpjcganbb>,
    #[prost(uint32, tag = "6")]
    pub likpoikknkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emeghpnhpfg {
    #[prost(message, repeated, tag = "9")]
    pub mmlndmbflec: ::prost::alloc::vec::Vec<Nmkhmioopjn>,
    #[prost(enumeration = "Khamkbgholf", tag = "10")]
    pub ebaclciialc: i32,
    #[prost(map = "uint32, bool", tag = "13")]
    pub pnbimgegahk: ::std::collections::HashMap<u32, bool>,
    #[prost(uint32, repeated, tag = "14")]
    pub dmbbcmlfbkp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Giipeenecmb {
    #[prost(uint32, tag = "15")]
    pub opdofkednig: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acdoieahokk {
    #[prost(message, optional, tag = "1")]
    pub aegiedacmpb: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "3")]
    pub opdofkednig: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfhnfghejob {
    #[prost(uint32, repeated, tag = "14")]
    pub kmblkfnmmgl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkebfaaeglg {
    #[prost(message, optional, tag = "3")]
    pub gihphohbgfg: ::core::option::Option<Nmkhmioopjn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdmkpmknifg {
    #[prost(message, optional, tag = "5")]
    pub gihphohbgfg: ::core::option::Option<Nmkhmioopjn>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnhimjcnbkj {
    #[prost(message, optional, tag = "15")]
    pub jmeccgmnmlg: ::core::option::Option<Emeghpnhpfg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mooobokagkn {
    #[prost(uint32, tag = "2")]
    pub bnocldedcai: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmlhccljgki {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phhbngeidhn {
    #[prost(uint32, tag = "8")]
    pub opdofkednig: u32,
    #[prost(message, optional, tag = "12")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmdjkcmopeb {
    #[prost(uint32, tag = "7")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdpbncknapi {
    #[prost(message, optional, tag = "1")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub opdofkednig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkGetInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmhjggeilgo {
    #[prost(uint32, tag = "4")]
    pub lceedigelgm: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ndhceaeambd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkGetInfoScRsp {
    #[prost(message, repeated, tag = "11")]
    pub dmdphpdndpo: ::prost::alloc::vec::Vec<Lmhjggeilgo>,
    #[prost(uint32, repeated, tag = "12")]
    pub cmaecaldman: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub progress: u32,
    #[prost(uint32, tag = "14")]
    pub gjljioicnbe: u32,
    #[prost(uint32, tag = "10")]
    pub kghfabadche: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUnlockTalentCsReq {
    #[prost(uint32, tag = "12")]
    pub talent_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUnlockTalentScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkStartScriptCsReq {
    #[prost(uint32, repeated, tag = "9")]
    pub dmloclpcmjm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub lceedigelgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkStartScriptScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub lceedigelgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkGetOngoingScriptInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkkpgfmnija {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hndccfeagfd {
    #[prost(uint32, tag = "12")]
    pub cbinikmekmp: u32,
    #[prost(uint32, tag = "14")]
    pub cpfjgbnjabl: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ddmgcojoocf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojghbhaigmg {
    #[prost(message, repeated, tag = "13")]
    pub bbnkpmlnlje: ::prost::alloc::vec::Vec<Hndccfeagfd>,
    #[prost(uint32, repeated, tag = "2")]
    pub ddmgcojoocf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcjgbeanbci {
    #[prost(message, optional, tag = "1")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdjpkillfjm {
    #[prost(message, optional, tag = "11")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gokddcofhca {
    #[prost(message, optional, tag = "5")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edkkpdojafl {
    #[prost(message, optional, tag = "11")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
    #[prost(uint32, tag = "6")]
    pub oeihamoldec: u32,
    #[prost(uint32, tag = "3")]
    pub gacha_random: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohcclgahgfp {
    #[prost(message, optional, tag = "5")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jinaaekhpij {
    #[prost(bool, tag = "5")]
    pub gdiijaedijj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjlbloncpml {
    #[prost(uint32, tag = "1")]
    pub bebcfiiabli: u32,
    #[prost(oneof = "hjlbloncpml::Kipiaghppbc", tags = "13, 4, 8, 12, 7, 14, 15, 6")]
    pub kipiaghppbc: ::core::option::Option<hjlbloncpml::Kipiaghppbc>,
}
/// Nested message and enum types in `HJLBLONCPML`.
pub mod hjlbloncpml {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kipiaghppbc {
        #[prost(message, tag = "13")]
        Pmkbkeenalm(super::Kkkpgfmnija),
        #[prost(message, tag = "4")]
        Olfgmbibenc(super::Lcjgbeanbci),
        #[prost(message, tag = "8")]
        Dfkajdlieel(super::Kdjpkillfjm),
        #[prost(message, tag = "12")]
        Mmjgepilikh(super::Gokddcofhca),
        #[prost(message, tag = "7")]
        Ldmlifoafmg(super::Edkkpdojafl),
        #[prost(message, tag = "14")]
        Nhapahklhbn(super::Ohcclgahgfp),
        #[prost(message, tag = "15")]
        Mciocchpbii(super::Jinaaekhpij),
        #[prost(bool, tag = "6")]
        Lgnhibenjdk(bool),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amiggmenhfa {
    #[prost(int32, tag = "7")]
    pub lddndphogkk: i32,
    #[prost(int32, tag = "5")]
    pub lhecjkamcih: i32,
    #[prost(int32, tag = "2")]
    pub ikdaehjkbpa: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mifepbdnggc {
    #[prost(uint32, tag = "4")]
    pub buff_id: u32,
    #[prost(uint32, tag = "14")]
    pub aphhcaohlmk: u32,
    #[prost(uint64, tag = "11")]
    pub unique_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mggjkpgeglp {
    #[prost(message, repeated, tag = "13")]
    pub buff_list: ::prost::alloc::vec::Vec<Mifepbdnggc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkGetOngoingScriptInfoScRsp {
    #[prost(uint32, tag = "15")]
    pub nponpmgnkie: u32,
    #[prost(uint32, tag = "8")]
    pub lceedigelgm: u32,
    #[prost(string, tag = "10")]
    pub jpecehhampe: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub aogmmefaifj: u32,
    #[prost(message, optional, tag = "11")]
    pub pfbobbmelfb: ::core::option::Option<Amiggmenhfa>,
    #[prost(uint32, tag = "6")]
    pub joipfmcoini: u32,
    #[prost(uint32, tag = "13")]
    pub pnoakgnanbo: u32,
    #[prost(message, optional, tag = "12")]
    pub fheodgileep: ::core::option::Option<Mggjkpgeglp>,
    #[prost(uint32, repeated, tag = "2")]
    pub ejomhilncmc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub dmbnhofldfo: ::core::option::Option<Hjlbloncpml>,
    #[prost(uint32, tag = "1")]
    pub fbeldfbdfag: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dgniefjplak {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gglplmaedgn {
    #[prost(message, optional, tag = "11")]
    pub ifajdnnchmn: ::core::option::Option<Ojghbhaigmg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccocgnomnhl {
    #[prost(bool, tag = "2")]
    pub is_win: bool,
    #[prost(uint32, tag = "7")]
    pub ecobgiieghi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maeikeldodo {
    #[prost(uint32, repeated, tag = "6")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgcnnenilkb {
    #[prost(uint32, tag = "5")]
    pub gacha_random: u32,
    #[prost(bool, tag = "2")]
    pub fedcpjjmfpi: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgkagodjbol {
    #[prost(uint32, tag = "11")]
    pub ecobgiieghi: u32,
    #[prost(bool, tag = "2")]
    pub is_win: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jggabphamoh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgfccffbegj {
    #[prost(uint32, tag = "14")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "2")]
    pub bebcfiiabli: u32,
    #[prost(oneof = "mgfccffbegj::Mjgaepgoepj", tags = "4, 7, 9, 10, 15, 12, 8, 11")]
    pub mjgaepgoepj: ::core::option::Option<mgfccffbegj::Mjgaepgoepj>,
}
/// Nested message and enum types in `MGFCCFFBEGJ`.
pub mod mgfccffbegj {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Mjgaepgoepj {
        #[prost(message, tag = "4")]
        Nonnleaapnm(super::Dgniefjplak),
        #[prost(message, tag = "7")]
        Eekoodfblpp(super::Gglplmaedgn),
        #[prost(message, tag = "9")]
        Imidmdhjbme(super::Ccocgnomnhl),
        #[prost(message, tag = "10")]
        Hegdeegagek(super::Maeikeldodo),
        #[prost(message, tag = "15")]
        Mdidhefadbc(super::Bgcnnenilkb),
        #[prost(message, tag = "12")]
        Apkojhekmab(super::Lgkagodjbol),
        #[prost(message, tag = "8")]
        Mbkedknppcn(super::Jggabphamoh),
        #[prost(uint32, tag = "11")]
        Aogmmefaifj(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bodjdmceiho {
    #[prost(uint32, tag = "10")]
    pub pnoakgnanbo: u32,
    #[prost(bool, tag = "3")]
    pub fikoiclokfk: bool,
    #[prost(bool, tag = "6")]
    pub mdglhfifflc: bool,
    #[prost(uint32, tag = "4")]
    pub joipfmcoini: u32,
    #[prost(uint32, tag = "7")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "12")]
    pub progress: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkfcifclhoi {
    #[prost(enumeration = "Klokgjnianl", tag = "1")]
    pub pippfnjbcim: i32,
    #[prost(uint32, tag = "5")]
    pub jeiaokmnomm: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub bebcfiiabli: u32,
    #[prost(uint32, tag = "14")]
    pub bogealghkef: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbndhnaking {
    #[prost(bool, tag = "5")]
    pub jmfolklcjln: bool,
    #[prost(uint32, tag = "4")]
    pub lceedigelgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idlkjmpbnbe {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mdgbmiefaho {
    #[prost(uint32, tag = "15")]
    pub bebcfiiabli: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClockParkUseBuffCsReq {
    #[prost(uint64, tag = "7")]
    pub unique_id: u64,
    #[prost(uint32, tag = "1")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "14")]
    pub bebcfiiabli: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkUseBuffScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub fheodgileep: ::core::option::Option<Mggjkpgeglp>,
    #[prost(uint32, tag = "10")]
    pub bebcfiiabli: u32,
    #[prost(uint32, tag = "7")]
    pub lceedigelgm: u32,
    #[prost(oneof = "clock_park_use_buff_sc_rsp::Ifpkcjnmhde", tags = "2032, 384")]
    pub ifpkcjnmhde: ::core::option::Option<clock_park_use_buff_sc_rsp::Ifpkcjnmhde>,
}
/// Nested message and enum types in `ClockParkUseBuffScRsp`.
pub mod clock_park_use_buff_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ifpkcjnmhde {
        #[prost(message, tag = "2032")]
        Ifajdnnchmn(super::Ojghbhaigmg),
        #[prost(message, tag = "384")]
        Pfbobbmelfb(super::Amiggmenhfa),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClockParkFinishScriptScNotify {
    #[prost(message, optional, tag = "1")]
    pub finish_info: ::core::option::Option<Bodjdmceiho>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, tag = "5")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub rank: u32,
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
    #[prost(uint32, tag = "8")]
    pub num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemList {
    #[prost(message, repeated, tag = "3")]
    pub item_list: ::prost::alloc::vec::Vec<Item>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PileItem {
    #[prost(uint32, tag = "15")]
    pub item_id: u32,
    #[prost(uint32, tag = "11")]
    pub item_num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ItemCost {
    #[prost(oneof = "item_cost::ItemCase", tags = "8, 7, 12")]
    pub item_case: ::core::option::Option<item_cost::ItemCase>,
}
/// Nested message and enum types in `ItemCost`.
pub mod item_cost {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ItemCase {
        #[prost(message, tag = "8")]
        PileItem(super::PileItem),
        #[prost(uint32, tag = "7")]
        EquipmentUniqueId(u32),
        #[prost(uint32, tag = "12")]
        RelicUniqueId(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemCostList {
    #[prost(message, repeated, tag = "15")]
    pub item_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eogfjbfakbk {
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
    #[prost(uint32, tag = "7")]
    pub item_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anpobiaefdj {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub promotion: u32,
    #[prost(uint32, tag = "8")]
    pub rank: u32,
    #[prost(uint32, tag = "7")]
    pub tid: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agbkciiinel {
    #[prost(message, repeated, tag = "3")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "1")]
    pub tid: u32,
    #[prost(uint32, tag = "4")]
    pub exp: u32,
    #[prost(uint32, tag = "14")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjgillbddkg {
    #[prost(oneof = "pjgillbddkg::Kmjagjhlhbk", tags = "4, 1, 9")]
    pub kmjagjhlhbk: ::core::option::Option<pjgillbddkg::Kmjagjhlhbk>,
}
/// Nested message and enum types in `PJGILLBDDKG`.
pub mod pjgillbddkg {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kmjagjhlhbk {
        #[prost(message, tag = "4")]
        Badpjeempgh(super::Eogfjbfakbk),
        #[prost(message, tag = "1")]
        Cgmfgaggnnm(super::Anpobiaefdj),
        #[prost(message, tag = "9")]
        Lggpkjmlglk(super::Agbkciiinel),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlbphdcpcpf {
    #[prost(message, repeated, tag = "2")]
    pub item_list: ::prost::alloc::vec::Vec<Pjgillbddkg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector {
    #[prost(sint32, tag = "1")]
    pub iiiodofedhc: i32,
    #[prost(sint32, tag = "9")]
    pub anhkkmbjgfe: i32,
    #[prost(sint32, tag = "4")]
    pub ddpbecjepei: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MotionInfo {
    #[prost(message, optional, tag = "10")]
    pub pos: ::core::option::Option<Vector>,
    #[prost(message, optional, tag = "7")]
    pub fpinlanjlcj: ::core::option::Option<Vector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Vector4 {
    #[prost(float, tag = "4")]
    pub anhkkmbjgfe: f32,
    #[prost(float, tag = "8")]
    pub w: f32,
    #[prost(float, tag = "14")]
    pub iiiodofedhc: f32,
    #[prost(float, tag = "9")]
    pub ddpbecjepei: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonsterWaveParam {
    #[prost(uint32, tag = "5")]
    pub phlbeclkbhh: u32,
    #[prost(uint32, tag = "2")]
    pub ailddaklbkk: u32,
    #[prost(uint32, tag = "13")]
    pub ochjfchenbe: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneMonster {
    #[prost(uint32, tag = "14")]
    pub max_hp: u32,
    #[prost(uint32, tag = "8")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterWave {
    #[prost(message, repeated, tag = "6")]
    pub monster_list: ::prost::alloc::vec::Vec<SceneMonster>,
    #[prost(message, repeated, tag = "2")]
    pub drop_list: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "12")]
    pub wave_id: u32,
    #[prost(message, optional, tag = "1")]
    pub wave_param: ::core::option::Option<SceneMonsterWaveParam>,
    #[prost(uint32, tag = "14")]
    pub monster_stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneBattleInfo {
    #[prost(message, repeated, tag = "14")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "3")]
    pub battle_id: u32,
    #[prost(message, optional, tag = "1768")]
    pub epecbkpmbhe: ::core::option::Option<Bimkjohkbno>,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
    #[prost(map = "uint32, message", tag = "1560")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(uint32, tag = "13")]
    pub rounds_limit: u32,
    #[prost(message, repeated, tag = "740")]
    pub event_battle_info_list: ::prost::alloc::vec::Vec<BattleEventBattleInfo>,
    #[prost(message, optional, tag = "715")]
    pub kahoekaefhd: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, repeated, tag = "5")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(uint32, tag = "9")]
    pub kalinkeddbe: u32,
    #[prost(message, optional, tag = "873")]
    pub dhndkifpolf: ::core::option::Option<Kejjggccgan>,
    #[prost(uint32, tag = "10")]
    pub logic_random_seed: u32,
    #[prost(message, repeated, tag = "2")]
    pub pve_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
    #[prost(bool, tag = "1")]
    pub nlbjkfnnonh: bool,
    #[prost(message, optional, tag = "1464")]
    pub lnefjmmomkb: ::core::option::Option<Hmcnjllhbli>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnakofpambi {
    #[prost(message, repeated, tag = "7")]
    pub pve_avatar_list: ::prost::alloc::vec::Vec<Phcbnlnifmi>,
    #[prost(uint32, tag = "10")]
    pub logic_random_seed: u32,
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "2")]
    pub battle_id: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(bool, tag = "14")]
    pub nlbjkfnnonh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhbgcjdcjkp {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "5")]
    pub assist_uid: u32,
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageGetDataScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub data: ::core::option::Option<ContentPackageData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageInfo {
    #[prost(enumeration = "ContentPackageStatus", tag = "11")]
    pub status: i32,
    #[prost(uint32, tag = "10")]
    pub map_entry_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageData {
    #[prost(uint32, tag = "6")]
    pub cur_content_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub content_package_list: ::prost::alloc::vec::Vec<ContentPackageInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackageSyncDataScNotify {
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<ContentPackageData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockCsReq {
    #[prost(uint32, tag = "4")]
    pub map_entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageUnlockScRsp {
    #[prost(uint32, tag = "9")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ContentPackageTransferScNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyActivityInfo {
    #[prost(bool, tag = "4")]
    pub is_has_taken: bool,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "14")]
    pub daily_active_point: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeApRewardCsReq {
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeApRewardScRsp {
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDailyActiveInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDailyActiveInfoScRsp {
    #[prost(uint32, repeated, tag = "6")]
    pub daily_active_quest_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub daily_active_point: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub daily_active_level_list: ::prost::alloc::vec::Vec<DailyActivityInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DailyActiveInfoNotify {
    #[prost(uint32, tag = "1")]
    pub daily_active_point: u32,
    #[prost(message, repeated, tag = "6")]
    pub daily_active_level_list: ::prost::alloc::vec::Vec<DailyActivityInfo>,
    #[prost(uint32, repeated, tag = "5")]
    pub daily_active_quest_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeAllApRewardCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAllApRewardScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ddfegmcdogf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerGuest {
    #[prost(uint32, tag = "10")]
    pub faith: u32,
    #[prost(uint32, tag = "15")]
    pub guest_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub unlocked_favor_tag_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnlhadcbnmn {
    #[prost(uint32, repeated, tag = "9")]
    pub mopihclmgmg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub goecahjkkip: u32,
    #[prost(uint32, tag = "15")]
    pub iiboboikpmg: u32,
    #[prost(uint32, tag = "4")]
    pub fhedfmpmhkl: u32,
    #[prost(uint32, tag = "8")]
    pub ednjjflaakb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fgmhfcnknbd {
    #[prost(uint32, tag = "6")]
    pub eidkhhgdpaa: u32,
    #[prost(bool, tag = "10")]
    pub is_succ: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDrinkMakerDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDrinkMakerDataScRsp {
    #[prost(uint32, tag = "3")]
    pub cninlajdehg: u32,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(message, optional, tag = "9")]
    pub cnfkhmnaamp: ::core::option::Option<Pnlhadcbnmn>,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub bbicfboedhg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub picfnhkdgmi: u32,
    #[prost(uint32, tag = "14")]
    pub cdmpamdgmhd: u32,
    #[prost(uint32, tag = "15")]
    pub jijkpfblgke: u32,
    #[prost(message, repeated, tag = "1")]
    pub fccomphnccp: ::prost::alloc::vec::Vec<DrinkMakerGuest>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeDrinkCsReq {
    #[prost(uint32, tag = "8")]
    pub jijkpfblgke: u32,
    #[prost(message, optional, tag = "3")]
    pub cmbknelnfem: ::core::option::Option<Pnlhadcbnmn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MakeDrinkScRsp {
    #[prost(bool, tag = "4")]
    pub is_succ: bool,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub next_chat_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceScRsp {
    #[prost(uint32, tag = "2")]
    pub next_sequence_id: u32,
    #[prost(message, optional, tag = "1")]
    pub guest: ::core::option::Option<DrinkMakerGuest>,
    #[prost(uint32, tag = "15")]
    pub tips: u32,
    #[prost(uint32, tag = "14")]
    pub exp: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub request_list: ::prost::alloc::vec::Vec<Fgmhfcnknbd>,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkCsReq {
    #[prost(bool, tag = "8")]
    pub kdfkcjlhhaf: bool,
    #[prost(uint32, tag = "10")]
    pub eidkhhgdpaa: u32,
    #[prost(message, optional, tag = "3")]
    pub cmbknelnfem: ::core::option::Option<Pnlhadcbnmn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkScRsp {
    #[prost(bool, tag = "12")]
    pub is_save: bool,
    #[prost(bool, tag = "9")]
    pub is_succ: bool,
    #[prost(message, optional, tag = "4")]
    pub custom_drink: ::core::option::Option<Pnlhadcbnmn>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DrinkMakerDayEndScNotify {
    #[prost(uint32, tag = "3")]
    pub pngdhfgnama: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerChallengeCsReq {
    #[prost(message, optional, tag = "3")]
    pub cmbknelnfem: ::core::option::Option<Pnlhadcbnmn>,
    #[prost(uint32, tag = "2")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerChallengeScRsp {
    #[prost(uint32, tag = "11")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "8")]
    pub is_succ: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DrinkMakerUpdateTipsNotify {
    #[prost(uint32, tag = "8")]
    pub picfnhkdgmi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "8")]
    pub avatar_type: i32,
    #[prost(double, tag = "4")]
    pub damage: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLevelInfo {
    #[prost(uint32, repeated, tag = "8")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub cur_game_exp: u32,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(uint32, tag = "9")]
    pub round_cnt: u32,
    #[prost(message, optional, tag = "4")]
    pub battle_info: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, repeated, tag = "6")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dofhmfaknab {
    #[prost(uint32, tag = "15")]
    pub stage_score: u32,
    #[prost(uint32, tag = "10")]
    pub djokadmhdhi: u32,
    #[prost(uint32, tag = "6")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcmnnkmofeb {
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub gjgfomcbmdo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjajebcdkic {
    #[prost(bool, tag = "7")]
    pub anlgjnnilpp: bool,
    #[prost(uint32, tag = "4")]
    pub ahcaojcbiom: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub mkcchdipnid: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub bingapciefo: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omjnofbiodo {
    #[prost(bool, tag = "7")]
    pub hfedllhaelk: bool,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub gjkhhfcboci: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub fkohmnmaanh: ::prost::alloc::vec::Vec<Hjajebcdkic>,
    #[prost(message, repeated, tag = "6")]
    pub edlhpfkpgef: ::prost::alloc::vec::Vec<Jcmnnkmofeb>,
    #[prost(message, repeated, tag = "2")]
    pub lmibndepfhi: ::prost::alloc::vec::Vec<Dofhmfaknab>,
    #[prost(uint32, tag = "13")]
    pub hemenibjabh: u32,
    #[prost(bool, tag = "10")]
    pub lffjpmccikd: bool,
    #[prost(uint32, tag = "14")]
    pub hojjfbaebda: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub kaboklbmclj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildQueryInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildQueryInfoScRsp {
    #[prost(message, optional, tag = "4")]
    pub bcbjpfikphg: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(message, optional, tag = "3")]
    pub rogue_current_info: ::core::option::Option<Omjnofbiodo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartLevelCsReq {
    #[prost(message, optional, tag = "15")]
    pub eolmimigfjj: ::core::option::Option<Fmnomcjdcii>,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(uint32, tag = "2")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartLevelScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub bcbjpfikphg: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(message, optional, tag = "4")]
    pub lllmlimhhal: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartStageCsReq {
    #[prost(uint32, tag = "8")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildStartStageScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub lllmlimhhal: ::core::option::Option<SceneBattleInfo>,
    #[prost(message, optional, tag = "3")]
    pub bcbjpfikphg: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildGiveupCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildGiveupScRsp {
    #[prost(message, optional, tag = "14")]
    pub bcbjpfikphg: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildLeaveCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLeaveScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub bcbjpfikphg: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildFinishScNotify {
    #[prost(uint32, tag = "6")]
    pub coin: u32,
    #[prost(uint32, tag = "15")]
    pub score: u32,
    #[prost(enumeration = "Nkaeanajhfl", tag = "7")]
    pub battle_result_type: i32,
    #[prost(message, optional, tag = "4")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "3")]
    pub cur_period_type: u32,
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(bool, tag = "11")]
    pub is_lose: bool,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "14")]
    pub level_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildReRandomStageCsReq {
    #[prost(uint32, tag = "7")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildReRandomStageScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub knadmfgdfhl: ::core::option::Option<Hjajebcdkic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityUpCsReq {
    #[prost(uint32, tag = "10")]
    pub gjgfomcbmdo: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityUpScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub gjgfomcbmdo: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityDownCsReq {
    #[prost(uint32, tag = "7")]
    pub gjgfomcbmdo: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityDownScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub gjgfomcbmdo: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildTakeExpRewardCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildTakeExpRewardScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub hemenibjabh: u32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityResetCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildShopAbilityResetScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub hojjfbaebda: u32,
    #[prost(message, repeated, tag = "14")]
    pub edlhpfkpgef: ::prost::alloc::vec::Vec<Jcmnnkmofeb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildCoinNotify {
    #[prost(uint32, tag = "12")]
    pub hojjfbaebda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EvolveBuildUnlockInfoNotify {
    #[prost(bool, tag = "6")]
    pub hfedllhaelk: bool,
    #[prost(bool, tag = "13")]
    pub lffjpmccikd: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojglgpgdepn {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "9")]
    pub ldcanaomena: i64,
    #[prost(uint32, tag = "3")]
    pub mjnpbcgcolb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityExpedition {
    #[prost(uint32, tag = "6")]
    pub iiadpleiigf: u32,
    #[prost(int64, tag = "7")]
    pub ldcanaomena: i64,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub jiljjmodlfp: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub biolpomjpid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetExpeditionDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetExpeditionDataScRsp {
    #[prost(message, repeated, tag = "7")]
    pub bafiollkbda: ::prost::alloc::vec::Vec<Ojglgpgdepn>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub lhjekcmhhhe: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub clfmfjglhmj: ::prost::alloc::vec::Vec<ActivityExpedition>,
    #[prost(uint32, repeated, tag = "3")]
    pub pblhkadpdgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub mdaoddemooc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub nmcpahlcpke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptExpeditionCsReq {
    #[prost(message, optional, tag = "3")]
    pub fijcndpgiee: ::core::option::Option<Ojglgpgdepn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AcceptExpeditionScRsp {
    #[prost(message, optional, tag = "14")]
    pub fijcndpgiee: ::core::option::Option<Ojglgpgdepn>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iiegljeaknb {
    #[prost(message, repeated, tag = "11")]
    pub jjhpaeddgpn: ::prost::alloc::vec::Vec<Ojglgpgdepn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgpiinebpfa {
    #[prost(message, repeated, tag = "1")]
    pub clcgiohdgoh: ::prost::alloc::vec::Vec<Ojglgpgdepn>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cemeiilpbjc {
    #[prost(uint32, tag = "7")]
    pub npnhjlgfmim: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeiaiggfijg {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub npnhjlgfmim: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idamdbpfell {
    #[prost(uint32, tag = "11")]
    pub npnhjlgfmim: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elkfobfelad {
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub hajejeflkjd: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub npnhjlgfmim: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ooookladpbj {
    #[prost(uint32, repeated, tag = "10")]
    pub nfookdhbfcl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfgejbalchh {
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "1")]
    pub fmekdbdkalm: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, repeated, tag = "8")]
    pub opbklacokca: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub abbcaaapeih: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub hajejeflkjd: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gniojccinkj {
    #[prost(uint32, repeated, tag = "9")]
    pub pblhkadpdgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub mdaoddemooc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub nmcpahlcpke: u32,
    #[prost(message, repeated, tag = "8")]
    pub bafiollkbda: ::prost::alloc::vec::Vec<Ojglgpgdepn>,
    #[prost(message, repeated, tag = "5")]
    pub clfmfjglhmj: ::prost::alloc::vec::Vec<ActivityExpedition>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kadmpajlpka {
    #[prost(message, optional, tag = "9")]
    pub fnmgnkenajo: ::core::option::Option<ActivityExpedition>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjbkldgfccl {
    #[prost(message, optional, tag = "5")]
    pub fnmgnkenajo: ::core::option::Option<ActivityExpedition>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oohbpinghli {
    #[prost(uint32, tag = "3")]
    pub idjnpoonene: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfmhhdfelll {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub idjnpoonene: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omoebmoahdd {
    #[prost(uint32, tag = "3")]
    pub idjnpoonene: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chfmafbdhhe {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub hajejeflkjd: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub idjnpoonene: u32,
    #[prost(uint32, tag = "12")]
    pub score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okancbhkaen {
    #[prost(uint32, repeated, tag = "15")]
    pub ebknbfchjmn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnhnjpomcld {
    #[prost(uint32, tag = "4")]
    pub idjnpoonene: u32,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub score: u32,
    #[prost(message, optional, tag = "11")]
    pub hajejeflkjd: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alfbdnpglco {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub fngghciaajc: ::prost::alloc::vec::Vec<Cnhnjpomcld>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldngjincbhn {
    #[prost(message, repeated, tag = "12")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ffmhchhhgba>,
    #[prost(uint32, repeated, tag = "4")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FantasticActivityData {
    #[prost(map = "uint32, uint32", tag = "14")]
    pub fdkclofjnje: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub lfglflfplbl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub kdhbokciglk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub kciebdmnjkp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub okokhdmfkha: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub aihbdnkbnmh: u32,
    #[prost(map = "uint32, message", tag = "15")]
    pub dafjjjjgpfg: ::std::collections::HashMap<u32, Ldngjincbhn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFantasticStoryActivityDataCsReq {
    #[prost(uint32, tag = "2")]
    pub aihbdnkbnmh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFantasticStoryActivityDataScRsp {
    #[prost(message, optional, tag = "14")]
    pub obhhhgocnne: ::core::option::Option<FantasticActivityData>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishChapterScNotify {
    #[prost(message, optional, tag = "11")]
    pub obhhhgocnne: ::core::option::Option<FantasticActivityData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffmhchhhgba {
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "6")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFantasticStoryActivityStageCsReq {
    #[prost(uint32, tag = "9")]
    pub battle_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ffmhchhhgba>,
    #[prost(uint32, repeated, tag = "8")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub aihbdnkbnmh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFantasticStoryActivityStageScRsp {
    #[prost(uint32, tag = "2")]
    pub battle_id: u32,
    #[prost(uint32, tag = "3")]
    pub aihbdnkbnmh: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FantasticStoryActivityBattleEndScNotify {
    #[prost(uint32, tag = "7")]
    pub jbjgmcnbmkk: u32,
    #[prost(uint32, tag = "15")]
    pub aihbdnkbnmh: u32,
    #[prost(uint32, tag = "11")]
    pub battle_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeActivityData {
    #[prost(enumeration = "FeverTimeActivityType", tag = "5")]
    pub activity_data_type: i32,
    #[prost(uint32, tag = "1")]
    pub knbamkjemfp: u32,
    #[prost(uint32, tag = "3")]
    pub dpdajbhiflb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFeverTimeActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFeverTimeActivityDataScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub activity_data: ::prost::alloc::vec::Vec<FeverTimeActivityData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeverTimeActivityBattleEndScNotify {
    #[prost(uint32, tag = "6")]
    pub lekifocpgib: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(enumeration = "FeverTimeActivityType", tag = "12")]
    pub activity_type: i32,
    #[prost(uint32, tag = "5")]
    pub bnehebmholi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFeverTimeActivityStageCsReq {
    #[prost(uint32, tag = "9")]
    pub eiejbkkongn: u32,
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<FeverTimeAvatar>,
    #[prost(uint32, tag = "10")]
    pub kgoilmimlme: u32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterFeverTimeActivityStageScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightEnterCsReq {
    #[prost(uint32, tag = "5")]
    pub omoghachnej: u32,
    #[prost(uint32, tag = "8")]
    pub platform_type: u32,
    #[prost(uint32, tag = "3")]
    pub gjbhjbflihf: u32,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(string, tag = "1")]
    pub nblpghlnihd: ::prost::alloc::string::String,
    #[prost(uint64, tag = "10")]
    pub icgbebaddbi: u64,
    #[prost(uint32, tag = "7")]
    pub client_res_version: u32,
    #[prost(uint32, tag = "2")]
    pub ibmfpjbhjii: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightEnterScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub omoghachnej: u32,
    #[prost(bool, tag = "1")]
    pub dapcakalmjb: bool,
    #[prost(uint64, tag = "11")]
    pub server_timestamp_ms: u64,
    #[prost(uint64, tag = "13")]
    pub secret_key_seed: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightLeaveScNotify {
    #[prost(uint32, tag = "15")]
    pub kcjgfimmpfg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightKickOutScNotify {
    #[prost(enumeration = "Coblnkdlhfd", tag = "14")]
    pub kick_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeartBeatCsReq {
    #[prost(uint64, tag = "6")]
    pub client_time_ms: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightHeartBeatScRsp {
    #[prost(uint64, tag = "1")]
    pub client_time_ms: u64,
    #[prost(uint64, tag = "6")]
    pub server_time_ms: u64,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FightSessionStopScNotify {
    #[prost(message, optional, tag = "14")]
    pub djnkckjmnil: ::core::option::Option<Mnfbaokfopm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivityGroup {
    #[prost(uint32, tag = "15")]
    pub passed_max_difficulty_level: u32,
    #[prost(uint32, tag = "4")]
    pub endless_max_wave: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub taken_difficulty_level_reward_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elndglobbhg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjpmjcfnfln {
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(map = "uint32, uint32", tag = "9")]
    pub hmepcmmkmep: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "14")]
    pub gjpdfdogmfe: bool,
    #[prost(message, repeated, tag = "11")]
    pub filofjlgane: ::prost::alloc::vec::Vec<FightActivityGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Doiceanabmn {
    #[prost(message, repeated, tag = "6")]
    pub filofjlgane: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(map = "uint32, uint32", tag = "5")]
    pub hmepcmmkmep: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcoejeofdon {
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnohafgnjbm {
    #[prost(message, repeated, tag = "15")]
    pub aakfbnjmlej: ::prost::alloc::vec::Vec<Dcoejeofdon>,
    #[prost(uint32, tag = "6")]
    pub kongaadejel: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkeijfdhloc {
    #[prost(uint32, tag = "6")]
    pub kongaadejel: u32,
    #[prost(message, optional, tag = "8")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omjhacgibfe {
    #[prost(uint32, tag = "1")]
    pub kongaadejel: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfdhpjblbkg {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub kongaadejel: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffdcmamkpab {
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "3")]
    pub lkgnkmkfnio: u32,
    #[prost(uint32, tag = "10")]
    pub knbamkjemfp: u32,
    #[prost(enumeration = "Khbfghpbacl", tag = "15")]
    pub activity_data_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mealplgoloj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olfcpkkcnof {
    #[prost(uint32, tag = "9")]
    pub score: u32,
    #[prost(message, repeated, tag = "7")]
    pub challenge_list: ::prost::alloc::vec::Vec<Ffdcmamkpab>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub odgnmlboeak: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub hojjfbaebda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pnjbcmkpnea {
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npbbojndeon {
    #[prost(uint32, tag = "1")]
    pub scene_event_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<Pnjbcmkpnea>,
    #[prost(uint32, repeated, tag = "14")]
    pub odgnmlboeak: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Mgomnjpdchn", tag = "5")]
    pub slot: i32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkpademkcge {
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(message, optional, tag = "4")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(enumeration = "Mgomnjpdchn", tag = "2")]
    pub slot: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Coglkmmlndd {
    #[prost(uint32, tag = "14")]
    pub oimhhcmkdkc: u32,
    #[prost(uint32, tag = "12")]
    pub score: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eplmligbdga {
    #[prost(uint32, tag = "13")]
    pub mknochkflif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mobkgfibbjk {
    #[prost(uint32, tag = "12")]
    pub lekifocpgib: u32,
    #[prost(uint32, tag = "11")]
    pub knbamkjemfp: u32,
    #[prost(enumeration = "Khbfghpbacl", tag = "4")]
    pub rank: i32,
    #[prost(uint32, tag = "8")]
    pub challenge_id: u32,
    #[prost(enumeration = "Khbfghpbacl", tag = "14")]
    pub peifbnamkjp: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bpihojalcmo {
    #[prost(uint32, tag = "7")]
    pub hojjfbaebda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmboaefmemp {
    #[prost(uint32, tag = "13")]
    pub score: u32,
    #[prost(uint32, tag = "4")]
    pub foehlabgicc: u32,
    #[prost(uint32, tag = "15")]
    pub rank: u32,
    #[prost(uint32, tag = "1")]
    pub gbkieekejkd: u32,
    #[prost(uint32, tag = "6")]
    pub hp: u32,
    #[prost(uint32, tag = "12")]
    pub kbnifchmaob: u32,
    #[prost(bool, tag = "14")]
    pub lhfpbnaiabi: bool,
    #[prost(enumeration = "Eofohacmkep", tag = "10")]
    pub state: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdceddgfbgf {
    #[prost(message, optional, tag = "8")]
    pub lgomodlbjeb: ::core::option::Option<Elamgbpkdfa>,
    #[prost(enumeration = "Fmbmhhbpodj", tag = "15")]
    pub ibcnifapfcm: i32,
    #[prost(message, repeated, tag = "12")]
    pub ecefbminbkj: ::prost::alloc::vec::Vec<Hmboaefmemp>,
    #[prost(uint32, repeated, tag = "9")]
    pub bamagimnbnk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub fclneekgejf: u32,
    #[prost(int32, tag = "13")]
    pub ncbnmlccbpg: i32,
    #[prost(uint64, tag = "5")]
    pub gjlbfnnojmd: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfejeedcdla {
    #[prost(uint32, tag = "10")]
    pub mfbjcjhngap: u32,
    #[prost(uint32, tag = "3")]
    pub ffniocfooei: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elamgbpkdfa {
    #[prost(uint32, tag = "2")]
    pub nmpblibmiao: u32,
    #[prost(uint32, tag = "5")]
    pub aiihhfjbmhd: u32,
    #[prost(uint32, tag = "8")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "3")]
    pub phcbicgeple: u32,
    #[prost(uint32, tag = "11")]
    pub ccmfconaogp: u32,
    #[prost(enumeration = "Eofohacmkep", tag = "12")]
    pub gdgneahclbe: i32,
    #[prost(message, optional, tag = "14")]
    pub jokeigfcdoi: ::core::option::Option<Mlbkadjebna>,
    #[prost(uint32, tag = "6")]
    pub ecpbmacjico: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub anocfakallp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub score: u32,
    #[prost(uint32, tag = "9")]
    pub bbboaiapocg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knejaloeeab {
    #[prost(message, optional, tag = "3")]
    pub haejkmcppon: ::core::option::Option<Elamgbpkdfa>,
    #[prost(enumeration = "Jdionhboidb", tag = "6")]
    pub aicaminahdc: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jobhbgldpjp {
    #[prost(int32, tag = "3")]
    pub ofkglabnano: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pajnbccnehd {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(message, optional, tag = "8")]
    pub data: ::core::option::Option<Jdceddgfbgf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddnpdloembh {
    #[prost(message, optional, tag = "11")]
    pub data: ::core::option::Option<Jdceddgfbgf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojjeinmchdc {
    #[prost(message, optional, tag = "7")]
    pub hecjonekfok: ::core::option::Option<Jdceddgfbgf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmclcpmiipd {
    #[prost(message, optional, tag = "4")]
    pub doahignlpkp: ::core::option::Option<Jdceddgfbgf>,
    #[prost(message, optional, tag = "1")]
    pub odjmfmhmjmi: ::core::option::Option<Jdceddgfbgf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mikbflponnk {
    #[prost(uint32, tag = "4")]
    pub nagkacachgd: u32,
    #[prost(message, optional, tag = "3")]
    pub mabdnfcabko: ::core::option::Option<Mfejeedcdla>,
    #[prost(message, optional, tag = "1")]
    pub bgcjoimpldn: ::core::option::Option<Mfejeedcdla>,
    #[prost(message, repeated, tag = "13")]
    pub pakcgemhbed: ::prost::alloc::vec::Vec<Knejaloeeab>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcbahmdpkhn {
    #[prost(bool, tag = "9")]
    pub hofbekabnnl: bool,
    #[prost(uint32, tag = "10")]
    pub nagkacachgd: u32,
    #[prost(message, optional, tag = "8")]
    pub nbekpgdilje: ::core::option::Option<Elamgbpkdfa>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ganplnanblp {
    #[prost(enumeration = "Eofohacmkep", tag = "1")]
    pub state: i32,
    #[prost(uint32, tag = "15")]
    pub kbnifchmaob: u32,
    #[prost(uint32, tag = "8")]
    pub fclneekgejf: u32,
    #[prost(uint32, tag = "13")]
    pub score: u32,
    #[prost(uint32, tag = "4")]
    pub hp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfhinnlnmod {
    #[prost(uint32, tag = "12")]
    pub eabkhffdakj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocbmmjcjpkg {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub eabkhffdakj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfaohjhkcfn {
    #[prost(uint32, tag = "14")]
    pub bdpfdkadbdh: u32,
    #[prost(uint32, tag = "4")]
    pub eabkhffdakj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ondmbcgebio {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<Jdceddgfbgf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AssistSimpleInfo {
    #[prost(uint32, tag = "3")]
    pub pos: u32,
    #[prost(uint32, tag = "11")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfihcdpghma {
    #[prost(uint32, tag = "2")]
    pub hlcdjblkode: u32,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "7")]
    pub mockiopkeke: u32,
    #[prost(uint32, tag = "1")]
    pub mlahpbdhpbj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbgmbghodgp {
    #[prost(uint32, tag = "15")]
    pub diekneefcfl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbmhkfkclnl {
    #[prost(uint32, tag = "14")]
    pub diekneefcfl: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub fncdopiibmp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boifniigmjg {
    #[prost(message, optional, tag = "10")]
    pub glenehdngcb: ::core::option::Option<Dbmhkfkclnl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aobgkpklnpo {
    #[prost(oneof = "aobgkpklnpo::Emdmglhddni", tags = "14, 13")]
    pub emdmglhddni: ::core::option::Option<aobgkpklnpo::Emdmglhddni>,
}
/// Nested message and enum types in `AOBGKPKLNPO`.
pub mod aobgkpklnpo {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Emdmglhddni {
        #[prost(message, tag = "14")]
        Ndkmfajoopg(super::Gbgmbghodgp),
        #[prost(message, tag = "13")]
        Jebimakipgf(super::Boifniigmjg),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okdhfhcggld {
    #[prost(enumeration = "DisplayRecordType", tag = "14")]
    pub nflbaibnmig: i32,
    #[prost(message, optional, tag = "3")]
    pub epiaillknci: ::core::option::Option<Aobgkpklnpo>,
    #[prost(message, optional, tag = "7")]
    pub gkcmikbhnpj: ::core::option::Option<Gfihcdpghma>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SimpleInfo {
    #[prost(bool, tag = "13")]
    pub is_banned: bool,
    #[prost(enumeration = "PlatformType", tag = "7")]
    pub platform_type: i32,
    #[prost(string, tag = "11")]
    pub cpemmcojkdg: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub poojfebmgkf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub chat_bubble_id: u32,
    #[prost(int64, tag = "5")]
    pub last_active_time: i64,
    #[prost(uint32, tag = "12")]
    pub head_icon: u32,
    #[prost(string, tag = "2")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(message, repeated, tag = "15")]
    pub assist_simple_info: ::prost::alloc::vec::Vec<AssistSimpleInfo>,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(string, tag = "9")]
    pub signature: ::prost::alloc::string::String,
    #[prost(enumeration = "FriendOnlineStatus", tag = "14")]
    pub online_status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayEquipmentInfo {
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(uint32, tag = "6")]
    pub tid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayRelicInfo {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub tid: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
    #[prost(uint32, tag = "6")]
    pub main_affix_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarDetailInfo {
    #[prost(message, repeated, tag = "4")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "7")]
    pub pos: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(uint32, tag = "13")]
    pub exp: u32,
    #[prost(uint32, tag = "2")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "14")]
    pub rank: u32,
    #[prost(message, repeated, tag = "15")]
    pub relic_list: ::prost::alloc::vec::Vec<DisplayRelicInfo>,
    #[prost(message, optional, tag = "9")]
    pub equipment: ::core::option::Option<DisplayEquipmentInfo>,
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerCollectionInfo {
    #[prost(uint32, tag = "5")]
    pub ljjhbmhgnbl: u32,
    #[prost(uint32, tag = "4")]
    pub nhiemdhcmoe: u32,
    #[prost(uint32, tag = "13")]
    pub ofgkgchgeca: u32,
    #[prost(uint32, tag = "1")]
    pub oohgfcakdoi: u32,
    #[prost(uint32, tag = "6")]
    pub lggdddlglig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerRecordInfo {
    #[prost(uint32, tag = "3")]
    pub olddndgidbe: u32,
    #[prost(uint32, tag = "1")]
    pub daaibghalgj: u32,
    #[prost(uint32, tag = "6")]
    pub fcpgomhfbcl: u32,
    #[prost(uint32, tag = "2")]
    pub adebllplfha: u32,
    #[prost(uint32, tag = "7")]
    pub aajheofgpeh: u32,
    #[prost(uint32, tag = "12")]
    pub mmjaglmakmo: u32,
    #[prost(uint32, tag = "4")]
    pub jilefggeabh: u32,
    #[prost(uint32, tag = "15")]
    pub kfkpjpjkjde: u32,
    #[prost(message, optional, tag = "9")]
    pub collection_info: ::core::option::Option<PlayerCollectionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerDisplaySettings {
    #[prost(bool, tag = "7")]
    pub bjadaljfkab: bool,
    #[prost(bool, tag = "11")]
    pub aafjgnnapfc: bool,
    #[prost(bool, tag = "12")]
    pub lealopkfppe: bool,
    #[prost(bool, tag = "4")]
    pub gigfgkbknjd: bool,
    #[prost(bool, tag = "9")]
    pub demobhbjndi: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oemipbdlkkd {
    #[prost(message, repeated, tag = "6")]
    pub challenge_list: ::prost::alloc::vec::Vec<Gfihcdpghma>,
    #[prost(message, optional, tag = "5")]
    pub epiaillknci: ::core::option::Option<Aobgkpklnpo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerDetailInfo {
    #[prost(message, optional, tag = "1987")]
    pub djbeckbjagc: ::core::option::Option<Oemipbdlkkd>,
    #[prost(uint32, tag = "10")]
    pub uid: u32,
    #[prost(bool, tag = "7")]
    pub show_display_avatars: bool,
    #[prost(uint32, tag = "15")]
    pub ghhfpejppjj: u32,
    #[prost(uint32, tag = "9")]
    pub pelcjgdfoko: u32,
    #[prost(string, tag = "14")]
    pub poojfebmgkf: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub signature: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub is_banned: bool,
    #[prost(enumeration = "PlatformType", tag = "6")]
    pub platform_type: i32,
    #[prost(message, repeated, tag = "554")]
    pub assist_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(message, optional, tag = "2040")]
    pub display_settings: ::core::option::Option<PlayerDisplaySettings>,
    #[prost(message, repeated, tag = "13")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(message, optional, tag = "3")]
    pub record_info: ::core::option::Option<PlayerRecordInfo>,
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub head_icon: u32,
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(string, tag = "1")]
    pub cpemmcojkdg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendListInfo {
    #[prost(enumeration = "PlayingState", tag = "8")]
    pub playing_state: i32,
    #[prost(int64, tag = "5")]
    pub sent_time: i64,
    #[prost(bool, tag = "7")]
    pub is_marked: bool,
    #[prost(string, tag = "9")]
    pub jcaipegogci: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "1")]
    pub gplmhjmklml: ::core::option::Option<Okdhfhcggld>,
    #[prost(message, optional, tag = "2")]
    pub simple_info: ::core::option::Option<SimpleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendApplyInfo {
    #[prost(int64, tag = "1")]
    pub jmbhbnfhgoe: i64,
    #[prost(message, optional, tag = "15")]
    pub simple_info: ::core::option::Option<SimpleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendRecommendInfo {
    #[prost(bool, tag = "12")]
    pub kmjbmkalnoj: bool,
    #[prost(message, optional, tag = "15")]
    pub simple_info: ::core::option::Option<SimpleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pimkbdjnkhn {
    #[prost(message, optional, tag = "11")]
    pub simple_info: ::core::option::Option<SimpleInfo>,
    #[prost(message, optional, tag = "6")]
    pub gnofbhalcga: ::core::option::Option<DisplayAvatarDetailInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilfbfgaepak {
    #[prost(string, tag = "4")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub head_icon: u32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform_type: i32,
    #[prost(string, tag = "8")]
    pub cpemmcojkdg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "7")]
    pub oekoddndjkn: u32,
    #[prost(string, tag = "1")]
    pub jcaipegogci: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dodbaealndi {
    #[prost(uint32, tag = "14")]
    pub highest_difficulty: u32,
    #[prost(string, tag = "7")]
    pub jcaipegogci: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub simple_info: ::core::option::Option<SimpleInfo>,
    #[prost(uint32, tag = "1")]
    pub ifcobclmeia: u32,
    #[prost(uint32, tag = "6")]
    pub pbclkhacean: u32,
    #[prost(uint32, tag = "8")]
    pub score: u32,
    #[prost(message, repeated, tag = "2")]
    pub lineup_list: ::prost::alloc::vec::Vec<ChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdcbfebjedh {
    #[prost(uint32, tag = "9")]
    pub hlcdjblkode: u32,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(oneof = "pdcbfebjedh::GroupInfoCase", tags = "199, 1020, 1142")]
    pub group_info_case: ::core::option::Option<pdcbfebjedh::GroupInfoCase>,
}
/// Nested message and enum types in `PDCBFEBJEDH`.
pub mod pdcbfebjedh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum GroupInfoCase {
        #[prost(message, tag = "199")]
        MemoryStats(super::ChallengeMemoryStats),
        #[prost(message, tag = "1020")]
        StoryStats(super::ChallengeStoryStats),
        #[prost(message, tag = "1142")]
        BossStats(super::ChallengeBossStats),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baejdhmjmkc {
    #[prost(uint32, tag = "10")]
    pub rouge_map_id: u32,
    #[prost(message, optional, tag = "11")]
    pub finish_info: ::core::option::Option<Ngblipaibaa>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnmnmfppjfm {
    #[prost(message, optional, tag = "7")]
    pub mlphbclbcip: ::core::option::Option<Hbhbaocchdf>,
    #[prost(uint32, tag = "11")]
    pub heikpmbpicb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eibompmnaol {
    #[prost(uint32, tag = "1")]
    pub area_id: u32,
    #[prost(uint32, tag = "8")]
    pub obhajgopiim: u32,
    #[prost(uint32, tag = "11")]
    pub hcpcpmibdmb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfdmeafkmgj {
    #[prost(uint32, tag = "14")]
    pub hgkbjceflgj: u32,
    #[prost(uint32, tag = "1")]
    pub area_id: u32,
    #[prost(uint32, tag = "4")]
    pub kifknccbfpc: u32,
    #[prost(uint32, tag = "6")]
    pub mfjibhimmel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmlipdgbhio {
    #[prost(uint32, tag = "2")]
    pub cjoleghdfkp: u32,
    #[prost(uint32, tag = "7")]
    pub area_id: u32,
    #[prost(uint32, tag = "13")]
    pub nfhpblnjfll: u32,
    #[prost(uint32, tag = "1")]
    pub aahhajpnenh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nglempdonfb {
    #[prost(message, optional, tag = "7")]
    pub dobmnoeefgn: ::core::option::Option<Hmlipdgbhio>,
    #[prost(message, optional, tag = "15")]
    pub dblmblplapi: ::core::option::Option<Bfdmeafkmgj>,
    #[prost(message, optional, tag = "11")]
    pub dnkpliaacpn: ::core::option::Option<Eibompmnaol>,
    #[prost(oneof = "nglempdonfb::Kibgfeloaaf", tags = "2010, 1943")]
    pub kibgfeloaaf: ::core::option::Option<nglempdonfb::Kibgfeloaaf>,
}
/// Nested message and enum types in `NGLEMPDONFB`.
pub mod nglempdonfb {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kibgfeloaaf {
        #[prost(message, tag = "2010")]
        Ebkehinmgco(super::Baejdhmjmkc),
        #[prost(message, tag = "1943")]
        Hohggpcgghn(super::Hnmnmfppjfm),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojnahkpkpcd {
    #[prost(uint32, tag = "8")]
    pub area_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfffljhifna {
    #[prost(uint32, tag = "2")]
    pub area_id: u32,
    #[prost(uint32, tag = "13")]
    pub jhjjflieodh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Laceknkgbld {
    #[prost(uint32, tag = "13")]
    pub challenge_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bohjmdplici {
    #[prost(int64, tag = "5")]
    pub time: i64,
    #[prost(enumeration = "Iedmioehmba", tag = "15")]
    pub ilipnklgcmb: i32,
    #[prost(
        oneof = "bohjmdplici::Cbkbadpjbjb",
        tags = "1730, 1372, 982, 367, 1036, 780, 1059"
    )]
    pub cbkbadpjbjb: ::core::option::Option<bohjmdplici::Cbkbadpjbjb>,
}
/// Nested message and enum types in `BOHJMDPLICI`.
pub mod bohjmdplici {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Cbkbadpjbjb {
        #[prost(message, tag = "1730")]
        Egkbahckpii(super::Ojnahkpkpcd),
        #[prost(message, tag = "1372")]
        Fngchiikign(super::Laceknkgbld),
        #[prost(uint32, tag = "982")]
        AvatarId(u32),
        #[prost(uint32, tag = "367")]
        Dcmfejjjfia(u32),
        #[prost(uint32, tag = "1036")]
        Bblhflgocoj(u32),
        #[prost(message, tag = "780")]
        Bpgffncjmgd(super::Kfffljhifna),
        #[prost(uint32, tag = "1059")]
        ModuleId(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub friend_list: ::prost::alloc::vec::Vec<FriendListInfo>,
    #[prost(message, repeated, tag = "2")]
    pub simple_info_list: ::prost::alloc::vec::Vec<SimpleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoCsReq {
    #[prost(uint32, tag = "14")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerDetailInfoScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub player_detail_info: ::core::option::Option<PlayerDetailInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendApplyListInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendApplyListInfoScRsp {
    #[prost(message, repeated, tag = "10")]
    pub friend_apply_list: ::prost::alloc::vec::Vec<FriendApplyInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub oibfpphbalk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyFriendCsReq {
    #[prost(uint32, tag = "6")]
    pub uid: u32,
    #[prost(enumeration = "FriendApplySource", tag = "5")]
    pub source: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ApplyFriendScRsp {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncApplyFriendScNotify {
    #[prost(message, optional, tag = "10")]
    pub friend_apply_info: ::core::option::Option<FriendApplyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HandleFriendCsReq {
    #[prost(bool, tag = "7")]
    pub handle_result: bool,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HandleFriendScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub uid: u32,
    #[prost(bool, tag = "10")]
    pub handle_result: bool,
    #[prost(message, optional, tag = "11")]
    pub handle_friend_info: ::core::option::Option<FriendListInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncHandleFriendScNotify {
    #[prost(message, optional, tag = "11")]
    pub handle_friend_info: ::core::option::Option<FriendListInfo>,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(bool, tag = "15")]
    pub handle_result: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteFriendCsReq {
    #[prost(uint32, tag = "8")]
    pub mdojkillgoc: u32,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteFriendScRsp {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncDeleteFriendScNotify {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddBlacklistCsReq {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddBlacklistScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub black_info: ::core::option::Option<SimpleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncAddBlacklistScNotify {
    #[prost(uint32, tag = "7")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendRecommendListInfoCsReq {
    #[prost(bool, tag = "6")]
    pub ljeepklgldm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendRecommendListInfoScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub friend_recommend_list: ::prost::alloc::vec::Vec<FriendRecommendInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFriendRemarkNameCsReq {
    #[prost(uint32, tag = "4")]
    pub reason: u32,
    #[prost(string, tag = "6")]
    pub jcaipegogci: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFriendRemarkNameScRsp {
    #[prost(string, tag = "6")]
    pub jcaipegogci: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportPlayerCsReq {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(uint32, tag = "6")]
    pub pbohgnkfcpe: u32,
    #[prost(string, tag = "8")]
    pub bgcpifkdjkh: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReportPlayerScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteBlacklistCsReq {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteBlacklistScRsp {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPlayerCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub search_uid_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "12")]
    pub ljeepklgldm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchPlayerScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub search_result_list: ::prost::alloc::vec::Vec<SimpleInfo>,
    #[prost(uint32, repeated, tag = "10")]
    pub oabbidhhmbg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistListCsReq {
    #[prost(bool, tag = "2")]
    pub ojleailaalk: bool,
    #[prost(bool, tag = "6")]
    pub ljeepklgldm: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssistListScRsp {
    #[prost(message, repeated, tag = "9")]
    pub dhjpbdpoidb: ::prost::alloc::vec::Vec<Pimkbdjnkhn>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAssistCsReq {
    #[prost(uint32, tag = "10")]
    pub uid: u32,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAssistScRsp {
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurAssistCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurAssistScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub bgoegenllok: ::core::option::Option<Pimkbdjnkhn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAssistHistoryCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAssistHistoryScRsp {
    #[prost(uint32, tag = "6")]
    pub gbmnlmlhiab: u32,
    #[prost(uint32, tag = "5")]
    pub ghgheahhagc: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub ljklkcgmjfe: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub bnfocplhdma: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NewAssistHistoryNotify {
    #[prost(uint32, tag = "7")]
    pub gbmnlmlhiab: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeAssistRewardCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeAssistRewardScRsp {
    #[prost(message, repeated, tag = "5")]
    pub mjkngjcjain: ::prost::alloc::vec::Vec<Ilfbfgaepak>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CurAssistChangedNotify {
    #[prost(message, optional, tag = "2")]
    pub bgoegenllok: ::core::option::Option<Pimkbdjnkhn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlatformPlayerInfoCsReq {
    #[prost(enumeration = "PlatformType", tag = "6")]
    pub platform_type: i32,
    #[prost(string, repeated, tag = "3")]
    pub jfpdphnfbkp: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlatformPlayerInfoScRsp {
    #[prost(message, repeated, tag = "13")]
    pub friend_recommend_list: ::prost::alloc::vec::Vec<SimpleInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendLoginInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendLoginInfoScRsp {
    #[prost(uint32, repeated, tag = "11")]
    pub ejbehjlbhii: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub fkgbnmfbhfl: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub hdhhkkcgegm: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub aecgglhngim: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetForbidOtherApplyFriendCsReq {
    #[prost(bool, tag = "1")]
    pub ahgjgkmokap: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetForbidOtherApplyFriendScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(bool, tag = "15")]
    pub ahgjgkmokap: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFriendMarkCsReq {
    #[prost(bool, tag = "6")]
    pub is_set_mark: bool,
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub reason: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetFriendMarkScRsp {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(bool, tag = "4")]
    pub is_set_mark: bool,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendAssistListCsReq {
    #[prost(uint32, repeated, tag = "1")]
    pub gbnlmlgmnnm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub sender_uid: u32,
    #[prost(enumeration = "Edldlhfdomi", tag = "13")]
    pub aopmalgekki: i32,
    #[prost(bool, tag = "6")]
    pub ljeepklgldm: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub jnekkdpnjcm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendAssistListScRsp {
    #[prost(message, repeated, tag = "13")]
    pub dhjpbdpoidb: ::prost::alloc::vec::Vec<Pimkbdjnkhn>,
    #[prost(uint32, tag = "11")]
    pub sender_uid: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeLineupCsReq {
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeLineupScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub chmlhbjhonk: bool,
    #[prost(message, repeated, tag = "5")]
    pub dceckpanhhb: ::prost::alloc::vec::Vec<Dodbaealndi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeDetailCsReq {
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendChallengeDetailScRsp {
    #[prost(message, repeated, tag = "10")]
    pub gaimpkmpkal: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "4")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendBattleRecordDetailCsReq {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendBattleRecordDetailScRsp {
    #[prost(message, repeated, tag = "11")]
    pub emjmijlcccf: ::prost::alloc::vec::Vec<Pdcbfebjedh>,
    #[prost(message, optional, tag = "2")]
    pub odoggcnmchg: ::core::option::Option<Nglempdonfb>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetFriendDevelopmentInfoCsReq {
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendDevelopmentInfoScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(message, repeated, tag = "10")]
    pub ebofgbnnomn: ::prost::alloc::vec::Vec<Bohjmdplici>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GachaCeilingAvatar {
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "6")]
    pub repeated_cnt: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaCeiling {
    #[prost(bool, tag = "1")]
    pub is_claimed: bool,
    #[prost(uint32, tag = "15")]
    pub ceiling_num: u32,
    #[prost(message, repeated, tag = "14")]
    pub avatar_list: ::prost::alloc::vec::Vec<GachaCeilingAvatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaInfo {
    #[prost(int64, tag = "13")]
    pub begin_time: i64,
    #[prost(string, tag = "8")]
    pub jgckohepjhp: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "4")]
    pub ackncehgnfi: u32,
    #[prost(message, optional, tag = "15")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "5")]
    pub klkaidfhbag: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub hdadmipmhfh: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "11")]
    pub jlleilpncca: ::prost::alloc::string::String,
    #[prost(uint32, repeated, tag = "10")]
    pub fkbdjaiebgn: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaInfoScRsp {
    #[prost(uint32, tag = "7")]
    pub nbkopnkcfeb: u32,
    #[prost(uint32, tag = "15")]
    pub kpcbhcbggko: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub gacha_info_list: ::prost::alloc::vec::Vec<GachaInfo>,
    #[prost(uint32, tag = "4")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "5")]
    pub lbgeogenkgg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoGachaCsReq {
    #[prost(uint32, tag = "5")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "1")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "6")]
    pub simulate_magic: u32,
    #[prost(uint32, tag = "8")]
    pub gacha_num: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaItem {
    #[prost(message, optional, tag = "4")]
    pub token_item: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "6")]
    pub is_new: bool,
    #[prost(message, optional, tag = "13")]
    pub gacha_item: ::core::option::Option<Item>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoGachaScRsp {
    #[prost(message, repeated, tag = "7")]
    pub gacha_item_list: ::prost::alloc::vec::Vec<GachaItem>,
    #[prost(uint32, tag = "15")]
    pub klkaidfhbag: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub gmmlaimhmmb: u32,
    #[prost(uint32, tag = "14")]
    pub gacha_id: u32,
    #[prost(uint32, tag = "2")]
    pub ackncehgnfi: u32,
    #[prost(uint32, tag = "5")]
    pub gacha_num: u32,
    #[prost(uint32, tag = "12")]
    pub nbkopnkcfeb: u32,
    #[prost(uint32, tag = "11")]
    pub ceiling_num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingCsReq {
    #[prost(uint32, tag = "2")]
    pub gacha_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGachaCeilingScRsp {
    #[prost(uint32, tag = "1")]
    pub gacha_type: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingCsReq {
    #[prost(uint32, tag = "3")]
    pub gacha_type: u32,
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeGachaCeilingScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub transfer_item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub gacha_ceiling: ::core::option::Option<GachaCeiling>,
    #[prost(uint32, tag = "13")]
    pub gacha_type: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Indblncpnob {
    #[prost(uint32, tag = "3")]
    pub jlfljlkdjdf: u32,
    #[prost(bool, tag = "5")]
    pub nkpapkakcgg: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lboclbhdijl {
    #[prost(bool, tag = "9")]
    pub phgidbalkah: bool,
    #[prost(enumeration = "Cponfeilmda", tag = "5")]
    pub step: i32,
    #[prost(enumeration = "Kcdhbdlnghj", tag = "14")]
    pub cekgpmkdnle: i32,
    #[prost(bool, tag = "4")]
    pub dedglpgjiah: bool,
    #[prost(uint32, tag = "12")]
    pub lceedigelgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hngojhbpfej {
    #[prost(uint32, tag = "9")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "5")]
    pub fiehekfmfkm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goigmaggflk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpllfefkfkg {
    #[prost(message, repeated, tag = "6")]
    pub adjkghmhomp: ::prost::alloc::vec::Vec<Indblncpnob>,
    #[prost(message, repeated, tag = "8")]
    pub iojobneinoe: ::prost::alloc::vec::Vec<Lboclbhdijl>,
    #[prost(message, repeated, tag = "7")]
    pub enelmhedjii: ::prost::alloc::vec::Vec<Hngojhbpfej>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(enumeration = "Dbekldhfdcg", tag = "9")]
    pub bdfeilabdhm: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdonmnbbbbm {
    #[prost(uint32, tag = "9")]
    pub lceedigelgm: u32,
    #[prost(enumeration = "Kcdhbdlnghj", tag = "7")]
    pub campfpoobkj: i32,
    #[prost(uint32, tag = "1")]
    pub ekjnikmmfle: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcajdeiccma {
    #[prost(uint32, tag = "11")]
    pub lceedigelgm: u32,
    #[prost(enumeration = "Kcdhbdlnghj", tag = "8")]
    pub acmmoojgope: i32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndfhfkknadc {
    #[prost(uint32, tag = "10")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "9")]
    pub ekjnikmmfle: u32,
    #[prost(message, optional, tag = "13")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kokngpecddh {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub lceedigelgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Djdaclhnkoc {
    #[prost(uint32, tag = "1")]
    pub ekjnikmmfle: u32,
    #[prost(uint32, tag = "9")]
    pub lceedigelgm: u32,
    #[prost(uint32, tag = "14")]
    pub jlfljlkdjdf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpaeegafamo {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub jlfljlkdjdf: u32,
    #[prost(uint32, tag = "6")]
    pub lceedigelgm: u32,
    #[prost(message, optional, tag = "11")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gilamkdngpo {
    #[prost(message, repeated, tag = "14")]
    pub nknnldmhodm: ::prost::alloc::vec::Vec<Indblncpnob>,
    #[prost(message, repeated, tag = "15")]
    pub nlnjijmhodg: ::prost::alloc::vec::Vec<Lboclbhdijl>,
    #[prost(message, repeated, tag = "9")]
    pub enelmhedjii: ::prost::alloc::vec::Vec<Hngojhbpfej>,
    #[prost(enumeration = "Dbekldhfdcg", tag = "3")]
    pub bdfeilabdhm: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ffcehddikfn {
    #[prost(message, optional, tag = "9")]
    pub penkifikiac: ::core::option::Option<Hngojhbpfej>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fepjiodeghh {
    #[prost(message, optional, tag = "12")]
    pub penkifikiac: ::core::option::Option<Hngojhbpfej>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjpjcclejlk {
    #[prost(uint32, tag = "10")]
    pub gbjflmmggln: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub paadmghaamj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jhohbgmhkpd {
    #[prost(uint32, tag = "7")]
    pub challenge_id: u32,
    #[prost(uint32, tag = "9")]
    pub stars: u32,
    #[prost(bool, tag = "11")]
    pub pmfjeckmaei: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusChallengeLineup {
    #[prost(uint32, repeated, tag = "2")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub skill_id: u32,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anfpjgmoiai {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iodlninlcnd {
    #[prost(uint32, tag = "11")]
    pub ncphfidnghe: u32,
    #[prost(message, repeated, tag = "1")]
    pub dlmkakfocgj: ::prost::alloc::vec::Vec<HeliobusChallengeLineup>,
    #[prost(message, repeated, tag = "5")]
    pub pchpmmdmbgf: ::prost::alloc::vec::Vec<Pddimhhhmkl>,
    #[prost(uint32, tag = "9")]
    pub emgaglpnllk: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub phase: u32,
    #[prost(message, optional, tag = "3")]
    pub kkikgppkhip: ::core::option::Option<Kjpjcclejlk>,
    #[prost(uint32, tag = "7")]
    pub kgkacgapgij: u32,
    #[prost(message, repeated, tag = "14")]
    pub challenge_list: ::prost::alloc::vec::Vec<Jhohbgmhkpd>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjcjjchallc {
    #[prost(message, repeated, tag = "15")]
    pub pkkaoibkiil: ::prost::alloc::vec::Vec<Hjcjjchallc>,
    #[prost(uint32, tag = "3")]
    pub iengagbchaa: u32,
    #[prost(uint32, tag = "13")]
    pub loejjlijdkg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pddimhhhmkl {
    #[prost(uint32, tag = "3")]
    pub ijiipgafkjn: u32,
    #[prost(bool, tag = "1")]
    pub kgknfemhjcb: bool,
    #[prost(message, repeated, tag = "11")]
    pub djoakhgkpdj: ::prost::alloc::vec::Vec<Hjcjjchallc>,
    #[prost(uint32, tag = "15")]
    pub llhphfmcaeb: u32,
    #[prost(uint32, tag = "12")]
    pub jhakineokkn: u32,
    #[prost(uint32, tag = "7")]
    pub lbjbeickmik: u32,
    #[prost(uint32, tag = "14")]
    pub mpbhamoobbp: u32,
    #[prost(bool, tag = "5")]
    pub mpflofnapnj: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bllakdkhkmo {
    #[prost(uint32, tag = "1")]
    pub ijiipgafkjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgokdkjlofl {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub ijiipgafkjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enompdimmfo {
    #[prost(uint32, tag = "5")]
    pub ijiipgafkjn: u32,
    #[prost(uint32, tag = "12")]
    pub jhakineokkn: u32,
    #[prost(uint32, tag = "14")]
    pub lbjbeickmik: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngikngdoinb {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub hmnmlonmpma: ::core::option::Option<Pddimhhhmkl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ambnfeljdmk {
    #[prost(uint32, tag = "7")]
    pub ijiipgafkjn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkbkmpemdll {
    #[prost(bool, tag = "10")]
    pub kgknfemhjcb: bool,
    #[prost(uint32, tag = "3")]
    pub ijiipgafkjn: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lngglcjngop {
    #[prost(uint32, tag = "15")]
    pub mndgedmdegf: u32,
    #[prost(uint32, tag = "3")]
    pub ijiipgafkjn: u32,
    #[prost(uint32, tag = "5")]
    pub iengagbchaa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcakbdgniid {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub hmnmlonmpma: ::core::option::Option<Pddimhhhmkl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dndbpdafefo {
    #[prost(message, repeated, tag = "11")]
    pub njjnamjgohd: ::prost::alloc::vec::Vec<Pddimhhhmkl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djhhhkdkomn {
    #[prost(uint32, tag = "12")]
    pub kgkacgapgij: u32,
    #[prost(message, repeated, tag = "5")]
    pub njjnamjgohd: ::prost::alloc::vec::Vec<Pddimhhhmkl>,
    #[prost(uint32, tag = "11")]
    pub ncphfidnghe: u32,
    #[prost(uint32, tag = "7")]
    pub phase: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iohhhjdgkeg {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mkmjjabfdhn {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dafaiklidda {
    #[prost(uint32, tag = "5")]
    pub gbjflmmggln: u32,
    #[prost(uint32, tag = "9")]
    pub skill_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fneahamihmf {
    #[prost(uint32, repeated, tag = "5")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "13")]
    pub skill_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlmiookaogm {
    #[prost(uint32, tag = "11")]
    pub scene_event_id: u32,
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nfdidnkeija {
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caplpoopffd {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emigncahgbb {
    #[prost(message, optional, tag = "11")]
    pub akfanijhpcn: ::core::option::Option<Jhohbgmhkpd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ennmdhgahcf {
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<HeliobusChallengeLineup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgjhiccdbkl {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(bool, tag = "5")]
    pub kdfkcjlhhaf: bool,
    #[prost(uint32, tag = "10")]
    pub febgedcclge: u32,
    #[prost(uint32, tag = "3")]
    pub odoajjgmbcl: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub skill_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmokhknkial {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub scene: ::core::option::Option<Gamnepoeghm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBagCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Equipment {
    #[prost(uint32, tag = "7")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub promotion: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub tid: u32,
    #[prost(uint32, tag = "12")]
    pub exp: u32,
    #[prost(bool, tag = "14")]
    pub is_protected: bool,
    #[prost(uint32, tag = "2")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relic {
    #[prost(uint32, tag = "4")]
    pub exp: u32,
    #[prost(uint32, tag = "2")]
    pub tid: u32,
    #[prost(uint32, tag = "7")]
    pub unique_id: u32,
    #[prost(uint32, tag = "11")]
    pub equip_avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(message, repeated, tag = "13")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(bool, tag = "9")]
    pub is_discarded: bool,
    #[prost(bool, tag = "8")]
    pub is_protected: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Material {
    #[prost(uint32, tag = "1")]
    pub tid: u32,
    #[prost(uint64, tag = "15")]
    pub expire_time: u64,
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WaitDelResource {
    #[prost(uint32, tag = "9")]
    pub tid: u32,
    #[prost(uint32, tag = "14")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Material0 {
    #[prost(uint32, tag = "9")]
    pub num: u32,
    #[prost(uint64, tag = "14")]
    pub expire_time: u64,
    #[prost(uint32, tag = "3")]
    pub tid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBagScRsp {
    #[prost(message, repeated, tag = "7")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(message, repeated, tag = "12")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(message, repeated, tag = "1")]
    pub llmkcdedifp: ::prost::alloc::vec::Vec<Material0>,
    #[prost(uint32, repeated, tag = "4")]
    pub djkhjfikmdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub dnmefonjhkk: ::prost::alloc::vec::Vec<Material0>,
    #[prost(uint32, tag = "15")]
    pub kcflkfdonpb: u32,
    #[prost(message, repeated, tag = "9")]
    pub pile_item_list: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, repeated, tag = "13")]
    pub odeebijlnbk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(uint32, repeated, tag = "10")]
    pub onomlhnjcfn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "14")]
    pub phpmpkoonjd: ::prost::alloc::vec::Vec<Material>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "6")]
    pub turn_food_switch: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "2")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentCsReq {
    #[prost(uint32, tag = "3")]
    pub equipment_unique_id: u32,
    #[prost(message, optional, tag = "13")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PromoteEquipmentScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockEquipmentCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub equipment_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "1")]
    pub is_locked: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockEquipmentScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UseItemCsReq {
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub nimodchidmo: u32,
    #[prost(uint32, tag = "4")]
    pub hbijfdimkbk: u32,
    #[prost(bool, tag = "10")]
    pub mlhbififhhk: bool,
    #[prost(uint32, tag = "6")]
    pub optional_reward_id: u32,
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub ajmlmlfljij: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UseItemScRsp {
    #[prost(message, optional, tag = "7")]
    pub aohpgcgdibg: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub afimlkgdgnj: u32,
    #[prost(uint64, tag = "9")]
    pub gaaimjlkdmb: u64,
    #[prost(uint32, tag = "13")]
    pub nimodchidmo: u32,
    #[prost(uint32, tag = "11")]
    pub hbijfdimkbk: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentCsReq {
    #[prost(message, optional, tag = "7")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "8")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RankUpEquipmentScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpEquipmentCsReq {
    #[prost(message, optional, tag = "1")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "12")]
    pub equipment_unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpEquipmentScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeItemCsReq {
    #[prost(uint32, tag = "4")]
    pub count: u32,
    #[prost(uint32, tag = "10")]
    pub compose_id: u32,
    #[prost(message, optional, tag = "14")]
    pub compose_item_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeItemScRsp {
    #[prost(uint32, tag = "6")]
    pub compose_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(message, optional, tag = "3")]
    pub return_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeSelectedRelicCsReq {
    #[prost(uint32, tag = "13")]
    pub compose_relic_id: u32,
    #[prost(message, optional, tag = "10")]
    pub compose_item_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "2")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "6")]
    pub count: u32,
    #[prost(uint32, tag = "9")]
    pub compose_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeSelectedRelicScRsp {
    #[prost(uint32, tag = "14")]
    pub compose_id: u32,
    #[prost(message, optional, tag = "9")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpRelicCsReq {
    #[prost(uint32, tag = "9")]
    pub relic_unique_id: u32,
    #[prost(message, optional, tag = "5")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExpUpRelicScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub return_item_list: ::prost::alloc::vec::Vec<PileItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LockRelicCsReq {
    #[prost(bool, tag = "6")]
    pub is_locked: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub gioodpoakkl: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub fjkgbmgllgl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LockRelicScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DiscardRelicCsReq {
    #[prost(bool, tag = "7")]
    pub fjkgbmgllgl: bool,
    #[prost(bool, tag = "6")]
    pub is_discard: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub gioodpoakkl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DiscardRelicScRsp {
    #[prost(bool, tag = "9")]
    pub is_discard: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellItemCsReq {
    #[prost(bool, tag = "1")]
    pub to_material: bool,
    #[prost(message, optional, tag = "4")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SellItemScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub return_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RechargeSuccNotify {
    #[prost(uint64, tag = "4")]
    pub month_card_outdate_time: u64,
    #[prost(string, tag = "2")]
    pub channel_order_no: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(string, tag = "15")]
    pub product_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinCsReq {
    #[prost(uint32, tag = "2")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AddEquipmentScNotify {
    #[prost(uint32, tag = "9")]
    pub dcmfejjjfia: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecyleTimeCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub ohpefieglib: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecyleTimeScRsp {
    #[prost(message, repeated, tag = "10")]
    pub llmkcdedifp: ::prost::alloc::vec::Vec<Material0>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ceklmngkdnm {
    #[prost(uint32, tag = "7")]
    pub igacjhckehc: u32,
    #[prost(uint32, tag = "8")]
    pub kmeciligbik: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComposeLimitNumCompleteNotify {
    #[prost(message, repeated, tag = "4")]
    pub ilbfoeckeeo: ::prost::alloc::vec::Vec<Ceklmngkdnm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Alonohknchc {
    #[prost(message, optional, tag = "14")]
    pub bfffhdjjhbo: ::core::option::Option<Ceklmngkdnm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestroyItemCsReq {
    #[prost(uint32, tag = "12")]
    pub item_count: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "9")]
    pub cur_item_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestroyItemScRsp {
    #[prost(uint32, tag = "2")]
    pub cur_item_count: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMarkItemListCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMarkItemListScRsp {
    #[prost(uint32, repeated, tag = "13")]
    pub fioelbemjab: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkItemCsReq {
    #[prost(bool, tag = "11")]
    pub plgklgbmbgh: bool,
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkItemScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
    #[prost(bool, tag = "10")]
    pub plgklgbmbgh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CancelMarkItemNotify {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTurnFoodNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub djkhjfikmdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "TurnFoodSwitch", repeated, tag = "8")]
    pub turn_food_switch: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetTurnFoodSwitchCsReq {
    #[prost(bool, tag = "9")]
    pub lokhmbeongm: bool,
    #[prost(enumeration = "TurnFoodSwitch", tag = "2")]
    pub gkjmggjjcfi: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetTurnFoodSwitchScRsp {
    #[prost(bool, tag = "4")]
    pub lokhmbeongm: bool,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(enumeration = "TurnFoodSwitch", tag = "10")]
    pub gkjmggjjcfi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GeneralVirtualItemDataNotify {
    #[prost(message, repeated, tag = "4")]
    pub fpmocjgieog: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(bool, tag = "1")]
    pub pcalcocehlm: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanIcon {
    #[prost(bool, tag = "7")]
    pub is_avatar_icon: bool,
    #[prost(uint32, tag = "3")]
    pub icon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlan {
    #[prost(uint32, tag = "12")]
    pub slot_index: u32,
    #[prost(bool, tag = "13")]
    pub is_marked: bool,
    #[prost(string, tag = "14")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "15")]
    pub update_timestamp: i64,
    #[prost(uint32, tag = "10")]
    pub avatar_id_on_create: u32,
    #[prost(message, optional, tag = "1")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(message, optional, tag = "9")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub relic_filter_plan_list: ::prost::alloc::vec::Vec<RelicFilterPlan>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanCsReq {
    #[prost(bool, tag = "11")]
    pub is_marked: bool,
    #[prost(message, optional, tag = "14")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(uint32, tag = "2")]
    pub avatar_id_on_create: u32,
    #[prost(string, tag = "10")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub plan: ::core::option::Option<RelicFilterPlan>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanCsReq {
    #[prost(uint32, tag = "9")]
    pub slot_index: u32,
    #[prost(oneof = "modify_relic_filter_plan_cs_req::InfoCase", tags = "1, 15, 14")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_cs_req::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanCsReq`.
pub mod modify_relic_filter_plan_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "1")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "15")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "14")]
        Settings(super::RelicFilterPlanSettings),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanScRsp {
    #[prost(uint32, tag = "9")]
    pub slot_index: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(int64, tag = "13")]
    pub update_timestamp: i64,
    #[prost(oneof = "modify_relic_filter_plan_sc_rsp::InfoCase", tags = "8, 14, 7")]
    pub info_case: ::core::option::Option<modify_relic_filter_plan_sc_rsp::InfoCase>,
}
/// Nested message and enum types in `ModifyRelicFilterPlanScRsp`.
pub mod modify_relic_filter_plan_sc_rsp {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(string, tag = "8")]
        Name(::prost::alloc::string::String),
        #[prost(message, tag = "14")]
        Icon(super::RelicFilterPlanIcon),
        #[prost(message, tag = "7")]
        Settings(super::RelicFilterPlanSettings),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanCsReq {
    #[prost(uint32, repeated, tag = "15")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub is_batch_op: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(bool, tag = "6")]
    pub fjkgbmgllgl: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub jmbljcifcon: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanCsReq {
    #[prost(uint32, repeated, tag = "15")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub is_mark: bool,
    #[prost(bool, tag = "14")]
    pub is_batch_op: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanScRsp {
    #[prost(bool, tag = "3")]
    pub is_mark: bool,
    #[prost(bool, tag = "14")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanClearNameScNotify {
    #[prost(uint32, tag = "3")]
    pub pfofhemgfkl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockedMusic {
    #[prost(bool, tag = "8")]
    pub is_unlock: bool,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetJukeboxDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetJukeboxDataScRsp {
    #[prost(uint32, tag = "5")]
    pub playing_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub music_list: ::prost::alloc::vec::Vec<UnlockedMusic>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayBackGroundMusicCsReq {
    #[prost(uint32, tag = "12")]
    pub play_music_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayBackGroundMusicScRsp {
    #[prost(uint32, tag = "8")]
    pub playing_id: u32,
    #[prost(uint32, tag = "5")]
    pub play_music_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockBackGroundMusicCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub req_unlock_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockBackGroundMusicScRsp {
    #[prost(message, repeated, tag = "8")]
    pub music_list: ::prost::alloc::vec::Vec<UnlockedMusic>,
    #[prost(uint32, repeated, tag = "5")]
    pub rsp_unlocked_ids: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialBackGroundMusicCsReq {
    #[prost(uint32, tag = "15")]
    pub dhbecikjppj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TrialBackGroundMusicScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub dhbecikjppj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStageLineupCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbbljmphpij {
    #[prost(uint32, tag = "14")]
    pub stage_type: u32,
    #[prost(uint32, tag = "13")]
    pub mboncfdgcng: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStageLineupScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub hnjcpgmgppf: ::prost::alloc::vec::Vec<Jbbljmphpij>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupAvatar {
    #[prost(uint32, tag = "10")]
    pub slot_type: u32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(uint32, tag = "15")]
    pub satiety: u32,
    #[prost(message, optional, tag = "14")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub hp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineupInfo {
    #[prost(uint32, repeated, tag = "10")]
    pub ogeeeoegmpg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<LineupAvatar>,
    #[prost(uint32, tag = "13")]
    pub gfkihhopjdg: u32,
    #[prost(uint32, tag = "3")]
    pub max_mp: u32,
    #[prost(uint32, tag = "2")]
    pub plane_id: u32,
    #[prost(uint32, tag = "12")]
    pub index: u32,
    #[prost(bool, tag = "4")]
    pub is_virtual: bool,
    #[prost(string, tag = "7")]
    pub name: ::prost::alloc::string::String,
    #[prost(bool, tag = "14")]
    pub ikncadidjma: bool,
    #[prost(uint32, tag = "6")]
    pub leader_slot: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub kacbngfcaog: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub pkllkanfmja: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub mp: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "5")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataScRsp {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupCsReq {
    #[prost(bool, tag = "5")]
    pub is_virtual: bool,
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "4")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "15")]
    pub plane_id: u32,
    #[prost(uint32, tag = "13")]
    pub slot_type: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "9")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "1")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct JoinLineupScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupCsReq {
    #[prost(enumeration = "ExtraLineupType", tag = "6")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(enumeration = "AvatarType", tag = "4")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "12")]
    pub index: u32,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "11")]
    pub is_virtual: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuitLineupScRsp {
    #[prost(bool, tag = "14")]
    pub feccpmonpnf: bool,
    #[prost(bool, tag = "2")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupCsReq {
    #[prost(uint32, tag = "6")]
    pub kanknkdggoa: u32,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "5")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "7")]
    pub index: u32,
    #[prost(uint32, tag = "8")]
    pub dpbmdhcpfol: u32,
    #[prost(bool, tag = "15")]
    pub is_virtual: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwapLineupScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncLineupNotify {
    #[prost(message, optional, tag = "8")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "SyncReason", repeated, tag = "12")]
    pub reason_list: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Deaobfmicga {
    #[prost(uint32, tag = "15")]
    pub hp: u32,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLineupAvatarDataScRsp {
    #[prost(message, repeated, tag = "2")]
    pub alnpnfiobep: ::prost::alloc::vec::Vec<Deaobfmicga>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderCsReq {
    #[prost(uint32, tag = "3")]
    pub slot_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderScRsp {
    #[prost(uint32, tag = "13")]
    pub slot_type: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexCsReq {
    #[prost(uint32, tag = "4")]
    pub index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SwitchLineupIndexScRsp {
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameCsReq {
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(string, tag = "13")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetLineupNameScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub index: u32,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataScRsp {
    #[prost(message, repeated, tag = "8")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "15")]
    pub cur_index: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VirtualLineupDestroyNotify {
    #[prost(uint32, tag = "11")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LineupSlotData {
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub slot_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceLineupCsReq {
    #[prost(uint32, tag = "11")]
    pub leader_slot: u32,
    #[prost(uint32, tag = "9")]
    pub index: u32,
    #[prost(message, repeated, tag = "6")]
    pub slot_data: ::prost::alloc::vec::Vec<LineupSlotData>,
    #[prost(enumeration = "ExtraLineupType", tag = "14")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "3")]
    pub gfkihhopjdg: u32,
    #[prost(bool, tag = "10")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReplaceLineupScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExtraLineupDestroyNotify {
    #[prost(enumeration = "ExtraLineupType", tag = "5")]
    pub extra_lineup_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VirtualLineupTrialAvatarChangeScNotify {
    #[prost(uint32, repeated, tag = "2")]
    pub hnelidcnccc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub nlhfllfpehe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub plane_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aekedkfakeb {
    #[prost(enumeration = "Gldklemmpmi", tag = "8")]
    pub djnelabfjlf: i32,
    #[prost(message, optional, tag = "6")]
    pub pdlahdeboil: ::core::option::Option<Jcednempmaj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mejnbnngife {
    #[prost(enumeration = "Gldklemmpmi", tag = "12")]
    pub djnelabfjlf: i32,
    #[prost(uint64, tag = "4")]
    pub hgmfeggjefb: u64,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajpjlgmndpi {
    #[prost(uint32, repeated, tag = "15")]
    pub search_uid_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkjbibpipen {
    #[prost(uint32, repeated, tag = "7")]
    pub search_uid_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lomkgommnma {
    #[prost(uint64, tag = "12")]
    pub hgmfeggjefb: u64,
    #[prost(message, optional, tag = "7")]
    pub pdlahdeboil: ::core::option::Option<Jcednempmaj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkdloebjhhf {
    #[prost(enumeration = "Gldklemmpmi", tag = "4")]
    pub djnelabfjlf: i32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint64, tag = "8")]
    pub hgmfeggjefb: u64,
    #[prost(message, repeated, tag = "13")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihkbapdnpbi {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Coeaadldlmn {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijhlhohnohj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oikegfpnimi {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kaeppnbeidg {
    #[prost(enumeration = "Jdhcfnpkphj", tag = "1")]
    pub slot: i32,
    #[prost(message, optional, tag = "5")]
    pub pdlahdeboil: ::core::option::Option<Jcednempmaj>,
    #[prost(uint32, tag = "13")]
    pub nlngjcjldfo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcihhomgfnj {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LobbySyncInfoScNotify {
    #[prost(message, repeated, tag = "13")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(enumeration = "Jdhcfnpkphj", tag = "10")]
    pub slot: i32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyKickOutCsReq {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyKickOutScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LobbyInviteScNotify {
    #[prost(uint32, tag = "8")]
    pub sender_chat: u32,
    #[prost(enumeration = "Gldklemmpmi", tag = "5")]
    pub djnelabfjlf: i32,
    #[prost(uint32, tag = "9")]
    pub hgmfeggjefb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flmdgdbchdd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaodidhaenm {
    #[prost(enumeration = "Gldklemmpmi", tag = "7")]
    pub djnelabfjlf: i32,
    #[prost(uint64, tag = "5")]
    pub agfnbilmnfc: u64,
    #[prost(uint64, tag = "3")]
    pub hgmfeggjefb: u64,
    #[prost(message, repeated, tag = "12")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMailCsReq {
    #[prost(uint32, tag = "9")]
    pub jflkbenigan: u32,
    #[prost(uint32, tag = "12")]
    pub fbfamhglmgc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMail {
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub expire_time: i64,
    #[prost(uint32, tag = "13")]
    pub template_id: u32,
    #[prost(string, tag = "8")]
    pub title: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "9")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "15")]
    pub is_read: bool,
    #[prost(string, tag = "11")]
    pub sender: ::prost::alloc::string::String,
    #[prost(enumeration = "MailType", tag = "12")]
    pub mail_type: i32,
    #[prost(string, repeated, tag = "7")]
    pub para_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "10")]
    pub time: i64,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMailScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub total_num: u32,
    #[prost(message, repeated, tag = "15")]
    pub notice_mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(bool, tag = "10")]
    pub is_end: bool,
    #[prost(message, repeated, tag = "14")]
    pub mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(uint32, tag = "3")]
    pub start: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadMailCsReq {
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkReadMailScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub optional_reward_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClientMailAttachmentItem {
    #[prost(uint32, tag = "6")]
    pub mail_id: u32,
    #[prost(uint32, tag = "8")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentScRsp {
    #[prost(uint32, repeated, tag = "6")]
    pub succ_mail_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub fail_mail_list: ::prost::alloc::vec::Vec<ClientMailAttachmentItem>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub attachment: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailScNotify {
    #[prost(uint32, repeated, tag = "5")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfolablbpmi {
    #[prost(bool, tag = "14")]
    pub pemhghgmhcl: bool,
    #[prost(int32, tag = "3")]
    pub lgchoinhldj: i32,
    #[prost(message, optional, tag = "10")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
    #[prost(message, repeated, tag = "4")]
    pub pnamfglfkai: ::prost::alloc::vec::Vec<Fflmodakjoc>,
    #[prost(uint32, tag = "15")]
    pub fphpejpobgj: u32,
    #[prost(message, repeated, tag = "8")]
    pub mooknnkoehl: ::prost::alloc::vec::Vec<Fcpocikpebn>,
    #[prost(message, optional, tag = "5")]
    pub lmmlddkkkai: ::core::option::Option<Jkeaofkcago>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pemfpdopafn {
    #[prost(uint32, tag = "12")]
    pub edmikimhmkc: u32,
    #[prost(uint32, tag = "11")]
    pub paigfplhmcm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkeaofkcago {
    #[prost(message, optional, tag = "8")]
    pub bmmjhbjopde: ::core::option::Option<Vector4>,
    #[prost(message, optional, tag = "11")]
    pub bkkcfmeljcd: ::core::option::Option<Vector>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Loopdhopfbo {
    #[prost(uint32, tag = "2")]
    pub lgchoinhldj: u32,
    #[prost(message, optional, tag = "6")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "13")]
    pub fphpejpobgj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jemediecijf {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub fphpejpobgj: u32,
    #[prost(uint32, tag = "1")]
    pub lgchoinhldj: u32,
    #[prost(uint32, tag = "14")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "8")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcpocikpebn {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub bmobdfechff: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmjagnocabd {
    #[prost(message, optional, tag = "1")]
    pub gkacbdjknko: ::core::option::Option<Fcpocikpebn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcgclpegkjc {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub gkacbdjknko: ::core::option::Option<Fcpocikpebn>,
    #[prost(message, optional, tag = "12")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fflmodakjoc {
    #[prost(uint32, tag = "15")]
    pub bmobdfechff: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(float, tag = "10")]
    pub olggpkdkgkg: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anahebdckip {
    #[prost(message, optional, tag = "7")]
    pub dfoaobfjnnb: ::core::option::Option<Fflmodakjoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jemljpikmon {
    #[prost(message, optional, tag = "13")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub dfoaobfjnnb: ::core::option::Option<Fflmodakjoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cdpboidpdcj {
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub bmobdfechff: u32,
    #[prost(message, optional, tag = "9")]
    pub lmmlddkkkai: ::core::option::Option<Jkeaofkcago>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oolnladfnhd {
    #[prost(uint32, tag = "5")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "11")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnhmbdagofk {
    #[prost(message, optional, tag = "13")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jbmnlmmnemi {
    #[prost(message, optional, tag = "9")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub client_pos_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpmpcbfnkkj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnbgocgokma {
    #[prost(bool, tag = "8")]
    pub jobjhnjjndi: bool,
    #[prost(uint32, tag = "5")]
    pub fphpejpobgj: u32,
    #[prost(message, repeated, tag = "9")]
    pub pnamfglfkai: ::prost::alloc::vec::Vec<Fflmodakjoc>,
    #[prost(message, optional, tag = "11")]
    pub lmmlddkkkai: ::core::option::Option<Jkeaofkcago>,
    #[prost(int32, tag = "7")]
    pub lgchoinhldj: i32,
    #[prost(message, optional, tag = "10")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub mooknnkoehl: ::prost::alloc::vec::Vec<Fcpocikpebn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ebkifahieek {
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "8")]
    pub lmmlddkkkai: ::core::option::Option<Jkeaofkcago>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aencgofojle {
    #[prost(uint32, tag = "9")]
    pub client_pos_version: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ichohklgifl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Daokmmjnigf {
    #[prost(message, optional, tag = "14")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkgooenmccc {
    #[prost(message, repeated, tag = "2")]
    pub mooknnkoehl: ::prost::alloc::vec::Vec<Fcpocikpebn>,
    #[prost(message, repeated, tag = "14")]
    pub pnamfglfkai: ::prost::alloc::vec::Vec<Fflmodakjoc>,
    #[prost(message, optional, tag = "13")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
    #[prost(int32, tag = "15")]
    pub lgchoinhldj: i32,
    #[prost(message, optional, tag = "12")]
    pub lmmlddkkkai: ::core::option::Option<Jkeaofkcago>,
    #[prost(bool, tag = "4")]
    pub jobjhnjjndi: bool,
    #[prost(uint32, tag = "5")]
    pub fphpejpobgj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnbdmlpgpph {
    #[prost(message, optional, tag = "1")]
    pub dfoaobfjnnb: ::core::option::Option<Fflmodakjoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcafckiglpk {
    #[prost(message, optional, tag = "9")]
    pub dfoaobfjnnb: ::core::option::Option<Fflmodakjoc>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub ccmfconaogp: ::core::option::Option<Pemfpdopafn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmcbcccapdj {
    #[prost(message, repeated, tag = "13")]
    pub pnamfglfkai: ::prost::alloc::vec::Vec<Fflmodakjoc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddliboofclg {
    #[prost(message, optional, tag = "8")]
    pub pdlahdeboil: ::core::option::Option<Jcednempmaj>,
    #[prost(enumeration = "Gldklemmpmi", tag = "10")]
    pub djnelabfjlf: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ololhchnclf {
    #[prost(message, optional, tag = "15")]
    pub pdlahdeboil: ::core::option::Option<Jcednempmaj>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Engbmpdncio {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnjdjhmecfp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeominaocph {
    #[prost(message, repeated, tag = "13")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oooachdbfoi {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oaonpkgfclo {
    #[prost(enumeration = "Gldklemmpmi", tag = "7")]
    pub djnelabfjlf: i32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint64, tag = "12")]
    pub hgmfeggjefb: u64,
    #[prost(uint64, tag = "2")]
    pub agfnbilmnfc: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ommgbmpdjbi {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ijplnnledfb {
    #[prost(uint32, tag = "13")]
    pub igedbpikhio: u32,
    #[prost(uint32, tag = "12")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ndkjdoacmag {
    #[prost(uint32, tag = "11")]
    pub hejkfmpbafp: u32,
    #[prost(uint32, tag = "5")]
    pub pos: u32,
    #[prost(uint32, tag = "15")]
    pub aiplkchckdl: u32,
    #[prost(uint32, tag = "14")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlmemdjggof {
    #[prost(message, repeated, tag = "13")]
    pub lggihkpmaen: ::prost::alloc::vec::Vec<Ijplnnledfb>,
    #[prost(map = "uint32, uint32", tag = "2")]
    pub gdihbjjjlkh: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "7")]
    pub jkggjelfobl: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "6")]
    pub neadhflpcjn: ::prost::alloc::vec::Vec<Ndkjdoacmag>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enciejngcmj {
    #[prost(message, optional, tag = "11")]
    pub dlldlldcibc: ::core::option::Option<Mlmemdjggof>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acnphmhockl {
    #[prost(map = "uint32, uint32", tag = "6")]
    pub gdihbjjjlkh: ::std::collections::HashMap<u32, u32>,
    #[prost(string, tag = "12")]
    pub lpdhkpconma: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub hejkfmpbafp: u32,
    #[prost(uint32, tag = "9")]
    pub ahcaojcbiom: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub onjoiodipki: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub aiplkchckdl: u32,
    #[prost(uint32, tag = "1")]
    pub igedbpikhio: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aiiohekhpnh {
    #[prost(uint32, tag = "1")]
    pub igedbpikhio: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljkggnfbomj {
    #[prost(message, optional, tag = "12")]
    pub dlldlldcibc: ::core::option::Option<Mlmemdjggof>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aocdehbefcn {
    #[prost(uint32, tag = "8")]
    pub aiplkchckdl: u32,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phckempeeef {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub pos: u32,
    #[prost(uint32, tag = "15")]
    pub aiplkchckdl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcMessageGroupCsReq {
    #[prost(uint32, repeated, tag = "10")]
    pub mpnhnfcmpdf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MessageItem {
    #[prost(uint32, tag = "3")]
    pub emejdlclhbp: u32,
    #[prost(uint32, tag = "6")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageSection {
    #[prost(uint32, tag = "2")]
    pub dcefigehhog: u32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(message, repeated, tag = "15")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(uint32, repeated, tag = "13")]
    pub omjdmfphlma: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Jenpnhigkdc", tag = "14")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageGroup {
    #[prost(enumeration = "Gbkepcmhcem", tag = "4")]
    pub status: i32,
    #[prost(uint32, tag = "13")]
    pub hhkglhalbed: u32,
    #[prost(int64, tag = "9")]
    pub oekoippimda: i64,
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(message, repeated, tag = "5")]
    pub nogpoddffdk: ::prost::alloc::vec::Vec<MessageSection>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcMessageGroupScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub nknjlklcnkg: ::prost::alloc::vec::Vec<MessageGroup>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNpcStatusCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcStatus {
    #[prost(uint32, tag = "4")]
    pub npc_id: u32,
    #[prost(bool, tag = "9")]
    pub gijjaepohgk: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStatus {
    #[prost(enumeration = "Gbkepcmhcem", tag = "5")]
    pub gmeljhbmfcd: i32,
    #[prost(int64, tag = "3")]
    pub oekoippimda: i64,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SectionStatus {
    #[prost(uint32, tag = "1")]
    pub section_id: u32,
    #[prost(enumeration = "Jenpnhigkdc", tag = "10")]
    pub dafgpnecihb: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcStatusScRsp {
    #[prost(message, repeated, tag = "13")]
    pub ljdclipclah: ::prost::alloc::vec::Vec<NpcStatus>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishItemIdCsReq {
    #[prost(uint32, tag = "11")]
    pub item_id: u32,
    #[prost(uint32, tag = "9")]
    pub emejdlclhbp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishItemIdScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub emejdlclhbp: u32,
    #[prost(uint32, tag = "2")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishSectionIdCsReq {
    #[prost(uint32, tag = "1")]
    pub section_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishSectionIdScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub section_id: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishPerformSectionIdCsReq {
    #[prost(uint32, tag = "14")]
    pub section_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishPerformSectionIdScRsp {
    #[prost(uint32, tag = "1")]
    pub section_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub item_list: ::prost::alloc::vec::Vec<MessageItem>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bekabpnfjhk {
    #[prost(uint32, tag = "9")]
    pub njaafdjbhch: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgnjpomhikj {
    #[prost(uint32, tag = "15")]
    pub njaafdjbhch: u32,
    #[prost(uint32, tag = "14")]
    pub edomaelnofg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnkbelfcdlj {
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "15")]
    pub ehpbnddihij: ::core::option::Option<Kgnjpomhikj>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhmjedmfbci {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbadpmmkjah {
    #[prost(message, repeated, tag = "6")]
    pub apgihhkaplg: ::prost::alloc::vec::Vec<Kgnjpomhikj>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjppfeelofb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empobpojone {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Babhhihljpb {
    #[prost(uint32, tag = "6")]
    pub jgllidacgpn: u32,
    #[prost(uint32, tag = "11")]
    pub slot: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub okcpamhgkld: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnnfdjggmif {
    #[prost(message, repeated, tag = "10")]
    pub innnoajnpgg: ::prost::alloc::vec::Vec<Babhhihljpb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhebjkakjei {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcnkknibkag {
    #[prost(uint32, repeated, tag = "13")]
    pub enkblefcoid: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, repeated, tag = "9")]
    pub oaphlehofkm: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "Gecdmpfblmf", tag = "4")]
    pub slot: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pomhikchdhm {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mohjedgclcn {
    #[prost(string, tag = "14")]
    pub ianckkgknco: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfafidcamcb {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecfephmplfi {
    #[prost(uint32, tag = "12")]
    pub ejgphojmgpn: u32,
    #[prost(uint32, tag = "6")]
    pub jpiokpfkngk: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(enumeration = "Bifnmmhlpmm", tag = "4")]
    pub slot: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjfkmcpmbde {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amfffbpadip {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub clnllgnfcdd: ::prost::alloc::vec::Vec<Ecfephmplfi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opbfbejfale {
    #[prost(message, optional, tag = "9")]
    pub jgdkkjnegoh: ::core::option::Option<Ecfephmplfi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ceehifnhccp {
    #[prost(message, optional, tag = "3")]
    pub jgdkkjnegoh: ::core::option::Option<Ecfephmplfi>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Omnjkhhdfli {
    #[prost(uint32, tag = "8")]
    pub dijmbpecnmc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddfjdgknpog {
    #[prost(uint32, tag = "12")]
    pub dijmbpecnmc: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lipoppcikoo {
    #[prost(uint32, tag = "4")]
    pub dghdcimgahi: u32,
    #[prost(bool, tag = "8")]
    pub odbfjnkmelf: bool,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub ejgphojmgpn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dljlhhcahjj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igcnehppfdj {
    #[prost(message, repeated, tag = "2")]
    pub jjkpejeehng: ::prost::alloc::vec::Vec<Lipoppcikoo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjjjimhbngg {
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub gchcegdkcmb: u32,
    #[prost(uint64, tag = "4")]
    pub lpdhkpconma: u64,
    #[prost(message, optional, tag = "7")]
    pub baccbpejepc: ::core::option::Option<Lipoppcikoo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iomenkibihd {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub baccbpejepc: ::core::option::Option<Lipoppcikoo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jllifgdbmio {
    #[prost(enumeration = "Aicolmmlejo", tag = "10")]
    pub gnfmiinppdo: i32,
    #[prost(enumeration = "Lkobdhkhnbe", tag = "11")]
    pub bjgnepeedln: i32,
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jodeojnihfp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pimlhlphplh {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub content_package_list: ::prost::alloc::vec::Vec<Jllifgdbmio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klbhcgjelim {
    #[prost(message, optional, tag = "13")]
    pub data: ::core::option::Option<Jllifgdbmio>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkjhgkmgkmn {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub data: ::core::option::Option<Jllifgdbmio>,
    #[prost(message, repeated, tag = "15")]
    pub content_package_list: ::prost::alloc::vec::Vec<Jllifgdbmio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionDataCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fcbmhigcmhl {
    #[prost(enumeration = "Ombkbbjghdf", tag = "10")]
    pub slot: i32,
    #[prost(uint32, tag = "2")]
    pub bpgofipcnla: u32,
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mission {
    #[prost(enumeration = "MissionStatus", tag = "6")]
    pub status: i32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, tag = "5")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MissionCustomValueData {
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(uint32, tag = "2")]
    pub custom_value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmidphojglb {
    #[prost(message, repeated, tag = "1")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValueData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionData {
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(message, repeated, tag = "8")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValueData>,
    #[prost(enumeration = "MissionStatus", tag = "6")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okbgmbeimcb {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(oneof = "okbgmbeimcb::Kacehfkbccl", tags = "1285")]
    pub kacehfkbccl: ::core::option::Option<okbgmbeimcb::Kacehfkbccl>,
}
/// Nested message and enum types in `OKBGMBEIMCB`.
pub mod okbgmbeimcb {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kacehfkbccl {
        #[prost(message, tag = "1285")]
        CustomValueList(super::Hmidphojglb),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Finbbokjbpl {
    #[prost(message, optional, tag = "1")]
    pub custom_value_list: ::core::option::Option<Hmidphojglb>,
    #[prost(uint32, tag = "6")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionDataScRsp {
    #[prost(message, repeated, tag = "5")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "12")]
    pub nknpekobhei: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub phjfnnjnadl: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub mission_data_list: ::prost::alloc::vec::Vec<MissionData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionCsReq {
    #[prost(uint32, tag = "8")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMainMissionScRsp {
    #[prost(uint32, tag = "13")]
    pub main_mission_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionCsReq {
    #[prost(string, tag = "11")]
    pub talk_str: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub sub_mission_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValueData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTalkMissionScRsp {
    #[prost(message, repeated, tag = "5")]
    pub custom_value_list: ::prost::alloc::vec::Vec<MissionCustomValueData>,
    #[prost(uint32, tag = "12")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(string, tag = "11")]
    pub talk_str: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionRewardScNotify {
    #[prost(uint32, tag = "11")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "12")]
    pub main_mission_id: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubMissionRewardScNotify {
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub sub_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskCsReq {
    #[prost(string, tag = "15")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncTaskScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(string, tag = "7")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyTask {
    #[prost(bool, tag = "8")]
    pub kookkcnhopj: bool,
    #[prost(uint32, tag = "4")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DailyTaskDataScNotify {
    #[prost(uint32, tag = "1")]
    pub dnlpcbdjgjn: u32,
    #[prost(message, repeated, tag = "14")]
    pub jhfionggcnd: ::prost::alloc::vec::Vec<DailyTask>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionGroupWarnScNotify {
    #[prost(uint32, repeated, tag = "10")]
    pub mofglicebfi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishCosumeItemMissionCsReq {
    #[prost(uint32, tag = "10")]
    pub sub_mission_id: u32,
    #[prost(message, optional, tag = "13")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishCosumeItemMissionScRsp {
    #[prost(uint32, tag = "13")]
    pub sub_mission_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMissionEventDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionEventDataScRsp {
    #[prost(uint32, tag = "3")]
    pub clleepcoajc: u32,
    #[prost(message, repeated, tag = "11")]
    pub nfcldjldoog: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionEventRewardScNotify {
    #[prost(uint32, tag = "5")]
    pub cbmbkgchmok: u32,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMissionEventCsReq {
    #[prost(uint32, tag = "12")]
    pub cbmbkgchmok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AcceptMissionEventScRsp {
    #[prost(message, optional, tag = "9")]
    pub fchmcghifkc: ::core::option::Option<Mission>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusCsReq {
    #[prost(uint32, repeated, tag = "5")]
    pub mission_event_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusScRsp {
    #[prost(uint32, repeated, tag = "2")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<Finbbokjbpl>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(message, repeated, tag = "4")]
    pub mission_event_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "9")]
    pub unfinished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub disabled_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InterruptMissionEventCsReq {
    #[prost(uint32, tag = "11")]
    pub cbmbkgchmok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InterruptMissionEventScRsp {
    #[prost(uint32, tag = "15")]
    pub cbmbkgchmok: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMissionEventProgressCsReq {
    #[prost(uint32, tag = "7")]
    pub progress: u32,
    #[prost(uint32, tag = "8")]
    pub cbmbkgchmok: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMissionEventProgressScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TeleportToMissionResetPointScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "2")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishSubMissionScNotify {
    #[prost(uint32, tag = "3")]
    pub sub_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartFinishMainMissionScNotify {
    #[prost(uint32, tag = "9")]
    pub main_mission_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueCsReq {
    #[prost(uint32, repeated, tag = "7")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMainMissionCustomValueScRsp {
    #[prost(message, repeated, tag = "6")]
    pub mission_data_list: ::prost::alloc::vec::Vec<MissionData>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MissionAcceptScNotify {
    #[prost(uint32, repeated, tag = "7")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTrackMainMissionIdCsReq {
    #[prost(enumeration = "Maomnippcdg", tag = "8")]
    pub kccjcmephnc: i32,
    #[prost(uint32, tag = "9")]
    pub phjfnnjnadl: u32,
    #[prost(uint32, tag = "5")]
    pub mleaojncefo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTrackMainMissionIdScRsp {
    #[prost(uint32, tag = "6")]
    pub phjfnnjnadl: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub cgkelccllel: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkogkoecojj {
    #[prost(uint32, repeated, tag = "10")]
    pub kaidmegmcda: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fihdfmadikp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khmbfljmfeh {
    #[prost(uint32, tag = "7")]
    pub fjckpholcmp: u32,
    #[prost(uint32, tag = "3")]
    pub hojjfbaebda: u32,
    #[prost(bool, tag = "8")]
    pub cijbainfghm: bool,
    #[prost(uint32, tag = "6")]
    pub cgkohgbniop: u32,
    #[prost(uint32, tag = "4")]
    pub kejfmmhdien: u32,
    #[prost(bool, tag = "14")]
    pub dpkkdndccng: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnogmpfhojj {
    #[prost(uint32, repeated, tag = "8")]
    pub holiaaeonpm: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Alaffglbomn", tag = "2")]
    pub kclfnjnhpjp: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iijddmkbaof {
    #[prost(uint32, tag = "11")]
    pub magokfgcjie: u32,
    #[prost(uint32, tag = "1")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjohnjojpoo {
    #[prost(bool, tag = "8")]
    pub nkecmfcfjak: bool,
    #[prost(uint64, tag = "6")]
    pub dccfjgkknfk: u64,
    #[prost(bool, tag = "5")]
    pub ddpikjkgjbl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmnhhnamoag {
    #[prost(string, tag = "845")]
    pub jpcfkhjmihh: ::prost::alloc::string::String,
    #[prost(uint64, tag = "2")]
    pub nhmmmneejnh: u64,
    #[prost(uint32, tag = "15")]
    pub deonhmiadda: u32,
    #[prost(message, repeated, tag = "8")]
    pub pimdcipjndf: ::prost::alloc::vec::Vec<Bjohnjojpoo>,
    #[prost(message, repeated, tag = "9")]
    pub ffhnbnemhpd: ::prost::alloc::vec::Vec<Iijddmkbaof>,
    #[prost(message, repeated, tag = "13")]
    pub pdpgpcnfeon: ::prost::alloc::vec::Vec<Iijddmkbaof>,
    #[prost(uint32, tag = "12")]
    pub mnakfnfjlfk: u32,
    #[prost(uint32, tag = "1")]
    pub dnpnfblcnlm: u32,
    #[prost(uint32, tag = "5")]
    pub kkmfonnhfoi: u32,
    #[prost(message, repeated, tag = "6")]
    pub djljpdbbbfj: ::prost::alloc::vec::Vec<Iijddmkbaof>,
    #[prost(uint32, tag = "7")]
    pub mhcfadkcknd: u32,
    #[prost(bool, tag = "11")]
    pub blnppngnghe: bool,
    #[prost(string, tag = "1660")]
    pub hddhmongjcc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub iaoppfcjagc: u32,
    #[prost(uint64, tag = "4")]
    pub dholgloihfd: u64,
    #[prost(message, repeated, tag = "10")]
    pub dipponcofgc: ::prost::alloc::vec::Vec<Iijddmkbaof>,
    #[prost(uint64, tag = "14")]
    pub illikocdjng: u64,
    #[prost(string, tag = "671")]
    pub cgphfkglcnk: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnlbmbdclmc {
    #[prost(message, repeated, tag = "13")]
    pub jdfbflldjpo: ::prost::alloc::vec::Vec<Fmnhhnamoag>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmnajbjjcjb {
    #[prost(message, optional, tag = "12")]
    pub mpbghkodkko: ::core::option::Option<Ihdeieeeiie>,
    #[prost(message, optional, tag = "13")]
    pub kjjefplafoa: ::core::option::Option<Mmghbjcibmn>,
    #[prost(message, optional, tag = "14")]
    pub pcegpdnbfln: ::core::option::Option<Lnlbmbdclmc>,
    #[prost(message, optional, tag = "9")]
    pub lhmkhbfolhe: ::core::option::Option<Nmoagfkbeie>,
    #[prost(message, optional, tag = "10")]
    pub stt: ::core::option::Option<Kpnoknohbkc>,
    #[prost(message, optional, tag = "3")]
    pub pgdambecanp: ::core::option::Option<Jaflgajchmg>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub lmmlddkkkai: ::core::option::Option<Klpnikbggho>,
    #[prost(message, optional, tag = "1")]
    pub konhpgkdhlk: ::core::option::Option<Nnogmpfhojj>,
    #[prost(message, optional, tag = "11")]
    pub gfoangjfdbi: ::core::option::Option<Pkicehgicig>,
    #[prost(uint32, repeated, tag = "5")]
    pub ndeaekhlmon: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub fheodgileep: ::core::option::Option<Bcdicbdjfhh>,
    #[prost(message, optional, tag = "15")]
    pub nboomommfbg: ::core::option::Option<Khmbfljmfeh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkicehgicig {
    #[prost(uint32, repeated, tag = "15")]
    pub hkabckcjobb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfhgaagdgbc {
    #[prost(message, optional, tag = "15")]
    pub gfoangjfdbi: ::core::option::Option<Pkicehgicig>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpnoknohbkc {
    #[prost(uint32, repeated, tag = "4")]
    pub jlodpaclgcb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub pnjnednemjl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aflmckflace {
    #[prost(message, optional, tag = "6")]
    pub stt: ::core::option::Option<Kpnoknohbkc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mabpaecjnnf {
    #[prost(uint32, tag = "7")]
    pub naimnifdkfj: u32,
    #[prost(bool, tag = "10")]
    pub behndlfnnih: bool,
    #[prost(uint32, tag = "8")]
    pub rouge_map_id: u32,
    #[prost(enumeration = "Bhejhnmaopf", tag = "9")]
    pub bjjgnifgbcf: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klpnikbggho {
    #[prost(uint32, tag = "1")]
    pub clngimnbhpg: u32,
    #[prost(message, repeated, tag = "9")]
    pub nanjofkielp: ::prost::alloc::vec::Vec<Mabpaecjnnf>,
    #[prost(message, repeated, tag = "11")]
    pub dcbdgncodgd: ::prost::alloc::vec::Vec<Mabpaecjnnf>,
    #[prost(message, optional, tag = "13")]
    pub ikkdelcfkgm: ::core::option::Option<Mabpaecjnnf>,
    #[prost(uint32, tag = "4")]
    pub aihabkfmigc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjofhienejg {
    #[prost(message, repeated, tag = "15")]
    pub dcbdgncodgd: ::prost::alloc::vec::Vec<Mabpaecjnnf>,
    #[prost(message, repeated, tag = "10")]
    pub nanjofkielp: ::prost::alloc::vec::Vec<Mabpaecjnnf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pljnheijamo {
    #[prost(uint32, tag = "10")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Debgldcagpf {
    #[prost(uint32, tag = "10")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khcokinaofi {
    #[prost(uint32, tag = "2")]
    pub scene_event_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub jolokjldabc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub pbalffcfpjd: u32,
    #[prost(uint32, tag = "7")]
    pub cmggjgkheob: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmchkimakhm {
    #[prost(uint32, tag = "4")]
    pub scene_event_id: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub jolokjldabc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub oeenamokfoo: u32,
    #[prost(uint32, tag = "5")]
    pub ielkkjbioja: u32,
    #[prost(uint32, tag = "13")]
    pub cmggjgkheob: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oidihjnbmck {
    #[prost(uint32, tag = "2")]
    pub kpnigocfnkj: u32,
    #[prost(message, repeated, tag = "13")]
    pub ooedlbaakpo: ::prost::alloc::vec::Vec<Adnejcjkbnf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ogmaenlbcdc {
    #[prost(uint32, tag = "3")]
    pub lndlaclkfhk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Feojmhifpch {
    #[prost(uint32, tag = "5")]
    pub shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nejfjfcooka {
    #[prost(uint32, tag = "9")]
    pub bjgbkgecded: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgbjapladoj {
    #[prost(uint32, tag = "12")]
    pub jhbjjffhpge: u32,
    #[prost(uint32, tag = "6")]
    pub pepdhcnohak: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adnejcjkbnf {
    #[prost(uint32, tag = "7")]
    pub cfnnmempike: u32,
    #[prost(oneof = "adnejcjkbnf::Ndjhpfbcfch", tags = "3, 15, 2, 5, 1, 13, 6, 4, 12")]
    pub ndjhpfbcfch: ::core::option::Option<adnejcjkbnf::Ndjhpfbcfch>,
}
/// Nested message and enum types in `ADNEJCJKBNF`.
pub mod adnejcjkbnf {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ndjhpfbcfch {
        #[prost(message, tag = "3")]
        Nmbjmljcpia(super::Pljnheijamo),
        #[prost(message, tag = "15")]
        Nichfnclgjp(super::Debgldcagpf),
        #[prost(message, tag = "2")]
        Jmjhmmjifkp(super::Khcokinaofi),
        #[prost(message, tag = "5")]
        Lfakcjhmbam(super::Ogmaenlbcdc),
        #[prost(message, tag = "1")]
        Hkjniiekedc(super::Feojmhifpch),
        #[prost(message, tag = "13")]
        Idjghdkaood(super::Nejfjfcooka),
        #[prost(message, tag = "6")]
        Odaieichlhb(super::Bgbjapladoj),
        #[prost(message, tag = "4")]
        Gmlkljennek(super::Jmchkimakhm),
        #[prost(message, tag = "12")]
        Nfchnchhkea(super::Oidihjnbmck),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmoagfkbeie {
    #[prost(message, optional, tag = "14")]
    pub npdagjmicmg: ::core::option::Option<Adnejcjkbnf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phnfcdedcjc {
    #[prost(message, optional, tag = "6")]
    pub npdagjmicmg: ::core::option::Option<Adnejcjkbnf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adkkiehbkmg {
    #[prost(message, optional, tag = "3")]
    pub ikkdelcfkgm: ::core::option::Option<Mabpaecjnnf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbbkoogfdka {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icnfaicgjog {
    #[prost(uint32, tag = "15")]
    pub pcggldljpli: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdmmmiekoem {
    #[prost(uint32, tag = "7")]
    pub pdhjaoblifk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eakacofdbnc {
    #[prost(uint32, tag = "11")]
    pub pdhjaoblifk: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcfompncngo {
    #[prost(uint32, tag = "3")]
    pub aajbkdedofp: u32,
    #[prost(uint32, tag = "9")]
    pub bnjgofngaja: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfamdmgepcg {
    #[prost(message, repeated, tag = "2")]
    pub bdljnbkiiep: ::prost::alloc::vec::Vec<Mabpaecjnnf>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub lmmlddkkkai: ::core::option::Option<Klpnikbggho>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dboopcjlbnk {
    #[prost(uint32, tag = "15")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "5")]
    pub pbalffcfpjd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhgenhnpjgi {
    #[prost(uint32, tag = "7")]
    pub lcjaihogeco: u32,
    #[prost(uint32, tag = "2")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "12")]
    pub pbalffcfpjd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akleefdmhdc {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub pjjihaoidll: ::prost::alloc::vec::Vec<Hhgenhnpjgi>,
    #[prost(message, optional, tag = "5")]
    pub lhmkhbfolhe: ::core::option::Option<Adnejcjkbnf>,
    #[prost(uint32, tag = "12")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "10")]
    pub pbalffcfpjd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdlcnjnmgdk {
    #[prost(uint32, tag = "11")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijiildkgjci {
    #[prost(message, optional, tag = "1")]
    pub lhmkhbfolhe: ::core::option::Option<Adnejcjkbnf>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igpgmlhkhoe {
    #[prost(uint32, tag = "4")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnbjjlhgjdg {
    #[prost(uint32, tag = "6")]
    pub scene_event_id: u32,
    #[prost(message, optional, tag = "2")]
    pub lhmkhbfolhe: ::core::option::Option<Adnejcjkbnf>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbmcikjinnb {
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpopbciglkh {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lhmkhbfolhe: ::core::option::Option<Adnejcjkbnf>,
    #[prost(uint32, tag = "14")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhlhggfgjmn {
    #[prost(uint32, tag = "9")]
    pub shop_id: u32,
    #[prost(uint32, tag = "4")]
    pub goods_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mifclbegmjm {
    #[prost(uint32, tag = "11")]
    pub shop_id: u32,
    #[prost(uint32, tag = "2")]
    pub goods_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mloocmcmbli {
    #[prost(uint32, tag = "3")]
    pub lndlaclkfhk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cljefpnnlpk {
    #[prost(uint32, tag = "8")]
    pub lndlaclkfhk: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obfbcphegca {
    #[prost(uint32, tag = "4")]
    pub map_entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flplkpedoaj {
    #[prost(uint32, tag = "12")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyActionResult {
    #[prost(uint32, tag = "12")]
    pub effect_type: u32,
    #[prost(uint32, tag = "14")]
    pub trigger_cell_id: u32,
    #[prost(enumeration = "Cabgohofgbm", tag = "13")]
    pub source_type: i32,
    #[prost(uint32, tag = "7")]
    pub click_cell_id: u32,
    #[prost(uint32, tag = "2")]
    pub click_map_id: u32,
    #[prost(message, optional, tag = "6")]
    pub detail: ::core::option::Option<Lomapikbdjf>,
    #[prost(uint32, tag = "5")]
    pub trigger_map_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llkffoplkbb {
    #[prost(message, repeated, tag = "1")]
    pub hapalbnobab: ::prost::alloc::vec::Vec<MonopolyActionResult>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kdjphdgepna {
    #[prost(bool, tag = "8")]
    pub cnpaiggfkei: bool,
    #[prost(uint32, tag = "10")]
    pub iimojdepjai: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lomapikbdjf {
    #[prost(
        oneof = "lomapikbdjf::Kbhfonliioh",
        tags = "14, 5, 6, 7, 15, 3, 4, 1, 2, 8, 9, 12, 10"
    )]
    pub kbhfonliioh: ::core::option::Option<lomapikbdjf::Kbhfonliioh>,
}
/// Nested message and enum types in `LOMAPIKBDJF`.
pub mod lomapikbdjf {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Kbhfonliioh {
        #[prost(message, tag = "14")]
        Mfjcllpeibd(super::Kliolgaikgl),
        #[prost(message, tag = "5")]
        Pbhmlemdiji(super::Kliolgaikgl),
        #[prost(message, tag = "6")]
        Cnghfdifoan(super::Allipfpoojf),
        #[prost(message, tag = "7")]
        Oopdgiejcha(super::Allipfpoojf),
        #[prost(message, tag = "15")]
        Mmekehmkeak(super::Lccknjajhpc),
        #[prost(message, tag = "3")]
        Clecggeikgn(super::Lccknjajhpc),
        #[prost(message, tag = "4")]
        Jblpdieacag(super::Fkbkpnioldm),
        #[prost(message, tag = "1")]
        Djkjhdpelgi(super::Fkbkpnioldm),
        #[prost(message, tag = "2")]
        Ecdnikdlekh(super::Kdjphdgepna),
        #[prost(message, tag = "8")]
        Edneleocceb(super::Nhejlmnmfgd),
        #[prost(message, tag = "9")]
        Ipficmbolpe(super::Lccknjajhpc),
        #[prost(message, tag = "12")]
        Mjefbajjljb(super::Fkbkpnioldm),
        #[prost(message, tag = "10")]
        Hekoccahpij(super::Ohbaaegpjjc),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohbaaegpjjc {
    #[prost(uint32, tag = "13")]
    pub lehnhdpaofe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kliolgaikgl {
    #[prost(uint32, tag = "4")]
    pub eafclnofmhb: u32,
    #[prost(uint32, tag = "8")]
    pub ehfnpfcacgj: u32,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkbkpnioldm {
    #[prost(uint32, tag = "4")]
    pub bglbhibokln: u32,
    #[prost(uint32, tag = "15")]
    pub pjbnfbfpnch: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhejlmnmfgd {
    #[prost(uint32, tag = "12")]
    pub geddcnndipl: u32,
    #[prost(uint32, tag = "1")]
    pub odoopnfldjo: u32,
    #[prost(uint32, tag = "10")]
    pub kgpcpppjpbf: u32,
    #[prost(uint32, tag = "9")]
    pub bdgcmdcgggj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lanmbahcfke {
    #[prost(uint32, tag = "15")]
    pub ckknagcaaig: u32,
    #[prost(uint32, tag = "2")]
    pub aaokeedkgpj: u32,
    #[prost(uint32, tag = "13")]
    pub config_id: u32,
    #[prost(oneof = "lanmbahcfke::Fedbgmhcicd", tags = "1, 3, 6")]
    pub fedbgmhcicd: ::core::option::Option<lanmbahcfke::Fedbgmhcicd>,
}
/// Nested message and enum types in `LANMBAHCFKE`.
pub mod lanmbahcfke {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Fedbgmhcicd {
        #[prost(message, tag = "1")]
        Ldnonlfgfed(super::Bmijkhmdcjj),
        #[prost(message, tag = "3")]
        Pmiaebiegmd(super::Fnkmgpnnpkc),
        #[prost(message, tag = "6")]
        Ebfcinomnlo(super::Lfdbbldbgfe),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihdeieeeiie {
    #[prost(message, optional, tag = "5")]
    pub igkdemohpbd: ::core::option::Option<Kdjphdgepna>,
    #[prost(message, optional, tag = "1")]
    pub fpaiogfflai: ::core::option::Option<Lanmbahcfke>,
    #[prost(message, repeated, tag = "6")]
    pub ojfeibbinnf: ::prost::alloc::vec::Vec<Lanmbahcfke>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkpcdnlihle {
    #[prost(message, optional, tag = "8")]
    pub cocdgffgckn: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub idjghdkaood: ::core::option::Option<Lanmbahcfke>,
    #[prost(message, optional, tag = "6")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kelhgdekjgf {
    #[prost(message, optional, tag = "12")]
    pub igkdemohpbd: ::core::option::Option<Kdjphdgepna>,
    #[prost(message, optional, tag = "10")]
    pub idjghdkaood: ::core::option::Option<Lanmbahcfke>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opdlbmjglkh {
    #[prost(uint32, tag = "2")]
    pub aaokeedkgpj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MonopolyGameRaiseRatioScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ratio: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emicdjmmfmj {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hiemkmmfinl {
    #[prost(message, optional, tag = "2")]
    pub kjjefplafoa: ::core::option::Option<Mmghbjcibmn>,
    #[prost(uint32, tag = "13")]
    pub bjdklpnhdbm: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(int64, tag = "9")]
    pub iekhfilhdpg: i64,
    #[prost(bool, tag = "8")]
    pub mmpjocdinmp: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Injimcaiiio {
    #[prost(bool, tag = "14")]
    pub mapodhkopol: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jlfebchdoin {
    #[prost(uint32, tag = "1")]
    pub dpommiebkfo: u32,
    #[prost(uint32, tag = "9")]
    pub fgchmccheod: u32,
    #[prost(uint32, tag = "15")]
    pub ohekkihejio: u32,
    #[prost(uint32, tag = "4")]
    pub goabehooebj: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub kikdjbedimb: u32,
    #[prost(int64, tag = "5")]
    pub iekhfilhdpg: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmijkhmdcjj {
    #[prost(bool, tag = "13")]
    pub fjekaihekpk: bool,
    #[prost(uint32, repeated, tag = "14")]
    pub ophnnmbckfj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub lfpecaahnic: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub imgggodplnn: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub hchckjinfdf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmloajgicbh {
    #[prost(uint32, tag = "4")]
    pub mfinkdiljgo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkmdjmdemeb {
    #[prost(uint32, tag = "3")]
    pub ekdnbekfecl: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(bool, tag = "13")]
    pub fjekaihekpk: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub lfpecaahnic: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acefaocpdlg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameGachaScRsp {
    #[prost(uint32, repeated, tag = "13")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Loaknmelphl {
    #[prost(uint32, tag = "2")]
    pub odbnkbogfep: u32,
    #[prost(uint32, tag = "5")]
    pub ogineodojdp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnkmgpnnpkc {
    #[prost(message, repeated, tag = "14")]
    pub ikoopcbpglg: ::prost::alloc::vec::Vec<Loaknmelphl>,
    #[prost(uint32, tag = "8")]
    pub jceoegmbffl: u32,
    #[prost(uint32, tag = "2")]
    pub ifhjlgpjcdk: u32,
    #[prost(uint32, tag = "13")]
    pub nhpfgpfpdop: u32,
    #[prost(uint32, tag = "5")]
    pub eekgdkfjkpm: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub pebmokcpdnf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mecgghigkcl {
    #[prost(message, repeated, tag = "4")]
    pub ikoopcbpglg: ::prost::alloc::vec::Vec<Loaknmelphl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moggcgckcog {
    #[prost(message, optional, tag = "6")]
    pub pmiaebiegmd: ::core::option::Option<Fnkmgpnnpkc>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbngoendlnm {
    #[prost(uint32, tag = "12")]
    pub ohjfggejank: u32,
    #[prost(uint32, tag = "7")]
    pub gnillngmmkg: u32,
    #[prost(uint32, tag = "3")]
    pub jceoegmbffl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebebabfpbgb {
    #[prost(message, repeated, tag = "8")]
    pub fpebfcpdiak: ::prost::alloc::vec::Vec<Lbngoendlnm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfdbbldbgfe {
    #[prost(uint32, tag = "2")]
    pub nijnjbfimmb: u32,
    #[prost(uint32, tag = "1")]
    pub gppjcccogbd: u32,
    #[prost(bool, tag = "10")]
    pub nhjiljfhmlb: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pemichmkaaa {
    #[prost(uint32, tag = "1")]
    pub nijnjbfimmb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnfeegkbhpd {
    #[prost(uint32, tag = "11")]
    pub nijnjbfimmb: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpnjlgflnkl {
    #[prost(uint32, tag = "5")]
    pub gppjcccogbd: u32,
    #[prost(message, optional, tag = "1")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub idnjklhpnli: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Offdjlfdkbe {
    #[prost(message, repeated, tag = "9")]
    pub ikpmcnfgkeg: ::prost::alloc::vec::Vec<Kpnjlgflnkl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dlmophejlao {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mcjjhgbnedf {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Allipfpoojf {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub lndlaclkfhk: u32,
    #[prost(uint32, tag = "7")]
    pub cmimpejmahk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jaflgajchmg {
    #[prost(message, repeated, tag = "7")]
    pub kpmhdhedfec: ::prost::alloc::vec::Vec<Allipfpoojf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmghbjcibmn {
    #[prost(uint32, tag = "3")]
    pub kdgioomhemo: u32,
    #[prost(bool, tag = "12")]
    pub mlejnmfknof: bool,
    #[prost(uint32, tag = "14")]
    pub lkjkgcegcng: u32,
    #[prost(uint32, tag = "15")]
    pub miiehbaidip: u32,
    #[prost(uint32, tag = "11")]
    pub lgkiepgejmn: u32,
    #[prost(uint32, tag = "8")]
    pub mcglmllcgfh: u32,
    #[prost(uint32, tag = "5")]
    pub jaedjdflmja: u32,
    #[prost(uint32, tag = "7")]
    pub fdolbajdpnp: u32,
    #[prost(uint32, tag = "2")]
    pub ihdaipjlebf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lanbfejbboi {
    #[prost(message, optional, tag = "3")]
    pub kjjefplafoa: ::core::option::Option<Mmghbjcibmn>,
    #[prost(uint32, tag = "12")]
    pub bjdklpnhdbm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lccknjajhpc {
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "9")]
    pub ofckkggnefk: u32,
    #[prost(uint32, tag = "10")]
    pub cfnnmempike: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcdicbdjfhh {
    #[prost(message, repeated, tag = "7")]
    pub buff_list: ::prost::alloc::vec::Vec<Lccknjajhpc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meeeddfniei {
    #[prost(uint32, tag = "6")]
    pub haggcklbiik: u32,
    #[prost(uint32, tag = "13")]
    pub dcenhejpnno: u32,
    #[prost(uint32, tag = "10")]
    pub kdgioomhemo: u32,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "4")]
    pub ihdaipjlebf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nclhommangk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkflcjboppk {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub hocameekcji: ::prost::alloc::vec::Vec<Meeeddfniei>,
    #[prost(message, optional, tag = "7")]
    pub ofipmifbhgi: ::core::option::Option<Meeeddfniei>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcabimcmdhh {
    #[prost(uint32, tag = "6")]
    pub icfeegeiiob: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjcnhokeljj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub icfeegeiiob: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekncofnpcod {
    #[prost(uint32, repeated, tag = "7")]
    pub holiaaeonpm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub haggcklbiik: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dbjmcaomgmp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ombpaigkbpm {
    #[prost(uint32, tag = "14")]
    pub cnt: u32,
    #[prost(uint32, tag = "9")]
    pub bhmbpcmidcn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjkdmlfnifg {
    #[prost(bool, tag = "5")]
    pub nkecmfcfjak: bool,
    #[prost(message, repeated, tag = "6")]
    pub ojpjilingje: ::prost::alloc::vec::Vec<Ombpaigkbpm>,
    #[prost(message, repeated, tag = "8")]
    pub pjjihaoidll: ::prost::alloc::vec::Vec<Hhgenhnpjgi>,
    #[prost(bool, tag = "4")]
    pub hnchhlbkjbp: bool,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(int32, tag = "9")]
    pub edenepiiegl: i32,
    #[prost(int32, tag = "14")]
    pub hbjgcjmfmkb: i32,
    #[prost(uint32, tag = "1")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmhdjmgajnk {
    #[prost(uint32, tag = "5")]
    pub biolpomjpid: u32,
    #[prost(bool, tag = "4")]
    pub hejebmeifek: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbhkggcmebc {
    #[prost(uint32, tag = "11")]
    pub jhbjjffhpge: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub pepdhcnohak: u32,
    #[prost(message, optional, tag = "1")]
    pub ikkdelcfkgm: ::core::option::Option<Mabpaecjnnf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SocialEventServerCache {
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub sub_coin: u32,
    #[prost(uint32, tag = "12")]
    pub src_uid: u32,
    #[prost(uint32, tag = "13")]
    pub add_coin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppikogjpmam {
    #[prost(message, repeated, tag = "14")]
    pub ncncgbellmn: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkjeeaahjao {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjngpgpidma {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub ncncgbellmn: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kampllgpgfg {
    #[prost(uint32, repeated, tag = "8")]
    pub jbmakppfcja: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nakemplpcjl {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ihbphlkcemp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnkdkmhdepl {
    #[prost(uint32, tag = "14")]
    pub mnakfnfjlfk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oagegoddmie {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub mnakfnfjlfk: u32,
    #[prost(message, repeated, tag = "9")]
    pub gedfjbefkpi: ::prost::alloc::vec::Vec<Bjohnjojpoo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kblgmfagjjh {
    #[prost(uint64, tag = "5")]
    pub abjchbjjmio: u64,
    #[prost(uint32, tag = "7")]
    pub mnakfnfjlfk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edmpfepnojd {
    #[prost(message, optional, tag = "1")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub mnakfnfjlfk: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub abjchbjjmio: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Joccipnepjh {
    #[prost(uint64, tag = "9")]
    pub abjchbjjmio: u64,
    #[prost(uint32, tag = "6")]
    pub mnakfnfjlfk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adpkocihiad {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub mnakfnfjlfk: u32,
    #[prost(uint64, tag = "5")]
    pub abjchbjjmio: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iihoffmpkll {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Johkcpdmjib {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub dcenhejpnno: u32,
    #[prost(uint32, tag = "11")]
    pub bbfkkpbmfco: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oacghleafjh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gedljgjhodm {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub pcegpdnbfln: ::core::option::Option<Lnlbmbdclmc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngienpcgkga {
    #[prost(uint32, repeated, tag = "7")]
    pub oacganomfmm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjkjooafaog {
    #[prost(uint32, repeated, tag = "15")]
    pub oacganomfmm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fedaecimcie {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abgccdkdokm {
    #[prost(message, optional, tag = "1")]
    pub eihnmcknpap: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Danpcjafjde {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Johaabjijom {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub kjjefplafoa: ::core::option::Option<Mmghbjcibmn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcmappbnibj {
    #[prost(uint32, tag = "10")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "15")]
    pub rouge_map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmloapjfpmh {
    #[prost(uint32, tag = "14")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub rouge_map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onjgigjacbk {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jjmofkihjkb {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Adhnmilhmhg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfkbhamnngb {
    #[prost(message, repeated, tag = "14")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(message, optional, tag = "11")]
    pub djnkckjmnil: ::core::option::Option<Mnfbaokfopm>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npejeefnegp {
    #[prost(uint32, tag = "11")]
    pub ofkglabnano: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffcogdoaldg {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(string, tag = "6")]
    pub kliagnafndc: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub nblpghlnihd: ::prost::alloc::string::String,
    #[prost(uint64, tag = "9")]
    pub agfnbilmnfc: u64,
    #[prost(uint32, tag = "14")]
    pub okbibjmloao: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oplmkbbopfb {
    #[prost(uint64, tag = "2")]
    pub agfnbilmnfc: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbpdphbioik {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klejfconfgj {
    #[prost(message, repeated, tag = "9")]
    pub lkljkgklhid: ::prost::alloc::vec::Vec<Dbbloflaamh>,
    #[prost(message, optional, tag = "5")]
    pub djnkckjmnil: ::core::option::Option<Mnfbaokfopm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmiabkndbcj {
    #[prost(message, optional, tag = "8")]
    pub djnkckjmnil: ::core::option::Option<Mnfbaokfopm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heofnbppogg {
    #[prost(uint32, tag = "11")]
    pub hpmebecheen: u32,
    #[prost(message, optional, tag = "3")]
    pub jokeigfcdoi: ::core::option::Option<Mlbkadjebna>,
    #[prost(uint32, tag = "2")]
    pub gibbahjjdij: u32,
    #[prost(enumeration = "Jpedgmmiifj", tag = "6")]
    pub reason: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pghddfckoel {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hlioonjhgnl {
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(uint32, tag = "10")]
    pub becpgbhcabl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofgeibhkmip {
    #[prost(message, repeated, tag = "14")]
    pub afhhfngfifd: ::prost::alloc::vec::Vec<Phhkpjjdldj>,
    #[prost(message, repeated, tag = "5")]
    pub kogbmiokggl: ::prost::alloc::vec::Vec<Hlioonjhgnl>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhdajjcchmh {
    #[prost(message, repeated, tag = "4")]
    pub kogbmiokggl: ::prost::alloc::vec::Vec<Hlioonjhgnl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkboeinoaie {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmlbjcldmlg {
    #[prost(uint32, tag = "8")]
    pub ilcbonoaobh: u32,
    #[prost(uint32, tag = "5")]
    pub module_id: u32,
    #[prost(uint32, tag = "10")]
    pub dgdjbaebdad: u32,
    #[prost(uint32, tag = "1")]
    pub nomhfeppjhn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phhkpjjdldj {
    #[prost(uint32, tag = "13")]
    pub ljbbgbbknde: u32,
    #[prost(uint32, tag = "3")]
    pub jdbkmaacmmk: u32,
    #[prost(uint32, tag = "2")]
    pub module_id: u32,
    #[prost(uint32, tag = "15")]
    pub okcphfonbhi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edbkephhakd {
    #[prost(message, optional, tag = "6")]
    pub bldjfjebjam: ::core::option::Option<Jmlbjcldmlg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub afhhfngfifd: ::prost::alloc::vec::Vec<Phhkpjjdldj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggildokjapi {
    #[prost(message, repeated, tag = "6")]
    pub ijbpmalmagg: ::prost::alloc::vec::Vec<Jmlbjcldmlg>,
    #[prost(message, repeated, tag = "8")]
    pub kogbmiokggl: ::prost::alloc::vec::Vec<Hlioonjhgnl>,
    #[prost(message, repeated, tag = "13")]
    pub afhhfngfifd: ::prost::alloc::vec::Vec<Phhkpjjdldj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idonpjdhnnn {
    #[prost(enumeration = "Pefbcgphgbg", tag = "6")]
    pub pos: i32,
    #[prost(uint32, tag = "11")]
    pub biihobmmfdp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpbokemhahj {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub area_id: u32,
    #[prost(uint32, tag = "7")]
    pub djehmkneped: u32,
    #[prost(uint32, tag = "5")]
    pub fnjbhbnhflh: u32,
    #[prost(uint32, tag = "2")]
    pub biefjfnakoi: u32,
    #[prost(message, repeated, tag = "3")]
    pub kiikppinloh: ::prost::alloc::vec::Vec<Idonpjdhnnn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjlknpkkilg {
    #[prost(uint32, tag = "10")]
    pub gibegfhbefd: u32,
    #[prost(bool, tag = "15")]
    pub gijjaepohgk: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcfcldfljno {
    #[prost(message, repeated, tag = "15")]
    pub kjefocgndhh: ::prost::alloc::vec::Vec<Hjlknpkkilg>,
    #[prost(uint32, tag = "12")]
    pub gmojjnbeifl: u32,
    #[prost(uint32, tag = "14")]
    pub bolponafhba: u32,
    #[prost(uint32, tag = "4")]
    pub ehhckpdehob: u32,
    #[prost(uint32, tag = "3")]
    pub pncpefjdanj: u32,
    #[prost(uint32, tag = "6")]
    pub geodfdhebbp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imhiepboeae {
    #[prost(uint32, tag = "7")]
    pub biihobmmfdp: u32,
    #[prost(uint32, tag = "11")]
    pub lgbddmadnbe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnidmjhapkk {
    #[prost(enumeration = "Gbainemeked", tag = "13")]
    pub state: i32,
    #[prost(uint32, tag = "14")]
    pub omfgmildjdo: u32,
    #[prost(uint32, tag = "2")]
    pub nnolooiaclg: u32,
    #[prost(uint32, tag = "3")]
    pub mknhjffhcda: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub mhfanlaadff: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "4")]
    pub ddcgdkhhpak: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bklollfkkel {
    #[prost(uint32, repeated, tag = "7")]
    pub lcbdoljbdfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub mplabmdjanb: ::prost::alloc::vec::Vec<Nnidmjhapkk>,
    #[prost(uint32, tag = "5")]
    pub phgolbdbaap: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmpgfmabflk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpnablgajah {
    #[prost(uint32, tag = "6")]
    pub mlfllkmiade: u32,
    #[prost(message, repeated, tag = "3")]
    pub kiikppinloh: ::prost::alloc::vec::Vec<Imhiepboeae>,
    #[prost(uint32, tag = "12")]
    pub pbkjnoklclj: u32,
    #[prost(message, optional, tag = "15")]
    pub lnfmjhcafcg: ::core::option::Option<Bklollfkkel>,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub gglbjpjddnb: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(message, optional, tag = "14")]
    pub edcnodpicna: ::core::option::Option<Mcfcldfljno>,
    #[prost(uint32, tag = "13")]
    pub icjfikodbjn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub adaipafckpm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub kajcdnehigp: ::prost::alloc::vec::Vec<Cpbokemhahj>,
    #[prost(uint32, tag = "4")]
    pub jmjhmmjifkp: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub didncocfcoa: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Llecjkjdlik {
    #[prost(uint32, tag = "11")]
    pub biihobmmfdp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggpnoagfeec {
    #[prost(uint32, tag = "11")]
    pub biihobmmfdp: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hffagbbnffg {
    #[prost(uint32, tag = "7")]
    pub lgbddmadnbe: u32,
    #[prost(enumeration = "Pefbcgphgbg", tag = "8")]
    pub pos: i32,
    #[prost(uint32, tag = "4")]
    pub biihobmmfdp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odbjdpjljjo {
    #[prost(uint32, tag = "1")]
    pub biihobmmfdp: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub lgbddmadnbe: u32,
    #[prost(enumeration = "Pefbcgphgbg", tag = "6")]
    pub pos: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fapfhomojcn {
    #[prost(uint32, tag = "7")]
    pub biihobmmfdp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnfdcgnhfmj {
    #[prost(uint32, tag = "3")]
    pub biihobmmfdp: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjaeojfhkfn {
    #[prost(enumeration = "Nllhbghakih", tag = "5")]
    pub dgpgbhdbhmj: i32,
    #[prost(uint32, tag = "9")]
    pub biihobmmfdp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amlfnmocdal {
    #[prost(uint32, tag = "13")]
    pub jgdljeojdkb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opgmacejnje {
    #[prost(uint32, tag = "4")]
    pub phjjmmjidkh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blhpnjdnmpj {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub ceohkdinahe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkhjlmiafae {
    #[prost(uint32, tag = "14")]
    pub area_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Biehcpggmnp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub area_id: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nokkmgdngmo {
    #[prost(uint32, tag = "6")]
    pub area_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(enumeration = "Kefmjgdendi", tag = "15")]
    pub ihldljgdcbl: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhpjkenoogi {
    #[prost(uint32, tag = "5")]
    pub area_id: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(enumeration = "Kefmjgdendi", tag = "6")]
    pub ihldljgdcbl: i32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pndgbmdaflp {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub icjfikodbjn: u32,
    #[prost(message, optional, tag = "9")]
    pub edcnodpicna: ::core::option::Option<Mcfcldfljno>,
    #[prost(uint32, tag = "8")]
    pub exp: u32,
    #[prost(message, optional, tag = "13")]
    pub lnfmjhcafcg: ::core::option::Option<Bklollfkkel>,
    #[prost(uint32, tag = "15")]
    pub jmjhmmjifkp: u32,
    #[prost(message, repeated, tag = "4")]
    pub kiikppinloh: ::prost::alloc::vec::Vec<Imhiepboeae>,
    #[prost(uint32, tag = "6")]
    pub gglbjpjddnb: u32,
    #[prost(message, repeated, tag = "11")]
    pub kajcdnehigp: ::prost::alloc::vec::Vec<Cpbokemhahj>,
    #[prost(uint32, repeated, tag = "10")]
    pub didncocfcoa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub pbkjnoklclj: u32,
    #[prost(uint32, tag = "12")]
    pub mlfllkmiade: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub adaipafckpm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijojnoojcjg {
    #[prost(message, optional, tag = "8")]
    pub score_reward_info: ::core::option::Option<Nnidmjhapkk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iapjhgfabmk {
    #[prost(int32, tag = "8")]
    pub piplanebdhb: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlhfjbbfhpe {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub score_reward_info: ::core::option::Option<Bklollfkkel>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdkombfjaan {
    #[prost(uint32, tag = "3")]
    pub ddcgdkhhpak: u32,
    #[prost(uint32, tag = "7")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkkgbaaicbk {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub scene_event_id: u32,
    #[prost(uint32, tag = "13")]
    pub ddcgdkhhpak: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmfnbdhhjbb {
    #[prost(uint32, tag = "6")]
    pub mlfllkmiade: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnfdkcmfhbh {
    #[prost(uint32, tag = "10")]
    pub ohpdiggfbjp: u32,
    #[prost(uint32, tag = "11")]
    pub olbalobgali: u32,
    #[prost(uint32, tag = "14")]
    pub biihobmmfdp: u32,
    #[prost(uint32, tag = "5")]
    pub mlfllkmiade: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpienamlpje {
    #[prost(uint32, tag = "6")]
    pub gmojjnbeifl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baopagengei {
    #[prost(uint32, tag = "14")]
    pub gmojjnbeifl: u32,
    #[prost(bool, tag = "5")]
    pub lnfdefnjokj: bool,
    #[prost(uint32, repeated, tag = "8")]
    pub gibegfhbefd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gehoinmfdif {
    #[prost(uint32, tag = "4")]
    pub item_count: u32,
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "7")]
    pub gmojjnbeifl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmlgdkjfigp {
    #[prost(uint32, tag = "7")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Medmnnakgfj {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cklfjficcpm {
    #[prost(uint32, tag = "3")]
    pub gnkendfnkme: u32,
    #[prost(uint32, tag = "12")]
    pub ahcaojcbiom: u32,
    #[prost(bool, tag = "11")]
    pub geoncfhobjl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hchodfhaofe {
    #[prost(uint32, repeated, tag = "2")]
    pub hnndneppcjb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub cmcolnppbgg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub ihkgmcmlokl: u32,
    #[prost(uint32, tag = "15")]
    pub plneddgnpoi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elbfinbnlol {
    #[prost(uint32, tag = "13")]
    pub ofkglabnano: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjpkikiokcg {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub hcopkgbfbli: ::prost::alloc::vec::Vec<Cklfjficcpm>,
    #[prost(uint32, repeated, tag = "2")]
    pub effbbkddpco: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub ikjjoillblm: u32,
    #[prost(uint32, tag = "7")]
    pub bcmkafieide: u32,
    #[prost(message, repeated, tag = "3")]
    pub edgnedccjeb: ::prost::alloc::vec::Vec<Hchodfhaofe>,
    #[prost(bool, tag = "4")]
    pub ijkpenhcefj: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub aobpbgbllka: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub bnbcdeooikm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cgdgcikelpp {
    #[prost(uint32, tag = "13")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Looafabialp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(string, tag = "14")]
    pub ddehncdhfeo: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmjahjckcnm {
    #[prost(bool, tag = "1")]
    pub geoncfhobjl: bool,
    #[prost(uint32, tag = "14")]
    pub score: u32,
    #[prost(uint32, tag = "9")]
    pub jonanhlljhn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nnjljinfnah {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub ahcaojcbiom: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plelflhenoj {
    #[prost(uint32, repeated, tag = "4")]
    pub ghmmnmhnelh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnkhaehnnof {
    #[prost(message, optional, tag = "11")]
    pub ogbkifpbbid: ::core::option::Option<Hchodfhaofe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbedhlggepe {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub pgkmcllimlp: u32,
    #[prost(uint32, tag = "7")]
    pub bcmkafieide: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdolcdhkgcg {
    #[prost(uint32, repeated, tag = "11")]
    pub dncgkeedhdh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggjbfjckcll {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oakhjdgbmpb {
    #[prost(uint32, repeated, tag = "4")]
    pub dncgkeedhdh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojobbcklnfk {
    #[prost(uint32, tag = "6")]
    pub napbhfpefab: u32,
    #[prost(uint32, tag = "4")]
    pub ajchiggpbah: u32,
    #[prost(enumeration = "Ofnmfjiceop", tag = "14")]
    pub fgimedppdhi: i32,
    #[prost(uint32, repeated, tag = "13")]
    pub bfahimcfhnm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub igbfobiglah: u32,
    #[prost(uint32, tag = "9")]
    pub pbaapcamcab: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmlnhdaaecp {
    #[prost(uint32, repeated, tag = "15")]
    pub imhnocgigfp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agdkgmaclai {
    #[prost(message, repeated, tag = "6")]
    pub annfonpcpdo: ::prost::alloc::vec::Vec<Ojobbcklnfk>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gkeciniajai {
    #[prost(uint32, tag = "10")]
    pub ajchiggpbah: u32,
    #[prost(uint32, tag = "11")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piheiophlpl {
    #[prost(message, optional, tag = "6")]
    pub akeghcpljac: ::core::option::Option<Ojobbcklnfk>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnlifecpnao {
    #[prost(uint32, tag = "8")]
    pub rouge_event_id: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ddfegmcdogf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ajchiggpbah: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhldojkaipa {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub akeghcpljac: ::core::option::Option<Ojobbcklnfk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flpakdbacde {
    #[prost(message, optional, tag = "2")]
    pub akeghcpljac: ::core::option::Option<Ojobbcklnfk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgpocliiofi {
    #[prost(uint32, tag = "10")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Phojkcmppmp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lokjgnhfhmh {
    #[prost(uint64, tag = "3")]
    pub cejodfiknja: u64,
    #[prost(uint32, tag = "7")]
    pub main_mission_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdfjidbnljj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkccebpbnlp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub ejnbbeembga: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub bkmndakkoab: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdjhlnchafa {
    #[prost(uint32, tag = "8")]
    pub jnnjfniodlc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bigmmjpdlaj {
    #[prost(uint32, tag = "4")]
    pub bkmndakkoab: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub mhodkjblchg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enpangbkbad {
    #[prost(uint32, tag = "11")]
    pub jnnjfniodlc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPetDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPetDataScRsp {
    #[prost(uint32, tag = "2")]
    pub bppkpfkpmop: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub hfdmdhaomim: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetCsReq {
    #[prost(uint32, tag = "9")]
    pub okdkddnfiak: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonPetScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub bppkpfkpmop: u32,
    #[prost(uint32, tag = "6")]
    pub moiocomccdl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetCsReq {
    #[prost(uint32, tag = "7")]
    pub okdkddnfiak: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecallPetScRsp {
    #[prost(uint32, tag = "3")]
    pub bppkpfkpmop: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub moiocomccdl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CurPetChangedScNotify {
    #[prost(uint32, tag = "13")]
    pub bppkpfkpmop: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPhoneDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPhoneDataScRsp {
    #[prost(uint32, tag = "15")]
    pub cur_chat_bubble: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub owned_phone_themes: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub cur_phone_theme: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub owned_chat_bubbles: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChatBubbleCsReq {
    #[prost(uint32, tag = "8")]
    pub bubble_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectChatBubbleScRsp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub kdpakglggoh: u32,
    #[prost(uint32, tag = "4")]
    pub cur_chat_bubble: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockChatBubbleScNotify {
    #[prost(uint32, tag = "3")]
    pub bubble_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPhoneThemeCsReq {
    #[prost(uint32, tag = "4")]
    pub theme_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectPhoneThemeScRsp {
    #[prost(uint32, tag = "13")]
    pub bmgpodknlng: u32,
    #[prost(uint32, tag = "2")]
    pub cur_phone_theme: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockPhoneThemeScNotify {
    #[prost(uint32, tag = "6")]
    pub theme_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginCsReq {
    #[prost(string, tag = "8")]
    pub gdilgfjnkpi: ::prost::alloc::string::String,
    #[prost(string, tag = "1")]
    pub koniihcaepm: ::prost::alloc::string::String,
    #[prost(string, tag = "523")]
    pub baojgaijaan: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub hcimlmckapf: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub fkmhmgoabbo: ::prost::alloc::string::String,
    #[prost(string, tag = "1487")]
    pub ikbnjjmacmj: ::prost::alloc::string::String,
    #[prost(bool, tag = "268")]
    pub nmcmpeejbkc: bool,
    #[prost(uint64, tag = "14")]
    pub login_random: u64,
    #[prost(string, tag = "2")]
    pub bocgepcddgf: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub signature: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2008")]
    pub inpfceiaboi: ::core::option::Option<ExtraDeviceInfo>,
    #[prost(uint32, tag = "13")]
    pub ldpnkabedmh: u32,
    #[prost(string, tag = "1717")]
    pub mcjndnlmdof: ::prost::alloc::string::String,
    #[prost(string, tag = "1861")]
    pub poojfebmgkf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1313")]
    pub njddjhapnbo: u32,
    #[prost(string, tag = "6")]
    pub rogue_info_data: ::prost::alloc::string::String,
    #[prost(string, tag = "542")]
    pub cpemmcojkdg: ::prost::alloc::string::String,
    #[prost(string, tag = "733")]
    pub iodimanhnlk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub client_res_version: u32,
    #[prost(string, tag = "11")]
    pub hlcohdckajo: ::prost::alloc::string::String,
    #[prost(uint32, tag = "821")]
    pub nimoocecnkb: u32,
    #[prost(enumeration = "PlatformType", tag = "15")]
    pub platform_type: i32,
    #[prost(string, tag = "3")]
    pub ilpblhdflkl: ::prost::alloc::string::String,
    #[prost(enumeration = "LanguageType", tag = "12")]
    pub language: i32,
    #[prost(bool, tag = "905")]
    pub jndhainpmof: bool,
    #[prost(string, tag = "9")]
    pub jlghkbedehg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginScRsp {
    #[prost(message, optional, tag = "9")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(uint64, tag = "8")]
    pub server_timestamp_ms: u64,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub khmgodejbih: bool,
    #[prost(uint32, tag = "11")]
    pub stamina: u32,
    #[prost(string, tag = "4")]
    pub ccilgmgjoba: ::prost::alloc::string::String,
    #[prost(int32, tag = "12")]
    pub cur_timezone: i32,
    #[prost(bool, tag = "15")]
    pub dapcakalmjb: bool,
    #[prost(string, tag = "1")]
    pub cilibnppfmk: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub login_random: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jiafdcmikke {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenCsReq {
    #[prost(uint32, tag = "3")]
    pub njddjhapnbo: u32,
    #[prost(string, tag = "2")]
    pub gnaohfnkflg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub ibmfpjbhjii: u32,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
    #[prost(string, tag = "11")]
    pub token: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub platform_type: u32,
    #[prost(uint32, tag = "13")]
    pub gjbhjbflihf: u32,
    #[prost(string, tag = "5")]
    pub account_uid: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenScRsp {
    #[prost(string, tag = "10")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint64, tag = "9")]
    pub secret_key_seed: u64,
    #[prost(message, optional, tag = "7")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScNotify {
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerKickOutScNotify {
    #[prost(enumeration = "player_kick_out_sc_notify::KickType", tag = "13")]
    pub kick_type: i32,
    #[prost(message, optional, tag = "7")]
    pub black_info: ::core::option::Option<BlackInfo>,
}
/// Nested message and enum types in `PlayerKickOutScNotify`.
pub mod player_kick_out_sc_notify {
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum KickType {
        KickSqueezed = 0,
        KickBlack = 1,
        KickChangePwd = 2,
        KickLoginWhiteTimeout = 3,
        KickAceAntiCheater = 4,
        KickByGm = 5,
    }
    impl KickType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::KickSqueezed => "KICK_SQUEEZED",
                Self::KickBlack => "KICK_BLACK",
                Self::KickChangePwd => "KICK_CHANGE_PWD",
                Self::KickLoginWhiteTimeout => "KICK_LOGIN_WHITE_TIMEOUT",
                Self::KickAceAntiCheater => "KICK_ACE_ANTI_CHEATER",
                Self::KickByGm => "KICK_BY_GM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "KICK_SQUEEZED" => Some(Self::KickSqueezed),
                "KICK_BLACK" => Some(Self::KickBlack),
                "KICK_CHANGE_PWD" => Some(Self::KickChangePwd),
                "KICK_LOGIN_WHITE_TIMEOUT" => Some(Self::KickLoginWhiteTimeout),
                "KICK_ACE_ANTI_CHEATER" => Some(Self::KickAceAntiCheater),
                "KICK_BY_GM" => Some(Self::KickByGm),
                _ => None,
            }
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkCsReq {
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GmTalkScRsp {
    #[prost(string, tag = "10")]
    pub aboekicafif: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerSettingInfo {
    #[prost(bool, tag = "2")]
    pub aafjgnnapfc: bool,
    #[prost(bool, tag = "9")]
    pub jlippmhelff: bool,
    #[prost(bool, tag = "8")]
    pub lealopkfppe: bool,
    #[prost(bool, tag = "12")]
    pub momaekcodkg: bool,
    #[prost(bool, tag = "15")]
    pub afdcjbkgnpj: bool,
    #[prost(bool, tag = "14")]
    pub bjadaljfkab: bool,
    #[prost(bool, tag = "3")]
    pub odbldnfkiaf: bool,
    #[prost(bool, tag = "11")]
    pub gigfgkbknjd: bool,
    #[prost(bool, tag = "4")]
    pub demobhbjndi: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetBasicInfoScRsp {
    #[prost(uint32, tag = "5")]
    pub cur_day: u32,
    #[prost(uint32, tag = "14")]
    pub week_cocoon_finished_count: u32,
    #[prost(uint32, tag = "1")]
    pub exchange_times: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(int64, tag = "12")]
    pub next_recover_time: i64,
    #[prost(message, optional, tag = "9")]
    pub player_setting_info: ::core::option::Option<PlayerSettingInfo>,
    #[prost(uint32, tag = "4")]
    pub gameplay_birthday: u32,
    #[prost(bool, tag = "2")]
    pub is_gender_set: bool,
    #[prost(int64, tag = "8")]
    pub last_set_nickname_time: i64,
    #[prost(uint32, tag = "10")]
    pub gender: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaScRsp {
    #[prost(message, repeated, tag = "11")]
    pub item_cost_list: ::prost::alloc::vec::Vec<ItemCost>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub stamina_add: u32,
    #[prost(int64, tag = "5")]
    pub last_recover_time: i64,
    #[prost(uint32, tag = "12")]
    pub exchange_times: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyCsReq {
    #[prost(uint32, tag = "8")]
    pub abdaaefggmg: u32,
    #[prost(string, tag = "10")]
    pub kdlfalbdpib: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub ojmpijladml: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAuthkeyScRsp {
    #[prost(uint32, tag = "7")]
    pub abdaaefggmg: u32,
    #[prost(string, tag = "14")]
    pub coldhhjchbi: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub ojmpijladml: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(string, tag = "11")]
    pub kdlfalbdpib: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RegionStopScNotify {
    #[prost(int64, tag = "12")]
    pub cddddbfgkfk: i64,
    #[prost(int64, tag = "7")]
    pub bifmnhddacc: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AntiAddictScNotify {
    #[prost(string, tag = "7")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub msg_type: u32,
    #[prost(string, tag = "2")]
    pub level: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetNicknameCsReq {
    #[prost(string, tag = "11")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_modify: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetNicknameScRsp {
    #[prost(bool, tag = "3")]
    pub is_modify: bool,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(int64, tag = "1")]
    pub jkhochijpdh: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardTakenListScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub fajjpceican: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLevelRewardCsReq {
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLevelRewardScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetLanguageCsReq {
    #[prost(enumeration = "LanguageType", tag = "1")]
    pub language: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetLanguageScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(enumeration = "LanguageType", tag = "8")]
    pub language: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnnounceData {
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(int64, tag = "8")]
    pub begin_time: i64,
    #[prost(uint32, tag = "11")]
    pub ccochkolepn: u32,
    #[prost(string, tag = "15")]
    pub kicnneodfgd: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub jenbmjajlak: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub mamibmnfjkj: u32,
    #[prost(string, tag = "13")]
    pub npibjlgalpa: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub is_center_system_last_5_every_minutes: bool,
    #[prost(uint32, tag = "7")]
    pub config_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerAnnounceNotify {
    #[prost(message, repeated, tag = "2")]
    pub announce_data_list: ::prost::alloc::vec::Vec<AnnounceData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GateServer {
    #[prost(bool, tag = "1257")]
    pub close_redeem_code: bool,
    #[prost(string, tag = "15")]
    pub lua_bundle_version_update_url: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub design_data_bundle_version_update_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "719")]
    pub ejcaokobhbg: bool,
    #[prost(bool, tag = "1700")]
    pub network_diagnostic: bool,
    #[prost(string, tag = "1821")]
    pub online_replay_download_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1809")]
    pub rogue_magic_h_5_url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub video_bundle_version_update_url: ::prost::alloc::string::String,
    #[prost(string, tag = "426")]
    pub nnhemjjfdmg: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub stop_end_time: i64,
    #[prost(string, tag = "1455")]
    pub olialajlflf: ::prost::alloc::string::String,
    #[prost(string, tag = "645")]
    pub player_return_invite_h_5_url: ::prost::alloc::string::String,
    #[prost(string, tag = "149")]
    pub mehkocgcbpo: ::prost::alloc::string::String,
    #[prost(string, tag = "1521")]
    pub hjioamiabgj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub port: u32,
    #[prost(string, tag = "1")]
    pub ip: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub stop_begin_time: i64,
    #[prost(string, tag = "521")]
    pub design_data_relogin_desc: ::prost::alloc::string::String,
    #[prost(string, tag = "1951")]
    pub kjaogfkhbch: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "131")]
    pub fbkdebbfemb: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "207")]
    pub watermark_enable: bool,
    #[prost(string, tag = "6")]
    pub asb_relogin_desc: ::prost::alloc::string::String,
    #[prost(string, tag = "1766")]
    pub ifix_patch_version_update_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "642")]
    pub event_tracking_open: bool,
    #[prost(string, tag = "714")]
    pub blllbehnefb: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1649")]
    pub cdn_ipv_6_enable: u32,
    #[prost(bool, tag = "920")]
    pub enable_save_replay_file: bool,
    #[prost(string, tag = "1882")]
    pub player_return_questionnaire_b_url: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(string, tag = "1833")]
    pub ifix_patch_revision: ::prost::alloc::string::String,
    #[prost(uint32, tag = "318")]
    pub rogue_tourn_notice_pic_type: u32,
    #[prost(bool, tag = "1376")]
    pub use_tcp: bool,
    #[prost(bool, tag = "8")]
    pub enable_video_bundle_version_update: bool,
    #[prost(uint32, tag = "954")]
    pub rogue_tourn_notice_id: u32,
    #[prost(string, tag = "1535")]
    pub nfmplgbnfmg: ::prost::alloc::string::String,
    #[prost(bool, tag = "329")]
    pub nhehajgmjnj: bool,
    #[prost(uint32, tag = "10")]
    pub design_data_relogin_type: u32,
    #[prost(string, tag = "288")]
    pub gfhnfbfhadd: ::prost::alloc::string::String,
    #[prost(string, tag = "1840")]
    pub online_replay_upload_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1085")]
    pub predownload_update_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1118")]
    pub efoimfjkfcl: ::prost::alloc::string::String,
    #[prost(string, tag = "594")]
    pub dhelbbhopke: ::prost::alloc::string::String,
    #[prost(string, tag = "979")]
    pub pammhojpnel: ::prost::alloc::string::String,
    #[prost(string, tag = "1579")]
    pub lua_patch_version: ::prost::alloc::string::String,
    #[prost(string, tag = "1176")]
    pub ffkoakokdld: ::prost::alloc::string::String,
    #[prost(bool, tag = "1497")]
    pub android_middle_package_enable: bool,
    #[prost(string, tag = "1456")]
    pub fcfgmpbgmeh: ::prost::alloc::string::String,
    #[prost(string, tag = "409")]
    pub client_secret_key: ::prost::alloc::string::String,
    #[prost(string, tag = "2007")]
    pub mcfpnchobad: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub asb_relogin_type: u32,
    #[prost(bool, tag = "298")]
    pub enable_upload_battle_log: bool,
    #[prost(string, tag = "11")]
    pub stop_desc: ::prost::alloc::string::String,
    #[prost(bool, tag = "1892")]
    pub ios_exam: bool,
    #[prost(string, tag = "266")]
    pub login_white_msg: ::prost::alloc::string::String,
    #[prost(string, tag = "1209")]
    pub server_description: ::prost::alloc::string::String,
    #[prost(string, tag = "925")]
    pub cklebohipla: ::prost::alloc::string::String,
    #[prost(string, tag = "359")]
    pub player_return_questionnaire_a_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "1351")]
    pub forbid_recharge: bool,
    #[prost(bool, tag = "14")]
    pub enable_design_data_bundle_version_update: bool,
    #[prost(bool, tag = "177")]
    pub mtp_switch: bool,
    #[prost(string, tag = "474")]
    pub dnlniffdcbn: ::prost::alloc::string::String,
    #[prost(string, tag = "1676")]
    pub jaigofbgamk: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GateServerScNotify {
    #[prost(string, tag = "6")]
    pub kcjdplajjjo: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiPathAvatarTypeInfo {
    #[prost(message, repeated, tag = "6")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(uint32, tag = "1")]
    pub path_equipment_id: u32,
    #[prost(message, repeated, tag = "15")]
    pub skill_tree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(enumeration = "MultiPathAvatarType", tag = "2")]
    pub avatar_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub avatar_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetAvatarPathScRsp {
    #[prost(enumeration = "MultiPathAvatarType", tag = "14")]
    pub avatar_id: i32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsCsReq {
    #[prost(enumeration = "MultiPathAvatarType", repeated, tag = "6")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetMultipleAvatarPathsScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoScRsp {
    #[prost(uint32, repeated, tag = "1")]
    pub multi_avatar_type_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarTypeInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(map = "uint32, enumeration(MultiPathAvatarType)", tag = "13")]
    pub current_multi_avatar_id: ::std::collections::HashMap<u32, i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathCsReq {
    #[prost(enumeration = "MultiPathAvatarType", tag = "10")]
    pub avatar_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathScRsp {
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(enumeration = "MultiPathAvatarType", tag = "6")]
    pub avatar_id: i32,
    #[prost(uint32, repeated, tag = "11")]
    pub multi_avatar_type_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarPathChangedNotify {
    #[prost(enumeration = "MultiPathAvatarType", tag = "12")]
    pub multi_path_avatar_type: i32,
    #[prost(uint32, tag = "5")]
    pub base_avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGenderCsReq {
    #[prost(enumeration = "Gender", tag = "7")]
    pub ankofoleebl: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetGenderScRsp {
    #[prost(message, repeated, tag = "12")]
    pub jkgcjjjambh: ::prost::alloc::vec::Vec<MultiPathAvatarTypeInfo>,
    #[prost(enumeration = "MultiPathAvatarType", tag = "4")]
    pub lgmdjjneonl: i32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoCsReq {
    #[prost(bool, tag = "5")]
    pub is_modify: bool,
    #[prost(enumeration = "Gender", tag = "9")]
    pub ankofoleebl: i32,
    #[prost(string, tag = "13")]
    pub nickname: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPlayerInfoScRsp {
    #[prost(int64, tag = "14")]
    pub jkhochijpdh: i64,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "15")]
    pub lgmdjjneonl: i32,
    #[prost(bool, tag = "10")]
    pub is_modify: bool,
    #[prost(message, repeated, tag = "13")]
    pub jkgcjjjambh: ::prost::alloc::vec::Vec<MultiPathAvatarTypeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryProductInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    #[prost(string, tag = "4")]
    pub pgbcflgaico: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub iegnkpnhbia: u32,
    #[prost(uint32, tag = "8")]
    pub ndhmlkcmomj: u32,
    #[prost(enumeration = "Cgcdphcocdd", tag = "9")]
    pub cnodgphdgoe: i32,
    #[prost(bool, tag = "7")]
    pub dgpkafcljjd: bool,
    #[prost(string, tag = "6")]
    pub inmdpfmpfmk: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryProductInfoScRsp {
    #[prost(uint32, tag = "12")]
    pub nliamamhjef: u32,
    #[prost(uint32, tag = "9")]
    pub kghdciigjgh: u32,
    #[prost(uint64, tag = "6")]
    pub gaaimjlkdmb: u64,
    #[prost(message, repeated, tag = "11")]
    pub pnggdbgohpn: ::prost::alloc::vec::Vec<Product>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonthCardRewardNotify {
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadDataScNotify {
    #[prost(message, optional, tag = "2")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjDownloadDataScNotify {
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFeatureSwitchScNotify {
    #[prost(message, repeated, tag = "6")]
    pub switch_info_list: ::prost::alloc::vec::Vec<FeatureSwitchInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DailyRefreshNotify {
    #[prost(uint32, tag = "3")]
    pub nhajhcenddb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayCsReq {
    #[prost(uint32, tag = "1")]
    pub birthday: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetGameplayBirthdayScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub birthday: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterCsReq {
    #[prost(string, tag = "2")]
    pub ianckkgknco: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub epomjpgdgbo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AceAntiCheaterScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RetcodeNotify {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub efcchmbpeff: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatCsReq {
    #[prost(uint64, tag = "15")]
    pub client_time_ms: u64,
    #[prost(message, optional, tag = "13")]
    pub upload_data: ::core::option::Option<ClientUploadData>,
    #[prost(uint32, tag = "11")]
    pub iihmohbihkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatScRsp {
    #[prost(uint64, tag = "12")]
    pub server_time_ms: u64,
    #[prost(uint64, tag = "10")]
    pub client_time_ms: u64,
    #[prost(message, optional, tag = "15")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeatureSwitchClosedScNotify {
    #[prost(enumeration = "Kfpiggpbgik", tag = "7")]
    pub mkghpnaocfb: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SecretKeyInfo {
    #[prost(enumeration = "SecretKeyType", tag = "7")]
    pub slot: i32,
    #[prost(string, tag = "15")]
    pub eipmiccmjln: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoCsReq {
    #[prost(bytes = "vec", tag = "5")]
    pub req_key: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSecretKeyInfoScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(bytes = "vec", tag = "1")]
    pub rsp_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, repeated, tag = "13")]
    pub key_info: ::prost::alloc::vec::Vec<SecretKeyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlayerLoginFinishScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoKeyInfo {
    #[prost(uint64, tag = "11")]
    pub video_key: u64,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetVideoVersionKeyCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetVideoVersionKeyScRsp {
    #[prost(message, repeated, tag = "11")]
    pub jmnjkfojcnj: ::prost::alloc::vec::Vec<VideoKeyInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub fnoipkafblg: ::prost::alloc::vec::Vec<VideoKeyInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Libgkfbanig {
    #[prost(uint32, tag = "6")]
    pub ebkkogcankj: u32,
    #[prost(uint32, tag = "2")]
    pub pkboaanhkha: u32,
    #[prost(uint32, tag = "15")]
    pub jpdjncdmeah: u32,
    #[prost(uint32, tag = "12")]
    pub map_entry_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetRedPointStatusScNotify {
    #[prost(message, repeated, tag = "5")]
    pub ndbfjanoiek: ::prost::alloc::vec::Vec<Libgkfbanig>,
    #[prost(uint32, tag = "13")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "2")]
    pub ebkkogcankj: u32,
    #[prost(uint32, tag = "15")]
    pub pkboaanhkha: u32,
    #[prost(uint32, tag = "6")]
    pub uid: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeCsReq {
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeScRsp {
    #[prost(uint32, tag = "11")]
    pub num: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StaminaInfoScNotify {
    #[prost(uint32, tag = "15")]
    pub reserve_stamina: u32,
    #[prost(uint32, tag = "7")]
    pub stamina: u32,
    #[prost(int64, tag = "10")]
    pub omlfckhigna: i64,
    #[prost(int64, tag = "12")]
    pub bbciobjdboc: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnmlonglbhb {
    #[prost(oneof = "cnmlonglbhb::Maehbefgfjc", tags = "3, 15, 6, 10, 12, 14, 2, 1, 8")]
    pub maehbefgfjc: ::core::option::Option<cnmlonglbhb::Maehbefgfjc>,
}
/// Nested message and enum types in `CNMLONGLBHB`.
pub mod cnmlonglbhb {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Maehbefgfjc {
        #[prost(bool, tag = "3")]
        Odbldnfkiaf(bool),
        #[prost(bool, tag = "15")]
        Jlippmhelff(bool),
        #[prost(bool, tag = "6")]
        Momaekcodkg(bool),
        #[prost(bool, tag = "10")]
        Aafjgnnapfc(bool),
        #[prost(bool, tag = "12")]
        Gigfgkbknjd(bool),
        #[prost(bool, tag = "14")]
        Bjadaljfkab(bool),
        #[prost(bool, tag = "2")]
        Lealopkfppe(bool),
        #[prost(bool, tag = "1")]
        Demobhbjndi(bool),
        #[prost(bool, tag = "8")]
        Afdcjbkgnpj(bool),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePlayerSettingCsReq {
    #[prost(message, optional, tag = "4")]
    pub laogoecamik: ::core::option::Option<Cnmlonglbhb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePlayerSettingScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub laogoecamik: ::core::option::Option<Cnmlonglbhb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjUploadCsReq {
    #[prost(uint32, tag = "7")]
    pub iihmohbihkl: u32,
    #[prost(bytes = "vec", tag = "15")]
    pub upload_data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientObjUploadScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<ClientObjDownloadData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knokjfobime {
    #[prost(string, repeated, tag = "15")]
    pub aejdebcijna: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkcdfiikepp {
    #[prost(bool, tag = "1")]
    pub bkgindbgdlo: bool,
    #[prost(message, optional, tag = "3")]
    pub simple_info_list: ::core::option::Option<Knokjfobime>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gibbjhpohge {
    #[prost(oneof = "gibbjhpohge::Ehheehapebi", tags = "1519, 1649, 708")]
    pub ehheehapebi: ::core::option::Option<gibbjhpohge::Ehheehapebi>,
}
/// Nested message and enum types in `GIBBJHPOHGE`.
pub mod gibbjhpohge {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ehheehapebi {
        #[prost(bool, tag = "1519")]
        Bkgindbgdlo(bool),
        #[prost(message, tag = "1649")]
        Lneoagbeime(super::Knokjfobime),
        #[prost(message, tag = "708")]
        Gpnopgollbi(super::Knokjfobime),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatePsnSettingsInfoCsReq {
    #[prost(oneof = "update_psn_settings_info_cs_req::Gedlnoepiod", tags = "1139, 1429")]
    pub gedlnoepiod: ::core::option::Option<
        update_psn_settings_info_cs_req::Gedlnoepiod,
    >,
}
/// Nested message and enum types in `UpdatePsnSettingsInfoCsReq`.
pub mod update_psn_settings_info_cs_req {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Gedlnoepiod {
        #[prost(message, tag = "1139")]
        Akjfadfkbdj(super::Mkcdfiikepp),
        #[prost(message, tag = "1429")]
        Nfameilppgi(super::Gibbjhpohge),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdatePsnSettingsInfoScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetGameStateServiceConfigCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGameStateServiceConfigScRsp {
    #[prost(string, repeated, tag = "12")]
    pub eegcpacgokg: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "8")]
    pub dkgamcjeknb: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, repeated, tag = "7")]
    pub ngkmbheiooe: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HeadIcon {
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisplayAvatar {
    #[prost(uint32, tag = "7")]
    pub pos: u32,
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarVec {
    #[prost(message, repeated, tag = "4")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatar>,
    #[prost(bool, tag = "13")]
    pub is_display: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlayerBoardDataScRsp {
    #[prost(message, optional, tag = "3")]
    pub display_avatar_vec: ::core::option::Option<DisplayAvatarVec>,
    #[prost(uint32, tag = "2")]
    pub current_head_icon_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub display_support_avatar_vec: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIcon>,
    #[prost(string, tag = "10")]
    pub signature: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconCsReq {
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetHeadIconScRsp {
    #[prost(uint32, tag = "3")]
    pub current_head_icon_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDisplayAvatarCsReq {
    #[prost(message, repeated, tag = "4")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetDisplayAvatarScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub display_avatar_list: ::prost::alloc::vec::Vec<DisplayAvatar>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetIsDisplayAvatarInfoCsReq {
    #[prost(bool, tag = "10")]
    pub is_display: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetIsDisplayAvatarInfoScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub is_display: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureCsReq {
    #[prost(string, tag = "8")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSignatureScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(string, tag = "8")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAssistAvatarCsReq {
    #[prost(uint32, repeated, tag = "11")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAssistAvatarScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmeaiddkphp {
    #[prost(uint32, tag = "11")]
    pub maglfknkmkd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keijbhnccpj {
    #[prost(uint32, repeated, tag = "14")]
    pub jaabpacombg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub aojpjghplde: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgfcjophnfb {
    #[prost(message, repeated, tag = "9")]
    pub nhefoeefole: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "12")]
    pub aojpjghplde: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub jaabpacombg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lpjlbcglcpc {
    #[prost(uint32, tag = "8")]
    pub iagdnefgggm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pngddhoepbo {
    #[prost(uint32, tag = "9")]
    pub ackbfiihcnl: u32,
    #[prost(uint32, tag = "5")]
    pub iicagjeojpb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndeelbmipam {
    #[prost(uint32, tag = "10")]
    pub ackbfiihcnl: u32,
    #[prost(uint32, tag = "5")]
    pub iicagjeojpb: u32,
    #[prost(message, optional, tag = "13")]
    pub llhijcjceck: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmijkkekfdp {
    #[prost(uint32, tag = "7")]
    pub piplanebdhb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lioklabkooc {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Offpihkmpkh {
    #[prost(uint32, tag = "1")]
    pub piplanebdhb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmelhefcajb {
    #[prost(int64, tag = "3")]
    pub kefgbhbpcoo: i64,
    #[prost(int64, tag = "7")]
    pub finish_time: i64,
    #[prost(uint32, tag = "4")]
    pub gppmnploehi: u32,
    #[prost(uint32, tag = "14")]
    pub lijclnkpplp: u32,
    #[prost(enumeration = "Ecjeanmgcdm", tag = "8")]
    pub status: i32,
    #[prost(bool, tag = "10")]
    pub nkecmfcfjak: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub opjnapbphoo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub jaabpacombg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub iagdnefgggm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlkmmmkjpmc {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub pbemgmebggg: ::core::option::Option<Fmelhefcajb>,
    #[prost(uint32, tag = "5")]
    pub jggkpociiol: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohplabcombg {
    #[prost(message, optional, tag = "9")]
    pub pbemgmebggg: ::core::option::Option<Fmelhefcajb>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishPlotCsReq {
    #[prost(uint32, tag = "7")]
    pub llggdkhnknm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishPlotScRsp {
    #[prost(uint32, tag = "10")]
    pub llggdkhnknm: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dieehlnjlon {
    #[prost(message, optional, tag = "13")]
    pub agbkkkndogo: ::core::option::Option<Labojlhcmph>,
    #[prost(enumeration = "Mmokgfflboj", tag = "10")]
    pub gnfghefoplb: i32,
    #[prost(uint32, tag = "14")]
    pub bmahhclckao: u32,
    #[prost(message, optional, tag = "7")]
    pub basic_info: ::core::option::Option<Ckemklhhefo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hidjnaakdpk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glnepanmjdm {
    #[prost(message, repeated, tag = "4")]
    pub kmipdppplgn: ::prost::alloc::vec::Vec<Dieehlnjlon>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmcbndlfnij {
    #[prost(bool, tag = "6")]
    pub olbeafgcgga: bool,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "5")]
    pub monster_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhhdplbchia {
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<Gamnepoeghm>,
    #[prost(uint32, repeated, tag = "5")]
    pub daaobjppknd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub cnpienkhdfm: ::core::option::Option<Dieehlnjlon>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(int64, tag = "1")]
    pub onapkmmghbe: i64,
    #[prost(bool, tag = "7")]
    pub olbeafgcgga: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nolecafnmhd {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(enumeration = "Aiphgapcafg", tag = "8")]
    pub apjbcnfndhl: i32,
    #[prost(uint32, tag = "14")]
    pub monster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnopfjaclcg {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(enumeration = "Aiphgapcafg", tag = "13")]
    pub apjbcnfndhl: i32,
    #[prost(uint32, tag = "6")]
    pub monster_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jcaijpkeglo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iceiedobigl {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub cnpienkhdfm: ::core::option::Option<Dieehlnjlon>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egmlfcldodi {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(bool, tag = "12")]
    pub icdohkpkmah: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gofldooknoo {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub icdohkpkmah: bool,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egnapfoccng {
    #[prost(enumeration = "Dohldjoepim", tag = "13")]
    pub reason: i32,
    #[prost(message, optional, tag = "6")]
    pub agbkkkndogo: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, repeated, tag = "4")]
    pub daaobjppknd: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "11")]
    pub basic_info: ::core::option::Option<Ckemklhhefo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhmcnlnlcia {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbeajdbkmfd {
    #[prost(uint32, tag = "7")]
    pub ibakchmiogg: u32,
    #[prost(int64, tag = "12")]
    pub ebgkeadkgoo: i64,
    #[prost(uint32, tag = "8")]
    pub hojoajbeibo: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub feibkndnjah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub hmgcnfifkdj: u32,
    #[prost(uint32, tag = "9")]
    pub ndhnelnklaa: u32,
    #[prost(uint32, tag = "4")]
    pub cpgmfoiackd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oaceialdgkm {
    #[prost(message, optional, tag = "13")]
    pub cnpienkhdfm: ::core::option::Option<Ckemklhhefo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdlckpbonch {
    #[prost(uint32, tag = "10")]
    pub njohpoehobf: u32,
    #[prost(uint32, tag = "6")]
    pub ogembdhapgk: u32,
    #[prost(message, optional, tag = "12")]
    pub agbkkkndogo: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, tag = "1")]
    pub cnbblfmnkgd: u32,
    #[prost(message, optional, tag = "13")]
    pub cnpienkhdfm: ::core::option::Option<Ckemklhhefo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdbgodkimda {
    #[prost(bool, tag = "12")]
    pub hgaibecfcpl: bool,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(uint32, tag = "11")]
    pub config_id: u32,
    #[prost(uint32, tag = "5")]
    pub cdkohblhddh: u32,
    #[prost(uint32, tag = "13")]
    pub monster_id: u32,
    #[prost(int64, tag = "8")]
    pub sent_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aahmlogboco {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Behnpgldfdo {
    #[prost(message, repeated, tag = "13")]
    pub ieobbbdmemi: ::prost::alloc::vec::Vec<Jmeokppcbhl>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub fcelehkaaco: ::prost::alloc::vec::Vec<Hdbgodkimda>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dacaailkook {
    #[prost(message, optional, tag = "9")]
    pub hkpdodnkhop: ::core::option::Option<Hdbgodkimda>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kglpjmmchmj {
    #[prost(message, optional, tag = "3")]
    pub anagkanmobm: ::core::option::Option<Jmeokppcbhl>,
    #[prost(bool, tag = "14")]
    pub gdcdeojaiak: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eehhobkdapk {
    #[prost(uint32, tag = "9")]
    pub score: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "15")]
    pub gdcdeojaiak: bool,
    #[prost(message, repeated, tag = "8")]
    pub kifohlgklnl: ::prost::alloc::vec::Vec<Jmeokppcbhl>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibhhoidmndb {
    #[prost(uint32, tag = "5")]
    pub ibakchmiogg: u32,
    #[prost(uint32, tag = "13")]
    pub hmgcnfifkdj: u32,
    #[prost(uint32, tag = "8")]
    pub ndhnelnklaa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgeiniooknh {
    #[prost(message, optional, tag = "1")]
    pub anagkanmobm: ::core::option::Option<Jmeokppcbhl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcmcedeoehf {
    #[prost(message, optional, tag = "7")]
    pub anagkanmobm: ::core::option::Option<Jmeokppcbhl>,
    #[prost(message, repeated, tag = "8")]
    pub lmjjejmpmcj: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub khdicncfiap: ::prost::alloc::vec::Vec<PunkLordBattleReplay>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetQuestDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Quest {
    #[prost(enumeration = "QuestStatus", tag = "4")]
    pub status: i32,
    #[prost(int64, tag = "11")]
    pub finish_time: i64,
    #[prost(uint32, repeated, tag = "5")]
    pub fffehljfofn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub progress: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuestDataScRsp {
    #[prost(message, repeated, tag = "4")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, tag = "13")]
    pub total_achievement_exp: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardCsReq {
    #[prost(uint32, repeated, tag = "13")]
    pub afcijickmbo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub succ_quest_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeQuestOptionalRewardCsReq {
    #[prost(uint32, tag = "1")]
    pub optional_reward_id: u32,
    #[prost(uint32, tag = "4")]
    pub fjhbefphdih: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestOptionalRewardScRsp {
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub fjhbefphdih: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetQuestRecordCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuestRecord {
    #[prost(uint32, tag = "12")]
    pub progress: u32,
    #[prost(uint32, tag = "7")]
    pub aomfdnhanfa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetQuestRecordScRsp {
    #[prost(message, repeated, tag = "14")]
    pub hncpnabajne: ::prost::alloc::vec::Vec<QuestRecord>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QuestRecordScNotify {
    #[prost(message, optional, tag = "10")]
    pub hbhfkigcffh: ::core::option::Option<QuestRecord>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishQuestCsReq {
    #[prost(uint32, tag = "4")]
    pub fjhbefphdih: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub quest_prop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishQuestScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetQuestDataCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub quest_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetQuestDataScRsp {
    #[prost(message, repeated, tag = "10")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gamnepoeghm {
    #[prost(message, optional, tag = "1")]
    pub fjdpnjpgkne: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(message, optional, tag = "10")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "2")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfcaoeldoeg {
    #[prost(uint32, tag = "6")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub odoajjgmbcl: u32,
    #[prost(uint32, tag = "3")]
    pub kdfkcjlhhaf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgnnmipngal {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<Gamnepoeghm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mleombnkcib {
    #[prost(bool, tag = "6")]
    pub kdfkcjlhhaf: bool,
    #[prost(uint32, tag = "11")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibfbanbbpio {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdbpclphbol {
    #[prost(enumeration = "Hlacngehmjm", tag = "2")]
    pub elikggmjilc: i32,
    #[prost(uint32, tag = "9")]
    pub knbohelckol: u32,
    #[prost(uint32, tag = "10")]
    pub ipldlhhainl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pchmpdgnnoh {
    #[prost(uint32, tag = "8")]
    pub odoajjgmbcl: u32,
    #[prost(enumeration = "Hiaolbakjap", tag = "2")]
    pub status: i32,
    #[prost(uint64, tag = "6")]
    pub khpmknehicm: u64,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(message, optional, tag = "13")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "3")]
    pub oabbjahiplf: ::prost::alloc::vec::Vec<Gdbpclphbol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mhinmblghhd {
    #[prost(uint32, tag = "3")]
    pub stage_score: u32,
    #[prost(uint32, tag = "14")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akbgichhiec {
    #[prost(uint32, repeated, tag = "14")]
    pub fcbnhakhdgp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
    #[prost(uint32, tag = "12")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjphggpjpak {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRaidInfoScRsp {
    #[prost(message, repeated, tag = "2")]
    pub finished_raid_info_list: ::prost::alloc::vec::Vec<Akbgichhiec>,
    #[prost(message, repeated, tag = "4")]
    pub challenge_raid_list: ::prost::alloc::vec::Vec<Mhinmblghhd>,
    #[prost(uint32, repeated, tag = "9")]
    pub challenge_taken_reward_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klgeakcclhh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piafbbgfnij {
    #[prost(message, repeated, tag = "6")]
    pub ochclceejnj: ::prost::alloc::vec::Vec<Mhinmblghhd>,
    #[prost(uint32, repeated, tag = "15")]
    pub nfapjegaoaj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lblboonaocb {
    #[prost(uint32, tag = "5")]
    pub hecfckdebnh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnfjbjmmjdh {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub hecfckdebnh: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agdclpfjhnn {
    #[prost(message, optional, tag = "3")]
    pub omjmahjchma: ::core::option::Option<Mhinmblghhd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnjkjmmelek {
    #[prost(uint32, tag = "10")]
    pub dkepjdpejkg: u32,
    #[prost(uint32, tag = "9")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emcoabnpeio {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub dkepjdpejkg: u32,
    #[prost(uint32, tag = "10")]
    pub progress: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeecekbjbai {
    #[prost(uint32, tag = "15")]
    pub world_level: u32,
    #[prost(uint32, tag = "10")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfdbkipnljc {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub odoajjgmbcl: u32,
    #[prost(bool, tag = "15")]
    pub kdfkcjlhhaf: bool,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(message, repeated, tag = "11")]
    pub oabbjahiplf: ::prost::alloc::vec::Vec<Gdbpclphbol>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkhlhpdlelp {
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(uint32, tag = "2")]
    pub odoajjgmbcl: u32,
    #[prost(message, repeated, tag = "9")]
    pub oabbjahiplf: ::prost::alloc::vec::Vec<Gdbpclphbol>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekfhbigoaoa {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjeknnckkmn {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub ioinipjakno: ::prost::alloc::vec::Vec<Nkhlhpdlelp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkbgcgkojbc {
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(uint32, tag = "15")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haifpammcoo {
    #[prost(uint32, tag = "9")]
    pub odoajjgmbcl: u32,
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "Ojlofjkjbol", tag = "1")]
    pub reason: i32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(message, optional, tag = "13")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Okfnnpmacmo {
    #[prost(uint32, tag = "14")]
    pub cjdmbjfkieh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbhmhahgmdd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iejdpjiphhm {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub challenge_list: ::prost::alloc::vec::Vec<Okfnnpmacmo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dchcohjbglc {
    #[prost(message, optional, tag = "3")]
    pub collection_info: ::core::option::Option<Okfnnpmacmo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oacjjeilcel {
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
    #[prost(uint32, tag = "12")]
    pub kdfkcjlhhaf: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub odoajjgmbcl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eicnhhoahpk {
    #[prost(message, optional, tag = "4")]
    pub scene: ::core::option::Option<Gamnepoeghm>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbbjpnobale {
    #[prost(uint32, tag = "9")]
    pub nilfdlkmafi: u32,
    #[prost(uint32, tag = "6")]
    pub cnfbnbeponc: u32,
    #[prost(uint32, tag = "7")]
    pub nkggjfepand: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jngkhnhefio {
    #[prost(uint32, tag = "1")]
    pub ikgbpjebdil: u32,
    #[prost(uint32, tag = "15")]
    pub nilfdlkmafi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicRecommendCsReq {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicRecommendScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub gcpcjppnhep: ::prost::alloc::vec::Vec<Jngkhnhefio>,
    #[prost(message, repeated, tag = "7")]
    pub oacooejonpi: ::prost::alloc::vec::Vec<Hbbjpnobale>,
    #[prost(message, repeated, tag = "15")]
    pub opbmibmfijp: ::prost::alloc::vec::Vec<Hbbjpnobale>,
    #[prost(message, repeated, tag = "5")]
    pub dlppkmhpknn: ::prost::alloc::vec::Vec<Jngkhnhefio>,
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
    #[prost(bool, tag = "1")]
    pub is_enable: bool,
    #[prost(message, repeated, tag = "10")]
    pub hkahjojhckd: ::prost::alloc::vec::Vec<Jngkhnhefio>,
    #[prost(message, repeated, tag = "9")]
    pub ljcmcbglphd: ::prost::alloc::vec::Vec<Jngkhnhefio>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendCsReq {
    #[prost(uint32, tag = "11")]
    pub ipacgjheime: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicAvatarRecommendScRsp {
    #[prost(bool, tag = "6")]
    pub is_enable: bool,
    #[prost(uint32, tag = "8")]
    pub ipacgjheime: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetChallengeRecommendLineupListCsReq {
    #[prost(uint32, tag = "3")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnddkbfjajn {
    #[prost(uint32, repeated, tag = "8")]
    pub mmljpjgfieo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub kfmhpojihhm: u32,
    #[prost(uint32, tag = "4")]
    pub eaddcggalbh: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub oeoomalhndh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChallengeRecommendLineupListScRsp {
    #[prost(message, repeated, tag = "15")]
    pub dceckpanhhb: ::prost::alloc::vec::Vec<Cnddkbfjajn>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub challenge_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbbeicdglmf {
    #[prost(uint32, repeated, tag = "8")]
    pub ifpmafajeih: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idnpccehcno {
    #[prost(map = "uint32, message", tag = "2")]
    pub ppnaehflpbp: ::std::collections::HashMap<u32, Cbbeicdglmf>,
    #[prost(uint32, tag = "7")]
    pub lfnnhdhfhhf: u32,
    #[prost(uint32, tag = "5")]
    pub module_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knbmpibippa {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlcmiacbpic {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub cacgppamldi: ::prost::alloc::vec::Vec<Idnpccehcno>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mechmmigkcm {
    #[prost(uint32, repeated, tag = "9")]
    pub param_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub module_id: u32,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub lfnnhdhfhhf: u32,
    #[prost(enumeration = "Miheagbcomo", tag = "6")]
    pub ijmfkipnonm: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aanojnpkign {
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub module_id: u32,
    #[prost(uint32, tag = "15")]
    pub lfnnhdhfhhf: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldpmdlmlbkm {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub module_id: u32,
    #[prost(uint32, tag = "6")]
    pub lfnnhdhfhhf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Healbickohc {
    #[prost(uint32, tag = "6")]
    pub module_id: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(message, optional, tag = "5")]
    pub ckjginjpchi: ::core::option::Option<Cbbeicdglmf>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub lfnnhdhfhhf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhpanaaefoo {
    #[prost(string, tag = "14")]
    pub fjckeoknbjl: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub hkccfgpibim: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub gcpfdfinjfm: u32,
    #[prost(enumeration = "Jaopmddbnhf", tag = "15")]
    pub logebidmfjd: i32,
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
    #[prost(uint32, tag = "13")]
    pub kmeaphppmmn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pinbgggcohj {
    #[prost(enumeration = "Jaopmddbnhf", tag = "8")]
    pub logebidmfjd: i32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(string, tag = "7")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub fjckeoknbjl: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Foiiaioemeb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmeeeoeglfm {
    #[prost(message, repeated, tag = "11")]
    pub chmoeenomfo: ::prost::alloc::vec::Vec<ReplayInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnaddnlcafo {
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imgkgcdlmdp {
    #[prost(uint32, repeated, tag = "3")]
    pub bganmddkkng: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acepchmaakl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ompobackoap {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueBuff {
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueBuffList {
    #[prost(message, repeated, tag = "15")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueRoom {
    #[prost(uint32, tag = "12")]
    pub nhlhmblgmhb: u32,
    #[prost(uint32, tag = "4")]
    pub coaofgpmpeh: u32,
    #[prost(enumeration = "RogueRoomStatus", tag = "10")]
    pub ipealhjlchh: i32,
    #[prost(uint32, tag = "14")]
    pub hgmfeggjefb: u32,
    #[prost(enumeration = "RogueRoomStatus", tag = "7")]
    pub pombbddannj: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejnlmnonlhp {
    #[prost(uint32, tag = "11")]
    pub area_id: u32,
    #[prost(uint32, tag = "5")]
    pub obkcaelpmjg: u32,
    #[prost(message, repeated, tag = "3")]
    pub icafljagdjf: ::prost::alloc::vec::Vec<RogueRoom>,
    #[prost(uint32, tag = "1")]
    pub fgbhollbljj: u32,
    #[prost(uint32, tag = "14")]
    pub rouge_map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueArea {
    #[prost(enumeration = "RogueAreaStatus", tag = "6")]
    pub ciagmledkni: i32,
    #[prost(enumeration = "RogueStatus", tag = "10")]
    pub colefcfbmfl: i32,
    #[prost(uint32, tag = "13")]
    pub area_id: u32,
    #[prost(bool, tag = "9")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "15")]
    pub lbhjlpcjdpa: u32,
    #[prost(uint32, tag = "12")]
    pub rouge_map_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khklbeegfga {
    #[prost(uint32, tag = "12")]
    pub bnkppbpigao: u32,
    #[prost(message, repeated, tag = "9")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(enumeration = "Ndligjbgiob", tag = "2")]
    pub bjgnepeedln: i32,
    #[prost(uint32, tag = "15")]
    pub lgoahpclifi: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub libhjlceppp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub dlgefphngej: u32,
    #[prost(message, optional, tag = "7")]
    pub ikojacbmgbp: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "11")]
    pub kelfinijchp: bool,
    #[prost(uint32, tag = "5")]
    pub llbicifcppm: u32,
    #[prost(uint32, tag = "6")]
    pub dobpbbdgdeb: u32,
    #[prost(uint32, tag = "4")]
    pub fmiigikmfic: u32,
    #[prost(uint32, tag = "1")]
    pub boieefipneg: u32,
    #[prost(uint32, tag = "3")]
    pub ndnoieciinj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbjaggacofn {
    #[prost(message, optional, tag = "11")]
    pub mmekehmkeak: ::core::option::Option<RogueBuff>,
    #[prost(message, repeated, tag = "5")]
    pub okhiikdcohm: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfmgakbfbci {
    #[prost(uint32, tag = "5")]
    pub eabjlpegnml: u32,
    #[prost(message, repeated, tag = "3")]
    pub iojkgibkjki: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(message, repeated, tag = "13")]
    pub icjmgfnkkmb: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icbbdblcjaf {
    #[prost(uint32, tag = "14")]
    pub buff_id: u32,
    #[prost(message, optional, tag = "2")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(float, tag = "12")]
    pub ombgnopnjbm: f32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkhkanamljn {
    #[prost(message, repeated, tag = "9")]
    pub fcmofhkfaig: ::prost::alloc::vec::Vec<Icbbdblcjaf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bagnjpmdkjn {
    #[prost(uint32, tag = "4")]
    pub coifbdjbcde: u32,
    #[prost(map = "uint32, uint32", tag = "12")]
    pub dpdokifjogb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub pfofhemgfkl: u32,
    #[prost(uint32, tag = "5")]
    pub alkcacafbme: u32,
    #[prost(uint32, tag = "13")]
    pub ljbbgbbknde: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nikinnlipof {
    #[prost(uint32, tag = "12")]
    pub lblcaofonoo: u32,
    #[prost(uint32, tag = "13")]
    pub bbgfgggnacf: u32,
    #[prost(message, repeated, tag = "2")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<Bagnjpmdkjn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnppjinmlch {
    #[prost(message, optional, tag = "10")]
    pub ncoaibhnpoh: ::core::option::Option<Nikinnlipof>,
    #[prost(uint32, repeated, tag = "5")]
    pub hndkpbdodac: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daellbmlemm {
    #[prost(uint32, repeated, tag = "15")]
    pub gpgeckeckaf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbfdbkmmmmj {
    #[prost(uint32, repeated, tag = "1")]
    pub hnhlmheideh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlleaplokip {
    #[prost(uint32, tag = "3")]
    pub djbncmgokog: u32,
    #[prost(oneof = "mlleaplokip::Bdiiennceho", tags = "7, 5")]
    pub bdiiennceho: ::core::option::Option<mlleaplokip::Bdiiennceho>,
}
/// Nested message and enum types in `MLLEAPLOKIP`.
pub mod mlleaplokip {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Bdiiennceho {
        #[prost(message, tag = "7")]
        Jjpilaohina(super::ItemList),
        #[prost(message, tag = "5")]
        Lngmgdnifjb(super::RogueBuffList),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddlgliaibki {
    #[prost(uint32, tag = "10")]
    pub honnekkcdab: u32,
    #[prost(uint32, tag = "5")]
    pub ddfabecfcli: u32,
    #[prost(message, optional, tag = "15")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
    #[prost(uint32, repeated, tag = "3")]
    pub oblffickcjl: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfmoihgebdc {
    #[prost(uint32, tag = "7")]
    pub dmkpoikplmg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueVirtualItemInfo {
    #[prost(uint32, tag = "13")]
    pub llbicifcppm: u32,
    #[prost(uint32, tag = "10")]
    pub cbbngfnoiap: u32,
    #[prost(uint32, tag = "14")]
    pub nkpchpkfeld: u32,
    #[prost(uint32, tag = "15")]
    pub fdhpggfocbm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueInfo {
    #[prost(message, optional, tag = "401")]
    pub rogue_current_info: ::core::option::Option<RogueCurrentInfo>,
    #[prost(message, optional, tag = "1094")]
    pub rogue_info_data: ::core::option::Option<RogueInfoData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueInfoData {
    #[prost(message, optional, tag = "15")]
    pub rogue_virtual_item_info: ::core::option::Option<RogueCurVirtualItemInfo>,
    #[prost(message, optional, tag = "9")]
    pub rogue_season_info: ::core::option::Option<RogueSeasonInfo>,
    #[prost(message, optional, tag = "11")]
    pub rogue_area_info: ::core::option::Option<RogueAreaInfo>,
    #[prost(message, optional, tag = "10")]
    pub rogue_aeon_info: ::core::option::Option<RogueAeonInfo>,
    #[prost(message, optional, tag = "3")]
    pub rogue_score_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCurrentInfo {
    #[prost(message, optional, tag = "3")]
    pub kcifadmmpgd: ::core::option::Option<Fbkohngmgdp>,
    #[prost(message, optional, tag = "2")]
    pub ooieepcbnoi: ::core::option::Option<RogueVirtualItem>,
    #[prost(message, optional, tag = "9")]
    pub nemgeopcbao: ::core::option::Option<Imeaiolmnin>,
    #[prost(message, optional, tag = "14")]
    pub amlcaeijmee: ::core::option::Option<Hpoepjidfce>,
    #[prost(bool, tag = "10")]
    pub odemegikepp: bool,
    #[prost(message, optional, tag = "12")]
    pub rogue_aeon_info: ::core::option::Option<Npohddcedlp>,
    #[prost(message, optional, tag = "1")]
    pub lmmlddkkkai: ::core::option::Option<Ejnlmnonlhp>,
    #[prost(message, optional, tag = "13")]
    pub ncoaibhnpoh: ::core::option::Option<Iainodgegpd>,
    #[prost(enumeration = "RogueStatus", tag = "5")]
    pub status: i32,
    #[prost(message, optional, tag = "6")]
    pub fheodgileep: ::core::option::Option<Hbaemijihkf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueSeasonInfo {
    #[prost(int64, tag = "3")]
    pub end_time: i64,
    #[prost(int64, tag = "13")]
    pub begin_time: i64,
    #[prost(uint32, tag = "6")]
    pub hkehmdhaelp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAreaInfo {
    #[prost(message, repeated, tag = "13")]
    pub jfkcnnkgmac: ::prost::alloc::vec::Vec<RogueArea>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAeonInfo {
    #[prost(uint32, tag = "13")]
    pub aaimmailkie: u32,
    #[prost(uint32, tag = "2")]
    pub khigkehgbka: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "14")]
    pub pblgdflmgoe: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueCurVirtualItemInfo {
    #[prost(uint32, tag = "15")]
    pub apainneepif: u32,
    #[prost(uint32, tag = "14")]
    pub jfglbipmpna: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbaemijihkf {
    #[prost(message, repeated, tag = "12")]
    pub maze_buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iainodgegpd {
    #[prost(message, optional, tag = "6")]
    pub ncoaibhnpoh: ::core::option::Option<Nikinnlipof>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imeaiolmnin {
    #[prost(uint32, repeated, tag = "14")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub kacbngfcaog: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub modehmlelln: ::core::option::Option<Ddlgliaibki>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlbgjdchhak {
    #[prost(message, optional, tag = "10")]
    pub ceklcnnhibg: ::core::option::Option<Bbfdbkmmmmj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npohddcedlp {
    #[prost(uint32, tag = "8")]
    pub hkplkkpgpii: u32,
    #[prost(bool, tag = "2")]
    pub pblgdflmgoe: bool,
    #[prost(uint32, tag = "3")]
    pub khigkehgbka: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbkohngmgdp {
    #[prost(uint32, repeated, tag = "15")]
    pub lnamejjcnho: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfoekfbioje {
    #[prost(uint32, tag = "6")]
    pub khigkehgbka: u32,
    #[prost(uint32, tag = "3")]
    pub hkplkkpgpii: u32,
    #[prost(uint32, tag = "5")]
    pub aaimmailkie: u32,
    #[prost(bool, tag = "4")]
    pub pblgdflmgoe: bool,
    #[prost(uint32, repeated, tag = "14")]
    pub aeon_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ggflejfgnbo {
    #[prost(uint32, tag = "8")]
    pub ahmoohapcmc: u32,
    #[prost(uint32, tag = "14")]
    pub njedcjaakai: u32,
    #[prost(uint32, tag = "6")]
    pub score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlhapofnejj {
    #[prost(uint32, tag = "8")]
    pub ekdnbekfecl: u32,
    #[prost(message, repeated, tag = "1")]
    pub lnicopniaho: ::prost::alloc::vec::Vec<Ggflejfgnbo>,
    #[prost(float, tag = "3")]
    pub pohapeahbnh: f32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flbahdbffpm {
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "7")]
    pub slot_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpidlhpaaba {
    #[prost(message, repeated, tag = "1")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueBuff>,
    #[prost(message, repeated, tag = "2")]
    pub avatar_list: ::prost::alloc::vec::Vec<Flbahdbffpm>,
    #[prost(uint32, repeated, tag = "7")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngblipaibaa {
    #[prost(message, optional, tag = "14")]
    pub nlkjpggjkkd: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "93")]
    pub fgffebknmhg: u32,
    #[prost(bool, tag = "13")]
    pub jkchfnikomk: bool,
    #[prost(message, optional, tag = "9")]
    pub mbdmcbifhlp: ::core::option::Option<Nlhapofnejj>,
    #[prost(uint32, tag = "10")]
    pub score: u32,
    #[prost(uint32, tag = "3")]
    pub achnahdmhek: u32,
    #[prost(uint32, tag = "11")]
    pub fjjebhknoeg: u32,
    #[prost(message, optional, tag = "15")]
    pub emndbpmaigd: ::core::option::Option<Nlbphdcpcpf>,
    #[prost(message, optional, tag = "7")]
    pub hoiminmjkkg: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(uint32, tag = "4")]
    pub jfglbipmpna: u32,
    #[prost(message, optional, tag = "6")]
    pub record_info: ::core::option::Option<Kpidlhpaaba>,
    #[prost(bool, tag = "12")]
    pub is_win: bool,
    #[prost(message, optional, tag = "2")]
    pub afkoelagijp: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub lombkjkbige: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub fnlfmleknne: ::core::option::Option<RogueScoreRewardInfo>,
    #[prost(uint32, tag = "8")]
    pub fajodkfnjjd: u32,
    #[prost(uint32, tag = "1264")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueScoreRewardInfo {
    #[prost(bool, tag = "12")]
    pub mcfppponpie: bool,
    #[prost(bool, tag = "4")]
    pub bggbfkoggmg: bool,
    #[prost(int64, tag = "5")]
    pub ohfhfclebko: i64,
    #[prost(uint32, tag = "3")]
    pub mnakfnfjlfk: u32,
    #[prost(uint32, tag = "7")]
    pub mghpcllhakj: u32,
    #[prost(int64, tag = "1")]
    pub mfgohfeifcj: i64,
    #[prost(uint32, repeated, tag = "6")]
    pub epmlnnjlphk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekldbjmnoho {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "13")]
    pub mockiopkeke: u32,
    #[prost(uint32, tag = "8")]
    pub exp: u32,
    #[prost(uint32, tag = "1")]
    pub buff_aeon_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueDialogueEventParam {
    #[prost(float, tag = "14")]
    pub ratio: f32,
    #[prost(int32, tag = "13")]
    pub int_value: i32,
    #[prost(uint32, tag = "9")]
    pub arg_id: u32,
    #[prost(uint32, tag = "1")]
    pub dialogue_event_id: u32,
    #[prost(bool, tag = "7")]
    pub is_valid: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfmgblneigg {
    #[prost(uint32, tag = "7")]
    pub oejingdknnd: u32,
    #[prost(message, repeated, tag = "3")]
    pub rogue_dialogue_event_param: ::prost::alloc::vec::Vec<RogueDialogueEventParam>,
    #[prost(uint32, tag = "5")]
    pub game_mode_type: u32,
    #[prost(uint32, tag = "11")]
    pub mfpdbllkbcg: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub kpigppfbpek: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub nglokpibfpn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjgjgcpaamb {
    #[prost(uint32, repeated, tag = "4")]
    pub cjcaiomcnpn: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Oampghnigki", tag = "9")]
    pub hbnkoncecji: i32,
    #[prost(oneof = "mjgjgcpaamb::Bdiiennceho", tags = "10")]
    pub bdiiennceho: ::core::option::Option<mjgjgcpaamb::Bdiiennceho>,
}
/// Nested message and enum types in `MJGJGCPAAMB`.
pub mod mjgjgcpaamb {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Bdiiennceho {
        #[prost(message, tag = "10")]
        Jjpilaohina(super::ItemList),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojhboeonjjn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckfakkdeifn {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub rogue_info: ::core::option::Option<RogueInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjagneeimbm {
    #[prost(uint32, repeated, tag = "3")]
    pub jccfcjenggp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub area_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub rouge_event_id: u32,
    #[prost(uint32, tag = "1")]
    pub buff_aeon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmnjnekdjmd {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "10")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
    #[prost(message, optional, tag = "13")]
    pub rogue_info: ::core::option::Option<RogueInfo>,
    #[prost(message, optional, tag = "4")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnfmogkbjni {
    #[prost(uint32, tag = "1")]
    pub area_id: u32,
    #[prost(uint32, tag = "12")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nojkbgbkbel {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "12")]
    pub rogue_info: ::core::option::Option<RogueInfo>,
    #[prost(message, optional, tag = "6")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipeieefmjei {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiojlfciecn {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "8")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub rogue_info: ::core::option::Option<RogueInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljmdfpoaeel {
    #[prost(message, optional, tag = "13")]
    pub finish_info: ::core::option::Option<Ngblipaibaa>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbkobmpcnkb {
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boahpgonjdg {
    #[prost(uint32, repeated, tag = "5")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ignfpcdgbdf {
    #[prost(uint32, repeated, tag = "12")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bllgmnbdnef {
    #[prost(uint32, repeated, tag = "11")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub modehmlelln: ::core::option::Option<Ddlgliaibki>,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub mmlaofppoij: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Limmnaoooem {
    #[prost(message, optional, tag = "14")]
    pub modehmlelln: ::core::option::Option<Ddlgliaibki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmpmmjiejee {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dogbihcbmkg {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub shop_info: ::core::option::Option<Bkhkanamljn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfpjjnemlii {
    #[prost(uint32, tag = "10")]
    pub rouge_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hjngeabejec {
    #[prost(message, optional, tag = "5")]
    pub rogue_buff: ::core::option::Option<RogueBuff>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(bool, tag = "8")]
    pub is_succ: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iogpehpgong {
    #[prost(uint32, tag = "8")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhgjdnfhina {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub finish_info: ::core::option::Option<Ngblipaibaa>,
    #[prost(message, optional, tag = "11")]
    pub rogue_info: ::core::option::Option<RogueInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjdddincdbk {
    #[prost(bool, tag = "5")]
    pub odemegikepp: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Neebfikiopl {
    #[prost(message, optional, tag = "8")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "10")]
    pub finish_info: ::core::option::Option<Ngblipaibaa>,
    #[prost(message, optional, tag = "12")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(bool, tag = "9")]
    pub gcbdlkoickc: bool,
    #[prost(message, optional, tag = "5")]
    pub rogue_score_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcjdnbaagbd {
    #[prost(uint32, tag = "6")]
    pub coaofgpmpeh: u32,
    #[prost(uint32, tag = "14")]
    pub hgmfeggjefb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mglmdmcahnj {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "9")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
    #[prost(uint32, tag = "10")]
    pub obkcaelpmjg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkafgmifbmc {
    #[prost(message, optional, tag = "7")]
    pub eiaobndnnaj: ::core::option::Option<RogueRoom>,
    #[prost(uint32, tag = "8")]
    pub rouge_map_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hebcppedahe {
    #[prost(uint32, tag = "4")]
    pub rouge_event_id: u32,
    #[prost(bool, tag = "14")]
    pub hblikpiceke: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djiinpgbllp {
    #[prost(message, optional, tag = "15")]
    pub pfjllgdaabn: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eiennhkhngm {
    #[prost(uint32, tag = "8")]
    pub count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExchangeRogueRewardKeyScRsp {
    #[prost(uint32, tag = "4")]
    pub count: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amlpffpjfne {
    #[prost(uint32, tag = "10")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ienmjmlhdap {
    #[prost(message, optional, tag = "2")]
    pub get_item_list: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "13")]
    pub bpjmejclopp: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ckaijholecg {
    #[prost(uint32, tag = "10")]
    pub buff_aeon_id: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iamdhpncefk {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub buff_aeon_id: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(message, optional, tag = "4")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbmeefdggcb {
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub buff_aeon_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gflojepbpob {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flndpfolcma {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub score_reward_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcmlgkkpajf {
    #[prost(uint32, repeated, tag = "8")]
    pub ljlgcagefed: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub mnakfnfjlfk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adcfokkghgf {
    #[prost(uint32, tag = "15")]
    pub mnakfnfjlfk: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "11")]
    pub rogue_score_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ockpkndgmec {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iokfkcdljfi {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub rogue_score_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddnjnhmaepn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afebdgelmof {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub edpjkhbdgdb: ::prost::alloc::vec::Vec<Ekldbjmnoho>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehdgceckhgj {
    #[prost(uint32, tag = "5")]
    pub buff_aeon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkhocibgbpa {
    #[prost(message, optional, tag = "13")]
    pub rogue_aeon_info: ::core::option::Option<Ekldbjmnoho>,
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nofgochcbka {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoaiokmcagd {
    #[prost(message, optional, tag = "14")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Acbahcglcgj {
    #[prost(uint32, tag = "8")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maeglhfhomk {
    #[prost(message, optional, tag = "2")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcagnekhmkp {
    #[prost(message, optional, tag = "15")]
    pub rogue_virtual_item_info: ::core::option::Option<RogueVirtualItemInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlnclekkehc {
    #[prost(enumeration = "RogueStatus", tag = "11")]
    pub status: i32,
    #[prost(bool, tag = "13")]
    pub ibhhfpljnaf: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jclljdphacj {
    #[prost(message, optional, tag = "6")]
    pub rogue_score_info: ::core::option::Option<RogueScoreRewardInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imdglpbhkpd {
    #[prost(uint32, repeated, tag = "13")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfgidkamlln {
    #[prost(message, optional, tag = "4")]
    pub dklhnhnlgja: ::core::option::Option<Kfoekfbioje>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abfblekmnme {
    #[prost(message, optional, tag = "7")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "5")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "8")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppbnbncdjgf {
    #[prost(uint32, tag = "14")]
    pub hgmfeggjefb: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kohlfmhnoki {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lckjckjblec: ::core::option::Option<Abfblekmnme>,
    #[prost(uint32, tag = "5")]
    pub hgmfeggjefb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dclljfekkck {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omdippnffla {
    #[prost(message, optional, tag = "15")]
    pub lckjckjblec: ::core::option::Option<Abfblekmnme>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pohiiggedkp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iohkfhiofad {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub lckjckjblec: ::core::option::Option<Abfblekmnme>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lolbgmkhdpe {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipenlipcjdg {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub hgmfeggjefb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueCommonBuff {
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
    #[prost(uint32, tag = "6")]
    pub pfcmfcdphaf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjclkikhmln {
    #[prost(message, repeated, tag = "2")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCommonBuffSelectInfo {
    #[prost(uint32, repeated, tag = "4")]
    pub first_buff_type_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub roll_buff_count: u32,
    #[prost(uint32, tag = "8")]
    pub roll_buff_max_count: u32,
    #[prost(bool, tag = "3")]
    pub can_roll: bool,
    #[prost(enumeration = "Ndligjbgiob", tag = "5")]
    pub source_type: i32,
    #[prost(uint32, tag = "14")]
    pub source_hint_id: u32,
    #[prost(uint32, tag = "7")]
    pub roll_buff_free_count: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub handbook_unlock_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub source_cur_count: u32,
    #[prost(uint32, tag = "10")]
    pub source_total_count: u32,
    #[prost(message, repeated, tag = "13")]
    pub select_buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "11")]
    pub certain_select_buff_id: u32,
    #[prost(message, optional, tag = "1")]
    pub roll_buff_cost_data: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edfhickfjgk {
    #[prost(uint32, tag = "4")]
    pub pmemphohpnm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjjkfmpdgbo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfocogplmnb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmajlpmbhpi {
    #[prost(message, optional, tag = "9")]
    pub opjdnljomip: ::core::option::Option<RogueCommonBuffSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaeodmodlbn {
    #[prost(message, optional, tag = "5")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "12")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaemicfolka {
    #[prost(message, repeated, tag = "15")]
    pub fcmofhkfaig: ::prost::alloc::vec::Vec<Eaeodmodlbn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpidjomcbkb {
    #[prost(message, repeated, tag = "9")]
    pub icjmgfnkkmb: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "4")]
    pub eabjlpegnml: u32,
    #[prost(message, repeated, tag = "8")]
    pub iojkgibkjki: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcflkflhmmf {
    #[prost(message, repeated, tag = "10")]
    pub icjmgfnkkmb: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "1")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idckjkffecm {
    #[prost(uint32, tag = "15")]
    pub nnbjkbndldc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dahbddcbige {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mclbeajceld {
    #[prost(message, repeated, tag = "12")]
    pub naabnlcgmhn: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "7")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfakigehnjc {
    #[prost(uint32, tag = "11")]
    pub pmemphohpnm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjkccclkbce {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kaboejombck {
    #[prost(uint32, tag = "12")]
    pub eabjlpegnml: u32,
    #[prost(message, repeated, tag = "1")]
    pub pljehopljei: ::prost::alloc::vec::Vec<RogueCommonBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Debjjgpkleb {
    #[prost(uint32, tag = "13")]
    pub pmemphohpnm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcfgpojohlk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icnphjaadde {
    #[prost(message, optional, tag = "8")]
    pub effflobngfa: ::core::option::Option<Hjclkikhmln>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alplicbfmao {
    #[prost(uint32, tag = "6")]
    pub ljbbgbbknde: u32,
    #[prost(uint32, tag = "1")]
    pub alkcacafbme: u32,
    #[prost(map = "uint32, uint32", tag = "4")]
    pub dpdokifjogb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "9")]
    pub coifbdjbcde: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cegdipmobdd {
    #[prost(uint32, tag = "3")]
    pub pjpeddjhlll: u32,
    #[prost(bool, tag = "15")]
    pub hemodcfenhp: bool,
    #[prost(message, optional, tag = "11")]
    pub ffahpfgkkbj: ::core::option::Option<Alplicbfmao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npiojcapicp {
    #[prost(message, optional, tag = "14")]
    pub dogfmmdkgdc: ::core::option::Option<Alplicbfmao>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlgmkegmkgm {
    #[prost(uint32, tag = "9")]
    pub alkcacafbme: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfdaadklani {
    #[prost(message, optional, tag = "2")]
    pub dogfmmdkgdc: ::core::option::Option<Alplicbfmao>,
    #[prost(uint32, tag = "6")]
    pub bbdanmaelin: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcckoapcbni {
    #[prost(message, optional, tag = "13")]
    pub dogfmmdkgdc: ::core::option::Option<Alplicbfmao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgkofjgbidg {
    #[prost(uint32, tag = "8")]
    pub pjpeddjhlll: u32,
    #[prost(message, optional, tag = "10")]
    pub ffahpfgkkbj: ::core::option::Option<Alplicbfmao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goipokfhfbm {
    #[prost(message, optional, tag = "5")]
    pub dogfmmdkgdc: ::core::option::Option<Alplicbfmao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agbncfbcclc {
    #[prost(message, repeated, tag = "6")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<Alplicbfmao>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnnpljghdpj {
    #[prost(uint32, repeated, tag = "15")]
    pub hndkpbdodac: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub mjdaenflogb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhmdikfcpbn {
    #[prost(uint32, tag = "6")]
    pub ilkboaibogd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fbifegdkedd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhmmjihcogf {
    #[prost(uint32, repeated, tag = "8")]
    pub gpgeckeckaf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgneefcadkj {
    #[prost(uint32, repeated, tag = "15")]
    pub mphbmfecgga: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mobleomkccg {
    #[prost(uint32, tag = "15")]
    pub iibniholphp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aagfbgahgmc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iflakoogjjl {
    #[prost(uint32, tag = "10")]
    pub eabjlpegnml: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub geeigfigbnj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbhmhapcjgf {
    #[prost(uint32, tag = "8")]
    pub dekkjgjfobm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gkjhpelmhhm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nidbfakbkmf {
    #[prost(uint32, tag = "3")]
    pub eabjlpegnml: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub hffddfikcgi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgffnifgpda {
    #[prost(uint32, tag = "2")]
    pub mpfdbepdakc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekmlfcpkgpd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omjpkpnnmjm {
    #[prost(uint32, repeated, tag = "9")]
    pub dfnkojahcpd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cladkmnegfm {
    #[prost(uint32, tag = "13")]
    pub anloclpeejn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imkiidnmogk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kncoeenppon {
    #[prost(uint32, repeated, tag = "8")]
    pub haeonccbkeg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hbnficifnna {
    #[prost(uint32, tag = "14")]
    pub ilkboaibogd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nplhoaooeda {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfgpgfkmbcc {
    #[prost(uint32, tag = "7")]
    pub eabjlpegnml: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub haeonccbkeg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Efclaehcdkp {
    #[prost(uint32, tag = "10")]
    pub ilkboaibogd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Akjchbmolej {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmklnahpjmg {
    #[prost(uint32, tag = "15")]
    pub fjdhaoplaci: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fldlpmchajc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fiidpggkano {
    #[prost(message, optional, tag = "13")]
    pub gehpkelfcog: ::core::option::Option<Agbncfbcclc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcmdbofkgcp {
    #[prost(uint32, repeated, tag = "2")]
    pub hnhlmheideh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueVirtualItem {
    #[prost(uint32, tag = "12")]
    pub bnpobebnljm: u32,
    #[prost(uint32, tag = "7")]
    pub leglhjaflhg: u32,
    #[prost(uint32, tag = "3")]
    pub kobnngimgej: u32,
    #[prost(uint32, tag = "8")]
    pub ffaacfipnph: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inadcanbfkk {
    #[prost(uint32, tag = "13")]
    pub num: u32,
    #[prost(uint32, tag = "5")]
    pub nflbaibnmig: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dbbpflmidlo {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueSyncContextBoardEvent {
    #[prost(uint32, tag = "8")]
    pub board_event_id: u32,
    #[prost(uint32, tag = "15")]
    pub modifier_effect_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flklljocmml {
    #[prost(message, optional, tag = "4")]
    pub item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imbmfnlhnfk {
    #[prost(message, optional, tag = "5")]
    pub impliojgbio: ::core::option::Option<RogueSyncContextBoardEvent>,
    #[prost(message, optional, tag = "6")]
    pub giohafgbgmc: ::core::option::Option<Flklljocmml>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ldehihbbghd {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eoglkhklfkl {
    #[prost(int32, tag = "1")]
    pub count: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jemojilpcjh {
    #[prost(uint32, tag = "14")]
    pub alkcacafbme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocgljmaoppn {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueAdventureRoomGameplayWolfGunTarget {
    #[prost(
        oneof = "rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase",
        tags = "9, 11, 8, 7"
    )]
    pub target_impl_case: ::core::option::Option<
        rogue_adventure_room_gameplay_wolf_gun_target::TargetImplCase,
    >,
}
/// Nested message and enum types in `RogueAdventureRoomGameplayWolfGunTarget`.
pub mod rogue_adventure_room_gameplay_wolf_gun_target {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum TargetImplCase {
        #[prost(message, tag = "9")]
        TargetNone(super::Ldehihbbghd),
        #[prost(message, tag = "11")]
        TargetCoin(super::Eoglkhklfkl),
        #[prost(message, tag = "8")]
        TargetMiracle(super::Jemojilpcjh),
        #[prost(message, tag = "7")]
        TargetRuanmei(super::Ocgljmaoppn),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkibokpgacl {
    #[prost(message, repeated, tag = "12")]
    pub battle_target_list: ::prost::alloc::vec::Vec<
        RogueAdventureRoomGameplayWolfGunTarget,
    >,
    #[prost(uint32, tag = "2")]
    pub pknlgdhehkm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jaklgmjjhnj {
    #[prost(oneof = "jaklgmjjhnj::ChallengeInfoCase", tags = "7")]
    pub challenge_info_case: ::core::option::Option<jaklgmjjhnj::ChallengeInfoCase>,
}
/// Nested message and enum types in `JAKLGMJJHNJ`.
pub mod jaklgmjjhnj {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "7")]
        Ekijbocbmfe(super::Fkibokpgacl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhoghmmeoeo {
    #[prost(double, tag = "2")]
    pub ihcnkipiifj: f64,
    #[prost(uint32, tag = "4")]
    pub status: u32,
    #[prost(message, optional, tag = "10")]
    pub jocejhghlem: ::core::option::Option<Jaklgmjjhnj>,
    #[prost(uint32, tag = "11")]
    pub nihpbaafkep: u32,
    #[prost(uint32, tag = "12")]
    pub score: u32,
    #[prost(uint32, tag = "13")]
    pub lapbaeffpoc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alkbajcjoap {
    #[prost(message, optional, tag = "8")]
    pub fgjfmleoiin: ::core::option::Option<Nhoghmmeoeo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bbnejkfjbal {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mehflhckelc {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub fgjfmleoiin: ::core::option::Option<Nhoghmmeoeo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpiolccgcon {
    #[prost(uint32, tag = "8")]
    pub njicjkggcob: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub pdfeoggpkoa: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbchlgldnnk {
    #[prost(message, optional, tag = "1")]
    pub fgjfmleoiin: ::core::option::Option<Nhoghmmeoeo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pdfcilblifn {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flpnicoelha {
    #[prost(message, optional, tag = "13")]
    pub fgjfmleoiin: ::core::option::Option<Nhoghmmeoeo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjgihjpmclc {
    #[prost(uint32, tag = "13")]
    pub kcenjnfnepl: u32,
    #[prost(uint32, tag = "10")]
    pub score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjhhihhkghb {
    #[prost(message, optional, tag = "5")]
    pub fgjfmleoiin: ::core::option::Option<Nhoghmmeoeo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lijeakikpba {
    #[prost(message, optional, tag = "10")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "4")]
    pub hnncgibohco: bool,
    #[prost(uint32, tag = "5")]
    pub alkcacafbme: u32,
    #[prost(bool, tag = "2")]
    pub bkaeeigenoa: bool,
    #[prost(message, optional, tag = "9")]
    pub idimbkmjoma: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddnhbfcdpjn {
    #[prost(message, optional, tag = "8")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "6")]
    pub bkaeeigenoa: bool,
    #[prost(uint32, tag = "3")]
    pub hcfgmkccaga: u32,
    #[prost(message, optional, tag = "7")]
    pub idimbkmjoma: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "2")]
    pub hnncgibohco: bool,
    #[prost(uint32, tag = "14")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ephhhloclpk {
    #[prost(message, repeated, tag = "2")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<Lijeakikpba>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glccjmlodbh {
    #[prost(message, repeated, tag = "7")]
    pub buff_list: ::prost::alloc::vec::Vec<Ddnhbfcdpjn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhjknepdplm {
    #[prost(bool, tag = "12")]
    pub ongebdmkjla: bool,
    #[prost(uint32, tag = "8")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcnoeglfagc {
    #[prost(bool, tag = "12")]
    pub eeedipmfafl: bool,
    #[prost(message, optional, tag = "15")]
    pub fheodgileep: ::core::option::Option<Glccjmlodbh>,
    #[prost(message, optional, tag = "4")]
    pub nnifkhlbmfg: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjhefkdpkdn {
    #[prost(uint32, tag = "4")]
    pub rouge_event_id: u32,
    #[prost(bool, tag = "8")]
    pub ongebdmkjla: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poghbapadkp {
    #[prost(message, optional, tag = "10")]
    pub nnifkhlbmfg: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub ncoaibhnpoh: ::core::option::Option<Ephhhloclpk>,
    #[prost(bool, tag = "9")]
    pub eeedipmfafl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aoljnpjmiad {
    #[prost(uint32, tag = "6")]
    pub alkcacafbme: u32,
    #[prost(uint32, tag = "13")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfobhlimmin {
    #[prost(uint32, repeated, tag = "6")]
    pub gblfcabbjal: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajbnfhbkgig {
    #[prost(message, optional, tag = "9")]
    pub ncoaibhnpoh: ::core::option::Option<Ephhhloclpk>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dohcokmcfhh {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub fheodgileep: ::core::option::Option<Glccjmlodbh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehadjlcldgf {
    #[prost(uint32, tag = "13")]
    pub rouge_event_id: u32,
    #[prost(uint32, tag = "1")]
    pub alkcacafbme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ailcbmndice {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub nijpglcpaeo: ::core::option::Option<RogueCommonBuff>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dcapacblopd {
    #[prost(uint32, tag = "4")]
    pub bagodpgfnmg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iihokpojpac {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mghiieegpnj {
    #[prost(uint32, tag = "8")]
    pub rouge_buff_id: u32,
    #[prost(uint32, tag = "6")]
    pub rouge_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hfkgcdfmeed {
    #[prost(message, optional, tag = "8")]
    pub rogue_buff: ::core::option::Option<RogueCommonBuff>,
    #[prost(bool, tag = "14")]
    pub is_succ: bool,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fillholaipd {
    #[prost(uint32, tag = "12")]
    pub rouge_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnhanceCommonRogueBuffInfoScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub enhanced_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpkgjghajmh {
    #[prost(uint32, tag = "5")]
    pub pdhdkbjjofj: u32,
    #[prost(message, repeated, tag = "8")]
    pub glafmdckcli: ::prost::alloc::vec::Vec<Kjjhdcbagmk>,
    #[prost(enumeration = "Nfihmnfegko", tag = "1")]
    pub nflbaibnmig: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjjhdcbagmk {
    #[prost(message, optional, tag = "13")]
    pub mhbcmnckkeb: ::core::option::Option<Kciglnknjlh>,
    #[prost(enumeration = "Heackdpiaek", tag = "12")]
    pub source: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ddnlkcbdlfh {
    #[prost(int32, tag = "2")]
    pub lfkkldpmeda: i32,
    #[prost(uint32, tag = "6")]
    pub key: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anffflbocgk {
    #[prost(uint32, tag = "15")]
    pub igacjhckehc: u32,
    #[prost(bool, tag = "10")]
    pub docbjcjfdal: bool,
    #[prost(message, repeated, tag = "7")]
    pub kokjnmhlnib: ::prost::alloc::vec::Vec<Ddnlkcbdlfh>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fiabcamfjpo {
    #[prost(map = "uint32, int32", tag = "10")]
    pub didoafpblhp: ::std::collections::HashMap<u32, i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcljaodhcca {
    #[prost(message, optional, tag = "15")]
    pub olieicgeedi: ::core::option::Option<Anffflbocgk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idmbojbhdhb {
    #[prost(message, optional, tag = "10")]
    pub olieicgeedi: ::core::option::Option<Anffflbocgk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nljoeakkjkh {
    #[prost(message, optional, tag = "3")]
    pub olieicgeedi: ::core::option::Option<Anffflbocgk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fplebodijbb {
    #[prost(message, optional, tag = "6")]
    pub olieicgeedi: ::core::option::Option<Anffflbocgk>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lakppmmfcmp {
    #[prost(message, optional, tag = "4")]
    pub value: ::core::option::Option<Fiabcamfjpo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lablhoafnbj {
    #[prost(message, repeated, tag = "13")]
    pub bdmaiclgamc: ::prost::alloc::vec::Vec<Anffflbocgk>,
    #[prost(message, optional, tag = "8")]
    pub lopjfehdeag: ::core::option::Option<Fiabcamfjpo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aehmdppabeb {
    #[prost(uint32, tag = "11")]
    pub fdgaifoeaff: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbbmfedlcjj {
    #[prost(uint32, tag = "15")]
    pub fdgaifoeaff: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pooaecfiigh {
    #[prost(map = "uint32, bool", tag = "12")]
    pub nnnjgmnhhag: ::std::collections::HashMap<u32, bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kciglnknjlh {
    #[prost(
        oneof = "kciglnknjlh::ChallengeInfoCase",
        tags = "3, 10, 651, 164, 949, 307, 833, 329, 1468, 918, 115, 1620, 349, 1972, 1791, 587, 1166, 964, 1585, 96, 725, 1081, 444, 1596, 1946, 1476"
    )]
    pub challenge_info_case: ::core::option::Option<kciglnknjlh::ChallengeInfoCase>,
}
/// Nested message and enum types in `KCIGLNKNJLH`.
pub mod kciglnknjlh {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "3")]
        Jhbjjffhpge(super::Inadcanbfkk),
        #[prost(message, tag = "10")]
        Dgnghplfdnk(super::Inadcanbfkk),
        #[prost(message, tag = "651")]
        Mmekehmkeak(super::RogueCommonBuff),
        #[prost(message, tag = "164")]
        Clecggeikgn(super::RogueCommonBuff),
        #[prost(message, tag = "949")]
        Hiodibmlgkd(super::Npiojcapicp),
        #[prost(message, tag = "307")]
        Bjlmdlkbhlm(super::Nlgmkegmkgm),
        #[prost(message, tag = "833")]
        Kpcgefahiii(super::Dfdaadklani),
        #[prost(message, tag = "329")]
        Aghibpnnlbn(super::Lcckoapcbni),
        #[prost(message, tag = "1468")]
        Ijjgmblnhbg(super::Kgkofjgbidg),
        #[prost(message, tag = "918")]
        Elcdkchodmc(super::Goipokfhfbm),
        #[prost(message, tag = "115")]
        Jhnlgmcmkhk(super::Dbbpflmidlo),
        #[prost(message, tag = "1620")]
        Dkaofoeiklg(super::Lcljaodhcca),
        #[prost(message, tag = "349")]
        Ndhiefcknfk(super::Idmbojbhdhb),
        #[prost(message, tag = "1972")]
        Ldjjkblkmjb(super::Nljoeakkjkh),
        #[prost(message, tag = "1791")]
        Clnkjicohpa(super::Fplebodijbb),
        #[prost(message, tag = "587")]
        Ffjbagjmfad(super::Lakppmmfcmp),
        #[prost(message, tag = "1166")]
        Eapnbbchoaj(super::Aehmdppabeb),
        #[prost(message, tag = "964")]
        Lfbbckaiedd(super::Kbbmfedlcjj),
        #[prost(message, tag = "1585")]
        Kefoidboikp(super::Kplobgogaln),
        #[prost(message, tag = "96")]
        Oideceeeknk(super::Jhhijkjnjjh),
        #[prost(message, tag = "725")]
        Mlmldildnmo(super::Fbhnofkeckb),
        #[prost(message, tag = "1081")]
        Kdiidlgfken(super::Jmmfbcmmkll),
        #[prost(message, tag = "444")]
        Lbejpigobnn(super::Jmmfbcmmkll),
        #[prost(message, tag = "1596")]
        Ipengnblokm(super::Jmmfbcmmkll),
        #[prost(message, tag = "1946")]
        Ecipcacjanc(super::Bcihkekhfee),
        #[prost(message, tag = "1476")]
        Gcghciiimla(super::Helfbmifami),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueFormulaSelectInfo {
    #[prost(message, optional, tag = "11")]
    pub roll_formula_cost_data: ::core::option::Option<ItemCostList>,
    #[prost(uint32, repeated, tag = "8")]
    pub select_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub roll_formula_free_count: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub handbook_unlock_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub roll_formula_count: u32,
    #[prost(bool, tag = "2")]
    pub can_roll: bool,
    #[prost(uint32, tag = "5")]
    pub roll_formula_max_count: u32,
    #[prost(uint32, tag = "7")]
    pub hint_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Flpppffpncn {
    #[prost(uint32, tag = "11")]
    pub ldnimnmppgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajjpbeokcjh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhoebclbnne {
    #[prost(uint32, tag = "4")]
    pub eabjlpegnml: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub likngjknfoh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mgminpoeghh {
    #[prost(uint32, tag = "10")]
    pub ldnimnmppgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eibjgpdmcnp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ebihfhnfmga {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmoahjfnpio {
    #[prost(message, optional, tag = "13")]
    pub ljiddoicjhd: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knbamhikgjd {
    #[prost(message, optional, tag = "7")]
    pub ljiddoicjhd: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhcdmhidjfg {
    #[prost(uint32, tag = "2")]
    pub ldnimnmppgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kohkllnljcf {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Komanbbinlj {
    #[prost(uint32, tag = "10")]
    pub minedofldgh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caheednlcod {
    #[prost(uint32, tag = "12")]
    pub slot_type: u32,
    #[prost(uint32, tag = "14")]
    pub slot: u32,
    #[prost(uint32, tag = "7")]
    pub dngehcmmiol: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbpdbccfbgh {
    #[prost(uint32, tag = "3")]
    pub imeenehmhcf: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcihkekhfee {
    #[prost(message, repeated, tag = "8")]
    pub pfdijnmpdmm: ::prost::alloc::vec::Vec<Caheednlcod>,
    #[prost(message, repeated, tag = "6")]
    pub mahhhldnafp: ::prost::alloc::vec::Vec<Fdmihcjcaem>,
    #[prost(message, optional, tag = "10")]
    pub jdigfnaljfn: ::core::option::Option<Pbpdbccfbgh>,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub blhkefpjgfg: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdmihcjcaem {
    #[prost(uint32, tag = "14")]
    pub idgalmegdij: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jmmfbcmmkll {
    #[prost(uint32, tag = "14")]
    pub unique_id: u32,
    #[prost(message, optional, tag = "3")]
    pub ljleimgmflk: ::core::option::Option<Fdmihcjcaem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kplobgogaln {
    #[prost(message, optional, tag = "11")]
    pub djalejinhln: ::core::option::Option<Bcihkekhfee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhhijkjnjjh {
    #[prost(message, optional, tag = "7")]
    pub djalejinhln: ::core::option::Option<Bcihkekhfee>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbhnofkeckb {
    #[prost(message, optional, tag = "14")]
    pub djalejinhln: ::core::option::Option<Bcihkekhfee>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lclidepbafc {
    #[prost(message, optional, tag = "5")]
    pub naaljdjlgcc: ::core::option::Option<Jmmfbcmmkll>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipmodcfgfaf {
    #[prost(message, optional, tag = "13")]
    pub cdgpikoihfd: ::core::option::Option<Jmmfbcmmkll>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnndehklfff {
    #[prost(uint32, tag = "9")]
    pub lgoahpclifi: u32,
    #[prost(uint32, tag = "15")]
    pub boieefipneg: u32,
    #[prost(uint32, tag = "4")]
    pub eabjlpegnml: u32,
    #[prost(message, optional, tag = "7")]
    pub apedojknimo: ::core::option::Option<Fdmihcjcaem>,
    #[prost(message, repeated, tag = "2")]
    pub cjlfmaijmmb: ::prost::alloc::vec::Vec<Fdmihcjcaem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idamgihkeop {
    #[prost(message, repeated, tag = "4")]
    pub cjlfmaijmmb: ::prost::alloc::vec::Vec<Jmmfbcmmkll>,
    #[prost(uint32, tag = "14")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmaakaafiia {
    #[prost(message, optional, tag = "11")]
    pub jaimgoilgbe: ::core::option::Option<Fdmihcjcaem>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oajjgnaecaf {
    #[prost(message, optional, tag = "7")]
    pub jaimgoilgbe: ::core::option::Option<Jmmfbcmmkll>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ocbjphhcpii {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dafbnephgdm {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkiefdfiomb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kdbjboegokb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Helfbmifami {
    #[prost(message, optional, tag = "7")]
    pub ndphkdkgcek: ::core::option::Option<Jmmfbcmmkll>,
    #[prost(uint32, repeated, tag = "14")]
    pub cgjflbdpoli: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbhlkmekjdd {
    #[prost(message, repeated, tag = "4")]
    pub bdjabppjbil: ::prost::alloc::vec::Vec<Pbpdbccfbgh>,
    #[prost(uint32, tag = "14")]
    pub eabjlpegnml: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gdlnhhbhdch {
    #[prost(message, optional, tag = "10")]
    pub ickkighikah: ::core::option::Option<Pbpdbccfbgh>,
    #[prost(bool, tag = "1")]
    pub pakibappnaf: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gimiecmhhoo {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbobhbeneog {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnkgmohkaap {
    #[prost(message, optional, tag = "9")]
    pub hfkobenclmf: ::core::option::Option<Pbpdbccfbgh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nmkohgoclgk {
    #[prost(bool, tag = "6")]
    pub hhfkmckjopb: bool,
    #[prost(message, optional, tag = "3")]
    pub jlnobndpoda: ::core::option::Option<Pbpdbccfbgh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfamafmkapg {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iokinlmlphh {
    #[prost(uint32, tag = "10")]
    pub oejingdknnd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjnplpebkhp {
    #[prost(bool, tag = "6")]
    pub is_win: bool,
    #[prost(uint32, tag = "13")]
    pub ibgjndjhdfj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pnmamogamkp {
    #[prost(uint32, tag = "1")]
    pub oejingdknnd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olheebamjpj {
    #[prost(uint32, tag = "13")]
    pub pdhdkbjjofj: u32,
    #[prost(message, optional, tag = "3")]
    pub cfeijcflbko: ::core::option::Option<Hpoepjidfce>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpoepjidfce {
    #[prost(uint32, tag = "11")]
    pub lmfhnelkfoc: u32,
    #[prost(message, optional, tag = "12")]
    pub mhbcmnckkeb: ::core::option::Option<Fjbjjoljhfl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjbjjoljhfl {
    #[prost(
        oneof = "fjbjjoljhfl::ChallengeInfoCase",
        tags = "1719, 507, 1597, 1322, 1776, 845, 1506, 362, 1942, 420, 366, 1677, 1232, 176, 892, 275, 1129, 1388, 18, 585, 1644, 1331, 353, 1455, 1910, 49"
    )]
    pub challenge_info_case: ::core::option::Option<fjbjjoljhfl::ChallengeInfoCase>,
}
/// Nested message and enum types in `FJBJJOLJHFL`.
pub mod fjbjjoljhfl {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1719")]
        Opjdnljomip(super::RogueCommonBuffSelectInfo),
        #[prost(message, tag = "507")]
        Neboihlfoeo(super::Mcflkflhmmf),
        #[prost(message, tag = "1597")]
        Emmobogheap(super::Mclbeajceld),
        #[prost(message, tag = "1322")]
        Eajgnpnnlno(super::Kaboejombck),
        #[prost(message, tag = "1776")]
        Pfabpkkafge(super::Cnnpljghdpj),
        #[prost(message, tag = "845")]
        Ohcdpjchlhd(super::Nhmmjihcogf),
        #[prost(message, tag = "1506")]
        Ledmpepkffk(super::Hgneefcadkj),
        #[prost(message, tag = "362")]
        Hfpciflenkl(super::Iflakoogjjl),
        #[prost(message, tag = "1942")]
        Lonljjalnjc(super::Nidbfakbkmf),
        #[prost(message, tag = "420")]
        Lffipijghpi(super::Omjpkpnnmjm),
        #[prost(message, tag = "366")]
        Pmjffjemibe(super::Kncoeenppon),
        #[prost(message, tag = "1677")]
        Haknpnlbkon(super::Jfgpgfkmbcc),
        #[prost(message, tag = "1232")]
        Ceklcnnhibg(super::Gcmdbofkgcp),
        #[prost(message, tag = "176")]
        Ljiddoicjhd(super::RogueFormulaSelectInfo),
        #[prost(message, tag = "892")]
        Aajcjfahpeh(super::Mhoebclbnne),
        #[prost(message, tag = "275")]
        Dccjmbeifon(super::Knbamhikgjd),
        #[prost(message, tag = "1129")]
        Khkbcgmgnnc(super::Cnndehklfff),
        #[prost(message, tag = "1388")]
        Bpccfghnldi(super::Jbhlkmekjdd),
        #[prost(message, tag = "18")]
        Pnemafhkfii(super::Mnkgmohkaap),
        #[prost(message, tag = "585")]
        Fcbekophfmg(super::Cnndehklfff),
        #[prost(message, tag = "1644")]
        Pbahdaiciih(super::Cnndehklfff),
        #[prost(message, tag = "1331")]
        Dchlccbgifd(super::Cnndehklfff),
        #[prost(message, tag = "353")]
        Fnjlpfbcmgj(super::Idamgihkeop),
        #[prost(message, tag = "1455")]
        Helfgekgkkp(super::Idamgihkeop),
        #[prost(message, tag = "1910")]
        Odahccbipnh(super::Idamgihkeop),
        #[prost(message, tag = "49")]
        Omieokkfckc(super::Iokinlmlphh),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mpjpphefpdb {
    #[prost(uint32, tag = "7")]
    pub ggoppcegfjh: u32,
    #[prost(
        oneof = "mpjpphefpdb::ChallengeInfoCase",
        tags = "1840, 602, 267, 301, 954, 1880, 1388, 717, 1988, 380, 791, 942, 1380, 946, 339, 583, 597, 786, 1226, 1489, 1034, 779, 400, 264, 1650, 1297, 1105, 201106, 123239"
    )]
    pub challenge_info_case: ::core::option::Option<mpjpphefpdb::ChallengeInfoCase>,
}
/// Nested message and enum types in `MPJPPHEFPDB`.
pub mod mpjpphefpdb {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1840")]
        Lpjcnfcelhh(super::Edfhickfjgk),
        #[prost(message, tag = "602")]
        Daeopjpfmjb(super::Idckjkffecm),
        #[prost(message, tag = "267")]
        Odkgpnoldde(super::Bfakigehnjc),
        #[prost(message, tag = "301")]
        Oliiognfaeg(super::Mfocogplmnb),
        #[prost(message, tag = "954")]
        Llmolfimecn(super::Debjjgpkleb),
        #[prost(message, tag = "1880")]
        Cdnhlfichaf(super::Lhmdikfcpbn),
        #[prost(message, tag = "1388")]
        Eiogokdhibk(super::Mobleomkccg),
        #[prost(message, tag = "717")]
        Laecpbjhhek(super::Cbhmhapcjgf),
        #[prost(message, tag = "1988")]
        Iacjbemcnom(super::Jgffnifgpda),
        #[prost(message, tag = "380")]
        Cmegklkaiml(super::Cladkmnegfm),
        #[prost(message, tag = "791")]
        Kngiengleao(super::Hbnficifnna),
        #[prost(message, tag = "942")]
        Mcgjjdogacp(super::Efclaehcdkp),
        #[prost(message, tag = "1380")]
        Hcbkphlknnb(super::Jmklnahpjmg),
        #[prost(message, tag = "946")]
        Jpdlnedhnef(super::Flpppffpncn),
        #[prost(message, tag = "339")]
        Ialgpfogkfm(super::Ebihfhnfmga),
        #[prost(message, tag = "583")]
        Efdmcnlolmg(super::Mgminpoeghh),
        #[prost(message, tag = "597")]
        Eohcihpggop(super::Dhcdmhidjfg),
        #[prost(message, tag = "786")]
        Lhjfiagfcha(super::Hmaakaafiia),
        #[prost(message, tag = "1226")]
        Pmiipkmomaa(super::Gdlnhhbhdch),
        #[prost(message, tag = "1489")]
        Pejbflmnkhl(super::Nmkohgoclgk),
        #[prost(message, tag = "1034")]
        Cegpggaglgh(super::Hmaakaafiia),
        #[prost(message, tag = "779")]
        Lhdcndbhhpk(super::Hmaakaafiia),
        #[prost(message, tag = "400")]
        Inopmkfaojf(super::Hmaakaafiia),
        #[prost(message, tag = "264")]
        Akckppoddoh(super::Oajjgnaecaf),
        #[prost(message, tag = "1650")]
        Jblcakopepp(super::Oajjgnaecaf),
        #[prost(message, tag = "1297")]
        Ngjmhhhgcej(super::Oajjgnaecaf),
        #[prost(message, tag = "1105")]
        Adpjkpjmlfb(super::Komanbbinlj),
        #[prost(message, tag = "201106")]
        Fhbklegifpn(super::Pjnplpebkhp),
        #[prost(message, tag = "123239")]
        Iafkaemdmmb(super::Pnmamogamkp),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcmedjpljdl {
    #[prost(uint32, tag = "1")]
    pub lmfhnelkfoc: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ggoppcegfjh: u32,
    #[prost(
        oneof = "pcmedjpljdl::ChallengeInfoCase",
        tags = "1027, 1942, 645, 98, 1911, 1356, 1309, 2029, 1765, 1391, 1898, 353, 1448, 256, 1744, 1163, 1227, 761, 895, 1922, 811, 1999, 1005, 61"
    )]
    pub challenge_info_case: ::core::option::Option<pcmedjpljdl::ChallengeInfoCase>,
}
/// Nested message and enum types in `PCMEDJPLJDL`.
pub mod pcmedjpljdl {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1027")]
        Gbnaijococc(super::Pjjkfmpdgbo),
        #[prost(message, tag = "1942")]
        Jgkkejlgjbd(super::Dahbddcbige),
        #[prost(message, tag = "645")]
        Gfkjcfpmncc(super::Bjkccclkbce),
        #[prost(message, tag = "98")]
        Lmglhfdaoej(super::Kmajlpmbhpi),
        #[prost(message, tag = "1911")]
        Mminnmfiigm(super::Dcfgpojohlk),
        #[prost(message, tag = "1356")]
        Gnhkaklbfap(super::Fbifegdkedd),
        #[prost(message, tag = "1309")]
        Nikncpllbhi(super::Aagfbgahgmc),
        #[prost(message, tag = "2029")]
        Dcogkiklfgk(super::Gkjhpelmhhm),
        #[prost(message, tag = "1765")]
        Cclnilkgmcm(super::Ekmlfcpkgpd),
        #[prost(message, tag = "1391")]
        Ahlppmkpfpc(super::Imkiidnmogk),
        #[prost(message, tag = "1898")]
        Gnoojjgjilb(super::Nplhoaooeda),
        #[prost(message, tag = "353")]
        Jgdndlklfac(super::Akjchbmolej),
        #[prost(message, tag = "1448")]
        Ibbljcnpjde(super::Fldlpmchajc),
        #[prost(message, tag = "256")]
        Mpmeljklfmj(super::Ajjpbeokcjh),
        #[prost(message, tag = "1744")]
        Okkldajijek(super::Hmoahjfnpio),
        #[prost(message, tag = "1163")]
        Jeackbjnbco(super::Eibjgpdmcnp),
        #[prost(message, tag = "1227")]
        Gacbghohckd(super::Kohkllnljcf),
        #[prost(message, tag = "761")]
        Idcnnnjlgip(super::Ocbjphhcpii),
        #[prost(message, tag = "895")]
        Ahfnmiehodj(super::Gimiecmhhoo),
        #[prost(message, tag = "1922")]
        Hlnoccahfbi(super::Cfamafmkapg),
        #[prost(message, tag = "811")]
        Bhmbkbmjapa(super::Dafbnephgdm),
        #[prost(message, tag = "1999")]
        Holnemmcpmd(super::Dkiefdfiomb),
        #[prost(message, tag = "1005")]
        Cgapgeaplea(super::Kdbjboegokb),
        #[prost(message, tag = "61")]
        Klncddfdgkl(super::Cbobhbeneog),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mbfgfogldap {
    #[prost(uint32, tag = "5")]
    pub rouge_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Emiifpjhlcm {
    #[prost(bool, tag = "9")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "13")]
    pub cbmhagekpme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmmboijodhg {
    #[prost(bool, tag = "11")]
    pub is_taken_reward: bool,
    #[prost(uint32, tag = "9")]
    pub alhakhohohg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cljjkjmbflk {
    #[prost(uint32, tag = "11")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub buff_aeon_id: u32,
    #[prost(uint32, tag = "12")]
    pub mockiopkeke: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub kmmnbnnddai: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub jjbamfafdck: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kmipdkeicba {
    #[prost(message, optional, tag = "6")]
    pub ebknnopmdcg: ::core::option::Option<Pbpdbccfbgh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egcdagljmdh {
    #[prost(uint32, tag = "10")]
    pub ghfblpdajei: u32,
    #[prost(uint32, tag = "3")]
    pub idgalmegdij: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlkfaeelofc {
    #[prost(message, repeated, tag = "13")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<Emiifpjhlcm>,
    #[prost(message, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<Mbfgfogldap>,
    #[prost(message, repeated, tag = "2")]
    pub mplabmdjanb: ::prost::alloc::vec::Vec<Mmmboijodhg>,
    #[prost(message, repeated, tag = "11")]
    pub edpjkhbdgdb: ::prost::alloc::vec::Vec<Cljjkjmbflk>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmpalmphbic {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueHandbookDataScRsp {
    #[prost(message, optional, tag = "7")]
    pub handbook_info: ::core::option::Option<Nlkfaeelofc>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foeaablocal {
    #[prost(message, repeated, tag = "4")]
    pub hpigmmebiom: ::prost::alloc::vec::Vec<Egcdagljmdh>,
    #[prost(message, repeated, tag = "2")]
    pub gebabkpbpfa: ::prost::alloc::vec::Vec<Emiifpjhlcm>,
    #[prost(message, repeated, tag = "5")]
    pub lnfpfbjgjdc: ::prost::alloc::vec::Vec<Mmmboijodhg>,
    #[prost(message, repeated, tag = "10")]
    pub jnpenacfmci: ::prost::alloc::vec::Vec<Mbfgfogldap>,
    #[prost(message, repeated, tag = "9")]
    pub hgneiiegljk: ::prost::alloc::vec::Vec<Kmipdkeicba>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmkiplgkijp {
    #[prost(uint32, repeated, tag = "15")]
    pub llmcchhhkfh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dedjacndbfe {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "12")]
    pub ejjgdlnjbpe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clgcghhdnmm {
    #[prost(uint32, repeated, tag = "3")]
    pub abaijkeggoi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Domokibmmgl {
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub idpmacpinnk: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhggmoknojb {
    #[prost(map = "uint32, uint32", tag = "13")]
    pub eaccioahcoo: ::std::collections::HashMap<u32, u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Encehjogeab {
    #[prost(uint32, tag = "9")]
    pub hkplkkpgpii: u32,
    #[prost(message, optional, tag = "5")]
    pub jhbnookjioa: ::core::option::Option<Fockflepfcf>,
    #[prost(int32, tag = "4")]
    pub jaepijofhec: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iplemmpcecb {
    #[prost(uint32, repeated, tag = "1")]
    pub bfhbdhcfmfg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkanlcnedoc {
    #[prost(uint32, repeated, tag = "14")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "5")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgpokppmebi {
    #[prost(oneof = "bgpokppmebi::Ganbpnpfndk", tags = "12, 8, 1, 4, 15, 10, 11, 5")]
    pub ganbpnpfndk: ::core::option::Option<bgpokppmebi::Ganbpnpfndk>,
}
/// Nested message and enum types in `BGPOKPPMEBI`.
pub mod bgpokppmebi {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Ganbpnpfndk {
        #[prost(message, tag = "12")]
        Fheodgileep(super::Icnphjaadde),
        #[prost(message, tag = "8")]
        Ncoaibhnpoh(super::Fiidpggkano),
        #[prost(message, tag = "1")]
        Hlikpfehoei(super::Jhggmoknojb),
        #[prost(message, tag = "4")]
        RogueAeonInfo(super::Encehjogeab),
        #[prost(message, tag = "15")]
        Nndpggjcpog(super::Iplemmpcecb),
        #[prost(message, tag = "10")]
        Ifkdnkjjmaa(super::Lablhoafnbj),
        #[prost(message, tag = "11")]
        Fmelhohdhgp(super::Pooaecfiigh),
        #[prost(message, tag = "5")]
        Nemgeopcbao(super::Pkanlcnedoc),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chnbhmdieli {
    #[prost(uint32, tag = "9")]
    pub ijpjdjpbpnj: u32,
    #[prost(uint32, tag = "1")]
    pub pdhdkbjjofj: u32,
    #[prost(message, repeated, tag = "11")]
    pub piannpmkhfo: ::prost::alloc::vec::Vec<Bgpokppmebi>,
    #[prost(uint32, tag = "6")]
    pub kklaobblgce: u32,
    #[prost(uint32, tag = "2")]
    pub imkikcodkhj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RogueUnlockProgress {
    #[prost(bool, tag = "7")]
    pub finish: bool,
    #[prost(uint32, tag = "1")]
    pub progress: u32,
    #[prost(uint32, tag = "8")]
    pub unlock_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbnjjabbcan {
    #[prost(enumeration = "Jdgnphoeblj", tag = "8")]
    pub status: i32,
    #[prost(uint32, tag = "11")]
    pub talent_id: u32,
    #[prost(message, repeated, tag = "15")]
    pub npjjiljjmfa: ::prost::alloc::vec::Vec<RogueUnlockProgress>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gifiacnhmec {
    #[prost(message, repeated, tag = "6")]
    pub ijoniaoeejm: ::prost::alloc::vec::Vec<Nbnjjabbcan>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dckmgnjgmkd {
    #[prost(uint32, tag = "2")]
    pub jhdhjopkgdo: u32,
    #[prost(uint32, tag = "9")]
    pub jmidpdeegpf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccedpnogcob {
    #[prost(message, repeated, tag = "8")]
    pub jlgedgdbffn: ::prost::alloc::vec::Vec<Dckmgnjgmkd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Deipjcnoibo {
    #[prost(uint32, tag = "12")]
    pub mpooepkbgck: u32,
    #[prost(uint32, tag = "15")]
    pub pkdkpgckkki: u32,
    #[prost(uint32, tag = "11")]
    pub pddmckelmij: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adilaojimpo {
    #[prost(enumeration = "Hkljajfhcpe", repeated, tag = "9")]
    pub hipamhdlbdb: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oinkpdbjjoe {
    #[prost(message, optional, tag = "4")]
    pub onghnjcgjla: ::core::option::Option<Adilaojimpo>,
    #[prost(message, optional, tag = "2")]
    pub rogue_area_info: ::core::option::Option<Deipjcnoibo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Choohbcgcca {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Padnlekeeek {
    #[prost(message, optional, tag = "1")]
    pub rogue_info_data: ::core::option::Option<Oinkpdbjjoe>,
    #[prost(uint32, tag = "14")]
    pub ggcgpnabjga: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eekllnplfhj {
    #[prost(oneof = "eekllnplfhj::Emfcdlmkcnl", tags = "4, 10")]
    pub emfcdlmkcnl: ::core::option::Option<eekllnplfhj::Emfcdlmkcnl>,
}
/// Nested message and enum types in `EEKLLNPLFHJ`.
pub mod eekllnplfhj {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Emfcdlmkcnl {
        #[prost(message, tag = "4")]
        RogueAreaInfo(super::Deipjcnoibo),
        #[prost(message, tag = "10")]
        Onghnjcgjla(super::Adilaojimpo),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aboohdmjfbf {
    #[prost(uint32, tag = "6")]
    pub nglokpibfpn: u32,
    #[prost(uint32, tag = "2")]
    pub mfpdbllkbcg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Foliempmmgi {
    #[prost(uint32, tag = "14")]
    pub gihobankdjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ppbnjkapjoj {
    #[prost(uint32, tag = "6")]
    pub gihobankdjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcfplcgogec {
    #[prost(uint32, tag = "2")]
    pub igacjhckehc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ibmkimjpojp {
    #[prost(uint32, tag = "9")]
    pub gihobankdjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jlnefokfnap {
    #[prost(uint32, tag = "11")]
    pub jlfljlkdjdf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Egmkicmdemb {
    #[prost(oneof = "egmkicmdemb::Hdpplbkplnl", tags = "12, 14, 6, 11, 5, 13")]
    pub hdpplbkplnl: ::core::option::Option<egmkicmdemb::Hdpplbkplnl>,
}
/// Nested message and enum types in `EGMKICMDEMB`.
pub mod egmkicmdemb {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Hdpplbkplnl {
        #[prost(message, tag = "12")]
        Jblgfiehaai(super::Aboohdmjfbf),
        #[prost(message, tag = "14")]
        Lembcbbigfc(super::Foliempmmgi),
        #[prost(message, tag = "6")]
        Adiikjnmlph(super::Ppbnjkapjoj),
        #[prost(message, tag = "11")]
        Gmcbliebggg(super::Hcfplcgogec),
        #[prost(message, tag = "5")]
        Iggngjgpclk(super::Ibmkimjpojp),
        #[prost(message, tag = "13")]
        Alnpljohlgb(super::Jlnefokfnap),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Agikbpnjpmf {
    #[prost(float, tag = "11")]
    pub kgldpjiblad: f32,
    #[prost(int32, tag = "14")]
    pub mffjdoaefkg: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Limliklbijm {
    #[prost(uint32, tag = "12")]
    pub ibgjndjhdfj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gbijfbkmohl {
    #[prost(int32, tag = "9")]
    pub gomcbkdfjmg: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odbfbeapalj {
    #[prost(oneof = "odbfbeapalj::Mnbmfoldkcf", tags = "1, 12")]
    pub mnbmfoldkcf: ::core::option::Option<odbfbeapalj::Mnbmfoldkcf>,
}
/// Nested message and enum types in `ODBFBEAPALJ`.
pub mod odbfbeapalj {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Mnbmfoldkcf {
        #[prost(message, tag = "1")]
        Kaacakinpdm(super::Limliklbijm),
        #[prost(message, tag = "12")]
        Ofooemcpekh(super::Gbijfbkmohl),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfmiahgblha {
    #[prost(uint32, tag = "14")]
    pub pbalffcfpjd: u32,
    #[prost(bool, tag = "7")]
    pub fglidejocje: bool,
    #[prost(message, repeated, tag = "12")]
    pub inamlbhpbof: ::prost::alloc::vec::Vec<Odbfbeapalj>,
    #[prost(uint32, tag = "6")]
    pub geojjdpggna: u32,
    #[prost(bool, tag = "8")]
    pub hjcgeidbicc: bool,
    #[prost(message, optional, tag = "10")]
    pub bpgofipcnla: ::core::option::Option<Agikbpnjpmf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omjjafalblm {
    #[prost(message, optional, tag = "8")]
    pub faplkpibbge: ::core::option::Option<Egmkicmdemb>,
    #[prost(message, repeated, tag = "7")]
    pub kjcdhkmkopk: ::prost::alloc::vec::Vec<Lfmiahgblha>,
    #[prost(uint32, tag = "4")]
    pub oejingdknnd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kpibfmkelgb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khkpccbklnk {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub megokdochjh: ::prost::alloc::vec::Vec<Omjjafalblm>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imoiknlkoog {
    #[prost(uint32, tag = "8")]
    pub pbalffcfpjd: u32,
    #[prost(uint32, tag = "14")]
    pub oejingdknnd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmleclinppd {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub oejingdknnd: u32,
    #[prost(uint32, tag = "5")]
    pub pbalffcfpjd: u32,
    #[prost(message, optional, tag = "15")]
    pub laebhhdebgo: ::core::option::Option<Omjjafalblm>,
    #[prost(bool, tag = "14")]
    pub bdpkgcnlech: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub naacljjeehp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fnfbolfmgpp {
    #[prost(uint32, tag = "1")]
    pub oejingdknnd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ogkppjocjip {
    #[prost(uint32, tag = "5")]
    pub oejingdknnd: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlhbbclfcmk {
    #[prost(message, repeated, tag = "6")]
    pub megokdochjh: ::prost::alloc::vec::Vec<Omjjafalblm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbmghfjipoe {
    #[prost(message, optional, tag = "1")]
    pub laebhhdebgo: ::core::option::Option<Omjjafalblm>,
    #[prost(message, optional, tag = "15")]
    pub eejkddjolgf: ::core::option::Option<Lfmiahgblha>,
    #[prost(uint32, tag = "13")]
    pub pbalffcfpjd: u32,
    #[prost(uint32, tag = "4")]
    pub oejingdknnd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlifnbekiba {
    #[prost(message, optional, tag = "15")]
    pub dfdpgebcpeb: ::core::option::Option<Bgpokppmebi>,
    #[prost(uint32, tag = "5")]
    pub ijpjdjpbpnj: u32,
    #[prost(uint32, tag = "4")]
    pub pdhdkbjjofj: u32,
    #[prost(uint32, tag = "2")]
    pub kklaobblgce: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nofeajcbdoa {
    #[prost(message, optional, tag = "14")]
    pub amlcaeijmee: ::core::option::Option<Hpoepjidfce>,
    #[prost(uint32, tag = "8")]
    pub kklaobblgce: u32,
    #[prost(uint32, tag = "10")]
    pub ijpjdjpbpnj: u32,
    #[prost(uint32, tag = "12")]
    pub pdhdkbjjofj: u32,
    #[prost(uint32, tag = "3")]
    pub imkikcodkhj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohgfdaeckof {
    #[prost(uint32, tag = "6")]
    pub mlgdaokgnki: u32,
    #[prost(uint32, tag = "15")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icnbimajndj {
    #[prost(message, optional, tag = "7")]
    pub lcpafklohmk: ::core::option::Option<Dbllfobckhe>,
    #[prost(uint32, tag = "15")]
    pub mlgdaokgnki: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enebdlglomg {
    #[prost(uint32, tag = "13")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdeebhjiiid {
    #[prost(map = "uint32, message", tag = "7")]
    pub iicdhefnaml: ::std::collections::HashMap<u32, Dbllfobckhe>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbllfobckhe {
    #[prost(
        oneof = "dbllfobckhe::Apjmimklfee",
        tags = "7, 13, 6, 11, 12, 8, 15, 4, 10, 9"
    )]
    pub apjmimklfee: ::core::option::Option<dbllfobckhe::Apjmimklfee>,
}
/// Nested message and enum types in `DBLLFOBCKHE`.
pub mod dbllfobckhe {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Apjmimklfee {
        #[prost(message, tag = "7")]
        Cgpmfdkhjce(super::Pmmfcppehhb),
        #[prost(message, tag = "13")]
        Mgdhkebjmpd(super::Npmccpfiobo),
        #[prost(message, tag = "6")]
        Iobkkoofcia(super::Dkgddegeoal),
        #[prost(message, tag = "11")]
        Cffncomfiml(super::Emhphalebdl),
        #[prost(message, tag = "12")]
        Jjbipeaeabm(super::Nhafbpapflg),
        #[prost(message, tag = "8")]
        Ebknnopmdcg(super::Gbgjbbnephf),
        #[prost(message, tag = "15")]
        Ljleimgmflk(super::Aahknoffjoo),
        #[prost(message, tag = "4")]
        Cbdecpoacjk(super::Paljafmclan),
        #[prost(message, tag = "10")]
        Mkdmbfbccce(super::Lilbcamgbkf),
        #[prost(message, tag = "9")]
        Ijkfiiodhkh(super::Ikclngiobgh),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmmfcppehhb {
    #[prost(bool, tag = "12")]
    pub okdodfhooaj: bool,
    #[prost(uint32, tag = "15")]
    pub jfhokmjhnle: u32,
    #[prost(message, optional, tag = "10")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(int32, tag = "9")]
    pub klihfjglcdi: i32,
    #[prost(uint32, tag = "14")]
    pub agaldaobbkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npmccpfiobo {
    #[prost(bool, tag = "4")]
    pub okdodfhooaj: bool,
    #[prost(uint32, tag = "1")]
    pub jfhokmjhnle: u32,
    #[prost(int32, tag = "5")]
    pub klihfjglcdi: i32,
    #[prost(uint32, tag = "12")]
    pub agaldaobbkl: u32,
    #[prost(message, optional, tag = "7")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkgddegeoal {
    #[prost(uint32, tag = "14")]
    pub paigfplhmcm: u32,
    #[prost(map = "uint32, uint32", tag = "12")]
    pub fonmajdegnm: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "6")]
    pub edmikimhmkc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emhphalebdl {
    #[prost(uint32, tag = "9")]
    pub agaldaobbkl: u32,
    #[prost(map = "uint32, bool", tag = "15")]
    pub okgbohickga: ::std::collections::HashMap<u32, bool>,
    #[prost(int32, tag = "13")]
    pub klihfjglcdi: i32,
    #[prost(message, optional, tag = "6")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhafbpapflg {
    #[prost(int32, tag = "2")]
    pub klihfjglcdi: i32,
    #[prost(message, optional, tag = "1")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "10")]
    pub agaldaobbkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmbbchnlhek {
    #[prost(message, optional, tag = "14")]
    pub ajklomddoon: ::core::option::Option<ItemCostList>,
    #[prost(message, optional, tag = "15")]
    pub ebknnopmdcg: ::core::option::Option<Pbpdbccfbgh>,
    #[prost(message, optional, tag = "3")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "6")]
    pub cogdmngbnlj: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbgjbbnephf {
    #[prost(message, repeated, tag = "3")]
    pub aogjnjcokff: ::prost::alloc::vec::Vec<Lmbbchnlhek>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flnggmdhdjl {
    #[prost(bool, tag = "5")]
    pub cogdmngbnlj: bool,
    #[prost(message, optional, tag = "11")]
    pub ajklomddoon: ::core::option::Option<ItemCostList>,
    #[prost(message, optional, tag = "15")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "8")]
    pub ghfblpdajei: u32,
    #[prost(uint32, tag = "10")]
    pub idgalmegdij: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aahknoffjoo {
    #[prost(message, repeated, tag = "2")]
    pub mmlanfifpjj: ::prost::alloc::vec::Vec<Flnggmdhdjl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Paljafmclan {
    #[prost(message, optional, tag = "13")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "12")]
    pub agaldaobbkl: u32,
    #[prost(int32, tag = "6")]
    pub klihfjglcdi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lilbcamgbkf {
    #[prost(message, optional, tag = "9")]
    pub dgeocncbncp: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "10")]
    pub agaldaobbkl: u32,
    #[prost(map = "uint32, message", tag = "1")]
    pub polmmpogdhn: ::std::collections::HashMap<u32, ItemCostList>,
    #[prost(int32, tag = "15")]
    pub klihfjglcdi: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gobjohaclka {
    #[prost(message, optional, tag = "15")]
    pub item_cost_list: ::core::option::Option<ItemCostList>,
    #[prost(uint32, tag = "6")]
    pub imeenehmhcf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikclngiobgh {
    #[prost(message, repeated, tag = "2")]
    pub pncmimeplpa: ::prost::alloc::vec::Vec<Gobjohaclka>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlkmeomnfak {
    #[prost(uint32, tag = "12")]
    pub prop_entity_id: u32,
    #[prost(message, optional, tag = "5")]
    pub amhcoekjian: ::core::option::Option<Fdbdojjiodn>,
    #[prost(uint32, tag = "7")]
    pub mlgdaokgnki: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jongbenkmcb {
    #[prost(message, optional, tag = "12")]
    pub lcpafklohmk: ::core::option::Option<Dbllfobckhe>,
    #[prost(uint32, tag = "1")]
    pub mlgdaokgnki: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdbdojjiodn {
    #[prost(
        oneof = "fdbdojjiodn::Hafbbhdccej",
        tags = "1, 15, 6, 4, 13, 10, 14, 11, 2, 7"
    )]
    pub hafbbhdccej: ::core::option::Option<fdbdojjiodn::Hafbbhdccej>,
}
/// Nested message and enum types in `FDBDOJJIODN`.
pub mod fdbdojjiodn {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Hafbbhdccej {
        #[prost(message, tag = "1")]
        Cgpmfdkhjce(super::Dkioaphbibc),
        #[prost(message, tag = "15")]
        Mgdhkebjmpd(super::Dlhdonmipma),
        #[prost(message, tag = "6")]
        Iobkkoofcia(super::Geeldfdkjjd),
        #[prost(message, tag = "4")]
        Cffncomfiml(super::Ogkppdjhbob),
        #[prost(message, tag = "13")]
        Jjbipeaeabm(super::Ljcmkjbgjka),
        #[prost(message, tag = "10")]
        Ebknnopmdcg(super::Cmlippempgn),
        #[prost(message, tag = "14")]
        Ljleimgmflk(super::Acfpbaciljc),
        #[prost(message, tag = "11")]
        Cbdecpoacjk(super::Kkknabokmkh),
        #[prost(message, tag = "2")]
        Mkdmbfbccce(super::Fenciegfaid),
        #[prost(message, tag = "7")]
        Ijkfiiodhkh(super::Clnckeagdoi),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dkioaphbibc {
    #[prost(uint32, tag = "4")]
    pub fpbmbalffeo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dlhdonmipma {
    #[prost(uint32, tag = "11")]
    pub aadpldncecg: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Geeldfdkjjd {
    #[prost(uint32, tag = "13")]
    pub dldcigniidb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogkppdjhbob {
    #[prost(uint32, repeated, tag = "4")]
    pub cbcobcgcaok: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ljcmkjbgjka {
    #[prost(uint32, tag = "14")]
    pub lnmephckfgh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmlippempgn {
    #[prost(uint32, tag = "4")]
    pub agcjehmbege: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acfpbaciljc {
    #[prost(uint32, repeated, tag = "2")]
    pub nfkbjmjfmlb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkknabokmkh {
    #[prost(uint32, repeated, tag = "14")]
    pub emggjahdfge: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fenciegfaid {
    #[prost(uint32, tag = "2")]
    pub idgalmegdij: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clnckeagdoi {
    #[prost(uint32, tag = "14")]
    pub imeenehmhcf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbhejhecofj {
    #[prost(enumeration = "Eoomgaahhmn", tag = "3")]
    pub status: i32,
    #[prost(uint32, tag = "11")]
    pub engcnlpcmda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enlenijddpl {
    #[prost(uint32, tag = "7")]
    pub ohlacbfpacn: u32,
    #[prost(enumeration = "Epmedgjkjob", tag = "13")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub engcnlpcmda: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obhipadimji {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amfcfbibnpc {
    #[prost(message, repeated, tag = "4")]
    pub gapcapjggie: ::prost::alloc::vec::Vec<Pbhejhecofj>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub fiofemaoalk: ::prost::alloc::vec::Vec<Enlenijddpl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlfmigjdhbf {
    #[prost(enumeration = "Dmejolhflhp", repeated, tag = "2")]
    pub laecceafakd: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "15")]
    pub pkmiomooilk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub kgbjdepiglc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peoggfelkkd {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub fiofemaoalk: ::prost::alloc::vec::Vec<Enlenijddpl>,
    #[prost(message, repeated, tag = "1")]
    pub gapcapjggie: ::prost::alloc::vec::Vec<Pbhejhecofj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehhfhimikkb {
    #[prost(uint32, tag = "5")]
    pub hjhaihfefen: u32,
    #[prost(enumeration = "Lnbpmlpgkng", tag = "15")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnegkpbifca {
    #[prost(uint32, tag = "11")]
    pub hjhaihfefen: u32,
    #[prost(enumeration = "Epmedgjkjob", tag = "8")]
    pub status: i32,
    #[prost(uint32, tag = "14")]
    pub ohlacbfpacn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipkobmjkfji {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbaogfpkkji {
    #[prost(message, repeated, tag = "3")]
    pub aogceincojg: ::prost::alloc::vec::Vec<Cnegkpbifca>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub gikidkiedjo: ::prost::alloc::vec::Vec<Ehhfhimikkb>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfkndpkmaii {
    #[prost(uint32, repeated, tag = "11")]
    pub fahmhccmkdl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub kdhdhllejmn: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Dmejolhflhp", repeated, tag = "2")]
    pub ncbhklecbjj: ::prost::alloc::vec::Vec<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miekcpbepdm {
    #[prost(message, repeated, tag = "8")]
    pub gikidkiedjo: ::prost::alloc::vec::Vec<Ehhfhimikkb>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub aogceincojg: ::prost::alloc::vec::Vec<Cnegkpbifca>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mbaccciegbn {
    #[prost(uint32, tag = "8")]
    pub alkcacafbme: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfdlaopnlla {
    #[prost(uint32, tag = "4")]
    pub kemllaacflk: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhfekplpacc {
    #[prost(bool, tag = "10")]
    pub flaolpbpgnk: bool,
    #[prost(uint32, tag = "14")]
    pub kemllaacflk: u32,
    #[prost(oneof = "bhfekplpacc::Pfgeoogjkcg", tags = "4, 11")]
    pub pfgeoogjkcg: ::core::option::Option<bhfekplpacc::Pfgeoogjkcg>,
}
/// Nested message and enum types in `BHFEKPLPACC`.
pub mod bhfekplpacc {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Pfgeoogjkcg {
        #[prost(message, tag = "4")]
        Fakbojbdkko(super::Mbaccciegbn),
        #[prost(message, tag = "11")]
        Cbohbclniph(super::Jfdlaopnlla),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpkcmlkpmli {
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub klaffflfoha: ::prost::alloc::vec::Vec<Bhfekplpacc>,
    #[prost(bool, tag = "15")]
    pub jihhbchlkel: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pldbmbnbhje {
    #[prost(uint32, tag = "7")]
    pub coifbdjbcde: u32,
    #[prost(message, optional, tag = "15")]
    pub ljejahaeadn: ::core::option::Option<ItemCostList>,
    #[prost(bool, tag = "6")]
    pub moojjgaebgc: bool,
    #[prost(message, repeated, tag = "1")]
    pub maze_group_list: ::prost::alloc::vec::Vec<Cpkcmlkpmli>,
    #[prost(uint32, tag = "8")]
    pub lpdkbapgnbp: u32,
    #[prost(uint32, tag = "14")]
    pub dgnpbmhaogf: u32,
    #[prost(uint32, tag = "12")]
    pub kbdflkcbfka: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clnhmecmcnn {
    #[prost(uint32, tag = "12")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ooafkmcbhaf {
    #[prost(message, optional, tag = "5")]
    pub igfncpgbdij: ::core::option::Option<Pldbmbnbhje>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cpeeinnafki {
    #[prost(uint32, tag = "9")]
    pub prop_entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipmbpaoacgb {
    #[prost(uint32, tag = "6")]
    pub ndnhfdbabaj: u32,
    #[prost(message, optional, tag = "13")]
    pub igfncpgbdij: ::core::option::Option<Pldbmbnbhje>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub afhhgljdmlb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Majdmhmjdje {
    #[prost(enumeration = "Hkkeaigehnp", tag = "8")]
    pub slot: i32,
    #[prost(string, tag = "5")]
    pub iklkblkbhbn: ::prost::alloc::string::String,
    #[prost(string, tag = "1")]
    pub jiedcpkjjbp: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnfpoioebkd {
    #[prost(uint32, tag = "8")]
    pub ncgbellilfj: u32,
    #[prost(message, optional, tag = "7")]
    pub gehpkelfcog: ::core::option::Option<Agbncfbcclc>,
    #[prost(uint32, tag = "1")]
    pub lbhjlpcjdpa: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub rouge_map_id: u32,
    #[prost(enumeration = "RogueStatus", tag = "2")]
    pub status: i32,
    #[prost(uint32, tag = "9")]
    pub kdidajidaka: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "4")]
    pub effflobngfa: ::core::option::Option<Hjclkikhmln>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Deggbbpmlmi {
    #[prost(uint32, tag = "12")]
    pub ckfallbogeo: u32,
    #[prost(uint32, tag = "13")]
    pub jmkjipcakce: u32,
    #[prost(uint32, tag = "1")]
    pub battle_id: u32,
    #[prost(uint32, tag = "15")]
    pub lkgnkmkfnio: u32,
    #[prost(uint32, tag = "2")]
    pub jfpmgmlipjn: u32,
    #[prost(uint32, tag = "14")]
    pub kofglickkfp: u32,
    #[prost(uint32, tag = "10")]
    pub gkoadidgkej: u32,
    #[prost(bool, tag = "5")]
    pub pemhghgmhcl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poglcmcgmik {
    #[prost(uint32, tag = "15")]
    pub area_id: u32,
    #[prost(message, optional, tag = "7")]
    pub kfimlhhpmli: ::core::option::Option<Deggbbpmlmi>,
    #[prost(message, optional, tag = "4")]
    pub haggjljefka: ::core::option::Option<Lnfpoioebkd>,
    #[prost(uint32, tag = "5")]
    pub module_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Damdpmhhjjj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldnngbiaiek {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub fejedbdgpaf: u32,
    #[prost(message, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<Poglcmcgmik>,
    #[prost(uint32, tag = "3")]
    pub eghoacjoiei: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub feibkndnjah: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkkhmdgdkac {
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmceokmglbi {
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<Bkkhmdgdkac>,
    #[prost(uint32, tag = "10")]
    pub emadniijjfe: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojbeekgehbo {
    #[prost(message, optional, tag = "14")]
    pub kfimlhhpmli: ::core::option::Option<Deggbbpmlmi>,
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Naanhmkmpmf {
    #[prost(message, optional, tag = "10")]
    pub kfimlhhpmli: ::core::option::Option<Deggbbpmlmi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mbjagiajkep {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(bool, tag = "13")]
    pub icdohkpkmah: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkaodobnboh {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub feibkndnjah: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub fejedbdgpaf: u32,
    #[prost(bool, tag = "8")]
    pub icdohkpkmah: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aloalnohhej {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emaaaobflmo {
    #[prost(uint32, repeated, tag = "1")]
    pub feibkndnjah: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub fejedbdgpaf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmkfpppchci {
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "10")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmdgfigdpof {
    #[prost(enumeration = "Nbccncbkadp", tag = "13")]
    pub status: i32,
    #[prost(uint32, tag = "7")]
    pub igodafnldck: u32,
    #[prost(message, repeated, tag = "3")]
    pub naemgnjpkeg: ::prost::alloc::vec::Vec<Negifanelhm>,
    #[prost(uint32, tag = "4")]
    pub cllgffcfbpc: u32,
    #[prost(uint32, tag = "1")]
    pub ebknmdmkoaa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Negifanelhm {
    #[prost(uint32, tag = "6")]
    pub bpfbjkcflkh: u32,
    #[prost(enumeration = "Fccfgoinnhb", tag = "12")]
    pub status: i32,
    #[prost(uint32, tag = "13")]
    pub hhbnifijlkj: u32,
    #[prost(uint32, tag = "3")]
    pub hgmfeggjefb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgacbpeebel {
    #[prost(message, repeated, tag = "13")]
    pub gpkmfmjlmjp: ::prost::alloc::vec::Vec<Kmdgfigdpof>,
    #[prost(uint32, tag = "2")]
    pub cooinbpieoc: u32,
    #[prost(uint32, tag = "14")]
    pub aniicejbfmi: u32,
    #[prost(enumeration = "Ekcjfffffdo", tag = "1")]
    pub status: i32,
    #[prost(enumeration = "Bcboidlmkko", tag = "7")]
    pub reason: i32,
    #[prost(uint32, tag = "10")]
    pub deckailmgej: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlobajoingi {
    #[prost(uint32, tag = "14")]
    pub jbkhldiobca: u32,
    #[prost(message, repeated, tag = "6")]
    pub pncmimeplpa: ::prost::alloc::vec::Vec<Bcihkekhfee>,
    #[prost(bool, tag = "3")]
    pub beaaclmamih: bool,
    #[prost(message, repeated, tag = "11")]
    pub mmlanfifpjj: ::prost::alloc::vec::Vec<Jmmfbcmmkll>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbkiklkemmp {
    #[prost(uint32, repeated, tag = "9")]
    pub bfhbdhcfmfg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cjoiecnkegd {
    #[prost(uint32, tag = "2")]
    pub edkjfbeihhl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fleclcheofh {
    #[prost(uint32, tag = "12")]
    pub jccbmdkgjkm: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub onlldnlphef: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nekeejikgkj {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<Pkanlcnedoc>,
    #[prost(message, optional, tag = "4")]
    pub iggngjgpclk: ::core::option::Option<Cjoiecnkegd>,
    #[prost(message, optional, tag = "11")]
    pub level: ::core::option::Option<Fgacbpeebel>,
    #[prost(message, optional, tag = "6")]
    pub hojjfbaebda: ::core::option::Option<Jhggmoknojb>,
    #[prost(message, optional, tag = "10")]
    pub basic_info: ::core::option::Option<Nofeajcbdoa>,
    #[prost(message, optional, tag = "8")]
    pub ebknnopmdcg: ::core::option::Option<Jlobajoingi>,
    #[prost(message, optional, tag = "15")]
    pub dogfmmdkgdc: ::core::option::Option<Fiidpggkano>,
    #[prost(message, optional, tag = "12")]
    pub gfjeninmllg: ::core::option::Option<Dbkiklkemmp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oncipogclob {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
    #[prost(message, optional, tag = "14")]
    pub nmjldchmdpe: ::core::option::Option<Nekeejikgkj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iofpjpcljlo {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbamjhdcecf {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
    #[prost(message, optional, tag = "10")]
    pub nmjldchmdpe: ::core::option::Option<Nekeejikgkj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heknlhcinon {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phlebkaccdh {
    #[prost(message, optional, tag = "12")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Geioohkhenk {
    #[prost(uint32, tag = "4")]
    pub hoejliokkbn: u32,
    #[prost(uint32, tag = "15")]
    pub ebknmdmkoaa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfomdlekkdh {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pcmlkmiicdj {
    #[prost(uint32, tag = "13")]
    pub hoejliokkbn: u32,
    #[prost(uint32, tag = "2")]
    pub cooinbpieoc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caglmaeagmk {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foloklfelmk {
    #[prost(uint32, tag = "15")]
    pub deckailmgej: u32,
    #[prost(uint32, tag = "1")]
    pub aniicejbfmi: u32,
    #[prost(message, repeated, tag = "7")]
    pub gpkmfmjlmjp: ::prost::alloc::vec::Vec<Kmdgfigdpof>,
    #[prost(enumeration = "Ekcjfffffdo", tag = "6")]
    pub status: i32,
    #[prost(enumeration = "Bcboidlmkko", tag = "9")]
    pub reason: i32,
    #[prost(uint32, tag = "14")]
    pub cooinbpieoc: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djnbcjpdhoa {
    #[prost(message, repeated, tag = "14")]
    pub cidhiiibigj: ::prost::alloc::vec::Vec<Gkobebcehhj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojnbgoajbal {
    #[prost(bool, tag = "15")]
    pub hkgaggdocfc: bool,
    #[prost(uint32, tag = "2")]
    pub hihkpoajbhk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Igdchfejdna {
    #[prost(bool, tag = "4")]
    pub hkgaggdocfc: bool,
    #[prost(uint32, tag = "9")]
    pub jpmgblngngn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eachhljglgi {
    #[prost(message, optional, tag = "1")]
    pub kihfiimhnif: ::core::option::Option<Ojnbgoajbal>,
    #[prost(message, optional, tag = "12")]
    pub kmccbahldfl: ::core::option::Option<Igdchfejdna>,
    #[prost(message, optional, tag = "5")]
    pub nmjldchmdpe: ::core::option::Option<Nekeejikgkj>,
    #[prost(message, optional, tag = "2")]
    pub nemgeopcbao: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kokolgodimf {
    #[prost(uint32, repeated, tag = "6")]
    pub icgoamadmph: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub gpkmfemidem: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "13")]
    pub najphnpmain: ::prost::alloc::vec::Vec<Pbpdbccfbgh>,
    #[prost(message, repeated, tag = "15")]
    pub hjlfmignema: ::prost::alloc::vec::Vec<Fdmihcjcaem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbajmgmlepg {
    #[prost(message, optional, tag = "3")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
    #[prost(message, optional, tag = "6")]
    pub mlphbclbcip: ::core::option::Option<Eachhljglgi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fokcbinemph {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhdnlhlhpaf {
    #[prost(message, optional, tag = "7")]
    pub mlphbclbcip: ::core::option::Option<Eachhljglgi>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub lckjckjblec: ::core::option::Option<Lmkfpppchci>,
    #[prost(message, optional, tag = "8")]
    pub iefebagkbgo: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "12")]
    pub bcddlggmdjk: ::core::option::Option<Kokolgodimf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hafngbbnmaj {
    #[prost(message, optional, tag = "15")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hinijbfiimm {
    #[prost(uint32, tag = "12")]
    pub rouge_event_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hognijomdio {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dgccodjanhg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Einjojnhbdo {
    #[prost(message, repeated, tag = "117")]
    pub pncmimeplpa: ::prost::alloc::vec::Vec<Bcihkekhfee>,
    #[prost(uint32, tag = "7")]
    pub mgaicfjknej: u32,
    #[prost(uint32, tag = "6")]
    pub oimdcmijbfd: u32,
    #[prost(uint32, tag = "5")]
    pub jcohfkjgpgf: u32,
    #[prost(uint32, tag = "4")]
    pub aniicejbfmi: u32,
    #[prost(uint32, tag = "3")]
    pub llbicifcppm: u32,
    #[prost(uint32, tag = "15")]
    pub jbkhldiobca: u32,
    #[prost(uint32, repeated, tag = "380")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub hdihmdpghmb: u32,
    #[prost(uint32, tag = "13")]
    pub fgidghfmjaf: u32,
    #[prost(uint32, repeated, tag = "470")]
    pub haeonccbkeg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "547")]
    pub mmlanfifpjj: ::prost::alloc::vec::Vec<Jmmfbcmmkll>,
    #[prost(uint32, tag = "9")]
    pub ijlnnigioea: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipkcdkhdipi {
    #[prost(uint32, repeated, tag = "1689")]
    pub gjogkbjcmhd: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkobebcehhj {
    #[prost(bool, tag = "9")]
    pub inkhhpljbnd: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub hfefmipoloj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub area_id: u32,
    #[prost(uint32, tag = "15")]
    pub olfjfjojnap: u32,
    #[prost(bool, tag = "10")]
    pub nkecmfcfjak: bool,
    #[prost(bool, tag = "12")]
    pub aebicnomfbh: bool,
    #[prost(message, optional, tag = "14")]
    pub record_info: ::core::option::Option<Einjojnhbdo>,
    #[prost(message, optional, tag = "7")]
    pub djeoiecofjm: ::core::option::Option<Ipkcdkhdipi>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fjnhfahocfn {
    #[prost(uint32, tag = "3")]
    pub deegbpgmjed: u32,
    #[prost(bool, tag = "15")]
    pub inkhhpljbnd: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bigppagkmhp {
    #[prost(uint32, repeated, tag = "9")]
    pub debbhfnlddf: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmkfodhodkk {
    #[prost(uint32, repeated, tag = "13")]
    pub ojlhkhpdgfm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub story_buff_info: ::core::option::Option<Bigppagkmhp>,
    #[prost(message, repeated, tag = "12")]
    pub mmlanfifpjj: ::prost::alloc::vec::Vec<Egcdagljmdh>,
    #[prost(message, repeated, tag = "9")]
    pub cidhiiibigj: ::prost::alloc::vec::Vec<Gkobebcehhj>,
    #[prost(message, optional, tag = "6")]
    pub gddkjjdcffe: ::core::option::Option<Flkfjhlhcon>,
    #[prost(message, repeated, tag = "3")]
    pub aogjnjcokff: ::prost::alloc::vec::Vec<Kmipdkeicba>,
    #[prost(message, repeated, tag = "7")]
    pub oghbidjjcod: ::prost::alloc::vec::Vec<Fjnhfahocfn>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naclkflknbj {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub rogue_info_data: ::core::option::Option<Bmkfodhodkk>,
    #[prost(message, optional, tag = "7")]
    pub nmjldchmdpe: ::core::option::Option<Nekeejikgkj>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjnglfianji {
    #[prost(uint32, tag = "3")]
    pub khocgagjlfd: u32,
    #[prost(uint32, tag = "7")]
    pub dngehcmmiol: u32,
    #[prost(uint32, tag = "13")]
    pub imeenehmhcf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cmgcalpknao {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dimlalfobmm {
    #[prost(uint32, repeated, tag = "9")]
    pub mjlkkbgffae: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Neijdenfgkg {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikbfccijopb {
    #[prost(bool, tag = "1")]
    pub pkdodcidbik: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gacpojibbcp {
    #[prost(bool, tag = "2")]
    pub pkdodcidbik: bool,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gaiembmpcbc {
    #[prost(bool, tag = "4")]
    pub pkdodcidbik: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjkhlgbofhe {
    #[prost(uint32, repeated, tag = "3")]
    pub mjlkkbgffae: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub imeenehmhcf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Paoedojikdo {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iojaamoafbi {
    #[prost(uint32, repeated, tag = "4")]
    pub mjlkkbgffae: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eipkannailf {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhflkmboddp {
    #[prost(uint32, repeated, tag = "2")]
    pub mjlkkbgffae: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jionhfnbppn {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flkfjhlhcon {
    #[prost(message, optional, tag = "11")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "9")]
    pub peegjdmpkoi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hcjhhdioebi {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdffloibdom {
    #[prost(message, optional, tag = "9")]
    pub gddkjjdcffe: ::core::option::Option<Flkfjhlhcon>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Daijildiofc {
    #[prost(uint32, tag = "3")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmnihkadpaf {
    #[prost(message, optional, tag = "2")]
    pub gddkjjdcffe: ::core::option::Option<Flkfjhlhcon>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dfbmhiapjmc {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjpbgoklbno {
    #[prost(message, optional, tag = "7")]
    pub kihfiimhnif: ::core::option::Option<Ojnbgoajbal>,
    #[prost(message, optional, tag = "14")]
    pub kmccbahldfl: ::core::option::Option<Igdchfejdna>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kcplphgnglg {
    #[prost(uint32, tag = "15")]
    pub faljifgodln: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cleakdjgajd {
    #[prost(bool, tag = "1")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, tag = "6")]
    pub nlppcejdaed: u32,
    #[prost(uint32, tag = "7")]
    pub bmcidcpnbhf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kofiocfjdae {
    #[prost(bool, tag = "10")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub opojfpkglfo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub bmcidcpnbhf: u32,
    #[prost(uint32, tag = "8")]
    pub nlppcejdaed: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcbkgfgkhei {
    #[prost(uint32, tag = "6")]
    pub nlppcejdaed: u32,
    #[prost(bool, tag = "13")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub opojfpkglfo: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkfakokigpi {
    #[prost(uint32, tag = "2")]
    pub nlppcejdaed: u32,
    #[prost(uint32, tag = "10")]
    pub opogaokjfgb: u32,
    #[prost(bool, tag = "5")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub cjbdddjekjm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Caeiochdcep {
    #[prost(uint32, tag = "14")]
    pub piplanebdhb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jaednfehejf {
    #[prost(uint32, tag = "6")]
    pub idlapaffifn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ipjaphfoida {
    #[prost(uint32, tag = "9")]
    pub okdkfbphmho: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcebkpghngg {
    #[prost(uint32, tag = "2")]
    pub dbejigjngkh: u32,
    #[prost(bool, tag = "14")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub cjbdddjekjm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub nlppcejdaed: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elmhfneplng {
    #[prost(uint32, tag = "5")]
    pub gajlgbcmkdm: u32,
    #[prost(uint32, tag = "11")]
    pub fpaihciglml: u32,
    #[prost(uint32, tag = "12")]
    pub doaafnlfnni: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Joeoeegcfef {
    #[prost(uint32, tag = "13")]
    pub rouge_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Boiioildena {
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
    #[prost(uint32, tag = "6")]
    pub item_count: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlnbldhhogl {
    #[prost(uint32, tag = "2")]
    pub nhmpiffnamf: u32,
    #[prost(uint32, tag = "12")]
    pub num: u32,
    #[prost(uint32, tag = "5")]
    pub njlfacolgpi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npekaplagdc {
    #[prost(uint32, tag = "7")]
    pub mpekllnkhmh: u32,
    #[prost(uint32, tag = "12")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Heklilijdlb {
    #[prost(uint32, tag = "7")]
    pub piplanebdhb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aacjadlehnd {
    #[prost(uint32, tag = "9")]
    pub bmcidcpnbhf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhdigodfkfp {
    #[prost(uint32, repeated, tag = "13")]
    pub opojfpkglfo: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, tag = "6")]
    pub nlppcejdaed: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aagbckelbkd {
    #[prost(uint32, tag = "13")]
    pub knakjmodpna: u32,
    #[prost(uint32, tag = "3")]
    pub rouge_buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kaebakljcof {
    #[prost(enumeration = "Acpbbeincel", tag = "5")]
    pub jdeodllfeam: i32,
    #[prost(uint32, tag = "1")]
    pub mjhdflkgljh: u32,
    #[prost(uint32, tag = "11")]
    pub akkbhblhjfn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khialnhgmhn {
    #[prost(bool, tag = "6")]
    pub hjcgeidbicc: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub jfbnijilmmi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub nlppcejdaed: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Leclpmbcaem {
    #[prost(uint32, tag = "5")]
    pub cfbahapgbfc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Labjmdkoheb {
    #[prost(uint32, tag = "4")]
    pub count: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhejbaaimfe {
    #[prost(message, optional, tag = "5")]
    pub jdigfnaljfn: ::core::option::Option<Kaebakljcof>,
    #[prost(uint64, tag = "14")]
    pub bkddndcamop: u64,
    #[prost(enumeration = "Bkfplkgjofi", tag = "12")]
    pub bjgnepeedln: i32,
    #[prost(oneof = "hhejbaaimfe::ChallengeInfoCase", tags = "916")]
    pub challenge_info_case: ::core::option::Option<hhejbaaimfe::ChallengeInfoCase>,
}
/// Nested message and enum types in `HHEJBAAIMFE`.
pub mod hhejbaaimfe {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "916")]
        Idbbpnkboja(super::Khialnhgmhn),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fockflepfcf {
    #[prost(message, repeated, tag = "12")]
    pub naffkhnmkap: ::prost::alloc::vec::Vec<Hhejbaaimfe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fniddmjnack {
    #[prost(message, optional, tag = "3")]
    pub bmlghaobnfb: ::core::option::Option<Hhejbaaimfe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nabokojilam {
    #[prost(uint32, tag = "8")]
    pub naimnifdkfj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bifnmdkmmhd {
    #[prost(uint32, tag = "1")]
    pub naimnifdkfj: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub jjpilaohina: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdnojimjgkc {
    #[prost(message, optional, tag = "7")]
    pub bmlghaobnfb: ::core::option::Option<Hhejbaaimfe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Odhkpdcmaeb {
    #[prost(uint64, tag = "5")]
    pub bkddndcamop: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kafcadlbidk {
    #[prost(enumeration = "Bkfplkgjofi", tag = "7")]
    pub bjgnepeedln: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ienmofdahid {
    #[prost(message, optional, tag = "3")]
    pub cphnbnhbmkd: ::core::option::Option<Kfolablbpmi>,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "11")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaebdmbnmcl {
    #[prost(message, optional, tag = "12")]
    pub ddckgabhenf: ::core::option::Option<Nofeajcbdoa>,
    #[prost(oneof = "eaebdmbnmcl::ChallengeInfoCase", tags = "451")]
    pub challenge_info_case: ::core::option::Option<eaebdmbnmcl::ChallengeInfoCase>,
}
/// Nested message and enum types in `EAEBDMBNMCL`.
pub mod eaebdmbnmcl {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "451")]
        Edilcehkgfp(super::Ebeonhjdgmg),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jhdckdnifid {
    #[prost(uint32, tag = "4")]
    pub mjkoaihecnj: u32,
    #[prost(bool, tag = "15")]
    pub hkgaggdocfc: bool,
    #[prost(uint32, tag = "5")]
    pub hhdcnpfncdg: u32,
    #[prost(uint32, tag = "8")]
    pub fopcndibcpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehocfblopkl {
    #[prost(uint32, tag = "11")]
    pub gppfkhaaagl: u32,
    #[prost(uint32, tag = "5")]
    pub mcghljelbfg: u32,
    #[prost(bool, tag = "6")]
    pub hkgaggdocfc: bool,
    #[prost(uint32, tag = "9")]
    pub jicfgnplefo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mljbifelfcn {
    #[prost(uint32, tag = "5")]
    pub fcaihpoeicp: u32,
    #[prost(uint32, tag = "10")]
    pub nghiggbpohm: u32,
    #[prost(bool, tag = "7")]
    pub hkgaggdocfc: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obdlnihmbbp {
    #[prost(bool, tag = "10")]
    pub lpcoelkgboh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebeonhjdgmg {
    #[prost(message, optional, tag = "4")]
    pub gfjeninmllg: ::core::option::Option<Bdjjibbphoe>,
    #[prost(message, optional, tag = "1")]
    pub dogfmmdkgdc: ::core::option::Option<Fiidpggkano>,
    #[prost(message, optional, tag = "9")]
    pub level: ::core::option::Option<Haaghldjlcl>,
    #[prost(message, optional, tag = "5")]
    pub fgmiafdcpag: ::core::option::Option<Lablhoafnbj>,
    #[prost(message, optional, tag = "7")]
    pub ckanmmbnaln: ::core::option::Option<Pooaecfiigh>,
    #[prost(message, optional, tag = "12")]
    pub cdkpfikhpkg: ::core::option::Option<Obdlnihmbbp>,
    #[prost(message, optional, tag = "8")]
    pub kimfhlmfcaj: ::core::option::Option<Fmjphhjikek>,
    #[prost(message, optional, tag = "10")]
    pub lineup: ::core::option::Option<Pkanlcnedoc>,
    #[prost(message, optional, tag = "14")]
    pub hojjfbaebda: ::core::option::Option<Jhggmoknojb>,
    #[prost(message, optional, tag = "2")]
    pub nijpglcpaeo: ::core::option::Option<Icnphjaadde>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haaghldjlcl {
    #[prost(message, repeated, tag = "4")]
    pub gpkmfmjlmjp: ::prost::alloc::vec::Vec<Iedmiahondf>,
    #[prost(uint32, tag = "3")]
    pub cooinbpieoc: u32,
    #[prost(enumeration = "Adhodbdkoej", tag = "13")]
    pub reason: i32,
    #[prost(enumeration = "Mkmeagcccmo", tag = "15")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmjphhjikek {
    #[prost(uint32, tag = "8")]
    pub pblfidblbhb: u32,
    #[prost(uint32, tag = "7")]
    pub eahlnogacjf: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdjjibbphoe {
    #[prost(uint32, repeated, tag = "5")]
    pub bfhbdhcfmfg: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iedmiahondf {
    #[prost(uint32, tag = "11")]
    pub ebknmdmkoaa: u32,
    #[prost(enumeration = "Naedmbkpmdp", tag = "7")]
    pub status: i32,
    #[prost(message, repeated, tag = "15")]
    pub naemgnjpkeg: ::prost::alloc::vec::Vec<Lfapfhoeikg>,
    #[prost(uint32, tag = "13")]
    pub cllgffcfbpc: u32,
    #[prost(uint32, tag = "6")]
    pub igodafnldck: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfapfhoeikg {
    #[prost(uint32, tag = "9")]
    pub hgmfeggjefb: u32,
    #[prost(uint32, tag = "4")]
    pub bpfbjkcflkh: u32,
    #[prost(uint32, tag = "2")]
    pub hhbnifijlkj: u32,
    #[prost(enumeration = "Dflndoiodng", tag = "1")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldaapnnfjck {
    #[prost(uint32, tag = "15")]
    pub bflephgfcge: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub area_id: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub onlldnlphef: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bendkdnlffk {
    #[prost(message, optional, tag = "8")]
    pub nmjldchmdpe: ::core::option::Option<Eaebdmbnmcl>,
    #[prost(uint32, tag = "7")]
    pub bflephgfcge: u32,
    #[prost(message, optional, tag = "15")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fdacjniicnl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofjjdofpnim {
    #[prost(message, optional, tag = "9")]
    pub nmjldchmdpe: ::core::option::Option<Eaebdmbnmcl>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cpepbffpmfk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbmidincncf {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cflefhnjohf {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbhbaocchdf {
    #[prost(message, optional, tag = "1")]
    pub lbcchmlpacd: ::core::option::Option<Mljbifelfcn>,
    #[prost(message, optional, tag = "15")]
    pub kihfiimhnif: ::core::option::Option<Ehocfblopkl>,
    #[prost(message, optional, tag = "10")]
    pub nemgeopcbao: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "6")]
    pub nmjldchmdpe: ::core::option::Option<Eaebdmbnmcl>,
    #[prost(message, optional, tag = "9")]
    pub jcbgnkmlikn: ::core::option::Option<Jhdckdnifid>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iapeklbieej {
    #[prost(message, optional, tag = "10")]
    pub mlphbclbcip: ::core::option::Option<Hbhbaocchdf>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lgkfpkhngjg {
    #[prost(uint32, tag = "14")]
    pub hoejliokkbn: u32,
    #[prost(uint32, tag = "8")]
    pub ebknmdmkoaa: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjnijlfpanl {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cecilchbbel {
    #[prost(uint32, tag = "2")]
    pub cooinbpieoc: u32,
    #[prost(uint32, tag = "7")]
    pub hoejliokkbn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Janoebgcekm {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmpnodnpjgh {
    #[prost(enumeration = "Mkmeagcccmo", tag = "5")]
    pub status: i32,
    #[prost(uint32, tag = "4")]
    pub cooinbpieoc: u32,
    #[prost(enumeration = "Adhodbdkoej", tag = "6")]
    pub reason: i32,
    #[prost(message, repeated, tag = "1")]
    pub gpkmfmjlmjp: ::prost::alloc::vec::Vec<Iedmiahondf>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elgbjfepbbf {
    #[prost(uint32, tag = "12")]
    pub ogljemdmmoj: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub okmflgincmb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjjmahohmbb {
    #[prost(uint32, repeated, tag = "14")]
    pub nogflobefac: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hakiglkimnj {
    #[prost(uint32, tag = "4")]
    pub exp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhchmobhbfd {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldlajmopbid {
    #[prost(bool, tag = "5")]
    pub inkhhpljbnd: bool,
    #[prost(uint32, tag = "2")]
    pub area_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub hfefmipoloj: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "8")]
    pub nkecmfcfjak: bool,
    #[prost(bool, tag = "13")]
    pub aebicnomfbh: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecpgdnmolki {
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(uint32, tag = "13")]
    pub bflephgfcge: u32,
    #[prost(uint32, tag = "7")]
    pub immlccnclbf: u32,
    #[prost(bool, tag = "4")]
    pub mcmibkgnkmn: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmieadmkckl {
    #[prost(uint32, tag = "7")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub nogflobefac: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aencaceehhk {
    #[prost(message, optional, tag = "1")]
    pub ofhkchgpkhe: ::core::option::Option<Gifiacnhmec>,
    #[prost(uint32, tag = "12")]
    pub jkfjgcmohdi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfkmiannccn {
    #[prost(uint32, tag = "12")]
    pub deegbpgmjed: u32,
    #[prost(bool, tag = "5")]
    pub inkhhpljbnd: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kheenpjkcho {
    #[prost(uint32, tag = "3")]
    pub jcnhmmlglpl: u32,
    #[prost(uint32, tag = "14")]
    pub ogljemdmmoj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmohokegnim {
    #[prost(uint32, repeated, tag = "1")]
    pub ddjmhbbhhcn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub bokjmifikom: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub afahfidhlhf: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub bbnhnofgiip: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub hmddjonlhfl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub abaijkeggoi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnijnjbldig {
    #[prost(message, repeated, tag = "3")]
    pub eabcmnnhgmb: ::prost::alloc::vec::Vec<Fgeliiinhim>,
    #[prost(message, repeated, tag = "12")]
    pub cidhiiibigj: ::prost::alloc::vec::Vec<Ldlajmopbid>,
    #[prost(message, repeated, tag = "8")]
    pub oghbidjjcod: ::prost::alloc::vec::Vec<Mfkmiannccn>,
    #[prost(message, optional, tag = "4")]
    pub rogue_season_info: ::core::option::Option<Kheenpjkcho>,
    #[prost(message, optional, tag = "1")]
    pub minkjbadoni: ::core::option::Option<Bmieadmkckl>,
    #[prost(message, optional, tag = "2")]
    pub kaaphkebkao: ::core::option::Option<Aencaceehhk>,
    #[prost(message, optional, tag = "6")]
    pub poagffcehgi: ::core::option::Option<Ecpgdnmolki>,
    #[prost(message, optional, tag = "14")]
    pub lngiokapboe: ::core::option::Option<Bmohokegnim>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggbgclgkhfl {
    #[prost(message, optional, tag = "8")]
    pub rogue_info_data: ::core::option::Option<Gnijnjbldig>,
    #[prost(message, optional, tag = "10")]
    pub nmjldchmdpe: ::core::option::Option<Eaebdmbnmcl>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enpkhdcefke {
    #[prost(message, repeated, tag = "12")]
    pub cidhiiibigj: ::prost::alloc::vec::Vec<Ldlajmopbid>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgeliiinhim {
    #[prost(string, tag = "12")]
    pub name: ::prost::alloc::string::String,
    #[prost(int64, tag = "7")]
    pub end_time: i64,
    #[prost(message, optional, tag = "15")]
    pub data: ::core::option::Option<Ghnangcglgk>,
    #[prost(message, optional, tag = "4")]
    pub rogue_season_info: ::core::option::Option<Kheenpjkcho>,
    #[prost(uint32, tag = "8")]
    pub pfofhemgfkl: u32,
    #[prost(int64, tag = "9")]
    pub time: i64,
    #[prost(message, optional, tag = "2")]
    pub nmjldchmdpe: ::core::option::Option<Eaebdmbnmcl>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghnangcglgk {
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<RogueCommonBuff>,
    #[prost(uint32, tag = "13")]
    pub hojjfbaebda: u32,
    #[prost(message, repeated, tag = "1")]
    pub ldlkihgicij: ::prost::alloc::vec::Vec<Alplicbfmao>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdncgeejihb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggefdilikmk {
    #[prost(message, repeated, tag = "15")]
    pub eieopfilafn: ::prost::alloc::vec::Vec<Fgeliiinhim>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdegfhfnfpp {
    #[prost(uint32, tag = "13")]
    pub pfofhemgfkl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gfppfnlamgf {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub pfofhemgfkl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfkkicpnfld {
    #[prost(uint32, tag = "15")]
    pub pfofhemgfkl: u32,
    #[prost(string, tag = "12")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdglbemnkob {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub pfofhemgfkl: u32,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Meofjglbnmm {
    #[prost(uint32, tag = "12")]
    pub pfofhemgfkl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nlbnfkpppok {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejdiohhibed {
    #[prost(message, optional, tag = "13")]
    pub kaaphkebkao: ::core::option::Option<Aencaceehhk>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bnjohnomndn {
    #[prost(uint32, tag = "4")]
    pub talent_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blceeaeodfi {
    #[prost(message, optional, tag = "6")]
    pub kaaphkebkao: ::core::option::Option<Aencaceehhk>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ilpmocnmaga {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plfhleplkem {
    #[prost(message, optional, tag = "12")]
    pub kaaphkebkao: ::core::option::Option<Aencaceehhk>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iiabocggaam {
    #[prost(uint32, tag = "10")]
    pub gefpdfldlhd: u32,
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Fhbgcjdcjkp>,
    #[prost(bool, tag = "1")]
    pub hblikpiceke: bool,
    #[prost(uint32, tag = "15")]
    pub ddacbmoigca: u32,
    #[prost(uint32, tag = "12")]
    pub gebllhgakff: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnfblicefho {
    #[prost(message, optional, tag = "8")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ccboejoofcf {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgcgpiajcgh {
    #[prost(message, optional, tag = "1")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dnbnafimdip {
    #[prost(bool, tag = "6")]
    pub hblikpiceke: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lalkeoeloha {
    #[prost(message, optional, tag = "4")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmognmnbdgp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hpbgijjiaol {
    #[prost(uint32, tag = "10")]
    pub gefpdfldlhd: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub gebllhgakff: u32,
    #[prost(uint32, tag = "13")]
    pub ddacbmoigca: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obpnnndgmbe {
    #[prost(uint32, repeated, tag = "3")]
    pub pfmbjeoipbm: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nchfnfccpkm {
    #[prost(uint32, repeated, tag = "5")]
    pub hhdckgbmhai: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Jdhnhbbcgpk", tag = "8")]
    pub pkdjdpgcmfn: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jligepdmccj {
    #[prost(uint32, tag = "12")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkkimnlblkf {
    #[prost(message, optional, tag = "6")]
    pub mlphbclbcip: ::core::option::Option<Hbhbaocchdf>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckagbcocilb {
    #[prost(uint32, tag = "1")]
    pub area_id: u32,
    #[prost(uint32, tag = "9")]
    pub pfofhemgfkl: u32,
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eijgdeaplhh {
    #[prost(message, optional, tag = "12")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
    #[prost(message, optional, tag = "5")]
    pub lccghnekbof: ::core::option::Option<Fgeliiinhim>,
    #[prost(message, optional, tag = "10")]
    pub pcnljbbkccn: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub iefebagkbgo: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pjlmlibbkgb {
    #[prost(message, optional, tag = "1")]
    pub poagffcehgi: ::core::option::Option<Ecpgdnmolki>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnnahcjdojg {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bponhocekhj {
    #[prost(message, optional, tag = "8")]
    pub lbcchmlpacd: ::core::option::Option<Mljbifelfcn>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub kihfiimhnif: ::core::option::Option<Ehocfblopkl>,
    #[prost(message, optional, tag = "7")]
    pub jcbgnkmlikn: ::core::option::Option<Jhdckdnifid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ekgblngfmcg {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbogceemdfi {
    #[prost(uint32, repeated, tag = "13")]
    pub kpmianljimi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub cpiciedikjk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpmllpfkeph {
    #[prost(message, optional, tag = "10")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cinadlmebia {
    #[prost(uint32, tag = "13")]
    pub rouge_event_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbgfbgakonl {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub emcogfjadhf: ::core::option::Option<ItemCostList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgdbenheacg {
    #[prost(message, optional, tag = "1")]
    pub mlphbclbcip: ::core::option::Option<Hbhbaocchdf>,
    #[prost(message, optional, tag = "4")]
    pub lckjckjblec: ::core::option::Option<Ienmofdahid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kkpcknjocic {
    #[prost(uint32, tag = "7")]
    pub iinpnalngke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Concndhonae {
    #[prost(uint32, tag = "3")]
    pub iinpnalngke: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub gpbbaakongp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub gacha_random: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fihdleeplpg {
    #[prost(uint32, tag = "8")]
    pub iinpnalngke: u32,
    #[prost(uint32, tag = "7")]
    pub jgbaaahdgbj: u32,
    #[prost(uint32, tag = "15")]
    pub gacha_random: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffclbjpkbic {
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub noopmpomdga: u32,
    #[prost(uint32, tag = "1")]
    pub iinpnalngke: u32,
    #[prost(uint32, tag = "15")]
    pub gmmlaimhmmb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cfgdacdacfn {
    #[prost(uint32, tag = "12")]
    pub iinpnalngke: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRollShopRewardScRsp {
    #[prost(uint32, tag = "6")]
    pub group_type: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub roll_shop_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneActorInfo {
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub map_layer: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgfegleagoj {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub ochjfchenbe: u32,
    #[prost(uint32, tag = "3")]
    pub phlbeclkbhh: u32,
    #[prost(uint32, tag = "11")]
    pub baipbkipoom: u32,
    #[prost(uint32, tag = "4")]
    pub ailddaklbkk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnfpkhigodm {
    #[prost(oneof = "jnfpkhigodm::ChallengeInfoCase", tags = "4")]
    pub challenge_info_case: ::core::option::Option<jnfpkhigodm::ChallengeInfoCase>,
}
/// Nested message and enum types in `JNFPKHIGODM`.
pub mod jnfpkhigodm {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "4")]
        RogueInfo(super::Hgfegleagoj),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneNpcMonsterInfo {
    #[prost(bool, tag = "8")]
    pub khpagnjlpkf: bool,
    #[prost(message, optional, tag = "7")]
    pub extra_info: ::core::option::Option<Jnfpkhigodm>,
    #[prost(bool, tag = "12")]
    pub dlbbekjcgfg: bool,
    #[prost(uint32, tag = "4")]
    pub monster_id: u32,
    #[prost(uint32, tag = "11")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mihfoonenme {
    #[prost(uint32, tag = "2")]
    pub nmehgpbpmig: u32,
    #[prost(uint32, tag = "3")]
    pub geojjdpggna: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcRogueInfo {
    #[prost(message, repeated, tag = "5")]
    pub rogue_dialogue_event_param: ::prost::alloc::vec::Vec<Mihfoonenme>,
    #[prost(bool, tag = "2")]
    pub mcbmjhnofno: bool,
    #[prost(uint32, tag = "12")]
    pub nglokpibfpn: u32,
    #[prost(uint32, tag = "14")]
    pub mfpdbllkbcg: u32,
    #[prost(uint32, tag = "8")]
    pub oejingdknnd: u32,
    #[prost(bool, tag = "11")]
    pub adgbecnjiib: bool,
    #[prost(map = "uint32, uint32", tag = "1")]
    pub midpepggjel: ::std::collections::HashMap<u32, u32>,
    #[prost(bool, tag = "10")]
    pub fbchhjjamlh: bool,
    #[prost(uint32, tag = "13")]
    pub kohlpiklaba: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Deegbjjpkgp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Koklninmggd {
    #[prost(uint32, tag = "5")]
    pub ohcdeellomn: u32,
    #[prost(uint32, tag = "13")]
    pub dcoikpeblho: u32,
    #[prost(bool, tag = "15")]
    pub finish_dialogue: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcExtraInfo {
    #[prost(oneof = "npc_extra_info::ChallengeInfoCase", tags = "9, 11, 7")]
    pub challenge_info_case: ::core::option::Option<npc_extra_info::ChallengeInfoCase>,
}
/// Nested message and enum types in `NpcExtraInfo`.
pub mod npc_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "9")]
        RogueInfo(super::NpcRogueInfo),
        #[prost(message, tag = "11")]
        Mfhkadkhlbg(super::Koklninmggd),
        #[prost(message, tag = "7")]
        Hnoklpjmgjm(super::Deegbjjpkgp),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneNpcInfo {
    #[prost(uint32, tag = "7")]
    pub npc_id: u32,
    #[prost(message, optional, tag = "10")]
    pub extra_info: ::core::option::Option<NpcExtraInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropRogueInfo {
    #[prost(uint32, tag = "12")]
    pub fpbhhlbjogi: u32,
    #[prost(uint32, tag = "9")]
    pub coaofgpmpeh: u32,
    #[prost(uint32, tag = "14")]
    pub hgmfeggjefb: u32,
    #[prost(uint32, tag = "6")]
    pub ojapcibmgpc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropAeonInfo {
    #[prost(uint32, tag = "7")]
    pub dialogue_group_id: u32,
    #[prost(uint32, tag = "13")]
    pub add_exp: u32,
    #[prost(uint32, tag = "10")]
    pub aeon_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PropChessRogueInfo {
    #[prost(bool, tag = "9")]
    pub nobhhffeglc: bool,
    #[prost(bool, tag = "10")]
    pub kaencjpcifk: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pebbogalbda {
    #[prost(uint32, tag = "5")]
    pub bpfbjkcflkh: u32,
    #[prost(uint32, tag = "12")]
    pub mdkpgjdhjld: u32,
    #[prost(bool, tag = "7")]
    pub oemjecmjkka: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmefbafgefo {
    #[prost(bool, tag = "1")]
    pub oemjecmjkka: bool,
    #[prost(uint32, tag = "9")]
    pub mdkpgjdhjld: u32,
    #[prost(uint32, tag = "10")]
    pub bpfbjkcflkh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Laagfinpgic {
    #[prost(bool, tag = "7")]
    pub fglidejocje: bool,
    #[prost(uint32, tag = "10")]
    pub mlgdaokgnki: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbcooficahe {
    #[prost(uint32, tag = "10")]
    pub hanbbgkccdh: u32,
    #[prost(message, repeated, tag = "7")]
    pub ppiikigpojp: ::prost::alloc::vec::Vec<Laagfinpgic>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjmebnofpal {
    #[prost(uint32, tag = "13")]
    pub egppmmbckne: u32,
    #[prost(message, optional, tag = "5")]
    pub igfncpgbdij: ::core::option::Option<Pldbmbnbhje>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Idipcgnogog {
    #[prost(uint32, tag = "15")]
    pub gfjlnpbahgb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropExtraInfo {
    #[prost(oneof = "prop_extra_info::InfoCase", tags = "1, 2, 14, 13, 3, 4, 7, 8")]
    pub info_case: ::core::option::Option<prop_extra_info::InfoCase>,
}
/// Nested message and enum types in `PropExtraInfo`.
pub mod prop_extra_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InfoCase {
        #[prost(message, tag = "1")]
        RogueInfo(super::PropRogueInfo),
        #[prost(message, tag = "2")]
        AeonInfo(super::PropAeonInfo),
        #[prost(message, tag = "14")]
        ChessRogueInfo(super::PropChessRogueInfo),
        #[prost(message, tag = "13")]
        RogueTournDoorInfo(super::Pebbogalbda),
        #[prost(message, tag = "3")]
        RogueTournWorkbenchInfo(super::Kbcooficahe),
        #[prost(message, tag = "4")]
        RogueGambleMachineInfo(super::Mjmebnofpal),
        #[prost(message, tag = "7")]
        RogueCurseChestInfo(super::Idipcgnogog),
        #[prost(message, tag = "8")]
        RogueMagicDoorInfo(super::Fmefbafgefo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePropInfo {
    #[prost(uint32, tag = "15")]
    pub prop_state: u32,
    #[prost(uint32, tag = "1")]
    pub quest_prop_id: u32,
    #[prost(uint32, tag = "9")]
    pub life_time_ms: u32,
    #[prost(uint64, tag = "13")]
    pub create_time_ms: u64,
    #[prost(string, repeated, tag = "12")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub extra_info: ::core::option::Option<PropExtraInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneSummonUnitInfo {
    #[prost(int32, tag = "7")]
    pub life_time_ms: i32,
    #[prost(uint32, tag = "13")]
    pub attach_entity_id: u32,
    #[prost(string, repeated, tag = "12")]
    pub trigger_name_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "3")]
    pub caster_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub summon_unit_id: u32,
    #[prost(uint64, tag = "15")]
    pub create_time_ms: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityInfo {
    #[prost(uint32, tag = "4")]
    pub inst_id: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "11")]
    pub entity_id: u32,
    #[prost(message, optional, tag = "14")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(oneof = "scene_entity_info::EntityCase", tags = "9, 13, 5, 7, 3")]
    pub entity_case: ::core::option::Option<scene_entity_info::EntityCase>,
}
/// Nested message and enum types in `SceneEntityInfo`.
pub mod scene_entity_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum EntityCase {
        #[prost(message, tag = "9")]
        Actor(super::SceneActorInfo),
        #[prost(message, tag = "13")]
        NpcMonster(super::SceneNpcMonsterInfo),
        #[prost(message, tag = "5")]
        Npc(super::SceneNpcInfo),
        #[prost(message, tag = "7")]
        Prop(super::ScenePropInfo),
        #[prost(message, tag = "3")]
        SummonUnit(super::SceneSummonUnitInfo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(map = "string, float", tag = "6")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(float, tag = "15")]
    pub life_time: f32,
    #[prost(uint64, tag = "1")]
    pub add_time_ms: u64,
    #[prost(uint32, tag = "12")]
    pub daibnmlnbhn: u32,
    #[prost(uint32, tag = "10")]
    pub count: u32,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffInfo {
    #[prost(message, repeated, tag = "5")]
    pub buff_list: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(uint32, tag = "9")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MechanismBarInfo {
    #[prost(uint32, tag = "4")]
    pub neiobabbglh: u32,
    #[prost(uint32, tag = "15")]
    pub value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbmiemcpmgc {
    #[prost(string, tag = "8")]
    pub dpojndpgdfk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Inildojlmpa {
    #[prost(uint32, tag = "8")]
    pub kppgeomiklj: u32,
    #[prost(uint32, tag = "6")]
    pub dpnlnmmchmj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityGroupInfo {
    #[prost(message, repeated, tag = "6")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(map = "string, int32", tag = "15")]
    pub fjhodibbaan: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "11")]
    pub state: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneGroupState {
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(bool, tag = "8")]
    pub is_default: bool,
    #[prost(uint32, tag = "7")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imbepfmfndl {
    #[prost(uint32, repeated, tag = "11")]
    pub kaidmegmcda: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub fagnbdalnjo: ::prost::alloc::vec::Vec<Finbbokjbpl>,
    #[prost(uint32, repeated, tag = "1")]
    pub pfdbleonmlm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub ngohfjkldab: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "14")]
    pub hdoegckjehp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneInfo {
    #[prost(uint32, tag = "1788")]
    pub gfkihhopjdg: u32,
    #[prost(uint32, tag = "8")]
    pub floor_id: u32,
    #[prost(uint32, tag = "2")]
    pub game_mode_type: u32,
    #[prost(message, repeated, tag = "3")]
    pub ogebfjlggke: ::prost::alloc::vec::Vec<Dbmiemcpmgc>,
    #[prost(message, repeated, tag = "5")]
    pub dcedfkhekie: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(message, repeated, tag = "9")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    /// leader_entity_id ??
    #[prost(uint32, tag = "4")]
    pub hcejebkdkhj: u32,
    #[prost(uint32, tag = "202")]
    pub map_entry_id: u32,
    /// world_id ??
    #[prost(uint32, tag = "7")]
    pub kbbljplplbc: u32,
    #[prost(map = "uint32, message", tag = "11")]
    pub dkdfjnfhnmc: ::std::collections::HashMap<u32, Inildojlmpa>,
    #[prost(uint32, repeated, tag = "1")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "string, int32", tag = "687")]
    pub dblnkhdmfni: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "14")]
    pub client_pos_version: u32,
    #[prost(message, optional, tag = "808")]
    pub pdmlclajbmg: ::core::option::Option<Imbepfmfndl>,
    #[prost(message, repeated, tag = "13")]
    pub mpiapmbcmff: ::prost::alloc::vec::Vec<EntityBuffInfo>,
    #[prost(uint32, tag = "12")]
    pub entry_id: u32,
    #[prost(uint32, tag = "1777")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "15")]
    pub plane_id: u32,
    #[prost(message, repeated, tag = "148")]
    pub entity_group_list: ::prost::alloc::vec::Vec<SceneEntityGroupInfo>,
    #[prost(message, repeated, tag = "536")]
    pub group_state_list: ::prost::alloc::vec::Vec<SceneGroupState>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityMotion {
    #[prost(uint32, tag = "7")]
    pub map_layer: u32,
    #[prost(bool, tag = "4")]
    pub nofpfoipofd: bool,
    #[prost(message, optional, tag = "8")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "9")]
    pub entity_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveCsReq {
    #[prost(uint32, tag = "1")]
    pub entry_id: u32,
    #[prost(uint64, tag = "15")]
    pub clenbgijacp: u64,
    #[prost(message, repeated, tag = "14")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScRsp {
    #[prost(message, repeated, tag = "2")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScNotify {
    #[prost(uint32, tag = "13")]
    pub client_pos_version: u32,
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub entry_id: u32,
    #[prost(message, optional, tag = "6")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneUpdatePositionVersionNotify {
    #[prost(uint32, tag = "10")]
    pub pos_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropCsReq {
    #[prost(uint32, tag = "10")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub interact_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InteractPropScRsp {
    #[prost(uint32, tag = "1")]
    pub prop_state: u32,
    #[prost(uint32, tag = "9")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Delmmdlcble {
    #[prost(enumeration = "Cgmkfpiodbo", tag = "4")]
    pub dcbljleahcf: i32,
    #[prost(uint32, tag = "12")]
    pub mgmpflkodjh: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DynamicValue {
    #[prost(float, tag = "11")]
    pub value: f32,
    #[prost(string, tag = "4")]
    pub key: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistMonsterWave {
    #[prost(uint32, repeated, tag = "12")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCsReq {
    #[prost(uint32, tag = "11")]
    pub skill_index: u32,
    #[prost(uint32, tag = "8")]
    pub caster_id: u32,
    #[prost(uint32, tag = "13")]
    pub attacked_group_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "SceneCastSkill", repeated, tag = "4")]
    pub iabfmeelbdp: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "7")]
    pub assist_monster_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "10")]
    pub baeaoahcjle: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub assist_monster_wave_list: ::prost::alloc::vec::Vec<AssistMonsterWave>,
    #[prost(message, optional, tag = "14")]
    pub target_motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "1")]
    pub eefmbbckmnp: u32,
    #[prost(message, repeated, tag = "12")]
    pub dynamic_values: ::prost::alloc::vec::Vec<DynamicValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillScRsp {
    #[prost(message, optional, tag = "1")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub oipancgpahj: ::prost::alloc::vec::Vec<Delmmdlcble>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpCsReq {
    #[prost(uint32, tag = "10")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "13")]
    pub caster_id: u32,
    #[prost(uint32, tag = "7")]
    pub skill_index: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCostMpScRsp {
    #[prost(uint32, tag = "3")]
    pub attacked_group_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneCastSkillMpUpdateScNotify {
    #[prost(uint32, tag = "14")]
    pub mp: u32,
    #[prost(uint32, tag = "10")]
    pub attacked_group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEnterStageCsReq {
    #[prost(enumeration = "Oelnndobekp", tag = "4")]
    pub ajmdfdmdman: i32,
    #[prost(bool, tag = "12")]
    pub egpeneekjmb: bool,
    #[prost(uint32, tag = "9")]
    pub scene_event_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEnterStageScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleCsReq {
    #[prost(enumeration = "Oelnndobekp", tag = "6")]
    pub ajmdfdmdman: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneReviveAfterRebattleScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoScRsp {
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffChangeInfo {
    #[prost(uint32, tag = "3")]
    pub entity_id: u32,
    #[prost(enumeration = "SceneEntityBuffChangeType", tag = "12")]
    pub reason: i32,
    #[prost(oneof = "entity_buff_change_info::ChallengeInfoCase", tags = "4, 11")]
    pub challenge_info_case: ::core::option::Option<
        entity_buff_change_info::ChallengeInfoCase,
    >,
}
/// Nested message and enum types in `EntityBuffChangeInfo`.
pub mod entity_buff_change_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "4")]
        AddBuffInfo(super::BuffInfo),
        #[prost(uint32, tag = "11")]
        RemoveBuffId(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncEntityBuffChangeListScNotify {
    #[prost(message, repeated, tag = "14")]
    pub entity_buff_info_list: ::prost::alloc::vec::Vec<EntityBuffChangeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRefreshCsReq {
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "8")]
    pub floor_id: u32,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRefreshScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LastSpringRefreshTimeNotify {
    #[prost(int64, tag = "14")]
    pub pefefnggebl: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReturnLastTownCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReturnLastTownScRsp {
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionCsReq {
    #[prost(uint32, tag = "2")]
    pub section_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSectionScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurInteractEntityCsReq {
    #[prost(uint32, tag = "7")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurInteractEntityScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupCsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RecoverAllLineupScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SavePointsInfoNotify {
    #[prost(int64, tag = "8")]
    pub refresh_time: i64,
    #[prost(uint32, tag = "7")]
    pub valid_times: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartCocoonStageCsReq {
    #[prost(uint32, tag = "7")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(uint32, tag = "11")]
    pub monster_wave: u32,
    #[prost(uint32, tag = "4")]
    pub cocoon_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartCocoonStageScRsp {
    #[prost(uint32, tag = "2")]
    pub wave: u32,
    #[prost(uint32, tag = "7")]
    pub cocoon_id: u32,
    #[prost(message, optional, tag = "4")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityBindPropCsReq {
    #[prost(bool, tag = "3")]
    pub phmcekdlhbh: bool,
    #[prost(message, optional, tag = "5")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EntityBindPropScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedCsReq {
    #[prost(bool, tag = "12")]
    pub is_paused: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetClientPausedScRsp {
    #[prost(bool, tag = "12")]
    pub is_paused: bool,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeactivateFarmElementCsReq {
    #[prost(uint32, tag = "14")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeactivateFarmElementScRsp {
    #[prost(uint32, tag = "9")]
    pub entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateFarmElementCsReq {
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
    #[prost(uint32, tag = "14")]
    pub entity_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ActivateFarmElementScRsp {
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(uint32, tag = "10")]
    pub entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AvatarPresetHp {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "1")]
    pub nbbkljbjpnp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpringRecoverConfig {
    #[prost(uint32, tag = "12")]
    pub haeadfjhben: u32,
    #[prost(message, repeated, tag = "5")]
    pub moejbhkjhmi: ::prost::alloc::vec::Vec<AvatarPresetHp>,
    #[prost(bool, tag = "1")]
    pub mepkgpnbobp: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eljhldoekid {
    #[prost(int64, tag = "13")]
    pub oekoippimda: i64,
    #[prost(uint32, tag = "9")]
    pub akljjlcaeff: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSpringRecoverDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSpringRecoverDataScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub edfcepkkihe: ::core::option::Option<SpringRecoverConfig>,
    #[prost(message, optional, tag = "8")]
    pub iakpafaebem: ::core::option::Option<Eljhldoekid>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSpringRecoverConfigCsReq {
    #[prost(message, optional, tag = "1")]
    pub edfcepkkihe: ::core::option::Option<SpringRecoverConfig>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSpringRecoverConfigScRsp {
    #[prost(message, optional, tag = "13")]
    pub edfcepkkihe: ::core::option::Option<SpringRecoverConfig>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRecoverCsReq {
    #[prost(uint32, tag = "3")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRecoverScRsp {
    #[prost(message, optional, tag = "7")]
    pub heal_pool_info: ::core::option::Option<Eljhldoekid>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njinlfiaikn {
    #[prost(message, optional, tag = "8")]
    pub iakpafaebem: ::core::option::Option<Eljhldoekid>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmaagfeegbe {
    #[prost(uint32, tag = "11")]
    pub floor_id: u32,
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(bool, tag = "8")]
    pub kecknbdhfcc: bool,
    #[prost(uint32, tag = "13")]
    pub plane_id: u32,
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SpringRecoverSingleAvatarScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub hp: u32,
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdldcgibahd {
    #[prost(uint32, tag = "2")]
    pub plane_id: u32,
    #[prost(message, optional, tag = "6")]
    pub dileamlljff: ::core::option::Option<MechanismBarInfo>,
    #[prost(uint32, tag = "5")]
    pub floor_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ochllfdlklj {
    #[prost(string, tag = "5")]
    pub dpojndpgdfk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bdjjeneldgc {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmpphhiplel {
    #[prost(uint32, tag = "2")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoeiajdbilp {
    #[prost(message, optional, tag = "5")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityTeleportCsReq {
    #[prost(uint32, tag = "2")]
    pub entry_id: u32,
    #[prost(message, optional, tag = "7")]
    pub entity_motion: ::core::option::Option<EntityMotion>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SceneEntityTeleportScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub entity_motion: ::core::option::Option<EntityMotion>,
    #[prost(uint32, tag = "15")]
    pub client_pos_version: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneCsReq {
    #[prost(uint32, tag = "7")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "1")]
    pub entry_id: u32,
    #[prost(bool, tag = "4")]
    pub khggdihphpa: bool,
    #[prost(uint32, tag = "12")]
    pub gfkihhopjdg: u32,
    #[prost(uint32, tag = "6")]
    pub teleport_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterSceneScRsp {
    #[prost(uint32, tag = "15")]
    pub gfkihhopjdg: u32,
    #[prost(bool, tag = "2")]
    pub khggdihphpa: bool,
    #[prost(bool, tag = "1")]
    pub ihoaaecihik: bool,
    #[prost(uint32, tag = "3")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSceneByServerScNotify {
    #[prost(message, optional, tag = "2")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "EnterSceneReason", tag = "10")]
    pub reason: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePlaneEventScNotify {
    #[prost(message, optional, tag = "10")]
    pub genclocknik: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub hhbnhfmddcl: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "7")]
    pub anmiopnkebe: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "13")]
    pub get_item_list: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoCsReq {
    #[prost(bool, tag = "8")]
    pub flepbomhcne: bool,
    #[prost(uint32, tag = "6")]
    pub map_entry_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub gimjlnfbgih: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MazeProp {
    #[prost(uint32, tag = "13")]
    pub config_id: u32,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub state: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeGroup {
    #[prost(uint32, repeated, tag = "10")]
    pub gflmkighmde: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "6")]
    pub jjanemogdjf: bool,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(int64, tag = "7")]
    pub modify_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MazeChest {
    #[prost(enumeration = "MapInfoChestType", tag = "5")]
    pub map_info_chest_type: i32,
    #[prost(uint32, tag = "1")]
    pub unlocked_amount_list: u32,
    #[prost(uint32, tag = "7")]
    pub total_amount_list: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kflbebbnjem {
    #[prost(uint32, tag = "12")]
    pub oecfiajijic: u32,
    #[prost(uint32, tag = "6")]
    pub ceolodgcegj: u32,
    #[prost(uint32, tag = "3")]
    pub slot: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MazeMapData {
    #[prost(message, repeated, tag = "6")]
    pub unlocked_chest_list: ::prost::alloc::vec::Vec<MazeChest>,
    #[prost(uint32, repeated, tag = "14")]
    pub unlocked_teleport_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub maze_prop_list: ::prost::alloc::vec::Vec<MazeProp>,
    #[prost(uint32, tag = "5")]
    pub dimension_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub maze_group_list: ::prost::alloc::vec::Vec<MazeGroup>,
    #[prost(uint32, tag = "8")]
    pub gimjlnfbgih: u32,
    #[prost(uint32, tag = "7")]
    pub map_entry_id: u32,
    #[prost(uint32, tag = "10")]
    pub cmjmgmefapo: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(map = "string, int32", tag = "12")]
    pub dblnkhdmfni: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "13")]
    pub entry_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub iifkpkflodk: ::prost::alloc::vec::Vec<Kflbebbnjem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoScRsp {
    #[prost(bool, tag = "15")]
    pub flepbomhcne: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub edfjmikhalc: ::prost::alloc::vec::Vec<MazeMapData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SyncServerSceneChangeNotify {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterCountDownCsReq {
    #[prost(uint32, tag = "10")]
    pub coifbdjbcde: u32,
    #[prost(uint32, tag = "2")]
    pub pfhegfoolhe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterCountDownScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterUpdateScNotify {
    #[prost(uint32, tag = "14")]
    pub kppgeomiklj: u32,
    #[prost(enumeration = "Ffbmlflalll", tag = "13")]
    pub reason: i32,
    #[prost(uint32, tag = "5")]
    pub pfhegfoolhe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterRecoverCsReq {
    #[prost(uint32, tag = "3")]
    pub pfhegfoolhe: u32,
    #[prost(uint32, tag = "4")]
    pub flefkmdigof: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GameplayCounterRecoverScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFloorSavedValueNotify {
    #[prost(uint32, tag = "7")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
    #[prost(map = "string, int32", tag = "8")]
    pub saved_value: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "1")]
    pub floor_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnlockTeleportCsReq {
    #[prost(uint32, repeated, tag = "6")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUnlockTeleportScRsp {
    #[prost(uint32, repeated, tag = "7")]
    pub unlocked_teleport_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityRefreshInfo {
    #[prost(oneof = "scene_entity_refresh_info::Odngfibmlda", tags = "8, 11, 4")]
    pub odngfibmlda: ::core::option::Option<scene_entity_refresh_info::Odngfibmlda>,
}
/// Nested message and enum types in `SceneEntityRefreshInfo`.
pub mod scene_entity_refresh_info {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Odngfibmlda {
        #[prost(message, tag = "8")]
        AddEntity(super::SceneEntityInfo),
        /// EDMFEJHEPFH
        #[prost(uint32, tag = "11")]
        DelEntity(u32),
        #[prost(uint32, tag = "4")]
        Nnendgjbgbe(u32),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blaohaibjhl {
    #[prost(string, tag = "15")]
    pub lblfekkpcnc: ::prost::alloc::string::String,
    #[prost(int32, tag = "14")]
    pub godeppfkmnp: i32,
    #[prost(int32, tag = "12")]
    pub gmcbmdcoggo: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshInfo {
    #[prost(message, repeated, tag = "9")]
    pub fldodiafpja: ::prost::alloc::vec::Vec<Blaohaibjhl>,
    #[prost(enumeration = "SceneGroupRefreshType", tag = "12")]
    pub group_refresh_type: i32,
    #[prost(uint32, tag = "3")]
    pub state: u32,
    #[prost(message, repeated, tag = "15")]
    pub refresh_entity: ::prost::alloc::vec::Vec<SceneEntityRefreshInfo>,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupRefreshScNotify {
    #[prost(message, repeated, tag = "13")]
    pub group_refresh_info: ::prost::alloc::vec::Vec<SceneGroupRefreshInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateInfo {
    #[prost(uint32, tag = "14")]
    pub player_uid: u32,
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "10")]
    pub group_state: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeCsReq {
    #[prost(message, optional, tag = "15")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeScRsp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GroupStateChangeScNotify {
    #[prost(message, optional, tag = "4")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnteredSceneInfo {
    #[prost(uint32, tag = "7")]
    pub floor_id: u32,
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub entered_scene_info: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnteredSceneChangeScNotify {
    #[prost(message, repeated, tag = "13")]
    pub entered_scene_info: ::prost::alloc::vec::Vec<EnteredSceneInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RefreshTriggerByClientCsReq {
    #[prost(string, tag = "12")]
    pub trigger_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub trigger_entity_id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub trigger_target_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub trigger_motion: ::core::option::Option<MotionInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lagogjmjdef {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(string, tag = "7")]
    pub trigger_name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub trigger_entity_id: u32,
    #[prost(bool, tag = "5")]
    pub klnpenabpfe: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfafegbhjkg {
    #[prost(uint32, repeated, tag = "15")]
    pub trigger_target_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub trigger_entity_id: u32,
    #[prost(string, tag = "6")]
    pub trigger_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odpgbnhioep {
    #[prost(uint32, repeated, tag = "4")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bncdgkefnib {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockedAreaMapScNotify {
    #[prost(uint32, repeated, tag = "6")]
    pub entry_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTimedCocoonStageCsReq {
    #[prost(uint32, tag = "9")]
    pub monster_wave: u32,
    #[prost(uint32, tag = "10")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "11")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartTimedCocoonStageScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "3")]
    pub monster_wave: u32,
    #[prost(message, optional, tag = "13")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartTimedFarmElementCsReq {
    #[prost(uint32, tag = "4")]
    pub megejfgakdl: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartTimedFarmElementScRsp {
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub world_level: u32,
    #[prost(uint32, tag = "8")]
    pub megejfgakdl: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTeleportNotify {
    #[prost(uint32, tag = "8")]
    pub teleport_id: u32,
    #[prost(uint32, tag = "4")]
    pub entry_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odmgppimlac {
    #[prost(int32, tag = "9")]
    pub oeopfgedfgb: i32,
    #[prost(uint32, tag = "5")]
    pub floor_id: u32,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(string, tag = "12")]
    pub lblfekkpcnc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub dimension_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efmahdibnjo {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(int32, tag = "15")]
    pub gmcbmdcoggo: i32,
    #[prost(string, tag = "10")]
    pub lblfekkpcnc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub dimension_id: u32,
    #[prost(uint32, tag = "9")]
    pub floor_id: u32,
    #[prost(int32, tag = "13")]
    pub godeppfkmnp: i32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerPrefs {
    #[prost(uint32, tag = "15")]
    pub server_prefs_id: u32,
    #[prost(bytes = "vec", tag = "12")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetAllServerPrefsDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllServerPrefsDataScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub jieemjmmmif: ::prost::alloc::vec::Vec<ServerPrefs>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerPrefsDataCsReq {
    #[prost(uint32, tag = "5")]
    pub server_prefs_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetServerPrefsDataScRsp {
    #[prost(message, optional, tag = "1")]
    pub server_prefs: ::core::option::Option<ServerPrefs>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateServerPrefsDataCsReq {
    #[prost(message, optional, tag = "8")]
    pub server_prefs: ::core::option::Option<ServerPrefs>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateServerPrefsDataScRsp {
    #[prost(uint32, tag = "9")]
    pub server_prefs_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shop {
    #[prost(message, repeated, tag = "11")]
    pub goods_list: ::prost::alloc::vec::Vec<Goods>,
    #[prost(int64, tag = "1")]
    pub begin_time: i64,
    #[prost(uint32, tag = "10")]
    pub shop_id: u32,
    #[prost(int64, tag = "14")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub city_level: u32,
    #[prost(uint32, tag = "5")]
    pub city_exp: u32,
    #[prost(uint64, tag = "7")]
    pub city_taken_level_reward: u64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goods {
    #[prost(int64, tag = "2")]
    pub begin_time: i64,
    #[prost(uint32, tag = "3")]
    pub goods_id: u32,
    #[prost(uint32, tag = "11")]
    pub buy_times: u32,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
    #[prost(int64, tag = "13")]
    pub end_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetShopListCsReq {
    #[prost(uint32, tag = "15")]
    pub shop_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShopListScRsp {
    #[prost(message, repeated, tag = "12")]
    pub shop_list: ::prost::alloc::vec::Vec<Shop>,
    #[prost(uint32, tag = "4")]
    pub shop_type: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BuyGoodsCsReq {
    #[prost(uint32, tag = "2")]
    pub rouge_event_id: u32,
    #[prost(uint32, tag = "15")]
    pub goods_num: u32,
    #[prost(uint32, tag = "14")]
    pub goods_id: u32,
    #[prost(uint32, tag = "9")]
    pub item_id: u32,
    #[prost(uint32, tag = "13")]
    pub shop_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyGoodsScRsp {
    #[prost(uint32, tag = "7")]
    pub shop_id: u32,
    #[prost(uint32, tag = "9")]
    pub goods_id: u32,
    #[prost(uint32, tag = "13")]
    pub goods_buy_times: u32,
    #[prost(message, optional, tag = "12")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardCsReq {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub shop_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardScRsp {
    #[prost(uint32, tag = "4")]
    pub shop_id: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CityShopInfoScNotify {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint64, tag = "11")]
    pub taken_level_reward: u64,
    #[prost(uint32, tag = "8")]
    pub shop_id: u32,
    #[prost(uint32, tag = "7")]
    pub exp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppbbldeafdg {
    #[prost(uint32, tag = "3")]
    pub lbjbeickmik: u32,
    #[prost(uint32, tag = "14")]
    pub ciclhamhanh: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub item_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub unique_id: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub fdfmbfndkcb: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub pglkaebfdnl: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ahblnfkhhnl {
    #[prost(uint32, tag = "12")]
    pub ciclhamhanh: u32,
    #[prost(uint32, tag = "4")]
    pub fbglkpnipnc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lbcaoknjbom {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dccfimigebe {
    #[prost(uint32, repeated, tag = "12")]
    pub jacfaojkbpg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub papipnbpbpe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub gcnokoilmhg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub jbibfelmjnb: ::prost::alloc::vec::Vec<Ppbbldeafdg>,
    #[prost(uint32, tag = "11")]
    pub kmdbegageln: u32,
    #[prost(message, repeated, tag = "14")]
    pub pfijliidoch: ::prost::alloc::vec::Vec<Ahblnfkhhnl>,
    #[prost(uint32, repeated, tag = "2")]
    pub kpfcfmpaanl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub bjkhhapgldc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbknjbjjdip {
    #[prost(uint32, repeated, tag = "2")]
    pub jgiocdokphm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub jgchgedkhhm: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oakgfdobblb {
    #[prost(message, repeated, tag = "7")]
    pub nhibgkempnd: ::prost::alloc::vec::Vec<Ahblnfkhhnl>,
    #[prost(message, optional, tag = "14")]
    pub dbaifaadpji: ::core::option::Option<Ppbbldeafdg>,
    #[prost(bool, tag = "3")]
    pub kighmkfohej: bool,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pibjjjmkilj {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "9")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liehdcfpaoh {
    #[prost(bool, tag = "7")]
    pub kighmkfohej: bool,
    #[prost(message, repeated, tag = "4")]
    pub nhibgkempnd: ::prost::alloc::vec::Vec<Ahblnfkhhnl>,
    #[prost(message, optional, tag = "5")]
    pub jpioegdkmho: ::core::option::Option<Ppbbldeafdg>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bgpbjhihfom {
    #[prost(uint32, tag = "13")]
    pub ljlafpfjhpf: u32,
    #[prost(uint32, tag = "7")]
    pub iojipjmldmn: u32,
    #[prost(uint32, tag = "3")]
    pub op_type: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mabpkdbcdfk {
    #[prost(uint32, repeated, tag = "14")]
    pub papipnbpbpe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iikgeeecknc {
    #[prost(uint32, repeated, tag = "5")]
    pub fiapcbpefln: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Palipoggnle {
    #[prost(uint32, repeated, tag = "5")]
    pub nmanapjbahk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmebfnggdch {
    #[prost(bool, tag = "4")]
    pub ngdncdhdpef: bool,
    #[prost(message, repeated, tag = "13")]
    pub jkenkdchmka: ::prost::alloc::vec::Vec<Ppbbldeafdg>,
    #[prost(bool, tag = "8")]
    pub kighmkfohej: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fboikahmakg {
    #[prost(uint32, tag = "12")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajjdkjlacbi {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hgjgdbalgfi {
    #[prost(uint32, tag = "14")]
    pub obbnodafpak: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aafakpneclj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub obbnodafpak: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Onopfmljiml {
    #[prost(bool, tag = "3")]
    pub jnkppjhench: bool,
    #[prost(uint32, tag = "13")]
    pub oekbkachmab: u32,
    #[prost(uint32, tag = "15")]
    pub fmlkghhlndk: u32,
    #[prost(uint32, tag = "5")]
    pub group_id: u32,
    #[prost(uint32, tag = "7")]
    pub plccichpede: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fpficglmkml {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdfbdbblcol {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub nmlfdcagkpf: ::prost::alloc::vec::Vec<Onopfmljiml>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iaekelnhgfp {
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klgbfgnidck {
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub kongaadejel: u32,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<Iaekelnhgfp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gepgbmopnjh {
    #[prost(message, optional, tag = "11")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "1")]
    pub kongaadejel: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnjmhpdneil {
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(message, optional, tag = "7")]
    pub mjhofnhejfb: ::core::option::Option<Onopfmljiml>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStoryLineInfoCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStoryLineInfoScRsp {
    #[prost(uint32, repeated, tag = "15")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub hbdakhjjoif: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub jaboaeelcfj: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryLineInfoScNotify {
    #[prost(uint32, repeated, tag = "12")]
    pub jaboaeelcfj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub bajfejjeffn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub hbdakhjjoif: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ChangeStoryLineFinishScNotify {
    #[prost(uint32, tag = "13")]
    pub nbblpkaojam: u32,
    #[prost(uint32, tag = "11")]
    pub hbdakhjjoif: u32,
    #[prost(enumeration = "Phfijampdgi", tag = "5")]
    pub cfeijcflbko: i32,
    #[prost(bool, tag = "14")]
    pub lijoccofcdl: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryLineTrialAvatarChangeScNotify {
    #[prost(uint32, repeated, tag = "4")]
    pub hnelidcnccc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub nlhfllfpehe: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatarData {
    #[prost(uint32, repeated, tag = "9")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityData {
    #[prost(message, optional, tag = "10")]
    pub bfbdmamfaea: ::core::option::Option<StrongChallengeAvatarData>,
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
    #[prost(uint32, tag = "2")]
    pub module_id: u32,
    #[prost(uint32, tag = "11")]
    pub fhoimjblcnm: u32,
    #[prost(uint32, tag = "4")]
    pub stage_score: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityInfo {
    #[prost(map = "uint32, message", tag = "2")]
    pub ekflicjplli: ::std::collections::HashMap<u32, StrongChallengeActivityData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetStrongChallengeActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStrongChallengeActivityDataScRsp {
    #[prost(message, optional, tag = "4")]
    pub pilcjfgbjmp: ::core::option::Option<StrongChallengeActivityInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterStrongChallengeActivityStageCsReq {
    #[prost(message, repeated, tag = "12")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, repeated, tag = "10")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterStrongChallengeActivityStageScRsp {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "3")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StrongChallengeActivityBattleEndScNotify {
    #[prost(uint32, tag = "4")]
    pub blagojadhdg: u32,
    #[prost(uint32, tag = "10")]
    pub njohpoehobf: u32,
    #[prost(uint32, tag = "5")]
    pub score: u32,
    #[prost(uint32, tag = "1")]
    pub stage_score: u32,
    #[prost(uint32, tag = "3")]
    pub total_damage: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "15")]
    pub end_status: i32,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
    #[prost(uint32, tag = "8")]
    pub megldgbckeh: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jffjlojdikn {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub stars: u32,
    #[prost(uint32, tag = "11")]
    pub kongaadejel: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSummonActivityDataCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSummonActivityDataScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub agfpnnlochf: ::prost::alloc::vec::Vec<Jffjlojdikn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cepgecdbnff {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSummonActivityStageCsReq {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub kongaadejel: u32,
    #[prost(message, optional, tag = "9")]
    pub cnccnogdiep: ::core::option::Option<Cepgecdbnff>,
    #[prost(message, repeated, tag = "14")]
    pub avatar_list: ::prost::alloc::vec::Vec<Cepgecdbnff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSummonActivityStageScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub kongaadejel: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SummonActivityBattleEndScNotify {
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub stars: u32,
    #[prost(uint32, tag = "13")]
    pub kongaadejel: u32,
    #[prost(uint32, tag = "10")]
    pub kcenjnfnepl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epedodhjojf {
    #[prost(message, optional, tag = "15")]
    pub bkhfblbioeg: ::core::option::Option<Bfidnbacipf>,
    #[prost(uint32, repeated, tag = "13")]
    pub cdfoaeclkdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub loopeomdnoh: ::core::option::Option<Cgmdbeihmpk>,
    #[prost(uint32, tag = "14")]
    pub ncphfidnghe: u32,
    #[prost(message, optional, tag = "1")]
    pub kikjkiacenh: ::core::option::Option<Mfkfodkmenj>,
    #[prost(message, optional, tag = "8")]
    pub amlcaeijmee: ::core::option::Option<Faifhibbnao>,
    #[prost(message, optional, tag = "10")]
    pub kkikgppkhip: ::core::option::Option<Lmhkcahmnpe>,
    #[prost(message, optional, tag = "5")]
    pub paiahlnacgc: ::core::option::Option<Oopkdempmfi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmhkcahmnpe {
    #[prost(uint32, tag = "2")]
    pub jceahhgjmkk: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub opdejdoohop: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub hpjahkfgfkb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfidnbacipf {
    #[prost(uint32, tag = "9")]
    pub gfkihhopjdg: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub eklmjogkian: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cenaebgecfe {
    #[prost(enumeration = "Clilplkgfdm", tag = "13")]
    pub lipjjjkalkb: i32,
    #[prost(uint32, tag = "1")]
    pub value: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfkfodkmenj {
    #[prost(uint32, tag = "4")]
    pub oeiofhjgcnj: u32,
    #[prost(message, repeated, tag = "6")]
    pub ihinejmhncp: ::prost::alloc::vec::Vec<Cenaebgecfe>,
    #[prost(uint32, tag = "9")]
    pub apkopanfcfi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elemdjililm {
    #[prost(uint32, tag = "1")]
    pub lmfhnelkfoc: u32,
    #[prost(uint32, tag = "15")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgmdbeihmpk {
    #[prost(message, repeated, tag = "7")]
    pub mooplkalbmn: ::prost::alloc::vec::Vec<Elemdjililm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oopkdempmfi {
    #[prost(uint32, tag = "754")]
    pub khgfefmggof: u32,
    #[prost(oneof = "oopkdempmfi::ChallengeInfoCase", tags = "1, 12")]
    pub challenge_info_case: ::core::option::Option<oopkdempmfi::ChallengeInfoCase>,
}
/// Nested message and enum types in `OOPKDEMPMFI`.
pub mod oopkdempmfi {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "1")]
        Agiicffdnfc(super::Igligfcgjof),
        #[prost(message, tag = "12")]
        Oggldggmcil(super::Hhimdmkhfhg),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ajengommjpn {
    #[prost(uint32, tag = "3")]
    pub ebalmajkelc: u32,
    #[prost(uint32, tag = "1")]
    pub enkblefcoid: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igligfcgjof {
    #[prost(uint32, repeated, tag = "8")]
    pub fndlollfepp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub bkkjjeaaabn: ::prost::alloc::vec::Vec<Ajengommjpn>,
    #[prost(enumeration = "Chdecelmagi", tag = "7")]
    pub oahgegielon: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hhimdmkhfhg {
    #[prost(uint32, tag = "15")]
    pub anlmphaoahn: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Faifhibbnao {
    #[prost(oneof = "faifhibbnao::ChallengeInfoCase", tags = "5, 10, 9, 3, 2, 4, 13, 6")]
    pub challenge_info_case: ::core::option::Option<faifhibbnao::ChallengeInfoCase>,
}
/// Nested message and enum types in `FAIFHIBBNAO`.
pub mod faifhibbnao {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "5")]
        Oiiihmdgmjo(super::Cnhfmafdiff),
        #[prost(message, tag = "10")]
        Ljaojffeado(super::Oaialnnochl),
        #[prost(message, tag = "9")]
        Kikhaldimfd(super::Gcffccnlemh),
        #[prost(message, tag = "3")]
        Kcdbldhfade(super::Mjcnjhbmclm),
        #[prost(message, tag = "2")]
        Eheglhkhmnp(super::Nddbkiheopd),
        #[prost(message, tag = "4")]
        Loempihemee(super::Ihemhbkfeob),
        #[prost(message, tag = "13")]
        Fbbmpmjielf(super::Fmkplcoglpf),
        #[prost(message, tag = "6")]
        Nhigiphkgea(super::Enbccinojne),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnhfmafdiff {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oaialnnochl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gcffccnlemh {
    #[prost(uint32, tag = "9")]
    pub jlfljlkdjdf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mjcnjhbmclm {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nddbkiheopd {
    #[prost(bool, tag = "11")]
    pub gbgopmeehig: bool,
    #[prost(uint32, tag = "10")]
    pub gihobankdjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ihemhbkfeob {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fmkplcoglpf {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enbccinojne {
    #[prost(bool, tag = "15")]
    pub ohmgbogkijn: bool,
    #[prost(uint32, tag = "12")]
    pub gihobankdjb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oooefjnngfh {
    #[prost(enumeration = "Lakjklkiiao", tag = "3")]
    pub source: i32,
    #[prost(message, optional, tag = "14")]
    pub mhbcmnckkeb: ::core::option::Option<Hiaamapmjia>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiaamapmjia {
    #[prost(
        oneof = "hiaamapmjia::ChallengeInfoCase",
        tags = "5, 6, 2, 11, 8, 4, 12, 13, 331, 1909, 479, 1436"
    )]
    pub challenge_info_case: ::core::option::Option<hiaamapmjia::ChallengeInfoCase>,
}
/// Nested message and enum types in `HIAAMAPMJIA`.
pub mod hiaamapmjia {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChallengeInfoCase {
        #[prost(message, tag = "5")]
        Afiblimjclj(super::Pkaaolagdjc),
        #[prost(message, tag = "6")]
        Fidggpooeoc(super::Boheigleoon),
        #[prost(message, tag = "2")]
        Lpciceofnig(super::Boheigleoon),
        #[prost(message, tag = "11")]
        Inekpcgleeb(super::Klollkllfpa),
        #[prost(message, tag = "8")]
        Fkcclaaommc(super::Omeopmdbkob),
        #[prost(message, tag = "4")]
        Dbljobnhphf(super::Nddbkiheopd),
        #[prost(message, tag = "12")]
        Neceajdcold(super::Pobndlookci),
        #[prost(uint32, tag = "13")]
        Ojjgdmfpmco(u32),
        #[prost(uint32, tag = "331")]
        Apkopanfcfi(u32),
        #[prost(message, tag = "1909")]
        Pfmffiocjlj(super::Enbccinojne),
        #[prost(message, tag = "479")]
        Mnohajngpjc(super::Ihemhbkfeob),
        #[prost(uint32, tag = "1436")]
        Dmmanmcnomf(u32),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pobndlookci {
    #[prost(uint32, tag = "13")]
    pub jlfljlkdjdf: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pkaaolagdjc {
    #[prost(uint32, tag = "15")]
    pub ehfnpfcacgj: u32,
    #[prost(enumeration = "Clilplkgfdm", tag = "8")]
    pub lipjjjkalkb: i32,
    #[prost(uint32, tag = "12")]
    pub eafclnofmhb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Boheigleoon {
    #[prost(uint32, tag = "4")]
    pub ehfnpfcacgj: u32,
    #[prost(uint32, tag = "9")]
    pub eafclnofmhb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Klollkllfpa {
    #[prost(uint32, tag = "4")]
    pub lmfhnelkfoc: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub ppdahnfnfna: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omeopmdbkob {
    #[prost(message, optional, tag = "5")]
    pub kobmclgjjdb: ::core::option::Option<Oopkdempmfi>,
    #[prost(uint32, tag = "12")]
    pub ncphfidnghe: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mlkhnkbjefb {
    #[prost(uint32, tag = "1")]
    pub gihobankdjb: u32,
    #[prost(bool, tag = "3")]
    pub gbgopmeehig: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adblibgikbk {
    #[prost(message, repeated, tag = "5")]
    pub fpebfcpdiak: ::prost::alloc::vec::Vec<Oooefjnngfh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fkfebahfgcd {
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub progress: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aibgkdgdggb {
    #[prost(message, repeated, tag = "6")]
    pub nmedfeafkpe: ::prost::alloc::vec::Vec<Fkfebahfgcd>,
    #[prost(uint32, repeated, tag = "3")]
    pub iijceobiehp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Imjpjmelhbj {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbimgjodmic {
    #[prost(uint32, repeated, tag = "3")]
    pub jmodaegkbom: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub onghnjcgjla: ::core::option::Option<Aibgkdgdggb>,
    #[prost(message, optional, tag = "15")]
    pub idjghdkaood: ::core::option::Option<Epedodhjojf>,
    #[prost(uint32, tag = "7")]
    pub ginkhjpioal: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub kigfkhfbieo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "14")]
    pub eklmjogkian: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(bool, tag = "1")]
    pub obdlpceomln: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lphfbielllb {
    #[prost(uint32, repeated, tag = "5")]
    pub hfkjlknlfoe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub henikpbckgc: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgodjdaplmb {
    #[prost(uint32, repeated, tag = "14")]
    pub henikpbckgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkleakglacl {
    #[prost(enumeration = "Chdecelmagi", tag = "2")]
    pub fgmbfkbcgfh: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmcjjkhheok {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub leodbopcijk: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njedbefcikm {
    #[prost(uint32, tag = "14")]
    pub pbalffcfpjd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cnfbmkfpcaj {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jomfdjdengn {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hoiakfcffge {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eickhbpbgeh {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpicfjflacf {
    #[prost(message, optional, tag = "12")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhhpjddlemj {
    #[prost(uint32, tag = "2")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kcabbhnnaae {
    #[prost(uint32, tag = "10")]
    pub skill_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oelaeekmhli {
    #[prost(uint32, tag = "7")]
    pub gfkihhopjdg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbbledkfdnh {
    #[prost(message, optional, tag = "9")]
    pub idjghdkaood: ::core::option::Option<Epedodhjojf>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jpgnghfannn {
    #[prost(uint32, tag = "2")]
    pub gihobankdjb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gjmdjphplbf {
    #[prost(uint32, tag = "1")]
    pub gihobankdjb: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bejpajfleph {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jgpgobabmif {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcfflpbpkeg {
    #[prost(uint32, tag = "6")]
    pub ikhdmkbfpma: u32,
    #[prost(uint32, tag = "3")]
    pub nampnolboek: u32,
    #[prost(enumeration = "Ojgdbabmnmh", tag = "15")]
    pub reason: i32,
    #[prost(uint32, tag = "14")]
    pub gfkihhopjdg: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub hdaijpheejo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "2")]
    pub noklencdfnf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub kobmclgjjdb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddokipkkdam {
    #[prost(message, repeated, tag = "13")]
    pub nmedfeafkpe: ::prost::alloc::vec::Vec<Fkfebahfgcd>,
    #[prost(uint32, repeated, tag = "8")]
    pub iijceobiehp: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Amnbmgkhieo {
    #[prost(uint32, tag = "11")]
    pub nhbiblnjlnp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bkecndlcgek {
    #[prost(uint32, tag = "5")]
    pub nhbiblnjlnp: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lnflblmnihk {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnbmlmnlnjh {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub idjghdkaood: ::core::option::Option<Epedodhjojf>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bjkiehklaif {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lghnkpnngmp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glppeohmhlk {
    #[prost(message, repeated, tag = "6")]
    pub bgfjpmljhgk: ::prost::alloc::vec::Vec<Cenaebgecfe>,
    #[prost(uint32, tag = "9")]
    pub ipjgjojgkce: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jimhojndimk {
    #[prost(uint32, tag = "10")]
    pub gfkihhopjdg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gchneolmken {
    #[prost(message, optional, tag = "9")]
    pub idjghdkaood: ::core::option::Option<Epedodhjojf>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bfjngmhbmin {
    #[prost(uint32, tag = "7")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hajhijpclad {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub skill_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmjkagneeii {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Blbifdlglkh {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dmeiffbhefb {
    #[prost(uint32, tag = "9")]
    pub stamina: u32,
    #[prost(uint32, tag = "10")]
    pub admdcjnbnek: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbmohlgcecc {
    #[prost(bool, tag = "12")]
    pub midbcdihnkm: bool,
    #[prost(message, repeated, tag = "15")]
    pub unlocked_head_icon_list: ::prost::alloc::vec::Vec<HeadIcon>,
    #[prost(string, tag = "2")]
    pub signature: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfkmimbcpeo {
    #[prost(message, repeated, tag = "10")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oemjekcjhhh {
    #[prost(message, repeated, tag = "14")]
    pub jgmmklobcho: ::prost::alloc::vec::Vec<Fcbmhigcmhl>,
    #[prost(uint32, repeated, tag = "8")]
    pub bdbhdacgoak: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "7")]
    pub cpmdjncbcmf: ::prost::alloc::vec::Vec<Okbgmbeimcb>,
    #[prost(uint32, repeated, tag = "4")]
    pub cjalfgaepkk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub mission_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "12")]
    pub plfojedcepf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub kaidmegmcda: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfabhhinhkm {
    #[prost(uint32, repeated, tag = "5")]
    pub pmmblbbejmi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub nfcldjldoog: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "4")]
    pub ncemfhaflae: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgahmgjanpl {
    #[prost(uint32, repeated, tag = "4")]
    pub dhenmfidjek: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub kckagpkjchi: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Podigcnlnij {
    #[prost(message, repeated, tag = "2")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "166")]
    pub jkhedclmmfd: ::prost::alloc::vec::Vec<GroupStatus>,
    #[prost(message, repeated, tag = "15")]
    pub quest_list: ::prost::alloc::vec::Vec<Quest>,
    #[prost(uint32, repeated, tag = "13")]
    pub hlekcigdgeb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "1")]
    pub cipnngadahp: ::core::option::Option<Dmeiffbhefb>,
    #[prost(uint32, tag = "751")]
    pub total_achievement_exp: u32,
    #[prost(message, repeated, tag = "1816")]
    pub jfpfcjhdmfi: ::prost::alloc::vec::Vec<SectionStatus>,
    #[prost(message, repeated, tag = "986")]
    pub llmkcdedifp: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "1433")]
    pub ffebcdibihd: ::prost::alloc::vec::Vec<Mgigpkhdflh>,
    #[prost(message, optional, tag = "1499")]
    pub abeeddgdecg: ::core::option::Option<Dgahmgjanpl>,
    #[prost(message, optional, tag = "10")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(message, repeated, tag = "8")]
    pub wait_del_resource_list: ::prost::alloc::vec::Vec<WaitDelResource>,
    #[prost(uint32, repeated, tag = "867")]
    pub jhppmjiepke: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "1134")]
    pub ohlfbilhpcc: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "5")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(message, optional, tag = "4")]
    pub eddeeekcked: ::core::option::Option<Hfkmimbcpeo>,
    #[prost(message, optional, tag = "7")]
    pub edfcaflflfh: ::core::option::Option<Oemjekcjhhh>,
    #[prost(message, optional, tag = "6")]
    pub jlhjgicjeml: ::core::option::Option<Nfabhhinhkm>,
    #[prost(message, optional, tag = "1972")]
    pub ficcddaohkh: ::core::option::Option<Lbmohlgcecc>,
    #[prost(uint32, repeated, tag = "9")]
    pub igcabdilknf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(message, repeated, tag = "1501")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarTypeInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardCsReq {
    #[prost(uint32, tag = "13")]
    pub npc_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNpcTakenRewardScRsp {
    #[prost(uint32, repeated, tag = "5")]
    pub talk_event_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub npc_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardCsReq {
    #[prost(message, optional, tag = "9")]
    pub npbpcbkalmn: ::core::option::Option<Vector>,
    #[prost(uint32, tag = "12")]
    pub agcklenadno: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeTalkRewardScRsp {
    #[prost(uint32, tag = "5")]
    pub agcklenadno: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcCsReq {
    #[prost(uint32, repeated, tag = "3")]
    pub npc_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FirstNpcTalkInfo {
    #[prost(bool, tag = "2")]
    pub finish_dialogue: bool,
    #[prost(uint32, tag = "14")]
    pub first_npc_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkNpcScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<FirstNpcTalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcCsReq {
    #[prost(uint32, tag = "5")]
    pub first_npc_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkNpcScRsp {
    #[prost(uint32, tag = "2")]
    pub first_npc_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectInclinationTextCsReq {
    #[prost(uint32, tag = "13")]
    pub akpgmbpdioo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SelectInclinationTextScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub akpgmbpdioo: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NpcTalkInfo {
    #[prost(bool, tag = "6")]
    pub finish_dialogue: bool,
    #[prost(uint32, tag = "13")]
    pub npc_talk_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, repeated, tag = "2")]
    pub npc_talk_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFirstTalkByPerformanceNpcScRsp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub npc_talk_info_list: ::prost::alloc::vec::Vec<NpcTalkInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcCsReq {
    #[prost(uint32, tag = "15")]
    pub npc_talk_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishFirstTalkByPerformanceNpcScRsp {
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub npc_talk_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ghmopdefjof {
    #[prost(uint32, tag = "8")]
    pub kkiohlddjcj: u32,
    #[prost(uint32, tag = "12")]
    pub stage_score: u32,
    #[prost(uint32, tag = "7")]
    pub diikbcalmgm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hmphiijcejl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnmddpelmbd {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub ohnpnadbcmc: ::prost::alloc::vec::Vec<Ghmopdefjof>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilceionbici {
    #[prost(message, repeated, tag = "9")]
    pub ohnpnadbcmc: ::prost::alloc::vec::Vec<Ghmopdefjof>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eeachfoeopl {
    #[prost(uint32, tag = "6")]
    pub cfgpcpeaoom: u32,
    #[prost(uint32, tag = "13")]
    pub ekdnbekfecl: u32,
    #[prost(uint32, tag = "14")]
    pub hejpjbkflbj: u32,
    #[prost(message, optional, tag = "3")]
    pub cbmepckljkf: ::core::option::Option<Ghmopdefjof>,
    #[prost(uint32, tag = "11")]
    pub lekifocpgib: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fhjjonjfanm {
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mapbfcceffi {
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<Fhjjonjfanm>,
    #[prost(uint32, repeated, tag = "1")]
    pub buff_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub kkiohlddjcj: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bedkbjnaplf {
    #[prost(uint32, tag = "6")]
    pub kkiohlddjcj: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahjabmajjif {
    #[prost(uint32, tag = "8")]
    pub pghnmidjoac: u32,
    #[prost(string, tag = "6")]
    pub eanjbbekkii: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub nkeanfpkdmn: u32,
    #[prost(uint32, tag = "12")]
    pub jfelpokmmoa: u32,
    #[prost(string, tag = "4")]
    pub fannohchamp: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebeelkfdfcg {
    #[prost(uint32, tag = "11")]
    pub pghnmidjoac: u32,
    #[prost(string, tag = "1")]
    pub eanjbbekkii: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub nkeanfpkdmn: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibjmconogda {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub nkeanfpkdmn: u32,
    #[prost(uint32, tag = "9")]
    pub pghnmidjoac: u32,
    #[prost(string, tag = "10")]
    pub eanjbbekkii: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkihlhnhkki {
    #[prost(uint32, repeated, tag = "11")]
    pub nekpnbhmbho: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjgpafapocf {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub hpmjhnnipin: ::prost::alloc::vec::Vec<Ahjabmajjif>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njhgkmgajno {
    #[prost(message, repeated, tag = "3")]
    pub hpmjhnnipin: ::prost::alloc::vec::Vec<Ahjabmajjif>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahnlchdjhlf {
    #[prost(message, repeated, tag = "1")]
    pub hpmjhnnipin: ::prost::alloc::vec::Vec<Ahjabmajjif>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Elnbhbpkbck {
    #[prost(uint32, tag = "4")]
    pub stage_score: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Debcbkkjcbb {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Faaanolddnm {
    #[prost(message, repeated, tag = "2")]
    pub hgjkdgenhid: ::prost::alloc::vec::Vec<Elnbhbpkbck>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Echlgcepdlj {
    #[prost(uint32, tag = "10")]
    pub entity_id: u32,
    #[prost(bool, tag = "2")]
    pub oecnjiofbha: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbdphlcccgl {
    #[prost(message, repeated, tag = "3")]
    pub gnindcoppnd: ::prost::alloc::vec::Vec<Echlgcepdlj>,
    #[prost(uint32, tag = "14")]
    pub cost_time: u32,
    #[prost(uint32, tag = "7")]
    pub stage_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkjjapcehon {
    #[prost(message, repeated, tag = "7")]
    pub gnindcoppnd: ::prost::alloc::vec::Vec<Echlgcepdlj>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
    #[prost(uint32, tag = "14")]
    pub score: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ikkgjdfkiha {
    #[prost(bool, tag = "7")]
    pub emegkoepooh: bool,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Allblofkgbd {
    #[prost(uint32, tag = "2")]
    pub ddehncdhfeo: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Opjncjnpmaf {
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Enkkkepadfn {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnnifhhgikd {
    #[prost(uint32, tag = "11")]
    pub unique_id: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub hmkmkbelclg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub nagkacachgd: u32,
    #[prost(uint32, tag = "6")]
    pub cpfjgbnjabl: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeodhkimpaf {
    #[prost(message, repeated, tag = "11")]
    pub bbnkpmlnlje: ::prost::alloc::vec::Vec<Mnnifhhgikd>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcaemapaegn {
    #[prost(uint32, tag = "1")]
    pub alpdnpddpjc: u32,
    #[prost(message, optional, tag = "13")]
    pub bbnkpmlnlje: ::core::option::Option<Aeodhkimpaf>,
    #[prost(bool, tag = "14")]
    pub eclbphpmgin: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icenednmala {
    #[prost(uint32, tag = "6")]
    pub gaeiofoplfn: u32,
    #[prost(uint32, tag = "2")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "8")]
    pub bpgofipcnla: u32,
    #[prost(uint32, tag = "11")]
    pub unique_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okfgpabkeje {
    #[prost(uint32, tag = "6")]
    pub aadbgclodkk: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub hlidpifajcg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub aojbnmeechf: u32,
    #[prost(uint32, tag = "11")]
    pub dfncngpdilm: u32,
    #[prost(uint32, tag = "4")]
    pub epalcfojbkj: u32,
    #[prost(uint32, tag = "10")]
    pub ecfpfknjina: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kibhpllkfam {
    #[prost(uint32, tag = "4")]
    pub oopdlcmlkkl: u32,
    #[prost(uint32, tag = "11")]
    pub nofplbabccb: u32,
    #[prost(message, optional, tag = "9")]
    pub opdabbnhhcg: ::core::option::Option<Okfgpabkeje>,
    #[prost(message, repeated, tag = "2")]
    pub anpnjeklcjj: ::prost::alloc::vec::Vec<Icenednmala>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecjbkgkpjcj {
    #[prost(uint32, tag = "2")]
    pub ddeloepnmpm: u32,
    #[prost(uint32, tag = "13")]
    pub klaahpfnmhp: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mfacnginjif {
    #[prost(uint32, tag = "8")]
    pub mockiopkeke: u32,
    #[prost(uint32, tag = "6")]
    pub skill_id: u32,
    #[prost(uint32, tag = "5")]
    pub fiidgpnoede: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dbdlfhlljlm {
    #[prost(uint32, tag = "11")]
    pub dikpbinaooh: u32,
    #[prost(uint32, tag = "10")]
    pub fcahijpiieb: u32,
    #[prost(message, optional, tag = "3")]
    pub ihldljgdcbl: ::core::option::Option<Ecjbkgkpjcj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfkboncoecm {
    #[prost(uint32, tag = "12")]
    pub attempts: u32,
    #[prost(bool, tag = "11")]
    pub dnglgommfnp: bool,
    #[prost(uint32, repeated, tag = "5")]
    pub bfggmbadmhb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub fcahijpiieb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opfgfmeclbe {
    #[prost(uint32, tag = "15")]
    pub ninmolkeloe: u32,
    #[prost(message, repeated, tag = "14")]
    pub jibcjfpfhko: ::prost::alloc::vec::Vec<Dbdlfhlljlm>,
    #[prost(uint32, tag = "3")]
    pub nagkacachgd: u32,
    #[prost(uint32, tag = "5")]
    pub fgagephcggi: u32,
    #[prost(message, repeated, tag = "8")]
    pub knoijliaeia: ::prost::alloc::vec::Vec<Mfacnginjif>,
    #[prost(uint32, repeated, tag = "7")]
    pub mndkakmgdph: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkchffclkfl {
    #[prost(message, repeated, tag = "2")]
    pub pjmcobdombk: ::prost::alloc::vec::Vec<Kfkboncoecm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfbbccjhiog {
    #[prost(uint32, tag = "13")]
    pub area_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub hmnlchnleap: ::prost::alloc::vec::Vec<Iggcjanlkcl>,
    #[prost(uint32, repeated, tag = "11")]
    pub hcbngmfaega: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub nopjinfmfei: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub progress: u32,
    #[prost(message, optional, tag = "4")]
    pub flefhcbbfie: ::core::option::Option<Apniabpkklk>,
    #[prost(uint32, repeated, tag = "8")]
    pub eejmcndggja: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhokbphnfne {
    #[prost(uint32, repeated, tag = "5")]
    pub nopjinfmfei: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub area_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pomobndhjhi {
    #[prost(enumeration = "Afgefpehkke", tag = "11")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub napnnkkhdlf: u32,
    #[prost(uint32, tag = "7")]
    pub mjaljmglefp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apniabpkklk {
    #[prost(message, repeated, tag = "7")]
    pub agaghdcgdgl: ::prost::alloc::vec::Vec<Pomobndhjhi>,
    #[prost(uint32, tag = "11")]
    pub eapomimhkeb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iggcjanlkcl {
    #[prost(uint32, tag = "6")]
    pub khocgagjlfd: u32,
    #[prost(uint32, tag = "11")]
    pub koanohfomkd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncdcaginpde {
    #[prost(message, repeated, tag = "12")]
    pub kajcdnehigp: ::prost::alloc::vec::Vec<Mfbbccjhiog>,
    #[prost(uint32, tag = "2")]
    pub mlfllkmiade: u32,
    #[prost(uint32, tag = "5")]
    pub mjglhjckhmo: u32,
    #[prost(message, repeated, tag = "8")]
    pub nnbhlddnlde: ::prost::alloc::vec::Vec<Hhokbphnfne>,
    #[prost(uint32, tag = "14")]
    pub cfjkbjhnijm: u32,
    #[prost(uint32, tag = "6")]
    pub akenjbahiom: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub kcfeecacmod: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub cdjfdjiaing: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub jdmfgecpdpj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub himcaokdnmp: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plippaggmje {
    #[prost(message, optional, tag = "11")]
    pub jgmdfjaokdl: ::core::option::Option<Jkchffclkfl>,
    #[prost(uint32, tag = "15")]
    pub npkllehioal: u32,
    #[prost(message, optional, tag = "10")]
    pub hjkgfdmkfoi: ::core::option::Option<Ncdcaginpde>,
    #[prost(message, optional, tag = "9")]
    pub lflmkpgjado: ::core::option::Option<Mjkbnjakojh>,
    #[prost(uint32, tag = "6")]
    pub dpolgbkekld: u32,
    #[prost(uint32, tag = "2")]
    pub attempts: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjkbnjakojh {
    #[prost(message, optional, tag = "15")]
    pub ongdcbbdngb: ::core::option::Option<Hcaemapaegn>,
    #[prost(message, optional, tag = "10")]
    pub iliolndjhcn: ::core::option::Option<Opfgfmeclbe>,
    #[prost(uint32, tag = "5")]
    pub knpfnngbaic: u32,
    #[prost(message, optional, tag = "7")]
    pub poafbakklji: ::core::option::Option<Kibhpllkfam>,
    #[prost(message, optional, tag = "4")]
    pub feoiphddmdh: ::core::option::Option<Ejjbphadaoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mmjkacodhle {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmdepknpgai {
    #[prost(message, optional, tag = "8")]
    pub hhpeoikdlmd: ::core::option::Option<Plippaggmje>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dhbleaglled {
    #[prost(uint32, tag = "13")]
    pub abfdebdehja: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ecjhgaonoaa {
    #[prost(uint32, tag = "1")]
    pub abfdebdehja: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfoifjnaiki {
    #[prost(uint32, tag = "4")]
    pub ondgnpkgjcb: u32,
    #[prost(message, repeated, tag = "8")]
    pub aeohpmbenmo: ::prost::alloc::vec::Vec<Icenednmala>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ackmpeabmlg {
    #[prost(message, optional, tag = "4")]
    pub kilhoknhhbd: ::core::option::Option<Jnjkmbigmpe>,
    #[prost(uint32, tag = "11")]
    pub abfdebdehja: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnjkmbigmpe {
    #[prost(message, repeated, tag = "10")]
    pub pnidoboeiep: ::prost::alloc::vec::Vec<Meaegfbogak>,
    #[prost(uint32, tag = "15")]
    pub kipkppedojp: u32,
    #[prost(message, repeated, tag = "8")]
    pub jibcjfpfhko: ::prost::alloc::vec::Vec<Dbdlfhlljlm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Meaegfbogak {
    #[prost(uint32, tag = "4")]
    pub aomfdnhanfa: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub param_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdgaocpjepl {
    #[prost(message, optional, tag = "10")]
    pub mlgdkdekpid: ::core::option::Option<Mnnifhhgikd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cbnhkhefeff {
    #[prost(uint32, tag = "1")]
    pub fcahijpiieb: u32,
    #[prost(message, optional, tag = "11")]
    pub ihldljgdcbl: ::core::option::Option<Ecjbkgkpjcj>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bffiemjedil {
    #[prost(message, repeated, tag = "5")]
    pub kehpccgpfad: ::prost::alloc::vec::Vec<Cbnhkhefeff>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Minmhdaeehh {
    #[prost(message, optional, tag = "1")]
    pub amlcaeijmee: ::core::option::Option<Ejjbphadaoc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfhkdenceci {
    #[prost(uint32, tag = "7")]
    pub nagkacachgd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Locaoogdamb {
    #[prost(message, optional, tag = "14")]
    pub mlmdebkigbh: ::core::option::Option<Mfacnginjif>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcdckoapgee {
    #[prost(message, repeated, tag = "9")]
    pub knoijliaeia: ::prost::alloc::vec::Vec<Mfacnginjif>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kninclcjodm {
    #[prost(message, optional, tag = "13")]
    pub aahaiifcfnn: ::core::option::Option<Kfkboncoecm>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eklmkfcklaa {
    #[prost(message, repeated, tag = "12")]
    pub anpnjeklcjj: ::prost::alloc::vec::Vec<Icenednmala>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhnnjjpbomj {
    #[prost(bool, tag = "1")]
    pub eclbphpmgin: bool,
    #[prost(message, optional, tag = "4")]
    pub foafpcnjnam: ::core::option::Option<Aeodhkimpaf>,
    #[prost(uint32, tag = "15")]
    pub alpdnpddpjc: u32,
    #[prost(message, optional, tag = "8")]
    pub opdabbnhhcg: ::core::option::Option<Okfgpabkeje>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffkjeabamki {
    #[prost(enumeration = "Hnhgkghjlgp", tag = "13")]
    pub nibghgmegmg: i32,
    #[prost(
        oneof = "ffkjeabamki::Omnknolihnb",
        tags = "1945, 1705, 1085, 661, 1547, 840, 1390, 79, 780"
    )]
    pub omnknolihnb: ::core::option::Option<ffkjeabamki::Omnknolihnb>,
}
/// Nested message and enum types in `FFKJEABAMKI`.
pub mod ffkjeabamki {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Omnknolihnb {
        #[prost(message, tag = "1945")]
        Foafpcnjnam(super::Aeodhkimpaf),
        #[prost(message, tag = "1705")]
        Ihkaoghimdn(super::Bffiemjedil),
        #[prost(message, tag = "1085")]
        Gjkiglgooaf(super::Minmhdaeehh),
        #[prost(message, tag = "661")]
        Eeafepknkmi(super::Lfhkdenceci),
        #[prost(message, tag = "1547")]
        Lkclgkldnhe(super::Eklmkfcklaa),
        #[prost(message, tag = "840")]
        Idmpfchcpho(super::Locaoogdamb),
        #[prost(message, tag = "1390")]
        Ckecmalepaa(super::Nhnnjjpbomj),
        #[prost(message, tag = "79")]
        Nclobabiahi(super::Jcdckoapgee),
        #[prost(message, tag = "780")]
        Apgdkapimgf(super::Kninclcjodm),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omkcojmeldi {
    #[prost(message, repeated, tag = "9")]
    pub bldhiejjnjc: ::prost::alloc::vec::Vec<Ffkjeabamki>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejjbphadaoc {
    #[prost(uint32, tag = "7")]
    pub lmfhnelkfoc: u32,
    #[prost(oneof = "ejjbphadaoc::Mhjapkeoaik", tags = "1263, 1647, 410, 543")]
    pub mhjapkeoaik: ::core::option::Option<ejjbphadaoc::Mhjapkeoaik>,
}
/// Nested message and enum types in `EJJBPHADAOC`.
pub mod ejjbphadaoc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Mhjapkeoaik {
        #[prost(message, tag = "1263")]
        Gfljgkbpcgb(super::Eeiadchlfnb),
        #[prost(message, tag = "1647")]
        Haklmmjehpf(super::Bomjdhmaajm),
        #[prost(message, tag = "410")]
        Jjfgcdehmpf(super::Ihkajfkldbb),
        #[prost(message, tag = "543")]
        Eppnhjcnfci(super::Bnockklbiab),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jigmpadfphe {
    #[prost(uint32, tag = "10")]
    pub pbalffcfpjd: u32,
    #[prost(bool, tag = "5")]
    pub hjcgeidbicc: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeiadchlfnb {
    #[prost(message, repeated, tag = "14")]
    pub kjcdhkmkopk: ::prost::alloc::vec::Vec<Jigmpadfphe>,
    #[prost(enumeration = "Ejlfeabggid", tag = "12")]
    pub afoagcodjlk: i32,
    #[prost(uint32, tag = "10")]
    pub scene_event_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nibbilkhhhe {
    #[prost(uint32, tag = "6")]
    pub pbalffcfpjd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kbfeoiajljc {
    #[prost(uint32, tag = "14")]
    pub skill_id: u32,
    #[prost(uint32, tag = "6")]
    pub mockiopkeke: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bomjdhmaajm {
    #[prost(uint32, tag = "12")]
    pub fcahijpiieb: u32,
    #[prost(message, repeated, tag = "4")]
    pub klbcinemhbd: ::prost::alloc::vec::Vec<Kbfeoiajljc>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnockklbiab {
    #[prost(uint32, tag = "13")]
    pub ckhoodlcgpk: u32,
    #[prost(message, repeated, tag = "15")]
    pub lhecbcgmdgj: ::prost::alloc::vec::Vec<Mfacnginjif>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icmfjieiebm {
    #[prost(uint32, tag = "2")]
    pub ejaldbpbmpi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiadkofhhjm {
    #[prost(message, repeated, tag = "7")]
    pub knoijliaeia: ::prost::alloc::vec::Vec<Mfacnginjif>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njkgaoafddm {
    #[prost(uint32, tag = "10")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub ddeloepnmpm: u32,
    #[prost(uint32, tag = "2")]
    pub fcahijpiieb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mnfclopjjbo {
    #[prost(uint32, tag = "6")]
    pub num: u32,
    #[prost(uint32, tag = "11")]
    pub fcahijpiieb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihkajfkldbb {
    #[prost(uint32, tag = "10")]
    pub deabgmbgmpp: u32,
    #[prost(message, repeated, tag = "4")]
    pub kjdmjimhojm: ::prost::alloc::vec::Vec<Mnfclopjjbo>,
    #[prost(uint32, tag = "8")]
    pub pchfkbkldmj: u32,
    #[prost(uint32, tag = "11")]
    pub oadofhhhoej: u32,
    #[prost(uint32, tag = "7")]
    pub ekdnbekfecl: u32,
    #[prost(message, repeated, tag = "2")]
    pub aagjlmhljpk: ::prost::alloc::vec::Vec<Khiikmdcabj>,
    #[prost(message, repeated, tag = "6")]
    pub cailchdlhca: ::prost::alloc::vec::Vec<Njkgaoafddm>,
    #[prost(uint32, tag = "5")]
    pub bhkmegplpfa: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlaySkillBrief {
    #[prost(enumeration = "Ahhbighekmi", tag = "5")]
    pub skill_type: i32,
    #[prost(uint32, tag = "4")]
    pub skill_id: u32,
    #[prost(uint32, tag = "2")]
    pub skill_param: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayCardBrief {
    #[prost(uint32, tag = "6")]
    pub base_value: u32,
    #[prost(uint32, tag = "10")]
    pub unique_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub skill_brief_list: ::prost::alloc::vec::Vec<PlaySkillBrief>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgmkjfeohel {
    #[prost(message, optional, tag = "6")]
    pub jpcflgnmcol: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub ogeffhhnmle: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub jamjndmkmji: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpipkeekbdo {
    #[prost(uint32, repeated, tag = "1")]
    pub caefkfmhlec: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgnhfjaghka {
    #[prost(message, repeated, tag = "6")]
    pub cailchdlhca: ::prost::alloc::vec::Vec<Njkgaoafddm>,
    #[prost(uint32, tag = "14")]
    pub pchfkbkldmj: u32,
    #[prost(message, repeated, tag = "13")]
    pub kjdmjimhojm: ::prost::alloc::vec::Vec<Mnfclopjjbo>,
    #[prost(uint32, tag = "2")]
    pub score: u32,
    #[prost(message, repeated, tag = "1")]
    pub pkccihjkjpm: ::prost::alloc::vec::Vec<PlayCardBrief>,
    #[prost(uint32, tag = "5")]
    pub ekdnbekfecl: u32,
    #[prost(message, optional, tag = "8")]
    pub eiabofchokc: ::core::option::Option<Lgmkjfeohel>,
    #[prost(message, optional, tag = "12")]
    pub opdabbnhhcg: ::core::option::Option<Okfgpabkeje>,
    #[prost(message, repeated, tag = "7")]
    pub ohcmojbpblg: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(enumeration = "Hocjjlocehn", tag = "15")]
    pub lmcbbbebenj: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coaoolibohf {
    #[prost(uint32, repeated, tag = "10")]
    pub caefkfmhlec: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckcneghamgm {
    #[prost(message, repeated, tag = "6")]
    pub cailchdlhca: ::prost::alloc::vec::Vec<Njkgaoafddm>,
    #[prost(uint32, tag = "5")]
    pub deabgmbgmpp: u32,
    #[prost(message, repeated, tag = "11")]
    pub jljidmgpcfd: ::prost::alloc::vec::Vec<PlaySkillBrief>,
    #[prost(message, repeated, tag = "8")]
    pub kjdmjimhojm: ::prost::alloc::vec::Vec<Mnfclopjjbo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghjfkffmame {
    #[prost(uint32, tag = "7")]
    pub lmfhnelkfoc: u32,
    #[prost(oneof = "ghjfkffmame::Kfhgpfpoonm", tags = "1763, 154, 656, 366")]
    pub kfhgpfpoonm: ::core::option::Option<ghjfkffmame::Kfhgpfpoonm>,
}
/// Nested message and enum types in `GHJFKFFMAME`.
pub mod ghjfkffmame {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kfhgpfpoonm {
        #[prost(message, tag = "1763")]
        Gfljgkbpcgb(super::Nibbilkhhhe),
        #[prost(message, tag = "154")]
        Eppnhjcnfci(super::Icmfjieiebm),
        #[prost(message, tag = "656")]
        Bmoccjhifak(super::Hpipkeekbdo),
        #[prost(message, tag = "366")]
        Mgekaionenb(super::Coaoolibohf),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilokameepll {
    #[prost(bool, tag = "3")]
    pub lfjlhjhplgi: bool,
    #[prost(message, optional, tag = "13")]
    pub kilhoknhhbd: ::core::option::Option<Jnjkmbigmpe>,
    #[prost(uint32, tag = "4")]
    pub lmfhnelkfoc: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(oneof = "ilokameepll::Kfhgpfpoonm", tags = "1506, 69, 366")]
    pub kfhgpfpoonm: ::core::option::Option<ilokameepll::Kfhgpfpoonm>,
}
/// Nested message and enum types in `ILOKAMEEPLL`.
pub mod ilokameepll {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Kfhgpfpoonm {
        #[prost(message, tag = "1506")]
        Kppfchgdodl(super::Jiadkofhhjm),
        #[prost(message, tag = "69")]
        Lfceffhmlig(super::Jgnhfjaghka),
        #[prost(message, tag = "366")]
        Kibaimikfed(super::Ckcneghamgm),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eijjpgkmblc {
    #[prost(uint32, tag = "10")]
    pub area_id: u32,
    #[prost(message, optional, tag = "12")]
    pub npbhfeflgjk: ::core::option::Option<Iggcjanlkcl>,
    #[prost(uint32, tag = "14")]
    pub napnnkkhdlf: u32,
    #[prost(uint32, tag = "8")]
    pub eapomimhkeb: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dgmcmjfminm {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub mlfllkmiade: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kjadebdkmjn {
    #[prost(uint32, tag = "10")]
    pub area_id: u32,
    #[prost(uint32, tag = "4")]
    pub koanohfomkd: u32,
    #[prost(uint32, tag = "14")]
    pub khocgagjlfd: u32,
    #[prost(bool, tag = "8")]
    pub hemodcfenhp: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbnddnloidi {
    #[prost(bool, tag = "11")]
    pub hemodcfenhp: bool,
    #[prost(message, repeated, tag = "9")]
    pub hmnlchnleap: ::prost::alloc::vec::Vec<Iggcjanlkcl>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub area_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfihffonjih {
    #[prost(uint32, tag = "4")]
    pub fbbnkcfeiic: u32,
    #[prost(message, repeated, tag = "6")]
    pub pjmahbfkhlb: ::prost::alloc::vec::Vec<Pomobndhjhi>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhcfgijphlc {
    #[prost(uint32, tag = "3")]
    pub progress: u32,
    #[prost(message, repeated, tag = "9")]
    pub pjmahbfkhlb: ::prost::alloc::vec::Vec<Pomobndhjhi>,
    #[prost(uint32, tag = "13")]
    pub eapomimhkeb: u32,
    #[prost(uint32, tag = "15")]
    pub area_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nkfhbmjaobm {
    #[prost(uint32, tag = "3")]
    pub cfjkbjhnijm: u32,
    #[prost(uint32, tag = "9")]
    pub akenjbahiom: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ifdlbafmekg {
    #[prost(uint32, tag = "15")]
    pub clldmnpoopj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ignfnkhniel {
    #[prost(uint32, tag = "4")]
    pub cdjfdjiaing: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Eimdbgmfdob {
    #[prost(uint32, tag = "4")]
    pub odkncmokfgo: u32,
    #[prost(uint32, tag = "5")]
    pub area_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Aicebljdhjl {
    #[prost(uint32, tag = "1")]
    pub koanohfomkd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Goibheoahng {
    #[prost(uint32, tag = "8")]
    pub bijhieokfbd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Baeecfddjch {
    #[prost(uint32, tag = "8")]
    pub mjglhjckhmo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkkhdllpmel {
    #[prost(uint32, tag = "10")]
    pub area_id: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub pjmahbfkhlb: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acjomkmlboo {
    #[prost(message, repeated, tag = "12")]
    pub kajcdnehigp: ::prost::alloc::vec::Vec<Lkkhdllpmel>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eceoeeejioc {
    #[prost(
        oneof = "eceoeeejioc::Omnknolihnb",
        tags = "1748, 671, 1489, 98, 791, 1938, 447, 520, 1407, 844"
    )]
    pub omnknolihnb: ::core::option::Option<eceoeeejioc::Omnknolihnb>,
}
/// Nested message and enum types in `ECEOEEEJIOC`.
pub mod eceoeeejioc {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Omnknolihnb {
        #[prost(message, tag = "1748")]
        Lofhhancpbg(super::Goibheoahng),
        #[prost(message, tag = "671")]
        Kijlcjbjicp(super::Bfihffonjih),
        #[prost(message, tag = "1489")]
        Jhjhdihdjim(super::Hhcfgijphlc),
        #[prost(message, tag = "98")]
        Jfbbldgbedh(super::Nkfhbmjaobm),
        #[prost(message, tag = "791")]
        Ebojdhdenka(super::Ifdlbafmekg),
        #[prost(message, tag = "1938")]
        Biimcnkiepd(super::Eimdbgmfdob),
        #[prost(message, tag = "447")]
        Bfkeekcoodn(super::Aicebljdhjl),
        #[prost(message, tag = "520")]
        Pmnemjcnfej(super::Ignfnkhniel),
        #[prost(message, tag = "1407")]
        Mmegppcjfgg(super::Baeecfddjch),
        #[prost(message, tag = "844")]
        Mceekajkcig(super::Acjomkmlboo),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Comhioeeboo {
    #[prost(message, repeated, tag = "3")]
    pub jlnmjifiala: ::prost::alloc::vec::Vec<Eceoeeejioc>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fneeommhcjb {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njbjaifmahk {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jfcbglkfkic {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mekccfanjpc {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Khiikmdcabj {
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(enumeration = "Hocjjlocehn", tag = "15")]
    pub iahekfknfcd: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kcijkekciok {
    #[prost(uint32, tag = "7")]
    pub area_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kfmcffnjnop {
    #[prost(uint32, tag = "6")]
    pub area_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjhamohijlk {
    #[prost(message, optional, tag = "3")]
    pub mplmhgmenfl: ::core::option::Option<Jkchffclkfl>,
    #[prost(uint32, tag = "9")]
    pub attempts: u32,
    #[prost(uint32, tag = "14")]
    pub dpolgbkekld: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub bfbphdkhhko: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmaieplidca {
    #[prost(uint32, repeated, tag = "10")]
    pub jibcjfpfhko: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub knpfnngbaic: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnfhjpdbiea {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub onblcjegckf: ::core::option::Option<Mjkbnjakojh>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gnkenokaabh {
    #[prost(uint32, tag = "12")]
    pub npkllehioal: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Plgeejbokmk {
    #[prost(uint32, tag = "3")]
    pub npkllehioal: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lcdamdkhnbh {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mibbfopbkem {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub buff_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Nhldelnghge {
    #[prost(uint32, tag = "12")]
    pub bjfllfadcih: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gepkmppogcg {
    #[prost(message, optional, tag = "2")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub bjfllfadcih: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ablllgginbd {
    #[prost(bool, tag = "7")]
    pub finish_dialogue: bool,
    #[prost(uint32, tag = "13")]
    pub dcoikpeblho: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ncihlejnllm {
    #[prost(uint32, tag = "10")]
    pub dcoikpeblho: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohappkcjoga {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub dcoikpeblho: u32,
    #[prost(message, optional, tag = "5")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbgppblanho {
    #[prost(uint32, repeated, tag = "14")]
    pub hbfdjllkign: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjcpjaicebl {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub ddghiodjkdj: ::prost::alloc::vec::Vec<Ablllgginbd>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kikomhkapgh {
    #[prost(uint64, tag = "14")]
    pub minjkllbiif: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mccjpjmphpn {
    #[prost(enumeration = "Kgkhooemong", tag = "4")]
    pub slot: i32,
    #[prost(message, optional, tag = "1")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub dcoikpeblho: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfhnhcakdhn {
    #[prost(uint32, tag = "1")]
    pub bnppfgbcdom: u32,
    #[prost(uint32, tag = "13")]
    pub dcoikpeblho: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub bkhclmjkoip: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub ecpcepnbben: bool,
    #[prost(enumeration = "Njidiopgohm", tag = "2")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ojepcnhkjce {
    #[prost(enumeration = "Bicoakmamik", tag = "14")]
    pub slot: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okialekeook {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub bicljonpgmh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub ahohapghdjb: ::prost::alloc::vec::Vec<Mfhnhcakdhn>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Daenfkoopfj {
    #[prost(uint32, tag = "4")]
    pub dcoikpeblho: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeiaaihclei {
    #[prost(uint32, repeated, tag = "15")]
    pub bkhclmjkoip: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub dcoikpeblho: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppnglcifkjd {
    #[prost(uint32, repeated, tag = "12")]
    pub bicljonpgmh: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Cdemnhafmib {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mghdfcdkbmc {
    #[prost(uint32, tag = "11")]
    pub igadmjfcgco: u32,
    #[prost(uint64, tag = "13")]
    pub unique_id: u64,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
    #[prost(int32, tag = "1")]
    pub npidjacjpfn: i32,
    #[prost(uint32, tag = "3")]
    pub hlcjkbonmof: u32,
    #[prost(int32, tag = "5")]
    pub gajfgdgobcg: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alboclffgih {
    #[prost(uint32, tag = "5")]
    pub lofdigoacgi: u32,
    #[prost(enumeration = "Bbikdnakpoi", tag = "7")]
    pub hhcffgpimde: i32,
    #[prost(uint32, tag = "2")]
    pub kpkpkfdapmg: u32,
    #[prost(message, repeated, tag = "13")]
    pub jhdogllocbf: ::prost::alloc::vec::Vec<Mghdfcdkbmc>,
    #[prost(enumeration = "Aemfkjfclab", tag = "14")]
    pub enekmbgfodo: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Keaigdnihmc {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blnmajkdaco {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "8")]
    pub gmblfbnlgio: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, message", tag = "12")]
    pub alnnbpefbaa: ::std::collections::HashMap<u32, Alboclffgih>,
    #[prost(uint32, tag = "1")]
    pub custom_value: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ilgchcjedjg {
    #[prost(uint32, tag = "2")]
    pub lofdigoacgi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gpcldempgph {
    #[prost(uint32, tag = "11")]
    pub lofdigoacgi: u32,
    #[prost(uint32, tag = "4")]
    pub kpkpkfdapmg: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipabmdmjhgd {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "15")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jnbbkkodcjo {
    #[prost(uint32, tag = "3")]
    pub igadmjfcgco: u32,
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
    #[prost(uint32, tag = "5")]
    pub lofdigoacgi: u32,
    #[prost(int32, tag = "6")]
    pub gajfgdgobcg: i32,
    #[prost(int32, tag = "9")]
    pub npidjacjpfn: i32,
    #[prost(uint32, tag = "13")]
    pub hlcjkbonmof: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Popfnejmlhm {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Njpjkdlhmom {
    #[prost(uint32, tag = "3")]
    pub item_id: u32,
    #[prost(uint32, tag = "5")]
    pub lofdigoacgi: u32,
    #[prost(uint64, tag = "2")]
    pub unique_id: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmaihnkofbk {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Knblghanmfg {
    #[prost(uint32, tag = "1")]
    pub item_id: u32,
    #[prost(uint32, tag = "8")]
    pub lofdigoacgi: u32,
    #[prost(uint32, tag = "2")]
    pub igadmjfcgco: u32,
    #[prost(uint32, tag = "12")]
    pub hlcjkbonmof: u32,
    #[prost(uint64, tag = "7")]
    pub unique_id: u64,
    #[prost(int32, tag = "5")]
    pub gajfgdgobcg: i32,
    #[prost(int32, tag = "11")]
    pub npidjacjpfn: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcdjcmdhnmd {
    #[prost(message, optional, tag = "15")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hdkjnljapdd {
    #[prost(uint32, tag = "12")]
    pub dgobhabbjpd: u32,
    #[prost(uint32, tag = "4")]
    pub num: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Mgigpkhdflh {
    #[prost(uint32, tag = "3")]
    pub num: u32,
    #[prost(uint32, tag = "15")]
    pub dgobhabbjpd: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pmboednanmf {
    #[prost(uint32, tag = "14")]
    pub value: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dagkdddppdk {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Clnjpjedkob {
    #[prost(enumeration = "Aemfkjfclab", tag = "5")]
    pub apoljhcdjib: i32,
    #[prost(uint32, tag = "6")]
    pub lofdigoacgi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jdgdkfmhcbc {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Kgfhonaccno {
    #[prost(uint32, tag = "6")]
    pub lofdigoacgi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehhalpmjphf {
    #[prost(message, optional, tag = "3")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ohdfbincpnf {
    #[prost(int32, tag = "3")]
    pub gajfgdgobcg: i32,
    #[prost(int32, tag = "8")]
    pub npidjacjpfn: i32,
    #[prost(uint32, tag = "1")]
    pub hlcjkbonmof: u32,
    #[prost(uint32, tag = "14")]
    pub igadmjfcgco: u32,
    #[prost(uint32, tag = "10")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oinhanflaah {
    #[prost(message, repeated, tag = "8")]
    pub gjefdcjphnm: ::prost::alloc::vec::Vec<Ohdfbincpnf>,
    #[prost(uint32, tag = "5")]
    pub lofdigoacgi: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpfeeilnipf {
    #[prost(message, optional, tag = "2")]
    pub mmkoeocmgij: ::core::option::Option<Alboclffgih>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TreasureDungeonRecordData {
    #[prost(uint32, tag = "9")]
    pub target_grid_id: u32,
    #[prost(uint32, tag = "5")]
    pub source_grid_id: u32,
    #[prost(enumeration = "Habjkjofgpi", tag = "12")]
    pub r#type: i32,
    #[prost(uint32, tag = "10")]
    pub param1: u32,
    #[prost(uint32, tag = "15")]
    pub param2: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogdmgpnekjc {
    #[prost(message, optional, tag = "15")]
    pub edphokhapik: ::core::option::Option<Ioojfgpoapg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfenjbgcgkd {
    #[prost(map = "uint32, uint32", tag = "9")]
    pub jeepecaaeoo: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "15")]
    pub pkjkfeaklbe: u32,
    #[prost(uint32, tag = "10")]
    pub kfgaadcafoe: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub bnkpicldkmb: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "1")]
    pub hmppfgcifjk: u32,
    #[prost(bool, tag = "7")]
    pub is_win: bool,
    #[prost(uint32, tag = "5")]
    pub olpknpanhhb: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ioojfgpoapg {
    #[prost(uint32, tag = "14")]
    pub kfgaadcafoe: u32,
    #[prost(bool, tag = "449")]
    pub gnldolfgdan: bool,
    #[prost(uint32, tag = "496")]
    pub jcibdgdbjal: u32,
    #[prost(message, repeated, tag = "1261")]
    pub item_list: ::prost::alloc::vec::Vec<Icobjgoclfl>,
    #[prost(message, repeated, tag = "1751")]
    pub avatar_list: ::prost::alloc::vec::Vec<Gmjmonhdfji>,
    #[prost(uint32, tag = "11")]
    pub hbedlleailc: u32,
    #[prost(message, repeated, tag = "8")]
    pub kkeipmokinf: ::prost::alloc::vec::Vec<TreasureDungeonRecordData>,
    #[prost(uint32, tag = "9")]
    pub lbfbjioinpg: u32,
    #[prost(uint32, tag = "4")]
    pub hfmjhjhgced: u32,
    #[prost(uint32, tag = "6")]
    pub rouge_map_id: u32,
    #[prost(bool, tag = "620")]
    pub kgacbnbpmhp: bool,
    #[prost(bool, tag = "331")]
    pub dkjjfplgngi: bool,
    #[prost(message, repeated, tag = "1125")]
    pub abbgbmoffga: ::prost::alloc::vec::Vec<Gmjmonhdfji>,
    #[prost(uint32, tag = "2")]
    pub pikdgngdcca: u32,
    #[prost(uint32, tag = "3")]
    pub hmppfgcifjk: u32,
    #[prost(message, repeated, tag = "5")]
    pub anpnjeklcjj: ::prost::alloc::vec::Vec<Pfoonlijkkk>,
    #[prost(message, repeated, tag = "1702")]
    pub buff_list: ::prost::alloc::vec::Vec<Hkccgmpckhk>,
    #[prost(message, repeated, tag = "490")]
    pub nicocpanlhc: ::prost::alloc::vec::Vec<Leglifdbibe>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Icobjgoclfl {
    #[prost(uint32, tag = "2")]
    pub item_count: u32,
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gmjmonhdfji {
    #[prost(uint32, tag = "12")]
    pub hp: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
    #[prost(message, optional, tag = "4")]
    pub sp: ::core::option::Option<AmountInfo>,
    #[prost(uint32, tag = "8")]
    pub jfepgilbgfa: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Leglifdbibe {
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "12")]
    pub avatar_type: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Hkccgmpckhk {
    #[prost(uint32, tag = "15")]
    pub omdkfeppbnk: u32,
    #[prost(uint32, tag = "2")]
    pub buff_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfoonlijkkk {
    #[prost(bool, tag = "3")]
    pub dfccgodmlld: bool,
    #[prost(bool, tag = "6")]
    pub pagmfidolpd: bool,
    #[prost(uint32, tag = "11")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "7")]
    pub aklhhelbppi: u32,
    #[prost(bool, tag = "13")]
    pub mncenlimjeb: bool,
    #[prost(bool, tag = "8")]
    pub fdbgiabhngc: bool,
    #[prost(message, repeated, tag = "1661")]
    pub buff_list: ::prost::alloc::vec::Vec<Anoebhanhdm>,
    #[prost(uint32, tag = "2")]
    pub onnofiincah: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Anoebhanhdm {
    #[prost(uint32, tag = "13")]
    pub ijlkfmaoifm: u32,
    #[prost(uint32, tag = "14")]
    pub hcfgmkccaga: u32,
    #[prost(uint32, tag = "6")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "8")]
    pub buff_id: u32,
    #[prost(uint32, tag = "12")]
    pub dhnnelghigi: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lmfmkpnjkjg {
    #[prost(uint32, tag = "2")]
    pub pikdgngdcca: u32,
    #[prost(uint32, tag = "12")]
    pub llioaiddbcj: u32,
    #[prost(bool, tag = "5")]
    pub ppaepicfalb: bool,
    #[prost(uint32, tag = "15")]
    pub kfgaadcafoe: u32,
    #[prost(uint32, tag = "6")]
    pub hmppfgcifjk: u32,
    #[prost(bool, tag = "1")]
    pub kookkcnhopj: bool,
    #[prost(uint32, tag = "9")]
    pub hbedlleailc: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edjpjhdjecl {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iibkpaookio {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub pjmdobmifgj: ::prost::alloc::vec::Vec<Lmfmkpnjkjg>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hobjdhmglmg {
    #[prost(uint32, tag = "6")]
    pub hmppfgcifjk: u32,
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ehimnoklcoe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eompjfldbfp {
    #[prost(message, optional, tag = "1")]
    pub edphokhapik: ::core::option::Option<Ioojfgpoapg>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pbpppplljeb {
    #[prost(uint32, tag = "8")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "14")]
    pub hmppfgcifjk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hakjbljmgcj {
    #[prost(message, optional, tag = "11")]
    pub edphokhapik: ::core::option::Option<Ioojfgpoapg>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lhjgfcofnei {
    #[prost(uint32, tag = "6")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "1")]
    pub bpgofipcnla: u32,
    #[prost(uint32, tag = "9")]
    pub hmppfgcifjk: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emanijkfndf {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub edphokhapik: ::core::option::Option<Ioojfgpoapg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Edkillbhbbd {
    #[prost(uint32, tag = "4")]
    pub gcimmfidpjp: u32,
    #[prost(uint32, tag = "11")]
    pub hmppfgcifjk: u32,
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhhmfmcpiel {
    #[prost(message, optional, tag = "6")]
    pub edphokhapik: ::core::option::Option<Ioojfgpoapg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Ehimnoklcoe {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpjmkhjhodf {
    #[prost(uint32, tag = "11")]
    pub hmppfgcifjk: u32,
    #[prost(uint32, tag = "8")]
    pub gcimmfidpjp: u32,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ehimnoklcoe>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afgcjadnpjg {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bcgoepphgof {
    #[prost(bool, tag = "6")]
    pub ijbcllkijij: bool,
    #[prost(uint32, tag = "1")]
    pub hmppfgcifjk: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bhghhdnlndf {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Tutorial {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(enumeration = "TutorialStatus", tag = "15")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TutorialGuide {
    #[prost(enumeration = "TutorialStatus", tag = "7")]
    pub status: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub tutorial_list: ::prost::alloc::vec::Vec<Tutorial>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideCsReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideScRsp {
    #[prost(message, repeated, tag = "1")]
    pub tutorial_guide_list: ::prost::alloc::vec::Vec<TutorialGuide>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialCsReq {
    #[prost(uint32, tag = "11")]
    pub gjhjneehaam: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub tutorial: ::core::option::Option<Tutorial>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideCsReq {
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideScRsp {
    #[prost(message, optional, tag = "2")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialCsReq {
    #[prost(uint32, tag = "6")]
    pub gjhjneehaam: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialScRsp {
    #[prost(message, optional, tag = "1")]
    pub tutorial: ::core::option::Option<Tutorial>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideCsReq {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(message, optional, tag = "8")]
    pub reward: ::core::option::Option<ItemList>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Waypoint {
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(bool, tag = "4")]
    pub is_new: bool,
    #[prost(uint32, tag = "6")]
    pub ecbdhiilhnd: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChapterBrief {
    #[prost(uint32, repeated, tag = "13")]
    pub nfapjegaoaj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub ehkncngcleh: u32,
    #[prost(bool, tag = "1")]
    pub is_new: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chapter {
    #[prost(message, optional, tag = "1")]
    pub ceipbnkkpna: ::core::option::Option<ChapterBrief>,
    #[prost(message, repeated, tag = "7")]
    pub chidicdegkc: ::prost::alloc::vec::Vec<Waypoint>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetWaypointCsReq {
    #[prost(uint32, tag = "12")]
    pub pnoakgnanbo: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetWaypointScRsp {
    #[prost(message, optional, tag = "7")]
    pub pfbhfagabae: ::core::option::Option<Chapter>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub fiimdigfdnj: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurWaypointCsReq {
    #[prost(uint32, tag = "12")]
    pub knpcbckkkod: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetCurWaypointScRsp {
    #[prost(uint32, tag = "6")]
    pub fiimdigfdnj: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Gadelhfnicm {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfffpcpohob {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub fiimdigfdnj: u32,
    #[prost(message, repeated, tag = "3")]
    pub fclnmcplmeg: ::prost::alloc::vec::Vec<ChapterBrief>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Dognkdappan {
    #[prost(uint32, tag = "15")]
    pub pnoakgnanbo: u32,
    #[prost(uint32, tag = "13")]
    pub knpcbckkkod: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Oiljgjmejej {
    #[prost(uint32, tag = "4")]
    pub pnoakgnanbo: u32,
    #[prost(uint32, tag = "2")]
    pub nclheojcfdm: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pfipmcmaofj {
    #[prost(uint32, tag = "8")]
    pub pnoakgnanbo: u32,
    #[prost(uint32, tag = "3")]
    pub nclheojcfdm: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldpinjadacg {
    #[prost(message, optional, tag = "8")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "10")]
    pub nhkkbmbcdje: u32,
    #[prost(message, repeated, tag = "9")]
    pub kbfkjcfgfkf: ::prost::alloc::vec::Vec<Vector>,
    #[prost(bool, tag = "14")]
    pub kmpcnklgiae: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdeedfgajcp {
    #[prost(bool, tag = "12")]
    pub kmpcnklgiae: bool,
    #[prost(uint32, tag = "8")]
    pub nhkkbmbcdje: u32,
    #[prost(string, tag = "5")]
    pub lpdhkpconma: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(message, repeated, tag = "11")]
    pub kbfkjcfgfkf: ::prost::alloc::vec::Vec<Vector>,
    #[prost(message, optional, tag = "2")]
    pub plenjdmlknk: ::core::option::Option<Ldpinjadacg>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Obbkjafdbln {
    #[prost(message, optional, tag = "11")]
    pub group_state_info: ::core::option::Option<GroupStateInfo>,
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(bool, tag = "8")]
    pub emegkoepooh: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imgajekekfk {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Lfiihkgcjfk {
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "11")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idnfhmnabfm {
    #[prost(message, optional, tag = "15")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Iphinkphkng {
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Koppmfjceoa {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Jkenomhalag {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocibknicnha {
    #[prost(message, optional, tag = "13")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Fneijdlknbg {
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Giefkmccmog {
    #[prost(message, optional, tag = "2")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amamfpogdjk {
    #[prost(message, optional, tag = "15")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjcecddbgjn {
    #[prost(uint32, repeated, tag = "8")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub cfiflcfpecd: ::core::option::Option<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbgmcjbpgdf {
    #[prost(message, optional, tag = "7")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Chdnbjamlhm {
    #[prost(message, optional, tag = "10")]
    pub cfiflcfpecd: ::core::option::Option<Vector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkimdoeclio {
    #[prost(message, optional, tag = "9")]
    pub fcmeojojidf: ::core::option::Option<Cdeedfgajcp>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Olkklcpgojd {
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(uint32, tag = "3")]
    pub config_id: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Npjekfcjimm {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfpjgammpmf {
    #[prost(uint32, repeated, tag = "1")]
    pub hit_target_entity_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Bajehkhlnjp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Pnakeeeolec {
    #[prost(uint32, tag = "1")]
    pub godjagemheo: u32,
    #[prost(uint32, tag = "2")]
    pub abdaaefggmg: u32,
    #[prost(uint32, tag = "3")]
    pub lalleangoka: u32,
    #[prost(uint32, tag = "4")]
    pub epjnjkcboao: u32,
    #[prost(uint32, tag = "5")]
    pub ambeflabbpf: u32,
    #[prost(uint32, tag = "6")]
    pub hfhmnfhfldn: u32,
    #[prost(uint32, tag = "7")]
    pub bajhjcjgdha: u32,
    #[prost(uint32, tag = "8")]
    pub djcnijnpogf: u32,
    #[prost(uint32, tag = "9")]
    pub amhdmcjfoia: u32,
    #[prost(uint32, tag = "10")]
    pub emmbaihojje: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub ldjajpjgbdb: u32,
    #[prost(uint32, tag = "13")]
    pub kediegelkjn: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Omlideelaek {
    AvatarSlot1 = 0,
    AvatarSlot2 = 1,
    AvatarSlot3 = 2,
}
impl Omlideelaek {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AvatarSlot1 => "AVATAR_SLOT_1",
            Self::AvatarSlot2 => "AVATAR_SLOT_2",
            Self::AvatarSlot3 => "AVATAR_SLOT_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_SLOT_1" => Some(Self::AvatarSlot1),
            "AVATAR_SLOT_2" => Some(Self::AvatarSlot2),
            "AVATAR_SLOT_3" => Some(Self::AvatarSlot3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dlaopagjcbf {
    ItemTypeNone = 0,
    ItemAvatarCard = 1,
    ItemEquipment = 2,
    ItemMaterial = 3,
    ItemAvatarExp = 4,
    ItemRelic = 5,
}
impl Dlaopagjcbf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ItemTypeNone => "ITEM_TYPE_NONE",
            Self::ItemAvatarCard => "ITEM_AVATAR_CARD",
            Self::ItemEquipment => "ITEM_EQUIPMENT",
            Self::ItemMaterial => "ITEM_MATERIAL",
            Self::ItemAvatarExp => "ITEM_AVATAR_EXP",
            Self::ItemRelic => "ITEM_RELIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ITEM_TYPE_NONE" => Some(Self::ItemTypeNone),
            "ITEM_AVATAR_CARD" => Some(Self::ItemAvatarCard),
            "ITEM_EQUIPMENT" => Some(Self::ItemEquipment),
            "ITEM_MATERIAL" => Some(Self::ItemMaterial),
            "ITEM_AVATAR_EXP" => Some(Self::ItemAvatarExp),
            "ITEM_RELIC" => Some(Self::ItemRelic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lpbbbcnkphj {
    VirtualItemNone = 0,
    VirtualItemHcoin = 1,
    VirtualItemScoin = 2,
    VirtualItemMcoin = 3,
    VirtualItemStamina = 11,
    VirtualItemReserveStamina = 12,
    VirtualItemAvatarExp = 21,
    VirtualItemExp = 22,
    VirtualItemDailyActivePoint = 23,
    VirtualItemMpMax = 24,
    VirtualItemPlayerReturnPoint = 25,
    VirtualItemBattleCollegePoint = 26,
    VirtualItemRogueCoin = 31,
    VirtualItemRogueTalentCoin = 32,
    VirtualItemRogueRewardKey = 33,
    VirtualItemAchievementExp = 41,
    VirtualItemBpExp = 51,
    VirtualItemBpRealExp = 52,
    VirtualItemMuseumFunds = 53,
    VirtualTrainpartyBuildingFunds = 54,
    VirtualTrainpartyAreaUnlockCoin = 55,
    VirtualTrainpartyMobility = 56,
    VirtualItemWarriorExp = 190,
    VirtualItemRogueExp = 191,
    VirtualItemMageExp = 192,
    VirtualItemShamanExp = 193,
    VirtualItemWarlockExp = 194,
    VirtualItemKnightExp = 195,
    VirtualItemPriestExp = 196,
    VirtualItemPunkLordPoint = 100000,
    VirtualItemGameplayCounterMonsterSneakVision = 280001,
    VirtualItemGameplayCounterWolfBroBullet = 280002,
    VirtualItemAlleyFunds = 281001,
    VirtualItemRoguePumanCoupon = 281012,
    VirtualItemMonthCard = 300101,
    VirtualItemBpNormal = 300102,
    VirtualItemBpDeluxe = 300103,
    VirtualItemBpUpgrade = 300104,
    VirtualItemHeliobusFans = 281002,
    VirtualItemSpaceZooHybridItem = 281003,
    VirtualItemSpaceZooExpPoint = 281004,
    VirtualItemRogueNousTalentCoin = 281013,
    VirtualItemEvolveBuildCoin = 281019,
    VirtualItemDrinkMakerTip = 281005,
    VirtualItemMonopolyDice = 281014,
    VirtualItemMonopolyCoin = 281015,
    VirtualItemMonopolyCheatdice = 281016,
    VirtualItemMonopolyReroll = 281017,
    VirtualItemRogueTournPermanentTalentCoin = 281018,
    VirtualItemRogueTournExp = 281022,
    VirtualItemMatchthreeCoin = 281024,
    VirtualItemSwordTrainingSkillPoint = 281023,
    VirtualItemFightFestCoin = 281025,
    VirtualItemRogueMagicTalentCoin = 281026,
}
impl Lpbbbcnkphj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::VirtualItemNone => "VIRTUAL_ITEM_NONE",
            Self::VirtualItemHcoin => "VIRTUAL_ITEM_HCOIN",
            Self::VirtualItemScoin => "VIRTUAL_ITEM_SCOIN",
            Self::VirtualItemMcoin => "VIRTUAL_ITEM_MCOIN",
            Self::VirtualItemStamina => "VIRTUAL_ITEM_STAMINA",
            Self::VirtualItemReserveStamina => "VIRTUAL_ITEM_RESERVE_STAMINA",
            Self::VirtualItemAvatarExp => "VIRTUAL_ITEM_AVATAR_EXP",
            Self::VirtualItemExp => "VIRTUAL_ITEM_EXP",
            Self::VirtualItemDailyActivePoint => "VIRTUAL_ITEM_DAILY_ACTIVE_POINT",
            Self::VirtualItemMpMax => "VIRTUAL_ITEM_MP_MAX",
            Self::VirtualItemPlayerReturnPoint => "VIRTUAL_ITEM_PLAYER_RETURN_POINT",
            Self::VirtualItemBattleCollegePoint => "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT",
            Self::VirtualItemRogueCoin => "VIRTUAL_ITEM_ROGUE_COIN",
            Self::VirtualItemRogueTalentCoin => "VIRTUAL_ITEM_ROGUE_TALENT_COIN",
            Self::VirtualItemRogueRewardKey => "VIRTUAL_ITEM_ROGUE_REWARD_KEY",
            Self::VirtualItemAchievementExp => "VIRTUAL_ITEM_ACHIEVEMENT_EXP",
            Self::VirtualItemBpExp => "VIRTUAL_ITEM_BP_EXP",
            Self::VirtualItemBpRealExp => "VIRTUAL_ITEM_BP_REAL_EXP",
            Self::VirtualItemMuseumFunds => "VIRTUAL_ITEM_MUSEUM_FUNDS",
            Self::VirtualTrainpartyBuildingFunds => "VIRTUAL_TRAINPARTY_BUILDING_FUNDS",
            Self::VirtualTrainpartyAreaUnlockCoin => {
                "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN"
            }
            Self::VirtualTrainpartyMobility => "VIRTUAL_TRAINPARTY_MOBILITY",
            Self::VirtualItemWarriorExp => "VIRTUAL_ITEM_WARRIOR_EXP",
            Self::VirtualItemRogueExp => "VIRTUAL_ITEM_ROGUE_EXP",
            Self::VirtualItemMageExp => "VIRTUAL_ITEM_MAGE_EXP",
            Self::VirtualItemShamanExp => "VIRTUAL_ITEM_SHAMAN_EXP",
            Self::VirtualItemWarlockExp => "VIRTUAL_ITEM_WARLOCK_EXP",
            Self::VirtualItemKnightExp => "VIRTUAL_ITEM_KNIGHT_EXP",
            Self::VirtualItemPriestExp => "VIRTUAL_ITEM_PRIEST_EXP",
            Self::VirtualItemPunkLordPoint => "VIRTUAL_ITEM_PUNK_LORD_POINT",
            Self::VirtualItemGameplayCounterMonsterSneakVision => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
            Self::VirtualItemGameplayCounterWolfBroBullet => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET"
            }
            Self::VirtualItemAlleyFunds => "VIRTUAL_ITEM_ALLEY_FUNDS",
            Self::VirtualItemRoguePumanCoupon => "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON",
            Self::VirtualItemMonthCard => "VIRTUAL_ITEM_MONTH_CARD",
            Self::VirtualItemBpNormal => "VIRTUAL_ITEM_BP_NORMAL",
            Self::VirtualItemBpDeluxe => "VIRTUAL_ITEM_BP_DELUXE",
            Self::VirtualItemBpUpgrade => "VIRTUAL_ITEM_BP_UPGRADE",
            Self::VirtualItemHeliobusFans => "VIRTUAL_ITEM_HELIOBUS_FANS",
            Self::VirtualItemSpaceZooHybridItem => "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM",
            Self::VirtualItemSpaceZooExpPoint => "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT",
            Self::VirtualItemRogueNousTalentCoin => "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN",
            Self::VirtualItemEvolveBuildCoin => "VIRTUAL_ITEM_EVOLVE_BUILD_COIN",
            Self::VirtualItemDrinkMakerTip => "VIRTUAL_ITEM_DRINK_MAKER_TIP",
            Self::VirtualItemMonopolyDice => "VIRTUAL_ITEM_MONOPOLY_DICE",
            Self::VirtualItemMonopolyCoin => "VIRTUAL_ITEM_MONOPOLY_COIN",
            Self::VirtualItemMonopolyCheatdice => "VIRTUAL_ITEM_MONOPOLY_CHEATDICE",
            Self::VirtualItemMonopolyReroll => "VIRTUAL_ITEM_MONOPOLY_REROLL",
            Self::VirtualItemRogueTournPermanentTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN"
            }
            Self::VirtualItemRogueTournExp => "VIRTUAL_ITEM_ROGUE_TOURN_EXP",
            Self::VirtualItemMatchthreeCoin => "VIRTUAL_ITEM_MATCHTHREE_COIN",
            Self::VirtualItemSwordTrainingSkillPoint => {
                "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT"
            }
            Self::VirtualItemFightFestCoin => "VIRTUAL_ITEM_FIGHT_FEST_COIN",
            Self::VirtualItemRogueMagicTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIRTUAL_ITEM_NONE" => Some(Self::VirtualItemNone),
            "VIRTUAL_ITEM_HCOIN" => Some(Self::VirtualItemHcoin),
            "VIRTUAL_ITEM_SCOIN" => Some(Self::VirtualItemScoin),
            "VIRTUAL_ITEM_MCOIN" => Some(Self::VirtualItemMcoin),
            "VIRTUAL_ITEM_STAMINA" => Some(Self::VirtualItemStamina),
            "VIRTUAL_ITEM_RESERVE_STAMINA" => Some(Self::VirtualItemReserveStamina),
            "VIRTUAL_ITEM_AVATAR_EXP" => Some(Self::VirtualItemAvatarExp),
            "VIRTUAL_ITEM_EXP" => Some(Self::VirtualItemExp),
            "VIRTUAL_ITEM_DAILY_ACTIVE_POINT" => Some(Self::VirtualItemDailyActivePoint),
            "VIRTUAL_ITEM_MP_MAX" => Some(Self::VirtualItemMpMax),
            "VIRTUAL_ITEM_PLAYER_RETURN_POINT" => {
                Some(Self::VirtualItemPlayerReturnPoint)
            }
            "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT" => {
                Some(Self::VirtualItemBattleCollegePoint)
            }
            "VIRTUAL_ITEM_ROGUE_COIN" => Some(Self::VirtualItemRogueCoin),
            "VIRTUAL_ITEM_ROGUE_TALENT_COIN" => Some(Self::VirtualItemRogueTalentCoin),
            "VIRTUAL_ITEM_ROGUE_REWARD_KEY" => Some(Self::VirtualItemRogueRewardKey),
            "VIRTUAL_ITEM_ACHIEVEMENT_EXP" => Some(Self::VirtualItemAchievementExp),
            "VIRTUAL_ITEM_BP_EXP" => Some(Self::VirtualItemBpExp),
            "VIRTUAL_ITEM_BP_REAL_EXP" => Some(Self::VirtualItemBpRealExp),
            "VIRTUAL_ITEM_MUSEUM_FUNDS" => Some(Self::VirtualItemMuseumFunds),
            "VIRTUAL_TRAINPARTY_BUILDING_FUNDS" => {
                Some(Self::VirtualTrainpartyBuildingFunds)
            }
            "VIRTUAL_TRAINPARTY_AREA_UNLOCK_COIN" => {
                Some(Self::VirtualTrainpartyAreaUnlockCoin)
            }
            "VIRTUAL_TRAINPARTY_MOBILITY" => Some(Self::VirtualTrainpartyMobility),
            "VIRTUAL_ITEM_WARRIOR_EXP" => Some(Self::VirtualItemWarriorExp),
            "VIRTUAL_ITEM_ROGUE_EXP" => Some(Self::VirtualItemRogueExp),
            "VIRTUAL_ITEM_MAGE_EXP" => Some(Self::VirtualItemMageExp),
            "VIRTUAL_ITEM_SHAMAN_EXP" => Some(Self::VirtualItemShamanExp),
            "VIRTUAL_ITEM_WARLOCK_EXP" => Some(Self::VirtualItemWarlockExp),
            "VIRTUAL_ITEM_KNIGHT_EXP" => Some(Self::VirtualItemKnightExp),
            "VIRTUAL_ITEM_PRIEST_EXP" => Some(Self::VirtualItemPriestExp),
            "VIRTUAL_ITEM_PUNK_LORD_POINT" => Some(Self::VirtualItemPunkLordPoint),
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::VirtualItemGameplayCounterMonsterSneakVision)
            }
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET" => {
                Some(Self::VirtualItemGameplayCounterWolfBroBullet)
            }
            "VIRTUAL_ITEM_ALLEY_FUNDS" => Some(Self::VirtualItemAlleyFunds),
            "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON" => Some(Self::VirtualItemRoguePumanCoupon),
            "VIRTUAL_ITEM_MONTH_CARD" => Some(Self::VirtualItemMonthCard),
            "VIRTUAL_ITEM_BP_NORMAL" => Some(Self::VirtualItemBpNormal),
            "VIRTUAL_ITEM_BP_DELUXE" => Some(Self::VirtualItemBpDeluxe),
            "VIRTUAL_ITEM_BP_UPGRADE" => Some(Self::VirtualItemBpUpgrade),
            "VIRTUAL_ITEM_HELIOBUS_FANS" => Some(Self::VirtualItemHeliobusFans),
            "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM" => {
                Some(Self::VirtualItemSpaceZooHybridItem)
            }
            "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT" => Some(Self::VirtualItemSpaceZooExpPoint),
            "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN" => {
                Some(Self::VirtualItemRogueNousTalentCoin)
            }
            "VIRTUAL_ITEM_EVOLVE_BUILD_COIN" => Some(Self::VirtualItemEvolveBuildCoin),
            "VIRTUAL_ITEM_DRINK_MAKER_TIP" => Some(Self::VirtualItemDrinkMakerTip),
            "VIRTUAL_ITEM_MONOPOLY_DICE" => Some(Self::VirtualItemMonopolyDice),
            "VIRTUAL_ITEM_MONOPOLY_COIN" => Some(Self::VirtualItemMonopolyCoin),
            "VIRTUAL_ITEM_MONOPOLY_CHEATDICE" => Some(Self::VirtualItemMonopolyCheatdice),
            "VIRTUAL_ITEM_MONOPOLY_REROLL" => Some(Self::VirtualItemMonopolyReroll),
            "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN" => {
                Some(Self::VirtualItemRogueTournPermanentTalentCoin)
            }
            "VIRTUAL_ITEM_ROGUE_TOURN_EXP" => Some(Self::VirtualItemRogueTournExp),
            "VIRTUAL_ITEM_MATCHTHREE_COIN" => Some(Self::VirtualItemMatchthreeCoin),
            "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT" => {
                Some(Self::VirtualItemSwordTrainingSkillPoint)
            }
            "VIRTUAL_ITEM_FIGHT_FEST_COIN" => Some(Self::VirtualItemFightFestCoin),
            "VIRTUAL_ITEM_ROGUE_MAGIC_TALENT_COIN" => {
                Some(Self::VirtualItemRogueMagicTalentCoin)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ohkgnchbadd {
    GameplayCounterNone = 0,
    GameplayCounterMonsterSneakVision = 280001,
}
impl Ohkgnchbadd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GameplayCounterNone => "GAMEPLAY_COUNTER_NONE",
            Self::GameplayCounterMonsterSneakVision => {
                "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_NONE" => Some(Self::GameplayCounterNone),
            "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::GameplayCounterMonsterSneakVision)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Onhofkloglp {
    BlackLimitLevelAll = 0,
}
impl Onhofkloglp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BlackLimitLevelAll => "BLACK_LIMIT_LEVEL_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BLACK_LIMIT_LEVEL_ALL" => Some(Self::BlackLimitLevelAll),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dmiiodpknid {
    AreaNone = 0,
    AreaCn = 1,
    AreaJp = 2,
    AreaAsia = 3,
    AreaWest = 4,
    AreaKr = 5,
    AreaOverseas = 6,
}
impl Dmiiodpknid {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AreaNone => "AREA_NONE",
            Self::AreaCn => "AREA_CN",
            Self::AreaJp => "AREA_JP",
            Self::AreaAsia => "AREA_ASIA",
            Self::AreaWest => "AREA_WEST",
            Self::AreaKr => "AREA_KR",
            Self::AreaOverseas => "AREA_OVERSEAS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AREA_NONE" => Some(Self::AreaNone),
            "AREA_CN" => Some(Self::AreaCn),
            "AREA_JP" => Some(Self::AreaJp),
            "AREA_ASIA" => Some(Self::AreaAsia),
            "AREA_WEST" => Some(Self::AreaWest),
            "AREA_KR" => Some(Self::AreaKr),
            "AREA_OVERSEAS" => Some(Self::AreaOverseas),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Impghkhgedl {
    EntityNone = 0,
    EntityAvatar = 1,
    EntityMonster = 2,
    EntityNpc = 3,
    EntityProp = 4,
    EntityTrigger = 5,
    EntityEnv = 6,
    EntitySummonUnit = 7,
}
impl Impghkhgedl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EntityNone => "ENTITY_NONE",
            Self::EntityAvatar => "ENTITY_AVATAR",
            Self::EntityMonster => "ENTITY_MONSTER",
            Self::EntityNpc => "ENTITY_NPC",
            Self::EntityProp => "ENTITY_PROP",
            Self::EntityTrigger => "ENTITY_TRIGGER",
            Self::EntityEnv => "ENTITY_ENV",
            Self::EntitySummonUnit => "ENTITY_SUMMON_UNIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTITY_NONE" => Some(Self::EntityNone),
            "ENTITY_AVATAR" => Some(Self::EntityAvatar),
            "ENTITY_MONSTER" => Some(Self::EntityMonster),
            "ENTITY_NPC" => Some(Self::EntityNpc),
            "ENTITY_PROP" => Some(Self::EntityProp),
            "ENTITY_TRIGGER" => Some(Self::EntityTrigger),
            "ENTITY_ENV" => Some(Self::EntityEnv),
            "ENTITY_SUMMON_UNIT" => Some(Self::EntitySummonUnit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LanguageType {
    LanguageNone = 0,
    LanguageSc = 1,
    LanguageTc = 2,
    LanguageEn = 3,
    LanguageKr = 4,
    LanguageJp = 5,
    LanguageFr = 6,
    LanguageDe = 7,
    LanguageEs = 8,
    LanguagePt = 9,
    LanguageRu = 10,
    LanguageTh = 11,
    LanguageVi = 12,
    LanguageId = 13,
}
impl LanguageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LanguageNone => "LANGUAGE_NONE",
            Self::LanguageSc => "LANGUAGE_SC",
            Self::LanguageTc => "LANGUAGE_TC",
            Self::LanguageEn => "LANGUAGE_EN",
            Self::LanguageKr => "LANGUAGE_KR",
            Self::LanguageJp => "LANGUAGE_JP",
            Self::LanguageFr => "LANGUAGE_FR",
            Self::LanguageDe => "LANGUAGE_DE",
            Self::LanguageEs => "LANGUAGE_ES",
            Self::LanguagePt => "LANGUAGE_PT",
            Self::LanguageRu => "LANGUAGE_RU",
            Self::LanguageTh => "LANGUAGE_TH",
            Self::LanguageVi => "LANGUAGE_VI",
            Self::LanguageId => "LANGUAGE_ID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LANGUAGE_NONE" => Some(Self::LanguageNone),
            "LANGUAGE_SC" => Some(Self::LanguageSc),
            "LANGUAGE_TC" => Some(Self::LanguageTc),
            "LANGUAGE_EN" => Some(Self::LanguageEn),
            "LANGUAGE_KR" => Some(Self::LanguageKr),
            "LANGUAGE_JP" => Some(Self::LanguageJp),
            "LANGUAGE_FR" => Some(Self::LanguageFr),
            "LANGUAGE_DE" => Some(Self::LanguageDe),
            "LANGUAGE_ES" => Some(Self::LanguageEs),
            "LANGUAGE_PT" => Some(Self::LanguagePt),
            "LANGUAGE_RU" => Some(Self::LanguageRu),
            "LANGUAGE_TH" => Some(Self::LanguageTh),
            "LANGUAGE_VI" => Some(Self::LanguageVi),
            "LANGUAGE_ID" => Some(Self::LanguageId),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlatformType {
    Editor = 0,
    Ios = 1,
    Android = 2,
    Pc = 3,
    Web = 4,
    Wap = 5,
    Ps4 = 6,
    Nintendo = 7,
    CloudAndroid = 8,
    CloudPc = 9,
    CloudIos = 10,
    Ps5 = 11,
    Mac = 12,
    CloudMac = 13,
    CloudWebAndroid = 20,
    CloudWebIos = 21,
    CloudWebPc = 22,
    CloudWebMac = 23,
    CloudWebTouch = 24,
    CloudWebKeyboard = 25,
}
impl PlatformType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Editor => "EDITOR",
            Self::Ios => "IOS",
            Self::Android => "ANDROID",
            Self::Pc => "PC",
            Self::Web => "WEB",
            Self::Wap => "WAP",
            Self::Ps4 => "PS4",
            Self::Nintendo => "NINTENDO",
            Self::CloudAndroid => "CLOUD_ANDROID",
            Self::CloudPc => "CLOUD_PC",
            Self::CloudIos => "CLOUD_IOS",
            Self::Ps5 => "PS5",
            Self::Mac => "MAC",
            Self::CloudMac => "CLOUD_MAC",
            Self::CloudWebAndroid => "CLOUD_WEB_ANDROID",
            Self::CloudWebIos => "CLOUD_WEB_IOS",
            Self::CloudWebPc => "CLOUD_WEB_PC",
            Self::CloudWebMac => "CLOUD_WEB_MAC",
            Self::CloudWebTouch => "CLOUD_WEB_TOUCH",
            Self::CloudWebKeyboard => "CLOUD_WEB_KEYBOARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EDITOR" => Some(Self::Editor),
            "IOS" => Some(Self::Ios),
            "ANDROID" => Some(Self::Android),
            "PC" => Some(Self::Pc),
            "WEB" => Some(Self::Web),
            "WAP" => Some(Self::Wap),
            "PS4" => Some(Self::Ps4),
            "NINTENDO" => Some(Self::Nintendo),
            "CLOUD_ANDROID" => Some(Self::CloudAndroid),
            "CLOUD_PC" => Some(Self::CloudPc),
            "CLOUD_IOS" => Some(Self::CloudIos),
            "PS5" => Some(Self::Ps5),
            "MAC" => Some(Self::Mac),
            "CLOUD_MAC" => Some(Self::CloudMac),
            "CLOUD_WEB_ANDROID" => Some(Self::CloudWebAndroid),
            "CLOUD_WEB_IOS" => Some(Self::CloudWebIos),
            "CLOUD_WEB_PC" => Some(Self::CloudWebPc),
            "CLOUD_WEB_MAC" => Some(Self::CloudWebMac),
            "CLOUD_WEB_TOUCH" => Some(Self::CloudWebTouch),
            "CLOUD_WEB_KEYBOARD" => Some(Self::CloudWebKeyboard),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Imchbmjgell {
    NoKick = 0,
    ForceKick = 1,
    IdleKick = 2,
    Silence = 3,
}
impl Imchbmjgell {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoKick => "NO_KICK",
            Self::ForceKick => "FORCE_KICK",
            Self::IdleKick => "IDLE_KICK",
            Self::Silence => "SILENCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_KICK" => Some(Self::NoKick),
            "FORCE_KICK" => Some(Self::ForceKick),
            "IDLE_KICK" => Some(Self::IdleKick),
            "SILENCE" => Some(Self::Silence),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarType {
    None = 0,
    AvatarTrialType = 1,
    AvatarLimitType = 2,
    AvatarFormalType = 3,
    AvatarAssistType = 4,
    AvatarAetherDivideType = 5,
    AvatarUpgradeAvailableType = 6,
}
impl AvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "AVATAR_TYPE_NONE",
            Self::AvatarTrialType => "AVATAR_TRIAL_TYPE",
            Self::AvatarLimitType => "AVATAR_LIMIT_TYPE",
            Self::AvatarFormalType => "AVATAR_FORMAL_TYPE",
            Self::AvatarAssistType => "AVATAR_ASSIST_TYPE",
            Self::AvatarAetherDivideType => "AVATAR_AETHER_DIVIDE_TYPE",
            Self::AvatarUpgradeAvailableType => "AVATAR_UPGRADE_AVAILABLE_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_TYPE_NONE" => Some(Self::None),
            "AVATAR_TRIAL_TYPE" => Some(Self::AvatarTrialType),
            "AVATAR_LIMIT_TYPE" => Some(Self::AvatarLimitType),
            "AVATAR_FORMAL_TYPE" => Some(Self::AvatarFormalType),
            "AVATAR_ASSIST_TYPE" => Some(Self::AvatarAssistType),
            "AVATAR_AETHER_DIVIDE_TYPE" => Some(Self::AvatarAetherDivideType),
            "AVATAR_UPGRADE_AVAILABLE_TYPE" => Some(Self::AvatarUpgradeAvailableType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MultiPathAvatarType {
    None = 0,
    Mar7thKnightType = 1001,
    Mar7thRogueType = 1224,
    BoyWarriorType = 8001,
    GirlWarriorType = 8002,
    BoyKnightType = 8003,
    GirlKnightType = 8004,
    BoyShamanType = 8005,
    GirlShamanType = 8006,
}
impl MultiPathAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MultiPathAvatarTypeNone",
            Self::Mar7thKnightType => "Mar_7thKnightType",
            Self::Mar7thRogueType => "Mar_7thRogueType",
            Self::BoyWarriorType => "BoyWarriorType",
            Self::GirlWarriorType => "GirlWarriorType",
            Self::BoyKnightType => "BoyKnightType",
            Self::GirlKnightType => "GirlKnightType",
            Self::BoyShamanType => "BoyShamanType",
            Self::GirlShamanType => "GirlShamanType",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MultiPathAvatarTypeNone" => Some(Self::None),
            "Mar_7thKnightType" => Some(Self::Mar7thKnightType),
            "Mar_7thRogueType" => Some(Self::Mar7thRogueType),
            "BoyWarriorType" => Some(Self::BoyWarriorType),
            "GirlWarriorType" => Some(Self::GirlWarriorType),
            "BoyKnightType" => Some(Self::BoyKnightType),
            "GirlKnightType" => Some(Self::GirlKnightType),
            "BoyShamanType" => Some(Self::BoyShamanType),
            "GirlShamanType" => Some(Self::GirlShamanType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    None = 0,
    Man = 1,
    Woman = 2,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "GenderNone",
            Self::Man => "GenderMan",
            Self::Woman => "GenderWoman",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GenderNone" => Some(Self::None),
            "GenderMan" => Some(Self::Man),
            "GenderWoman" => Some(Self::Woman),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oephagemfpn {
    ProductNone = 0,
    ProductNormal = 1,
    ProductLimit = 2,
    ProductLimitNoPay = 3,
    ProductNoProcessOrder = 4,
}
impl Oephagemfpn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductNone => "PRODUCT_NONE",
            Self::ProductNormal => "PRODUCT_NORMAL",
            Self::ProductLimit => "PRODUCT_LIMIT",
            Self::ProductLimitNoPay => "PRODUCT_LIMIT_NO_PAY",
            Self::ProductNoProcessOrder => "PRODUCT_NO_PROCESS_ORDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_NONE" => Some(Self::ProductNone),
            "PRODUCT_NORMAL" => Some(Self::ProductNormal),
            "PRODUCT_LIMIT" => Some(Self::ProductLimit),
            "PRODUCT_LIMIT_NO_PAY" => Some(Self::ProductLimitNoPay),
            "PRODUCT_NO_PROCESS_ORDER" => Some(Self::ProductNoProcessOrder),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cgcdphcocdd {
    ProductGiftNone = 0,
    ProductGiftCoin = 1,
    ProductGiftMonthCard = 2,
    ProductGiftBp68 = 3,
    ProductGiftBp128 = 4,
    ProductGiftBp68Upgrade128 = 5,
    ProductGiftPointCard = 6,
    ProductGiftPsPreOrder1 = 7,
    ProductGiftPsPreOrder2 = 8,
    ProductGiftGooglePoints100 = 9,
    ProductGiftGooglePoints150 = 10,
    ProductGiftPsPointCard030 = 11,
    ProductGiftPsPointCard050 = 12,
    ProductGiftPsPointCard100 = 13,
}
impl Cgcdphcocdd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ProductGiftNone => "PRODUCT_GIFT_NONE",
            Self::ProductGiftCoin => "PRODUCT_GIFT_COIN",
            Self::ProductGiftMonthCard => "PRODUCT_GIFT_MONTH_CARD",
            Self::ProductGiftBp68 => "PRODUCT_GIFT_BP_68",
            Self::ProductGiftBp128 => "PRODUCT_GIFT_BP_128",
            Self::ProductGiftBp68Upgrade128 => "PRODUCT_GIFT_BP68_UPGRADE_128",
            Self::ProductGiftPointCard => "PRODUCT_GIFT_POINT_CARD",
            Self::ProductGiftPsPreOrder1 => "PRODUCT_GIFT_PS_PRE_ORDER_1",
            Self::ProductGiftPsPreOrder2 => "PRODUCT_GIFT_PS_PRE_ORDER_2",
            Self::ProductGiftGooglePoints100 => "PRODUCT_GIFT_GOOGLE_POINTS_100",
            Self::ProductGiftGooglePoints150 => "PRODUCT_GIFT_GOOGLE_POINTS_150",
            Self::ProductGiftPsPointCard030 => "PRODUCT_GIFT_PS_POINT_CARD_030",
            Self::ProductGiftPsPointCard050 => "PRODUCT_GIFT_PS_POINT_CARD_050",
            Self::ProductGiftPsPointCard100 => "PRODUCT_GIFT_PS_POINT_CARD_100",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_GIFT_NONE" => Some(Self::ProductGiftNone),
            "PRODUCT_GIFT_COIN" => Some(Self::ProductGiftCoin),
            "PRODUCT_GIFT_MONTH_CARD" => Some(Self::ProductGiftMonthCard),
            "PRODUCT_GIFT_BP_68" => Some(Self::ProductGiftBp68),
            "PRODUCT_GIFT_BP_128" => Some(Self::ProductGiftBp128),
            "PRODUCT_GIFT_BP68_UPGRADE_128" => Some(Self::ProductGiftBp68Upgrade128),
            "PRODUCT_GIFT_POINT_CARD" => Some(Self::ProductGiftPointCard),
            "PRODUCT_GIFT_PS_PRE_ORDER_1" => Some(Self::ProductGiftPsPreOrder1),
            "PRODUCT_GIFT_PS_PRE_ORDER_2" => Some(Self::ProductGiftPsPreOrder2),
            "PRODUCT_GIFT_GOOGLE_POINTS_100" => Some(Self::ProductGiftGooglePoints100),
            "PRODUCT_GIFT_GOOGLE_POINTS_150" => Some(Self::ProductGiftGooglePoints150),
            "PRODUCT_GIFT_PS_POINT_CARD_030" => Some(Self::ProductGiftPsPointCard030),
            "PRODUCT_GIFT_PS_POINT_CARD_050" => Some(Self::ProductGiftPsPointCard050),
            "PRODUCT_GIFT_PS_POINT_CARD_100" => Some(Self::ProductGiftPsPointCard100),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kfpiggpbgik {
    FeatureSwitchNone = 0,
    FeatureSwitchShop = 1,
    FeatureSwitchLineupName = 2,
    FeatureSwitchRechargeShop = 3,
    FeatureSwitchNickname = 4,
    FeatureSwitchSignature = 5,
    FeatureSwitchBattlepass = 6,
    FeatureSwitchPunkLord = 7,
    FeatureSwitchMonthcardDaily = 8,
    FeatureSwitchPictureShare = 9,
    FeatureSwitchRogue = 10,
    FeatureSwitchChallenge = 11,
    FeatureSwitchCocoon = 12,
    FeatureSwitchRaid = 13,
    FeatureSwitchMazePlaneEvent = 14,
    FeatureSwitchActivityPanel = 15,
    FeatureSwitchMailbox = 16,
    FeatureSwitchQuest = 17,
    FeatureSwitchGacha = 18,
    FeatureSwitchChat = 19,
    FeatureSwitchModifyFriendAlias = 20,
    FeatureSwitchUseItem = 21,
    FeatureSwitchActivitySchedule = 22,
    FeatureSwitchFarmElement = 23,
    FeatureSwitchAchievementLevel = 24,
    FeatureSwitchDailyActiveLevel = 25,
    FeatureSwitchPlayerReturn = 26,
    FeatureSwitchFirstSetNickname = 27,
    FeatureSwitchMainMissionReward = 28,
    FeatureSwitchSubMissionReward = 29,
    FeatureSwitchPamMission = 30,
    FeatureSwitchDailyMission = 31,
    FeatureSwitchDestroyItem = 32,
    FeatureSwitchConsumeItemTurn = 33,
    FeatureSwitchRogueModifier = 34,
    FeatureSwitchChessRogue = 35,
    FeatureSwitchChessRogueBoard = 36,
    FeatureSwitchRollShop = 37,
    FeatureSwitchH5Return = 38,
    FeatureSwitchOffering = 39,
    FeatureSwitchServerRedPoint = 40,
    FeatureSwitchMonopolyOptionRatio = 41,
    FeatureSwitchMonopolyGetRaffleTicket = 42,
    FeatureSwitchMonopolyTakeRaffleReward = 43,
    FeatureSwitchChallengeRecommendLineup = 44,
    FeatureSwitchPsnMemberShipCheck = 45,
    FeatureSwitchPlayerBoardDevelopment = 46,
    FeatureSwitchPvp = 47,
    FeatureSwitchRogueMode = 48,
    FeatureSwitchRogueTournUgc = 49,
    FeatureSwitchRelicFilterPlanName = 50,
    FeatureSwitchMazeItemUseBuffDrop = 51,
    FeatureSwitchRedDot = 52,
    FeatureSwitchGameStateService = 53,
}
impl Kfpiggpbgik {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeatureSwitchNone => "FEATURE_SWITCH_NONE",
            Self::FeatureSwitchShop => "FEATURE_SWITCH_SHOP",
            Self::FeatureSwitchLineupName => "FEATURE_SWITCH_LINEUP_NAME",
            Self::FeatureSwitchRechargeShop => "FEATURE_SWITCH_RECHARGE_SHOP",
            Self::FeatureSwitchNickname => "FEATURE_SWITCH_NICKNAME",
            Self::FeatureSwitchSignature => "FEATURE_SWITCH_SIGNATURE",
            Self::FeatureSwitchBattlepass => "FEATURE_SWITCH_BATTLEPASS",
            Self::FeatureSwitchPunkLord => "FEATURE_SWITCH_PUNK_LORD",
            Self::FeatureSwitchMonthcardDaily => "FEATURE_SWITCH_MONTHCARD_DAILY",
            Self::FeatureSwitchPictureShare => "FEATURE_SWITCH_PICTURE_SHARE",
            Self::FeatureSwitchRogue => "FEATURE_SWITCH_ROGUE",
            Self::FeatureSwitchChallenge => "FEATURE_SWITCH_CHALLENGE",
            Self::FeatureSwitchCocoon => "FEATURE_SWITCH_COCOON",
            Self::FeatureSwitchRaid => "FEATURE_SWITCH_RAID",
            Self::FeatureSwitchMazePlaneEvent => "FEATURE_SWITCH_MAZE_PLANE_EVENT",
            Self::FeatureSwitchActivityPanel => "FEATURE_SWITCH_ACTIVITY_PANEL",
            Self::FeatureSwitchMailbox => "FEATURE_SWITCH_MAILBOX",
            Self::FeatureSwitchQuest => "FEATURE_SWITCH_QUEST",
            Self::FeatureSwitchGacha => "FEATURE_SWITCH_GACHA",
            Self::FeatureSwitchChat => "FEATURE_SWITCH_CHAT",
            Self::FeatureSwitchModifyFriendAlias => "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS",
            Self::FeatureSwitchUseItem => "FEATURE_SWITCH_USE_ITEM",
            Self::FeatureSwitchActivitySchedule => "FEATURE_SWITCH_ACTIVITY_SCHEDULE",
            Self::FeatureSwitchFarmElement => "FEATURE_SWITCH_FARM_ELEMENT",
            Self::FeatureSwitchAchievementLevel => "FEATURE_SWITCH_ACHIEVEMENT_LEVEL",
            Self::FeatureSwitchDailyActiveLevel => "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL",
            Self::FeatureSwitchPlayerReturn => "FEATURE_SWITCH_PLAYER_RETURN",
            Self::FeatureSwitchFirstSetNickname => "FEATURE_SWITCH_FIRST_SET_NICKNAME",
            Self::FeatureSwitchMainMissionReward => "FEATURE_SWITCH_MAIN_MISSION_REWARD",
            Self::FeatureSwitchSubMissionReward => "FEATURE_SWITCH_SUB_MISSION_REWARD",
            Self::FeatureSwitchPamMission => "FEATURE_SWITCH_PAM_MISSION",
            Self::FeatureSwitchDailyMission => "FEATURE_SWITCH_DAILY_MISSION",
            Self::FeatureSwitchDestroyItem => "FEATURE_SWITCH_DESTROY_ITEM",
            Self::FeatureSwitchConsumeItemTurn => "FEATURE_SWITCH_CONSUME_ITEM_TURN",
            Self::FeatureSwitchRogueModifier => "FEATURE_SWITCH_ROGUE_MODIFIER",
            Self::FeatureSwitchChessRogue => "FEATURE_SWITCH_CHESS_ROGUE",
            Self::FeatureSwitchChessRogueBoard => "FEATURE_SWITCH_CHESS_ROGUE_BOARD",
            Self::FeatureSwitchRollShop => "FEATURE_SWITCH_ROLL_SHOP",
            Self::FeatureSwitchH5Return => "FEATURE_SWITCH_H5_RETURN",
            Self::FeatureSwitchOffering => "FEATURE_SWITCH_OFFERING",
            Self::FeatureSwitchServerRedPoint => "FEATURE_SWITCH_SERVER_RED_POINT",
            Self::FeatureSwitchMonopolyOptionRatio => {
                "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO"
            }
            Self::FeatureSwitchMonopolyGetRaffleTicket => {
                "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET"
            }
            Self::FeatureSwitchMonopolyTakeRaffleReward => {
                "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD"
            }
            Self::FeatureSwitchChallengeRecommendLineup => {
                "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP"
            }
            Self::FeatureSwitchPsnMemberShipCheck => {
                "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK"
            }
            Self::FeatureSwitchPlayerBoardDevelopment => {
                "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT"
            }
            Self::FeatureSwitchPvp => "FEATURE_SWITCH_PVP",
            Self::FeatureSwitchRogueMode => "FEATURE_SWITCH_ROGUE_MODE",
            Self::FeatureSwitchRogueTournUgc => "FEATURE_SWITCH_ROGUE_TOURN_UGC",
            Self::FeatureSwitchRelicFilterPlanName => {
                "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME"
            }
            Self::FeatureSwitchMazeItemUseBuffDrop => {
                "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP"
            }
            Self::FeatureSwitchRedDot => "FEATURE_SWITCH_RED_DOT",
            Self::FeatureSwitchGameStateService => "FEATURE_SWITCH_GAME_STATE_SERVICE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEATURE_SWITCH_NONE" => Some(Self::FeatureSwitchNone),
            "FEATURE_SWITCH_SHOP" => Some(Self::FeatureSwitchShop),
            "FEATURE_SWITCH_LINEUP_NAME" => Some(Self::FeatureSwitchLineupName),
            "FEATURE_SWITCH_RECHARGE_SHOP" => Some(Self::FeatureSwitchRechargeShop),
            "FEATURE_SWITCH_NICKNAME" => Some(Self::FeatureSwitchNickname),
            "FEATURE_SWITCH_SIGNATURE" => Some(Self::FeatureSwitchSignature),
            "FEATURE_SWITCH_BATTLEPASS" => Some(Self::FeatureSwitchBattlepass),
            "FEATURE_SWITCH_PUNK_LORD" => Some(Self::FeatureSwitchPunkLord),
            "FEATURE_SWITCH_MONTHCARD_DAILY" => Some(Self::FeatureSwitchMonthcardDaily),
            "FEATURE_SWITCH_PICTURE_SHARE" => Some(Self::FeatureSwitchPictureShare),
            "FEATURE_SWITCH_ROGUE" => Some(Self::FeatureSwitchRogue),
            "FEATURE_SWITCH_CHALLENGE" => Some(Self::FeatureSwitchChallenge),
            "FEATURE_SWITCH_COCOON" => Some(Self::FeatureSwitchCocoon),
            "FEATURE_SWITCH_RAID" => Some(Self::FeatureSwitchRaid),
            "FEATURE_SWITCH_MAZE_PLANE_EVENT" => Some(Self::FeatureSwitchMazePlaneEvent),
            "FEATURE_SWITCH_ACTIVITY_PANEL" => Some(Self::FeatureSwitchActivityPanel),
            "FEATURE_SWITCH_MAILBOX" => Some(Self::FeatureSwitchMailbox),
            "FEATURE_SWITCH_QUEST" => Some(Self::FeatureSwitchQuest),
            "FEATURE_SWITCH_GACHA" => Some(Self::FeatureSwitchGacha),
            "FEATURE_SWITCH_CHAT" => Some(Self::FeatureSwitchChat),
            "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS" => {
                Some(Self::FeatureSwitchModifyFriendAlias)
            }
            "FEATURE_SWITCH_USE_ITEM" => Some(Self::FeatureSwitchUseItem),
            "FEATURE_SWITCH_ACTIVITY_SCHEDULE" => {
                Some(Self::FeatureSwitchActivitySchedule)
            }
            "FEATURE_SWITCH_FARM_ELEMENT" => Some(Self::FeatureSwitchFarmElement),
            "FEATURE_SWITCH_ACHIEVEMENT_LEVEL" => {
                Some(Self::FeatureSwitchAchievementLevel)
            }
            "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL" => {
                Some(Self::FeatureSwitchDailyActiveLevel)
            }
            "FEATURE_SWITCH_PLAYER_RETURN" => Some(Self::FeatureSwitchPlayerReturn),
            "FEATURE_SWITCH_FIRST_SET_NICKNAME" => {
                Some(Self::FeatureSwitchFirstSetNickname)
            }
            "FEATURE_SWITCH_MAIN_MISSION_REWARD" => {
                Some(Self::FeatureSwitchMainMissionReward)
            }
            "FEATURE_SWITCH_SUB_MISSION_REWARD" => {
                Some(Self::FeatureSwitchSubMissionReward)
            }
            "FEATURE_SWITCH_PAM_MISSION" => Some(Self::FeatureSwitchPamMission),
            "FEATURE_SWITCH_DAILY_MISSION" => Some(Self::FeatureSwitchDailyMission),
            "FEATURE_SWITCH_DESTROY_ITEM" => Some(Self::FeatureSwitchDestroyItem),
            "FEATURE_SWITCH_CONSUME_ITEM_TURN" => {
                Some(Self::FeatureSwitchConsumeItemTurn)
            }
            "FEATURE_SWITCH_ROGUE_MODIFIER" => Some(Self::FeatureSwitchRogueModifier),
            "FEATURE_SWITCH_CHESS_ROGUE" => Some(Self::FeatureSwitchChessRogue),
            "FEATURE_SWITCH_CHESS_ROGUE_BOARD" => {
                Some(Self::FeatureSwitchChessRogueBoard)
            }
            "FEATURE_SWITCH_ROLL_SHOP" => Some(Self::FeatureSwitchRollShop),
            "FEATURE_SWITCH_H5_RETURN" => Some(Self::FeatureSwitchH5Return),
            "FEATURE_SWITCH_OFFERING" => Some(Self::FeatureSwitchOffering),
            "FEATURE_SWITCH_SERVER_RED_POINT" => Some(Self::FeatureSwitchServerRedPoint),
            "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO" => {
                Some(Self::FeatureSwitchMonopolyOptionRatio)
            }
            "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET" => {
                Some(Self::FeatureSwitchMonopolyGetRaffleTicket)
            }
            "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD" => {
                Some(Self::FeatureSwitchMonopolyTakeRaffleReward)
            }
            "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP" => {
                Some(Self::FeatureSwitchChallengeRecommendLineup)
            }
            "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK" => {
                Some(Self::FeatureSwitchPsnMemberShipCheck)
            }
            "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT" => {
                Some(Self::FeatureSwitchPlayerBoardDevelopment)
            }
            "FEATURE_SWITCH_PVP" => Some(Self::FeatureSwitchPvp),
            "FEATURE_SWITCH_ROGUE_MODE" => Some(Self::FeatureSwitchRogueMode),
            "FEATURE_SWITCH_ROGUE_TOURN_UGC" => Some(Self::FeatureSwitchRogueTournUgc),
            "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME" => {
                Some(Self::FeatureSwitchRelicFilterPlanName)
            }
            "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP" => {
                Some(Self::FeatureSwitchMazeItemUseBuffDrop)
            }
            "FEATURE_SWITCH_RED_DOT" => Some(Self::FeatureSwitchRedDot),
            "FEATURE_SWITCH_GAME_STATE_SERVICE" => {
                Some(Self::FeatureSwitchGameStateService)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecretKeyType {
    SecretKeyNone = 0,
    SecretKeyServerCheck = 1,
    SecretKeyVideo = 2,
    SecretKeyBattleTime = 3,
}
impl SecretKeyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SecretKeyNone => "SECRET_KEY_NONE",
            Self::SecretKeyServerCheck => "SECRET_KEY_SERVER_CHECK",
            Self::SecretKeyVideo => "SECRET_KEY_VIDEO",
            Self::SecretKeyBattleTime => "SECRET_KEY_BATTLE_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECRET_KEY_NONE" => Some(Self::SecretKeyNone),
            "SECRET_KEY_SERVER_CHECK" => Some(Self::SecretKeyServerCheck),
            "SECRET_KEY_VIDEO" => Some(Self::SecretKeyVideo),
            "SECRET_KEY_BATTLE_TIME" => Some(Self::SecretKeyBattleTime),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jaopmddbnhf {
    ReplayTypeNone = 0,
    ReplayTypePunkLord = 1,
}
impl Jaopmddbnhf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ReplayTypeNone => "REPLAY_TYPE_NONE",
            Self::ReplayTypePunkLord => "REPLAY_TYPE_PUNK_LORD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REPLAY_TYPE_NONE" => Some(Self::ReplayTypeNone),
            "REPLAY_TYPE_PUNK_LORD" => Some(Self::ReplayTypePunkLord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aiphgapcafg {
    PunkLordShareTypeNone = 0,
    PunkLordShareTypeFriend = 1,
    PunkLordShareTypeAll = 2,
}
impl Aiphgapcafg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordShareTypeNone => "PUNK_LORD_SHARE_TYPE_NONE",
            Self::PunkLordShareTypeFriend => "PUNK_LORD_SHARE_TYPE_FRIEND",
            Self::PunkLordShareTypeAll => "PUNK_LORD_SHARE_TYPE_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_SHARE_TYPE_NONE" => Some(Self::PunkLordShareTypeNone),
            "PUNK_LORD_SHARE_TYPE_FRIEND" => Some(Self::PunkLordShareTypeFriend),
            "PUNK_LORD_SHARE_TYPE_ALL" => Some(Self::PunkLordShareTypeAll),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mmokgfflboj {
    PunkLordAttackerStatusNone = 0,
    PunkLordAttackerStatusAttacked = 1,
    PunkLordAttackerStatusAttacking = 2,
    PunkLordAttackerStatusAttackedAndAttacking = 3,
}
impl Mmokgfflboj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordAttackerStatusNone => "PUNK_LORD_ATTACKER_STATUS_NONE",
            Self::PunkLordAttackerStatusAttacked => "PUNK_LORD_ATTACKER_STATUS_ATTACKED",
            Self::PunkLordAttackerStatusAttacking => {
                "PUNK_LORD_ATTACKER_STATUS_ATTACKING"
            }
            Self::PunkLordAttackerStatusAttackedAndAttacking => {
                "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_ATTACKER_STATUS_NONE" => Some(Self::PunkLordAttackerStatusNone),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED" => {
                Some(Self::PunkLordAttackerStatusAttacked)
            }
            "PUNK_LORD_ATTACKER_STATUS_ATTACKING" => {
                Some(Self::PunkLordAttackerStatusAttacking)
            }
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING" => {
                Some(Self::PunkLordAttackerStatusAttackedAndAttacking)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dohldjoepim {
    PunkLordMonsterInfoNotifyReasonNone = 0,
    PunkLordMonsterInfoNotifyReasonEnterRaid = 1,
    PunkLordMonsterInfoNotifyReasonBattleEnd = 2,
    PunkLordMonsterInfoNotifyReasonLeaveRaid = 3,
}
impl Dohldjoepim {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordMonsterInfoNotifyReasonNone => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE"
            }
            Self::PunkLordMonsterInfoNotifyReasonEnterRaid => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID"
            }
            Self::PunkLordMonsterInfoNotifyReasonBattleEnd => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END"
            }
            Self::PunkLordMonsterInfoNotifyReasonLeaveRaid => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE" => {
                Some(Self::PunkLordMonsterInfoNotifyReasonNone)
            }
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID" => {
                Some(Self::PunkLordMonsterInfoNotifyReasonEnterRaid)
            }
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END" => {
                Some(Self::PunkLordMonsterInfoNotifyReasonBattleEnd)
            }
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID" => {
                Some(Self::PunkLordMonsterInfoNotifyReasonLeaveRaid)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    None = 0,
    Private = 1,
    Group = 2,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CHAT_TYPE_NONE",
            Self::Private => "CHAT_TYPE_PRIVATE",
            Self::Group => "CHAT_TYPE_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_TYPE_NONE" => Some(Self::None),
            "CHAT_TYPE_PRIVATE" => Some(Self::Private),
            "CHAT_TYPE_GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    None = 0,
    CustomText = 1,
    Emoji = 2,
    Invite = 3,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MSG_TYPE_NONE",
            Self::CustomText => "MSG_TYPE_CUSTOM_TEXT",
            Self::Emoji => "MSG_TYPE_EMOJI",
            Self::Invite => "MSG_TYPE_INVITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MSG_TYPE_NONE" => Some(Self::None),
            "MSG_TYPE_CUSTOM_TEXT" => Some(Self::CustomText),
            "MSG_TYPE_EMOJI" => Some(Self::Emoji),
            "MSG_TYPE_INVITE" => Some(Self::Invite),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pijfdeekoid {
    ShieldTypeNone = 0,
    ShieldTypeReplace = 1,
    ShieldTypeShied = 2,
}
impl Pijfdeekoid {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ShieldTypeNone => "SHIELD_TYPE_NONE",
            Self::ShieldTypeReplace => "SHIELD_TYPE_REPLACE",
            Self::ShieldTypeShied => "SHIELD_TYPE_SHIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SHIELD_TYPE_NONE" => Some(Self::ShieldTypeNone),
            "SHIELD_TYPE_REPLACE" => Some(Self::ShieldTypeReplace),
            "SHIELD_TYPE_SHIED" => Some(Self::ShieldTypeShied),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ekhlgnglbpk {
    FuncUnlockIdNone = 0,
    FuncUnlockIdRelic = 403,
    FuncUnlockIdRelicNum = 404,
    FuncUnlockIdEquipment = 401,
    FuncUnlockIdSkilltree = 402,
    FuncUnlockIdGacha = 2300,
    FuncUnlockIdExpedition = 3100,
    FuncUnlockIdCompose = 4100,
    FuncUnlockIdFightactivity = 3700,
}
impl Ekhlgnglbpk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FuncUnlockIdNone => "FUNC_UNLOCK_ID_NONE",
            Self::FuncUnlockIdRelic => "FUNC_UNLOCK_ID_RELIC",
            Self::FuncUnlockIdRelicNum => "FUNC_UNLOCK_ID_RELIC_NUM",
            Self::FuncUnlockIdEquipment => "FUNC_UNLOCK_ID_EQUIPMENT",
            Self::FuncUnlockIdSkilltree => "FUNC_UNLOCK_ID_SKILLTREE",
            Self::FuncUnlockIdGacha => "FUNC_UNLOCK_ID_GACHA",
            Self::FuncUnlockIdExpedition => "FUNC_UNLOCK_ID_EXPEDITION",
            Self::FuncUnlockIdCompose => "FUNC_UNLOCK_ID_COMPOSE",
            Self::FuncUnlockIdFightactivity => "FUNC_UNLOCK_ID_FIGHTACTIVITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FUNC_UNLOCK_ID_NONE" => Some(Self::FuncUnlockIdNone),
            "FUNC_UNLOCK_ID_RELIC" => Some(Self::FuncUnlockIdRelic),
            "FUNC_UNLOCK_ID_RELIC_NUM" => Some(Self::FuncUnlockIdRelicNum),
            "FUNC_UNLOCK_ID_EQUIPMENT" => Some(Self::FuncUnlockIdEquipment),
            "FUNC_UNLOCK_ID_SKILLTREE" => Some(Self::FuncUnlockIdSkilltree),
            "FUNC_UNLOCK_ID_GACHA" => Some(Self::FuncUnlockIdGacha),
            "FUNC_UNLOCK_ID_EXPEDITION" => Some(Self::FuncUnlockIdExpedition),
            "FUNC_UNLOCK_ID_COMPOSE" => Some(Self::FuncUnlockIdCompose),
            "FUNC_UNLOCK_ID_FIGHTACTIVITY" => Some(Self::FuncUnlockIdFightactivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Edldlhfdomi {
    AssistAvatarUnknow = 0,
    AssistAvatarLevel = 1,
    AssistAvatarRank = 2,
}
impl Edldlhfdomi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AssistAvatarUnknow => "ASSIST_AVATAR_UNKNOW",
            Self::AssistAvatarLevel => "ASSIST_AVATAR_LEVEL",
            Self::AssistAvatarRank => "ASSIST_AVATAR_RANK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASSIST_AVATAR_UNKNOW" => Some(Self::AssistAvatarUnknow),
            "ASSIST_AVATAR_LEVEL" => Some(Self::AssistAvatarLevel),
            "ASSIST_AVATAR_RANK" => Some(Self::AssistAvatarRank),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iedmioehmba {
    DevelopmentNone = 0,
    DevelopmentRogueCosmos = 1,
    DevelopmentRogueChess = 2,
    DevelopmentRogueChessNous = 3,
    DevelopmentMemoryChallenge = 4,
    DevelopmentStoryChallenge = 5,
    DevelopmentUnlockAvatar = 6,
    DevelopmentUnlockEquipment = 7,
    DevelopmentActivityStart = 8,
    DevelopmentActivityEnd = 9,
    DevelopmentBossChallenge = 10,
    DevelopmentRogueTourn = 11,
    DevelopmentRogueTournWeek = 12,
    DevelopmentRogueMagic = 13,
}
impl Iedmioehmba {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DevelopmentNone => "DEVELOPMENT_NONE",
            Self::DevelopmentRogueCosmos => "DEVELOPMENT_ROGUE_COSMOS",
            Self::DevelopmentRogueChess => "DEVELOPMENT_ROGUE_CHESS",
            Self::DevelopmentRogueChessNous => "DEVELOPMENT_ROGUE_CHESS_NOUS",
            Self::DevelopmentMemoryChallenge => "DEVELOPMENT_MEMORY_CHALLENGE",
            Self::DevelopmentStoryChallenge => "DEVELOPMENT_STORY_CHALLENGE",
            Self::DevelopmentUnlockAvatar => "DEVELOPMENT_UNLOCK_AVATAR",
            Self::DevelopmentUnlockEquipment => "DEVELOPMENT_UNLOCK_EQUIPMENT",
            Self::DevelopmentActivityStart => "DEVELOPMENT_ACTIVITY_START",
            Self::DevelopmentActivityEnd => "DEVELOPMENT_ACTIVITY_END",
            Self::DevelopmentBossChallenge => "DEVELOPMENT_BOSS_CHALLENGE",
            Self::DevelopmentRogueTourn => "DEVELOPMENT_ROGUE_TOURN",
            Self::DevelopmentRogueTournWeek => "DEVELOPMENT_ROGUE_TOURN_WEEK",
            Self::DevelopmentRogueMagic => "DEVELOPMENT_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVELOPMENT_NONE" => Some(Self::DevelopmentNone),
            "DEVELOPMENT_ROGUE_COSMOS" => Some(Self::DevelopmentRogueCosmos),
            "DEVELOPMENT_ROGUE_CHESS" => Some(Self::DevelopmentRogueChess),
            "DEVELOPMENT_ROGUE_CHESS_NOUS" => Some(Self::DevelopmentRogueChessNous),
            "DEVELOPMENT_MEMORY_CHALLENGE" => Some(Self::DevelopmentMemoryChallenge),
            "DEVELOPMENT_STORY_CHALLENGE" => Some(Self::DevelopmentStoryChallenge),
            "DEVELOPMENT_UNLOCK_AVATAR" => Some(Self::DevelopmentUnlockAvatar),
            "DEVELOPMENT_UNLOCK_EQUIPMENT" => Some(Self::DevelopmentUnlockEquipment),
            "DEVELOPMENT_ACTIVITY_START" => Some(Self::DevelopmentActivityStart),
            "DEVELOPMENT_ACTIVITY_END" => Some(Self::DevelopmentActivityEnd),
            "DEVELOPMENT_BOSS_CHALLENGE" => Some(Self::DevelopmentBossChallenge),
            "DEVELOPMENT_ROGUE_TOURN" => Some(Self::DevelopmentRogueTourn),
            "DEVELOPMENT_ROGUE_TOURN_WEEK" => Some(Self::DevelopmentRogueTournWeek),
            "DEVELOPMENT_ROGUE_MAGIC" => Some(Self::DevelopmentRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayingState {
    None = 0,
    PlayingRogueCosmos = 1,
    PlayingRogueChess = 2,
    PlayingRogueChessNous = 3,
    PlayingChallengeMemory = 4,
    PlayingChallengeStory = 5,
    PlayingChallengeBoss = 6,
    PlayingRogueTourn = 7,
    PlayingRogueMagic = 8,
}
impl PlayingState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PLAYING_STATE_NONE",
            Self::PlayingRogueCosmos => "PLAYING_ROGUE_COSMOS",
            Self::PlayingRogueChess => "PLAYING_ROGUE_CHESS",
            Self::PlayingRogueChessNous => "PLAYING_ROGUE_CHESS_NOUS",
            Self::PlayingChallengeMemory => "PLAYING_CHALLENGE_MEMORY",
            Self::PlayingChallengeStory => "PLAYING_CHALLENGE_STORY",
            Self::PlayingChallengeBoss => "PLAYING_CHALLENGE_BOSS",
            Self::PlayingRogueTourn => "PLAYING_ROGUE_TOURN",
            Self::PlayingRogueMagic => "PLAYING_ROGUE_MAGIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYING_STATE_NONE" => Some(Self::None),
            "PLAYING_ROGUE_COSMOS" => Some(Self::PlayingRogueCosmos),
            "PLAYING_ROGUE_CHESS" => Some(Self::PlayingRogueChess),
            "PLAYING_ROGUE_CHESS_NOUS" => Some(Self::PlayingRogueChessNous),
            "PLAYING_CHALLENGE_MEMORY" => Some(Self::PlayingChallengeMemory),
            "PLAYING_CHALLENGE_STORY" => Some(Self::PlayingChallengeStory),
            "PLAYING_CHALLENGE_BOSS" => Some(Self::PlayingChallengeBoss),
            "PLAYING_ROGUE_TOURN" => Some(Self::PlayingRogueTourn),
            "PLAYING_ROGUE_MAGIC" => Some(Self::PlayingRogueMagic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hbmpanpaeag {
    MatchRoomCharacterNone = 0,
    MatchRoomCharacterLeader = 1,
    MatchRoomCharacterMember = 2,
    MatchRoomCharacterWatcher = 3,
}
impl Hbmpanpaeag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchRoomCharacterNone => "MatchRoomCharacter_None",
            Self::MatchRoomCharacterLeader => "MatchRoomCharacter_Leader",
            Self::MatchRoomCharacterMember => "MatchRoomCharacter_Member",
            Self::MatchRoomCharacterWatcher => "MatchRoomCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacter_None" => Some(Self::MatchRoomCharacterNone),
            "MatchRoomCharacter_Leader" => Some(Self::MatchRoomCharacterLeader),
            "MatchRoomCharacter_Member" => Some(Self::MatchRoomCharacterMember),
            "MatchRoomCharacter_Watcher" => Some(Self::MatchRoomCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Chhfokjmnja {
    MatchRoomCharacterStatusNone = 0,
    MatchRoomCharacterStatusIdle = 1,
    MatchRoomCharacterStatusOperating = 2,
    MatchRoomCharacterStatusReady = 3,
    MatchRoomCharacterStatusFighting = 4,
    MatchRoomCharacterStatusWatching = 5,
}
impl Chhfokjmnja {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchRoomCharacterStatusNone => "MatchRoomCharacterStatus_None",
            Self::MatchRoomCharacterStatusIdle => "MatchRoomCharacterStatus_Idle",
            Self::MatchRoomCharacterStatusOperating => {
                "MatchRoomCharacterStatus_Operating"
            }
            Self::MatchRoomCharacterStatusReady => "MatchRoomCharacterStatus_Ready",
            Self::MatchRoomCharacterStatusFighting => "MatchRoomCharacterStatus_Fighting",
            Self::MatchRoomCharacterStatusWatching => "MatchRoomCharacterStatus_Watching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacterStatus_None" => Some(Self::MatchRoomCharacterStatusNone),
            "MatchRoomCharacterStatus_Idle" => Some(Self::MatchRoomCharacterStatusIdle),
            "MatchRoomCharacterStatus_Operating" => {
                Some(Self::MatchRoomCharacterStatusOperating)
            }
            "MatchRoomCharacterStatus_Ready" => Some(Self::MatchRoomCharacterStatusReady),
            "MatchRoomCharacterStatus_Fighting" => {
                Some(Self::MatchRoomCharacterStatusFighting)
            }
            "MatchRoomCharacterStatus_Watching" => {
                Some(Self::MatchRoomCharacterStatusWatching)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lbijnkkhhej {
    BattleCheckStrategyIdentical = 0,
    BattleCheckStrategyServer = 1,
    BattleCheckStrategyClient = 2,
}
impl Lbijnkkhhej {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckStrategyIdentical => "BATTLE_CHECK_STRATEGY_IDENTICAL",
            Self::BattleCheckStrategyServer => "BATTLE_CHECK_STRATEGY_SERVER",
            Self::BattleCheckStrategyClient => "BATTLE_CHECK_STRATEGY_CLIENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_STRATEGY_IDENTICAL" => Some(Self::BattleCheckStrategyIdentical),
            "BATTLE_CHECK_STRATEGY_SERVER" => Some(Self::BattleCheckStrategyServer),
            "BATTLE_CHECK_STRATEGY_CLIENT" => Some(Self::BattleCheckStrategyClient),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ldbbmppnico {
    BattleCheckResultSucc = 0,
    BattleCheckResultFail = 1,
    BattleCheckResultPass = 2,
}
impl Ldbbmppnico {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleCheckResultSucc => "BATTLE_CHECK_RESULT_SUCC",
            Self::BattleCheckResultFail => "BATTLE_CHECK_RESULT_FAIL",
            Self::BattleCheckResultPass => "BATTLE_CHECK_RESULT_PASS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_RESULT_SUCC" => Some(Self::BattleCheckResultSucc),
            "BATTLE_CHECK_RESULT_FAIL" => Some(Self::BattleCheckResultFail),
            "BATTLE_CHECK_RESULT_PASS" => Some(Self::BattleCheckResultPass),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Begiaaohfkf {
    BattleModuleMaze = 0,
    BattleModuleChallenge = 1,
    BattleModuleCocoon = 2,
    BattleModuleRogue = 3,
    BattleModuleChallengeActivity = 4,
    BattleModuleTrialLevel = 5,
    BattleModuleAetherDivide = 6,
}
impl Begiaaohfkf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleModuleMaze => "BATTLE_MODULE_MAZE",
            Self::BattleModuleChallenge => "BATTLE_MODULE_CHALLENGE",
            Self::BattleModuleCocoon => "BATTLE_MODULE_COCOON",
            Self::BattleModuleRogue => "BATTLE_MODULE_ROGUE",
            Self::BattleModuleChallengeActivity => "BATTLE_MODULE_CHALLENGE_ACTIVITY",
            Self::BattleModuleTrialLevel => "BATTLE_MODULE_TRIAL_LEVEL",
            Self::BattleModuleAetherDivide => "BATTLE_MODULE_AETHER_DIVIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_MODULE_MAZE" => Some(Self::BattleModuleMaze),
            "BATTLE_MODULE_CHALLENGE" => Some(Self::BattleModuleChallenge),
            "BATTLE_MODULE_COCOON" => Some(Self::BattleModuleCocoon),
            "BATTLE_MODULE_ROGUE" => Some(Self::BattleModuleRogue),
            "BATTLE_MODULE_CHALLENGE_ACTIVITY" => {
                Some(Self::BattleModuleChallengeActivity)
            }
            "BATTLE_MODULE_TRIAL_LEVEL" => Some(Self::BattleModuleTrialLevel),
            "BATTLE_MODULE_AETHER_DIVIDE" => Some(Self::BattleModuleAetherDivide),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hlhclmaoeie {
    AetherdivideSpiritLineupNone = 0,
    AetherdivideSpiritLineupNormal = 1,
    AetherdivideSpiritLineupTrial = 2,
}
impl Hlhclmaoeie {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AetherdivideSpiritLineupNone => "AETHERDIVIDE_SPIRIT_LINEUP_NONE",
            Self::AetherdivideSpiritLineupNormal => "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL",
            Self::AetherdivideSpiritLineupTrial => "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AETHERDIVIDE_SPIRIT_LINEUP_NONE" => Some(Self::AetherdivideSpiritLineupNone),
            "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL" => {
                Some(Self::AetherdivideSpiritLineupNormal)
            }
            "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL" => {
                Some(Self::AetherdivideSpiritLineupTrial)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ehledbjfmcn {
    BattleTargetTypeNone = 0,
    BattleTargetTypeScore = 1,
    BattleTargetTypeAchievement = 2,
    BattleTargetTypeRaid = 3,
    BattleTargetTypeChallengeScore = 4,
    BattleTargetTypeCommon = 5,
    BattleTargetTypeClientAchievement = 6,
}
impl Ehledbjfmcn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleTargetTypeNone => "BATTLE_TARGET_TYPE_NONE",
            Self::BattleTargetTypeScore => "BATTLE_TARGET_TYPE_SCORE",
            Self::BattleTargetTypeAchievement => "BATTLE_TARGET_TYPE_ACHIEVEMENT",
            Self::BattleTargetTypeRaid => "BATTLE_TARGET_TYPE_RAID",
            Self::BattleTargetTypeChallengeScore => "BATTLE_TARGET_TYPE_CHALLENGE_SCORE",
            Self::BattleTargetTypeCommon => "BATTLE_TARGET_TYPE_COMMON",
            Self::BattleTargetTypeClientAchievement => {
                "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_TARGET_TYPE_NONE" => Some(Self::BattleTargetTypeNone),
            "BATTLE_TARGET_TYPE_SCORE" => Some(Self::BattleTargetTypeScore),
            "BATTLE_TARGET_TYPE_ACHIEVEMENT" => Some(Self::BattleTargetTypeAchievement),
            "BATTLE_TARGET_TYPE_RAID" => Some(Self::BattleTargetTypeRaid),
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE" => {
                Some(Self::BattleTargetTypeChallengeScore)
            }
            "BATTLE_TARGET_TYPE_COMMON" => Some(Self::BattleTargetTypeCommon),
            "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT" => {
                Some(Self::BattleTargetTypeClientAchievement)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ggailhiffge {
    Unknown = 0,
    KilledByOthers = 1,
    KilledBySelf = 2,
    Escape = 3,
}
impl Ggailhiffge {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::KilledByOthers => "KILLED_BY_OTHERS",
            Self::KilledBySelf => "KILLED_BY_SELF",
            Self::Escape => "ESCAPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "KILLED_BY_OTHERS" => Some(Self::KilledByOthers),
            "KILLED_BY_SELF" => Some(Self::KilledBySelf),
            "ESCAPE" => Some(Self::Escape),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fhmfbfffhih {
    TagNone = 0,
    TagHideNpcMonster = 1,
}
impl Fhmfbfffhih {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TagNone => "TAG_NONE",
            Self::TagHideNpcMonster => "TAG_HIDE_NPC_MONSTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAG_NONE" => Some(Self::TagNone),
            "TAG_HIDE_NPC_MONSTER" => Some(Self::TagHideNpcMonster),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jghoecbncgj {
    NormalCreate = 0,
    FormChange = 1,
}
impl Jghoecbncgj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NormalCreate => "NORMAL_CREATE",
            Self::FormChange => "FORM_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NORMAL_CREATE" => Some(Self::NormalCreate),
            "FORM_CHANGE" => Some(Self::FormChange),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndReason {
    None = 0,
    AllDie = 1,
    TurnLimit = 2,
}
impl BattleEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BATTLE_END_REASON_NONE",
            Self::AllDie => "BATTLE_END_REASON_ALL_DIE",
            Self::TurnLimit => "BATTLE_END_REASON_TURN_LIMIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_REASON_NONE" => Some(Self::None),
            "BATTLE_END_REASON_ALL_DIE" => Some(Self::AllDie),
            "BATTLE_END_REASON_TURN_LIMIT" => Some(Self::TurnLimit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lkjaemohlml {
    BattleStaticticEventNone = 0,
    BattleStaticticEventTreasureDungeonAddExplore = 1,
    BattleStaticticEventTreasureDungeonOpenGrid = 2,
    BattleStaticticEventTreasureDungeonPickupItem = 3,
    BattleStaticticEventTreasureDungeonUseBuff = 4,
    BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer = 5,
}
impl Lkjaemohlml {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleStaticticEventNone => "BATTLE_STATICTIC_EVENT_NONE",
            Self::BattleStaticticEventTreasureDungeonAddExplore => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE"
            }
            Self::BattleStaticticEventTreasureDungeonOpenGrid => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID"
            }
            Self::BattleStaticticEventTreasureDungeonPickupItem => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM"
            }
            Self::BattleStaticticEventTreasureDungeonUseBuff => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF"
            }
            Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer => {
                "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_STATICTIC_EVENT_NONE" => Some(Self::BattleStaticticEventNone),
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE" => {
                Some(Self::BattleStaticticEventTreasureDungeonAddExplore)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID" => {
                Some(Self::BattleStaticticEventTreasureDungeonOpenGrid)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM" => {
                Some(Self::BattleStaticticEventTreasureDungeonPickupItem)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF" => {
                Some(Self::BattleStaticticEventTreasureDungeonUseBuff)
            }
            "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER" => {
                Some(Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jpaegahmikf {
    KNone = 0,
    KkillEliteMonsterNum = 1,
    KkillMonsterNum = 2,
}
impl Jpaegahmikf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KNone => "kNone",
            Self::KkillEliteMonsterNum => "kkillEliteMonsterNum",
            Self::KkillMonsterNum => "kkillMonsterNum",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kNone" => Some(Self::KNone),
            "kkillEliteMonsterNum" => Some(Self::KkillEliteMonsterNum),
            "kkillMonsterNum" => Some(Self::KkillMonsterNum),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndStatus {
    BattleEndNone = 0,
    BattleEndWin = 1,
    BattleEndLose = 2,
    BattleEndQuit = 3,
}
impl BattleEndStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleEndNone => "BATTLE_END_NONE",
            Self::BattleEndWin => "BATTLE_END_WIN",
            Self::BattleEndLose => "BATTLE_END_LOSE",
            Self::BattleEndQuit => "BATTLE_END_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_NONE" => Some(Self::BattleEndNone),
            "BATTLE_END_WIN" => Some(Self::BattleEndWin),
            "BATTLE_END_LOSE" => Some(Self::BattleEndLose),
            "BATTLE_END_QUIT" => Some(Self::BattleEndQuit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gldklemmpmi {
    FightGameModeNone = 0,
    FightGameModeMatch3 = 1,
}
impl Gldklemmpmi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightGameModeNone => "FIGHT_GAME_MODE_NONE",
            Self::FightGameModeMatch3 => "FIGHT_GAME_MODE_MATCH3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_GAME_MODE_NONE" => Some(Self::FightGameModeNone),
            "FIGHT_GAME_MODE_MATCH3" => Some(Self::FightGameModeMatch3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Coblnkdlhfd {
    FightKickoutUnknown = 0,
    FightKickoutBlack = 1,
    FightKickoutByGm = 2,
    FightKickoutTimeout = 3,
    FightKickoutSessionReset = 4,
}
impl Coblnkdlhfd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightKickoutUnknown => "FIGHT_KICKOUT_UNKNOWN",
            Self::FightKickoutBlack => "FIGHT_KICKOUT_BLACK",
            Self::FightKickoutByGm => "FIGHT_KICKOUT_BY_GM",
            Self::FightKickoutTimeout => "FIGHT_KICKOUT_TIMEOUT",
            Self::FightKickoutSessionReset => "FIGHT_KICKOUT_SESSION_RESET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_KICKOUT_UNKNOWN" => Some(Self::FightKickoutUnknown),
            "FIGHT_KICKOUT_BLACK" => Some(Self::FightKickoutBlack),
            "FIGHT_KICKOUT_BY_GM" => Some(Self::FightKickoutByGm),
            "FIGHT_KICKOUT_TIMEOUT" => Some(Self::FightKickoutTimeout),
            "FIGHT_KICKOUT_SESSION_RESET" => Some(Self::FightKickoutSessionReset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Okbbdenhlbo {
    LobbyCharacterNone = 0,
    LobbyCharacterLeader = 1,
    LobbyCharacterMember = 2,
    LobbyCharacterWatcher = 3,
}
impl Okbbdenhlbo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LobbyCharacterNone => "LobbyCharacter_None",
            Self::LobbyCharacterLeader => "LobbyCharacter_Leader",
            Self::LobbyCharacterMember => "LobbyCharacter_Member",
            Self::LobbyCharacterWatcher => "LobbyCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacter_None" => Some(Self::LobbyCharacterNone),
            "LobbyCharacter_Leader" => Some(Self::LobbyCharacterLeader),
            "LobbyCharacter_Member" => Some(Self::LobbyCharacterMember),
            "LobbyCharacter_Watcher" => Some(Self::LobbyCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ghfikfbhdoj {
    LobbyCharacterStatusNone = 0,
    LobbyCharacterStatusIdle = 1,
    LobbyCharacterStatusOperating = 2,
    LobbyCharacterStatusReady = 3,
    LobbyCharacterStatusFighting = 4,
    LobbyCharacterStatusWatching = 5,
    LobbyCharacterStatusMatching = 6,
}
impl Ghfikfbhdoj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LobbyCharacterStatusNone => "LobbyCharacterStatus_None",
            Self::LobbyCharacterStatusIdle => "LobbyCharacterStatus_Idle",
            Self::LobbyCharacterStatusOperating => "LobbyCharacterStatus_Operating",
            Self::LobbyCharacterStatusReady => "LobbyCharacterStatus_Ready",
            Self::LobbyCharacterStatusFighting => "LobbyCharacterStatus_Fighting",
            Self::LobbyCharacterStatusWatching => "LobbyCharacterStatus_Watching",
            Self::LobbyCharacterStatusMatching => "LobbyCharacterStatus_Matching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacterStatus_None" => Some(Self::LobbyCharacterStatusNone),
            "LobbyCharacterStatus_Idle" => Some(Self::LobbyCharacterStatusIdle),
            "LobbyCharacterStatus_Operating" => Some(Self::LobbyCharacterStatusOperating),
            "LobbyCharacterStatus_Ready" => Some(Self::LobbyCharacterStatusReady),
            "LobbyCharacterStatus_Fighting" => Some(Self::LobbyCharacterStatusFighting),
            "LobbyCharacterStatus_Watching" => Some(Self::LobbyCharacterStatusWatching),
            "LobbyCharacterStatus_Matching" => Some(Self::LobbyCharacterStatusMatching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jdhcfnpkphj {
    LobbyModifyTypeNone = 0,
    LobbyModifyTypeIdle = 1,
    LobbyModifyTypeReady = 2,
    LobbyModifyTypeOperating = 3,
    LobbyModifyTypeCancelMatch = 4,
    LobbyModifyTypeMatch = 5,
    LobbyModifyTypeQuitLobby = 6,
    LobbyModifyTypeKickOut = 7,
    LobbyModifyTypeTimeOut = 8,
    LobbyModifyTypeJoinLobby = 9,
    LobbyModifyTypeLobbyDismiss = 10,
    LobbyModifyTypeMatchTimeOut = 11,
    LobbyModifyTypeFightStart = 12,
    LobbyModifyTypeLogout = 13,
    LobbyModifyTypeFightEnd = 14,
    LobbyModifyTypeFightRoomDestroyInInit = 15,
}
impl Jdhcfnpkphj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LobbyModifyTypeNone => "LobbyModifyType_None",
            Self::LobbyModifyTypeIdle => "LobbyModifyType_Idle",
            Self::LobbyModifyTypeReady => "LobbyModifyType_Ready",
            Self::LobbyModifyTypeOperating => "LobbyModifyType_Operating",
            Self::LobbyModifyTypeCancelMatch => "LobbyModifyType_CancelMatch",
            Self::LobbyModifyTypeMatch => "LobbyModifyType_Match",
            Self::LobbyModifyTypeQuitLobby => "LobbyModifyType_QuitLobby",
            Self::LobbyModifyTypeKickOut => "LobbyModifyType_KickOut",
            Self::LobbyModifyTypeTimeOut => "LobbyModifyType_TimeOut",
            Self::LobbyModifyTypeJoinLobby => "LobbyModifyType_JoinLobby",
            Self::LobbyModifyTypeLobbyDismiss => "LobbyModifyType_LobbyDismiss",
            Self::LobbyModifyTypeMatchTimeOut => "LobbyModifyType_MatchTimeOut",
            Self::LobbyModifyTypeFightStart => "LobbyModifyType_FightStart",
            Self::LobbyModifyTypeLogout => "LobbyModifyType_Logout",
            Self::LobbyModifyTypeFightEnd => "LobbyModifyType_FightEnd",
            Self::LobbyModifyTypeFightRoomDestroyInInit => {
                "LobbyModifyType_FightRoomDestroyInInit"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyModifyType_None" => Some(Self::LobbyModifyTypeNone),
            "LobbyModifyType_Idle" => Some(Self::LobbyModifyTypeIdle),
            "LobbyModifyType_Ready" => Some(Self::LobbyModifyTypeReady),
            "LobbyModifyType_Operating" => Some(Self::LobbyModifyTypeOperating),
            "LobbyModifyType_CancelMatch" => Some(Self::LobbyModifyTypeCancelMatch),
            "LobbyModifyType_Match" => Some(Self::LobbyModifyTypeMatch),
            "LobbyModifyType_QuitLobby" => Some(Self::LobbyModifyTypeQuitLobby),
            "LobbyModifyType_KickOut" => Some(Self::LobbyModifyTypeKickOut),
            "LobbyModifyType_TimeOut" => Some(Self::LobbyModifyTypeTimeOut),
            "LobbyModifyType_JoinLobby" => Some(Self::LobbyModifyTypeJoinLobby),
            "LobbyModifyType_LobbyDismiss" => Some(Self::LobbyModifyTypeLobbyDismiss),
            "LobbyModifyType_MatchTimeOut" => Some(Self::LobbyModifyTypeMatchTimeOut),
            "LobbyModifyType_FightStart" => Some(Self::LobbyModifyTypeFightStart),
            "LobbyModifyType_Logout" => Some(Self::LobbyModifyTypeLogout),
            "LobbyModifyType_FightEnd" => Some(Self::LobbyModifyTypeFightEnd),
            "LobbyModifyType_FightRoomDestroyInInit" => {
                Some(Self::LobbyModifyTypeFightRoomDestroyInInit)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oipkaifoepg {
    FightRoomDestroyReasonNone = 0,
    FightRoomDestroyReasonSvrStop = 1,
    FightRoomDestroyReasonGameEnd = 2,
}
impl Oipkaifoepg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightRoomDestroyReasonNone => "FIGHT_ROOM_DESTROY_REASON_NONE",
            Self::FightRoomDestroyReasonSvrStop => "FIGHT_ROOM_DESTROY_REASON_SVR_STOP",
            Self::FightRoomDestroyReasonGameEnd => "FIGHT_ROOM_DESTROY_REASON_GAME_END",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_ROOM_DESTROY_REASON_NONE" => Some(Self::FightRoomDestroyReasonNone),
            "FIGHT_ROOM_DESTROY_REASON_SVR_STOP" => {
                Some(Self::FightRoomDestroyReasonSvrStop)
            }
            "FIGHT_ROOM_DESTROY_REASON_GAME_END" => {
                Some(Self::FightRoomDestroyReasonGameEnd)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jpedgmmiifj {
    Match3FinishReasonDefault = 0,
    Match3FinishReasonLeave = 1,
    Match3FinishReasonDie = 2,
    Match3FinishReasonGameend = 3,
    Match3FinishReasonKickout = 4,
}
impl Jpedgmmiifj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3FinishReasonDefault => "MATCH3_FINISH_REASON_DEFAULT",
            Self::Match3FinishReasonLeave => "MATCH3_FINISH_REASON_LEAVE",
            Self::Match3FinishReasonDie => "MATCH3_FINISH_REASON_DIE",
            Self::Match3FinishReasonGameend => "MATCH3_FINISH_REASON_GAMEEND",
            Self::Match3FinishReasonKickout => "MATCH3_FINISH_REASON_KICKOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_FINISH_REASON_DEFAULT" => Some(Self::Match3FinishReasonDefault),
            "MATCH3_FINISH_REASON_LEAVE" => Some(Self::Match3FinishReasonLeave),
            "MATCH3_FINISH_REASON_DIE" => Some(Self::Match3FinishReasonDie),
            "MATCH3_FINISH_REASON_GAMEEND" => Some(Self::Match3FinishReasonGameend),
            "MATCH3_FINISH_REASON_KICKOUT" => Some(Self::Match3FinishReasonKickout),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kmpglailidf {
    MatchUnitTypeNone = 0,
    MatchUnitTypeNormal = 1,
    MatchUnitTypeRobot = 2,
    MatchUnitTypeGm = 3,
}
impl Kmpglailidf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchUnitTypeNone => "MATCH_UNIT_TYPE_NONE",
            Self::MatchUnitTypeNormal => "MATCH_UNIT_TYPE_NORMAL",
            Self::MatchUnitTypeRobot => "MATCH_UNIT_TYPE_ROBOT",
            Self::MatchUnitTypeGm => "MATCH_UNIT_TYPE_GM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH_UNIT_TYPE_NONE" => Some(Self::MatchUnitTypeNone),
            "MATCH_UNIT_TYPE_NORMAL" => Some(Self::MatchUnitTypeNormal),
            "MATCH_UNIT_TYPE_ROBOT" => Some(Self::MatchUnitTypeRobot),
            "MATCH_UNIT_TYPE_GM" => Some(Self::MatchUnitTypeGm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bcnpbgkklao {
    RetSucc = 0,
    RetFail = 1,
    RetServerInternalError = 2,
    RetTimeout = 3,
    RetRepeatedReq = 4,
    RetReqParaInvalid = 5,
    RetPlayerDataError = 6,
    RetPlayerClientPaused = 7,
    RetFuncCheckFailed = 8,
    RetFeatureSwitchClosed = 9,
    RetFreqOverLimit = 10,
    RetSystemBusy = 11,
    RetPlayerNotOnline = 12,
    RetOperationInCd = 13,
    RetRepeateLogin = 1000,
    RetRetryLogin = 1001,
    RetWaitLogin = 1002,
    RetNotInWhiteList = 1003,
    RetInBlackList = 1004,
    RetAccountVerifyError = 1005,
    RetAccountParaError = 1006,
    RetAntiAddictLogin = 1007,
    RetCheckSumError = 1008,
    RetReachMaxPlayerNum = 1009,
    RetAlreadyRegistered = 1010,
    RetGenderError = 1011,
    SetNicknameRetCallbackProcessing = 1012,
    RetInGmBindAccess = 1013,
    RetQuestRewardAlreadyTaken = 1100,
    RetQuestNotAccept = 1101,
    RetQuestNotFinish = 1102,
    RetQuestStatusError = 1103,
    RetAchievementLevelNotReach = 1104,
    RetAchievementLevelAlreadyTaken = 1105,
    RetAvatarNotExist = 1200,
    RetAvatarResExpNotEnough = 1201,
    RetAvatarExpReachPromotionLimit = 1202,
    RetAvatarReachMaxPromotion = 1203,
    RetSkilltreeConfigNotExist = 1204,
    RetSkilltreeAlreadyUnlock = 1205,
    RetSkilltreePreLocked = 1206,
    RetSkilltreeLevelNotMeet = 1207,
    RetSkilltreeRankNotMeet = 1208,
    RetAvatarDressNoEquipment = 1209,
    RetAvatarExpItemNotExist = 1210,
    RetSkilltreePointLocked = 1211,
    RetSkilltreePointLevelUpgradeNotMatch = 1212,
    RetSkilltreePointLevelReachMax = 1213,
    RetWorldLevelNotMeet = 1214,
    RetPlayerLevelNotMeet = 1215,
    RetAvatarRankNotMatch = 1216,
    RetAvatarRankReachMax = 1217,
    RetHeroBasicTypeNotMatch = 1218,
    RetAvatarPromotionNotMeet = 1219,
    RetPromotionRewardConfigNotExist = 1220,
    RetPromotionRewardAlreadyTaken = 1221,
    RetAvatarSkinItemNotExist = 1222,
    RetAvatarSkinAlreadyDressed = 1223,
    RetAvatarNotDressSkin = 1224,
    RetAvatarSkinNotMatchAvatar = 1225,
    RetItemNotExist = 1300,
    RetItemCostNotEnough = 1301,
    RetItemCostTooMuch = 1302,
    RetItemNoCost = 1303,
    RetItemNotEnough = 1304,
    RetItemInvalid = 1305,
    RetItemConfigNotExist = 1306,
    RetScoinNotEnough = 1307,
    RetItemRewardExceedLimit = 1308,
    RetItemInvalidUse = 1309,
    RetItemUseConfigNotExist = 1310,
    RetRewardConfigNotExist = 1311,
    RetItemExceedLimit = 1312,
    RetItemCountInvalid = 1313,
    RetItemUseTargetTypeInvalid = 1314,
    RetItemUseSatietyFull = 1315,
    RetItemComposeNotExist = 1316,
    RetRelicComposeNotExist = 1317,
    RetItemCanNotSell = 1318,
    RetItemSellExceddLimit = 1319,
    RetItemNotInCostList = 1320,
    RetItemSpecialCostNotEnough = 1321,
    RetItemSpecialCostTooMuch = 1322,
    RetItemFormulaNotExist = 1323,
    RetItemAutoGiftOptionalNotExist = 1324,
    RetRelicComposeRelicInvalid = 1325,
    RetRelicComposeMainAffixIdInvalid = 1326,
    RetRelicComposeWrongFormulaType = 1327,
    RetRelicComposeRelicNotExist = 1328,
    RetRelicComposeBlackGoldCountInvalid = 1329,
    RetRelicComposeBlackGoldNotNeed = 1330,
    RetMonthCardCannotUse = 1331,
    RetItemRewardExceedDisappear = 1332,
    RetItemNeedRecycle = 1333,
    RetItemComposeExceedLimit = 1334,
    RetItemCanNotDestroy = 1335,
    RetItemAlreadyMark = 1336,
    RetItemMarkExceedLimit = 1337,
    RetItemNotMark = 1338,
    RetItenTurnFoodNotSet = 1339,
    RetItemTurnFoodAlreadySet = 1340,
    RetItemTurnFoodConsumeTypeError = 1341,
    RetItemTurnFoodSwitchAlreadyOpen = 1342,
    RetItemTurnFoodSwitchAlreadyClose = 1343,
    RetHcoinExchangeTooMuch = 1344,
    RetItemTurnFoodSceneTypeError = 1345,
    RetEquipmentAlreadyDressed = 1350,
    RetEquipmentNotExist = 1351,
    RetEquipmentReachLevelLimit = 1352,
    RetEquipmentConsumeSelf = 1353,
    RetEquipmentAlreadyLocked = 1354,
    RetEquipmentAlreadyUnlocked = 1355,
    RetEquipmentLocked = 1356,
    RetEquipmentSelectNumOverLimit = 1357,
    RetEquipmentRankUpMustConsumeSameTid = 1358,
    RetEquipmentPromotionReachMax = 1359,
    RetEquipmentRankUpReachMax = 1360,
    RetEquipmentLevelReachMax = 1361,
    RetEquipmentExceedLimit = 1362,
    RetRelicNotExist = 1363,
    RetRelicReachLevelLimit = 1364,
    RetRelicConsumeSelf = 1365,
    RetRelicAlreadyDressed = 1366,
    RetRelicLocked = 1367,
    RetRelicAlreadyLocked = 1368,
    RetRelicAlreadyUnlocked = 1369,
    RetRelicLevelIsNotZero = 1370,
    RetUniqueIdRepeated = 1371,
    RetEquipmentLevelNotMeet = 1372,
    RetEquipmentItemNotInCostList = 1373,
    RetEquipmentLevelGreaterThanOne = 1374,
    RetEquipmentAlreadyRanked = 1375,
    RetRelicExceedLimit = 1376,
    RetRelicAlreadyDiscarded = 1377,
    RetRelicAlreadyUndiscarded = 1378,
    RetEquipmentBatchLockTooFast = 1379,
    RetRelicFilterPlanSlotEmpty = 1380,
    RetRelicFilterPlanNumExceedLimit = 1381,
    RetRelicFilterPlanNameUtf8Error = 1382,
    RetRelicFilterPlanNameFormatError = 1383,
    RetRelicFilterPlanNoChange = 1384,
    RetLineupInvalidIndex = 1400,
    RetLineupInvalidMemberPos = 1401,
    RetLineupSwapNotExist = 1402,
    RetLineupAvatarAlreadyIn = 1403,
    RetLineupCreateAvatarError = 1404,
    RetLineupAvatarInitError = 1405,
    RetLineupNotExist = 1406,
    RetLineupOnlyOneMember = 1407,
    RetLineupSameLeaderSlot = 1408,
    RetLineupNoLeaderSelect = 1409,
    RetLineupSwapSameSlot = 1410,
    RetLineupAvatarNotExist = 1411,
    RetLineupTrialAvatarCanNotQuit = 1412,
    RetLineupVirtualLineupPlaneNotMatch = 1413,
    RetLineupNotValidLeader = 1414,
    RetLineupSameIndex = 1415,
    RetLineupIsEmpty = 1416,
    RetLineupNameFormatError = 1417,
    RetLineupTypeNotMatch = 1418,
    RetLineupReplaceAllFailed = 1419,
    RetLineupNotAllowEdit = 1420,
    RetLineupAvatarIsAlive = 1421,
    RetLineupAssistHasOnlyMember = 1422,
    RetLineupAssistCannotSwitch = 1423,
    RetLineupAvatarTypeInvalid = 1424,
    RetLineupNameUtf8Error = 1425,
    RetLineupLeaderLock = 1426,
    RetLineupStoryLineNotMatch = 1427,
    RetLineupAvatarLock = 1428,
    RetLineupAvatarInvalid = 1429,
    RetLineupAvatarAlreadyInit = 1430,
    RetLineupLimited = 1431,
    RetMailNotExist = 1700,
    RetMailRangeInvalid = 1701,
    RetMailMailIdInvalid = 1702,
    RetMailNoMailTakeAttachment = 1703,
    RetMailNoMailToDel = 1704,
    RetMailTypeInvalid = 1705,
    RetMailParaInvalid = 1706,
    RetMailAttachementInvalid = 1707,
    RetMailTicketInvalid = 1708,
    RetMailTicketRepeated = 1709,
    RetStageSettleError = 1800,
    RetStageConfigNotExist = 1801,
    RetStageNotFound = 1802,
    RetStageCocoonPropNotValid = 1804,
    RetStageCocoonWaveNotValid = 1805,
    RetStagePropIdNotEqual = 1806,
    RetStageCocoonWaveOver = 1807,
    RetStageWeekCocoonOverCnt = 1808,
    RetStageCocoonNotOpen = 1809,
    RetStageTrialNotOpen = 1810,
    RetStageFarmNotOpen = 1811,
    RetStageFarmTypeError = 1812,
    RetChapterLock = 1900,
    RetChapterChallengeNumNotEnough = 1901,
    RetChapterRewardIdNotExist = 1902,
    RetChapterRewardAlreadyTaken = 1903,
    RetBattleStageNotMatch = 2000,
    RetInBattleNow = 2001,
    RetBattleCheat = 2002,
    RetBattleFail = 2003,
    RetBattleNoLineup = 2004,
    RetBattleLineupEmpty = 2005,
    RetBattleVersionNotMatch = 2006,
    RetBattleQuitByServer = 2007,
    RetInBattleCheck = 2008,
    RetBattleCheckNeedRetry = 2009,
    RetBattleCostTimeCheckFail = 2010,
    RetLackExchangeStaminaTimes = 2100,
    RetLackStamina = 2101,
    RetStaminaFull = 2102,
    RetAuthkeySignTypeError = 2103,
    RetAuthkeySignVerError = 2104,
    RetNicknameFormatError = 2105,
    RetSensitiveWords = 2106,
    RetLevelRewardHasTaken = 2107,
    RetLevelRewardLevelError = 2108,
    RetLanguageInvalid = 2109,
    RetNicknameInCd = 2110,
    RetGameplayBirthdayInvalid = 2111,
    RetGameplayBirthdayAlreadySet = 2112,
    RetNicknameUtf8Error = 2113,
    RetNicknameDigitLimitError = 2114,
    RetSensitiveWordsPlatformError = 2115,
    RetPlayerSettingTypeInvalid = 2116,
    RetMazeLackTicket = 2201,
    RetMazeNotUnlock = 2202,
    RetMazeNoAbility = 2204,
    RetMazeNoPlane = 2205,
    RetMazeMapNotExist = 2207,
    RetMazeMpNotEnough = 2213,
    RetSpringNotEnable = 2214,
    RetSpringTooFar = 2216,
    RetNotInMaze = 2218,
    RetMazeTimeOfDayTypeError = 2223,
    RetSceneTransferLockedByTask = 2224,
    RetPlotNotUnlock = 2300,
    RetMissionNotExist = 2400,
    RetMissionAlreadyDone = 2401,
    RetDailyTaskNotFinish = 2402,
    RetDailyTaskRewardHasTaken = 2403,
    RetMissionNotFinish = 2404,
    RetMissionNotDoing = 2405,
    RetMissionFinishWayNotMatch = 2406,
    RetMissionSceneNotMatch = 2407,
    RetMissionCustomValueNotValid = 2408,
    RetMissionSubMissionNotMatch = 2409,
    RetAdventureMapNotExist = 2500,
    RetSceneEntityNotExist = 2600,
    RetNotInScene = 2601,
    RetSceneMonsterNotExist = 2602,
    RetInteractConfigNotExist = 2603,
    RetUnsupportedPropState = 2604,
    RetSceneEntryIdNotMatch = 2605,
    RetSceneEntityMoveCheckFailed = 2606,
    RetAssistMonsterCountLimit = 2607,
    RetSceneUseSkillFail = 2608,
    RetPropIsHidden = 2609,
    RetLoadingSuccAlready = 2610,
    RetSceneEntityTypeInvalid = 2611,
    RetInteractTypeInvalid = 2612,
    RetInteractNotInRegion = 2613,
    RetInteractSubTypeInvalid = 2614,
    RetNotLeaderEntity = 2615,
    RetMonsterIsNotFarmElement = 2616,
    RetMonsterConfigNotExist = 2617,
    RetAvatarHpAlreadyFull = 2618,
    RetCurInteractEntityNotMatch = 2619,
    RetPlaneTypeNotAllow = 2620,
    RetGroupNotExist = 2621,
    RetGroupSaveDataInCd = 2622,
    RetGroupSaveLenghReachMax = 2623,
    RetRecentElementNotExist = 2624,
    RetRecentElementStageNotMatch = 2625,
    RetScenePositionVersionNotMatch = 2626,
    RetGameplayCounterNotExist = 2627,
    RetGameplayCounterNotEnough = 2628,
    RetGroupStateNotMatch = 2629,
    RetSceneEntityPosNotMatch = 2630,
    RetGroupStateCustomSaveDataOff = 2631,
    RetSceneNotMatch = 2632,
    RetBuyTimesLimit = 2700,
    RetBuyLimitType = 2701,
    RetShopNotOpen = 2702,
    RetGoodsNotOpen = 2703,
    RetCityLevelRewardTaken = 2704,
    RetCityLevelNotMeet = 2705,
    RetSingleBuyLimit = 2706,
    RetTutorialNotUnlock = 2751,
    RetTutorialUnlockAlready = 2752,
    RetTutorialFinishAlready = 2753,
    RetTutorialPreNotUnlock = 2754,
    RetTutorialPlayerLevelNotMatch = 2755,
    RetTutorialTutorialNotFound = 2756,
    RetChallengeNotExist = 2801,
    RetChallengeNotUnlock = 2802,
    RetChallengeAlready = 2803,
    RetChallengeLineupEditForbidden = 2804,
    RetChallengeLineupEmpty = 2805,
    RetChallengeNotDoing = 2806,
    RetChallengeNotFinish = 2807,
    RetChallengeTargetNotFinish = 2808,
    RetChallengeTargetRewardTaken = 2809,
    RetChallengeTimeNotValid = 2810,
    RetChallengeStarsCountNotMeet = 2811,
    RetChallengeStarsRewardTaken = 2812,
    RetChallengeStarsNotExist = 2813,
    RetChallengeCurSceneNotEntryFloor = 2814,
    RetChallengeNoTeamArchive = 2815,
    RetChallengeLineupAvatarTypeInvalid = 2816,
    RetChallengeLineupRecommendInCd = 2817,
    RetBasicTypeAlready = 2850,
    RetNoBasicType = 2851,
    RetNotChooseBasicType = 2852,
    RetNotFuncClose = 2853,
    RetNotChooseGender = 2854,
    RetNotReqUnlockBasicType = 2855,
    RetAvatarPathLocked = 2856,
    RetRogueStatusNotMatch = 2901,
    RetRogueSelectBuffNotExist = 2902,
    RetRogueCoinNotEnough = 2903,
    RetRogueStaminaNotEnough = 2904,
    RetRogueAppraisalCountNotEnough = 2905,
    RetRoguePropAlreadyUsed = 2906,
    RetRogueRecordAlreadySaved = 2907,
    RetRogueRollBuffMaxCount = 2908,
    RetRoguePickAvatarInvalid = 2909,
    RetRogueQuestExpire = 2910,
    RetRogueQuestRewardAlready = 2911,
    RetRogueReviveCountNotEnough = 2912,
    RetRogueAreaInvalid = 2913,
    RetRogueScoreRewardPoolInvalid = 2914,
    RetRogueScoreRewardRowInvalid = 2915,
    RetRogueAeonLevelNotMeet = 2916,
    RetRogueAeonLevelRewardAlreadyTaken = 2917,
    RetRogueAeonConfigNotExist = 2918,
    RetRogueTrialAvatarInvalid = 2919,
    RetRogueHandbookRewardAlreadyTaken = 2920,
    RetRogueRoomTypeNotMatch = 2921,
    RetRogueShopGoodNotFound = 2922,
    RetRogueShopGoodAlreadyBought = 2923,
    RetRogueShopGoodAlreadyOwn = 2924,
    RetRogueShopMiracleNotExist = 2925,
    RetRogueShopNotExist = 2926,
    RetRogueShopCannotRefresh = 2927,
    RetRogueSelectBuffCertainMismatch = 2928,
    RetMissionEventConfigNotExist = 2951,
    RetMissionEventNotClient = 2952,
    RetMissionEventFinished = 2953,
    RetMissionEventDoing = 2954,
    RetHasChallengeMissionEvent = 2955,
    RetNotChallengeMissionEvent = 2956,
    RetGachaIdNotExist = 3001,
    RetGachaNumInvalid = 3002,
    RetGachaFirstGachaMustOne = 3003,
    RetGachaReqDuplicated = 3004,
    RetGachaNotInSchedule = 3005,
    RetGachaNewbieClose = 3006,
    RetGachaTodayLimited = 3007,
    RetGachaNotSupport = 3008,
    RetGachaCeilingNotEnough = 3009,
    RetGachaCeilingClose = 3010,
    RetNotInRaid = 3101,
    RetRaidDoing = 3102,
    RetNotProp = 3103,
    RetRaidIdNotMatch = 3104,
    RetRaidRestartNotMatch = 3105,
    RetRaidLimit = 3106,
    RetRaidAvatarListEmpty = 3107,
    RetRaidAvatarNotExist = 3108,
    RetChallengeRaidRewardAlready = 3109,
    RetChallengeRaidScoreNotReach = 3110,
    RetChallengeRaidNotOpen = 3111,
    RetRaidFinished = 3112,
    RetRaidWorldLevelNotLock = 3113,
    RetRaidCannotUseAssist = 3114,
    RetRaidAvatarNotMatch = 3115,
    RetRaidCanNotSave = 3116,
    RetRaidNoSave = 3117,
    RetActivityRaidNotOpen = 3118,
    RetRaidAvatarCaptainNotExist = 3119,
    RetRaidStoryLineNotMatch = 3120,
    RetTalkEventAlreadyTaken = 3151,
    RetNpcAlreadyMeet = 3152,
    RetNpcNotInConfig = 3153,
    RetDialogueGroupDismatch = 3154,
    RetDialogueEventInvalid = 3155,
    RetTalkEventTakeProtoNotMatch = 3156,
    RetTalkEventNotValid = 3157,
    RetExpeditionConfigNotExist = 3201,
    RetExpeditionRewardConfigNotExist = 3202,
    RetExpeditionNotUnlocked = 3203,
    RetExpeditionAlreadyAccepted = 3204,
    RetExpeditionRepeatedAvatar = 3205,
    RetAvatarAlreadyDispatched = 3206,
    RetExpeditionNotAccepted = 3207,
    RetExpeditionNotFinish = 3208,
    RetExpeditionAlreadyFinish = 3209,
    RetExpeditionTeamCountLimit = 3210,
    RetExpeditionAvatarNumNotMatch = 3211,
    RetExpeditionNotOpen = 3212,
    RetExpeditionFriendAvatarNotValid = 3213,
    RetExpeditionNotPublished = 3214,
    RetLoginActivityHasTaken = 3301,
    RetLoginActivityDaysLack = 3302,
    RetTrialActivityRewardAlreadyTake = 3303,
    RetTrialActivityStageNotFinish = 3304,
    RetMaterialSubmitActivityHasTaken = 3305,
    RetMaterialSubmitActivityMaterialNotSubmitted = 3306,
    RetMaterialSubmitActivityMaterialAlreadySubmitted = 3307,
    RetFantasticStoryActivityStoryError = 3308,
    RetFantasticStoryActivityStoryNotOpen = 3309,
    RetFantasticStoryActivityBattleError = 3310,
    RetFantasticStoryActivityBattleNotOpen = 3311,
    RetFantasticStoryActivityBattleAvatarError = 3312,
    RetFantasticStoryActivityBattleBuffError = 3313,
    RetFantasticStoryActivityPreBattleScoreNotEnough = 3314,
    RetTrialActivityAlreadyInTrialActivity = 3315,
    RetCommonActivityNotOpen = 3316,
    RetMessageConfigNotExist = 3501,
    RetMessageSectionNotTake = 3502,
    RetMessageGroupNotTake = 3503,
    RetMessageSectionIdNotMatch = 3504,
    RetMessageSectionCanNotFinish = 3505,
    RetMessageItemCanNotFinish = 3506,
    RetMessageItemRaidCanNotFinish = 3507,
    RetFriendAlreadyIsFriend = 3601,
    RetFriendIsNotFriend = 3602,
    RetFriendApplyExpire = 3603,
    RetFriendInBlacklist = 3604,
    RetFriendNotInBlacklist = 3605,
    RetFriendNumberLimit = 3606,
    RetFriendBlacklistNumberLimit = 3607,
    RetFriendDailyApplyLimit = 3608,
    RetFriendInHandleLimit = 3609,
    RetFriendApplyInCd = 3610,
    RetFriendRemarkNameFormatError = 3611,
    RetFriendPlayerNotFound = 3612,
    RetFriendInTargetBlacklist = 3613,
    RetFriendTargetNumberLimit = 3614,
    RetAssistQueryTooFast = 3615,
    RetAssistNotExist = 3616,
    RetAssistUsedAlready = 3617,
    RetFriendReportReasonFormatError = 3618,
    RetFriendReportSensitiveWords = 3619,
    RetAssistUsedTimesOver = 3620,
    RetAssistQuitAlready = 3621,
    RetAssistAvatarInLineup = 3622,
    RetAssistNoReward = 3623,
    RetFriendSearchNumLimit = 3624,
    RetFriendSearchInCd = 3625,
    RetFriendRemarkNameUtf8Error = 3626,
    RetFriendReportReasonUtf8Error = 3627,
    RetAssistSetAlready = 3628,
    RetFriendTargetForbidOtherApply = 3629,
    RetFriendMarkedCntMax = 3630,
    RetFriendMarkedAlready = 3631,
    RetFriendNotMarked = 3632,
    RetFriendChallengeLineupRecommendInCd = 3633,
    RetViewPlayerCardInCd = 3634,
    RetViewPlayerBattleRecordInCd = 3635,
    RetPlayerBoardHeadIconNotExist = 3701,
    RetPlayerBoardHeadIconLocked = 3702,
    RetPlayerBoardHeadIconAlreadyUnlocked = 3703,
    RetPlayerBoardDisplayAvatarNotExist = 3704,
    RetPlayerBoardDisplayAvatarExceedLimit = 3705,
    RetPlayerBoardDisplayRepeatedAvatar = 3706,
    RetPlayerBoardDisplayAvatarSamePos = 3707,
    RetPlayerBoardDisplayAvatarLocked = 3708,
    RetSignatureLengthExceedLimit = 3709,
    RetSignatureSensitiveWords = 3710,
    RetPlayerBoardAssistAvatarNotExist = 3712,
    RetPlayerBoardAssistAvatarLocked = 3713,
    RetSignatureUtf8Error = 3714,
    RetPlayerBoardAssistAvatarCntError = 3715,
    RetBattlePassTierNotValid = 3801,
    RetBattlePassLevelNotMeet = 3802,
    RetBattlePassRewardTakeAlready = 3803,
    RetBattlePassNotPremium = 3804,
    RetBattlePassNotDoing = 3805,
    RetBattlePassLevelInvalid = 3806,
    RetBattlePassNotUnlock = 3807,
    RetBattlePassNoReward = 3808,
    RetBattlePassQuestNotValid = 3809,
    RetBattlePassNotChooseOptional = 3810,
    RetBattlePassNotTakeReward = 3811,
    RetBattlePassOptionalNotValid = 3812,
    RetBattlePassBuyAlready = 3813,
    RetBattlePassNearEnd = 3814,
    RetMusicLocked = 3901,
    RetMusicNotExist = 3902,
    RetMusicUnlockFailed = 3903,
    RetPunkLordLackSummonTimes = 4001,
    RetPunkLordAttackingMonsterLimit = 4002,
    RetPunkLordMonsterNotExist = 4003,
    RetPunkLordMonsterAlreadyShared = 4004,
    RetPunkLordMonsterExpired = 4005,
    RetPunkLordSelfMonsterAttackLimit = 4006,
    RetPunkLordLackSupportTimes = 4007,
    RetPunkLordMonsterAlreadyKilled = 4008,
    RetPunkLordMonsterAttackerLimit = 4009,
    RetPunkLordWorldLevleNotValid = 4010,
    RetPunkLordRewardLevleNotExist = 4011,
    RetPunkLordPointNotMeet = 4012,
    RetPunkLordInAttacking = 4013,
    RetPunkLordOperationInCd = 4014,
    RetPunkLordRewardAlreadyTaken = 4015,
    RetPunkLordOverBonusRewardLimit = 4016,
    RetPunkLordNotInSchedule = 4017,
    RetPunkLordMonsterNotAttacked = 4018,
    RetPunkLordMonsterNotKilled = 4019,
    RetPunkLordMonsterKilledScoreAlreadyTake = 4020,
    RetPunkLordRewardLevleAlreadyTake = 4021,
    RetDailyActiveLevelInvalid = 4101,
    RetDailyActiveLevelRewardAlreadyTaken = 4102,
    RetDailyActiveLevelApNotEnough = 4103,
    RetDailyMeetPam = 4201,
    RetReplayIdNotMatch = 4251,
    RetReplayReqNotValid = 4252,
    RetFightActivityDifficultyLevelNotPassed = 4301,
    RetFightActivityDifficultyLevelRewardAlreadyTake = 4302,
    RetFightActivityStageNotOpen = 4303,
    RetFightActivityLevelNotUnlock = 4304,
    RetTrainVisitorVisitorNotExist = 4351,
    RetTrainVisitorBehaviorNotExist = 4352,
    RetTrainVisitorBehaviorFinished = 4353,
    RetTrainVisitorAllBehaviorRewardTaken = 4354,
    RetTrainVisitorGetOnMissionNotFinish = 4355,
    RetTrainVisitorNotGetOff = 4356,
    RetTextJoinUnknowIsOverride = 4401,
    RetTextJoinIdNotExist = 4402,
    RetTextJoinCanNotOverride = 4403,
    RetTextJoinItemIdError = 4404,
    RetTextJoinSensitiveCheckError = 4405,
    RetTextJoinMustOverride = 4406,
    RetTextJoinTextEmpty = 4407,
    RetTextJoinTextFormatError = 4408,
    RetTextJoinTextUtf8Error = 4409,
    RetTextJoinBatchReqIdRepeat = 4410,
    RetTextJoinTypeNotSupportBatchReq = 4411,
    RetTextJoinAvatarIdNotExist = 4412,
    RetTextJoinUnknowType = 4413,
    RetPamMissionMissionIdError = 4451,
    RetPamMissionMissionExpire = 4452,
    RetChatTypeNotExist = 4501,
    RetMsgTypeNotExist = 4502,
    RetChatNoTargetUid = 4503,
    RetChatMsgEmpty = 4504,
    RetChatMsgExceedLimit = 4505,
    RetChatMsgSensitiveCheckError = 4506,
    RetChatMsgUtf8Error = 4507,
    RetChatForbidSwitchOpen = 4508,
    RetChatForbid = 4509,
    RetChatMsgIncludeSpecialStr = 4510,
    RetChatMsgEmojiNotExist = 4511,
    RetChatMsgEmojiGenderNotMatch = 4512,
    RetChatMsgEmojiNotMarked = 4513,
    RetChatMsgEmojiAlreadyMarked = 4514,
    RetChatMsgEmojiMarkedMaxLimit = 4515,
    RetBoxingClubChallengeNotOpen = 4601,
    RetMuseumNotOpen = 4651,
    RetMuseumTurnCntNotMatch = 4652,
    RetMuseumPhaseNotReach = 4653,
    RetMuseumUnknowStuff = 4654,
    RetMuseumUnknowArea = 4655,
    RetMuseumUnknowPos = 4656,
    RetMuseumStuffAlreadyInArea = 4657,
    RetMuseumStuffNotInArea = 4658,
    RetMuseumGetNpcRepeat = 4659,
    RetMuseumGetNpcUnlock = 4660,
    RetMuseumGetNpcNotEnough = 4661,
    RetMuseumChangeStuffAreaError = 4662,
    RetMuseumNotInit = 4663,
    RetMuseumEventError = 4664,
    RetMuseumUnknowChooseEventId = 4665,
    RetMuseumEventOrderNotMatch = 4666,
    RetMuseumEventPhaseNotUnlock = 4667,
    RetMuseumEventMissionNotFound = 4668,
    RetMuseumAreaLevelUpAlready = 4669,
    RetMuseumStuffAlreadyUsed = 4670,
    RetMuseumEventRoundNotUnlock = 4671,
    RetMuseumStuffInArea = 4672,
    RetMuseumStuffDispatch = 4673,
    RetMuseumIsEnd = 4674,
    RetMuseumStuffLeaving = 4675,
    RetMuseumEventMissionNotFinish = 4678,
    RetMuseumCollectRewardNotExist = 4679,
    RetMuseumCollectRewardAlreadyTaken = 4680,
    RetMuseumAcceptMissionMaxLimit = 4681,
    RetRogueChallengeNotOpen = 4701,
    RetRogueChallengeAssisRefreshLimit = 4702,
    RetAlleyNotInit = 4721,
    RetAlleyNotOpen = 4722,
    RetAlleyMapNotExist = 4724,
    RetAlleyEmptyPosList = 4725,
    RetAlleyLinePosInvalid = 4726,
    RetAlleyShopNotUnlock = 4727,
    RetAlleyDepotFull = 4728,
    RetAlleyShopNotInclude = 4729,
    RetAlleyEventNotUnlock = 4730,
    RetAlleyEventNotRefresh = 4731,
    RetAlleyEventStateDoing = 4732,
    RetAlleyEventStateFinish = 4733,
    RetAlleyEventError = 4734,
    RetAlleyRewardLevelError = 4735,
    RetAlleyRewardPrestigeNotEnough = 4736,
    RetAlleyShipEmpty = 4737,
    RetAlleyShipIdDismatch = 4738,
    RetAlleyShipNotExist = 4739,
    RetAlleyShipNotUnlock = 4740,
    RetAlleyGoodsNotExist = 4741,
    RetAlleyGoodsNotUnlock = 4742,
    RetAlleyProfitNotPositive = 4743,
    RetAlleySpecialOrderDismatch = 4744,
    RetAlleyOrderGoodsOverLimit = 4745,
    RetAlleySpecialOrderConditionNotMeet = 4746,
    RetAlleyDepotSizeOverLimit = 4747,
    RetAlleyGoodsNotEnough = 4748,
    RetAlleyOrderIndexInvalid = 4749,
    RetAlleyRewardAlreadyTake = 4750,
    RetAlleyRewardNotExist = 4751,
    RetAlleyMainMissionNotDoing = 4752,
    RetAlleyCriticalEventNotFinish = 4753,
    RetAlleyShopGoodsNotValid = 4754,
    RetAlleySlashNotOpen = 4755,
    RetAlleyPlacingAnchorInvalid = 4756,
    RetAlleyPlacingGoodsIndexInvalid = 4757,
    RetAlleySaveMapTooQuick = 4758,
    RetAlleyMapNotLink = 4759,
    RetAlleyFundsNotLowerBase = 4760,
    RetAlleyEventNotFinish = 4761,
    RetAlleyNormalOrderNotMeet = 4762,
    RetPlayerReturnNotOpen = 4801,
    RetPlayerReturnIsSigned = 4802,
    RetPlayerReturnPointNotEnough = 4803,
    RetPlayerReturnConditionInvalid = 4804,
    RetPlayerReturnHasSigned = 4805,
    RetPlayerReturnRewardTaken = 4806,
    RetAetherDivideNoLineup = 4851,
    RetAetherDivideLineupInvalid = 4852,
    RetChatBubbleIdError = 4901,
    RetChatBubbleIdNotUnlock = 4902,
    RetPhoneThemeIdError = 4903,
    RetPhoneThemeIdNotUnlock = 4904,
    RetChatBubbleSelectIsCurrent = 4905,
    RetPhoneThemeSelectIsCurrent = 4906,
    RetChessRogueConfigNotFound = 4951,
    RetChessRogueConfigInvalid = 4952,
    RetChessRogueNoValidRoom = 4963,
    RetChessRogueNoCellInfo = 4964,
    RetChessRogueCellNotFinish = 4965,
    RetChessRogueCellIsLocked = 4966,
    RetChessRogueScheduleNotMatch = 4967,
    RetChessRogueStatusFail = 4968,
    RetChessRogueAreaNotExist = 4969,
    RetChessRogueLineupFail = 4970,
    RetChessRogueAeonFail = 4980,
    RetChessRogueEnterCellFail = 4981,
    RetChessRogueRollDiceFail = 4982,
    RetChessRogueDiceStatusFail = 4983,
    RetChessRogueDiceCntNotFull = 4984,
    RetChessRogueUnlock = 4985,
    RetChessRoguePickAvatarFail = 4986,
    RetChessRogueAvatarInvalid = 4987,
    RetChessRogueCellCanNotSelect = 4988,
    RetChessRogueDiceConfirmed = 4989,
    RetChessRogueNousDiceNotMatch = 4990,
    RetChessRogueNousDiceRarityFail = 4991,
    RetChessRogueNousDiceSurfaceDuplicate = 4992,
    RetChessRogueNotInRogue = 4993,
    RetChessRogueNousDiceBranchLimit = 4994,
    RetHeliobusNotOpen = 5101,
    RetHeliobusSnsPostNotUnlock = 5102,
    RetHeliobusSnsAlreadyRead = 5103,
    RetHeliobusSnsAlreadyLiked = 5104,
    RetHeliobusSnsAlreadyCommented = 5105,
    RetHeliobusSnsInMission = 5106,
    RetHeliobusSnsAlreadyPosted = 5107,
    RetHeliobusSnsNotDoingMission = 5108,
    RetHeliobusRewardLevelMax = 5109,
    RetHeliobusIncomeNotEnough = 5110,
    RetHeliobusSnsCommentNotUnlock = 5111,
    RetHeliobusChallengeNotUnlock = 5112,
    RetHeliobusChallengeIdError = 5113,
    RetHeliobusSkillNotUnlock = 5114,
    RetHeliobusAcceptPostMissionFail = 5115,
    RetHeliobusSkillNotSelected = 5116,
    RetHeliobusPlaneTypeInvalid = 5117,
    RetReddotParamInvalid = 5151,
    RetReddotActivityNotOpen = 5152,
    RetRogueEndlessActivityConfigError = 5201,
    RetRogueEndlessActivityNotOpen = 5202,
    RetRogueEndlessActivityOverBonusRewardLimit = 5203,
    RetRogueEndlessActivityScoreNotMeet = 5204,
    RetRogueEndlessActivityRewardLevleAlreadyTake = 5205,
    RetHeartDialScriptNotFound = 5251,
    RetHeartDialScriptEmotionTheSame = 5252,
    RetHeartDialScriptStepNotNormal = 5253,
    RetHeartDialScriptConditionNotMatch = 5254,
    RetHeartDialScriptSubmitItemNumNotMatch = 5255,
    RetHeartDialScriptSubmitItemIdNotMatch = 5256,
    RetHeartDialDialogueNotFound = 5257,
    RetHeartDialDialogueAlreadyPerformed = 5258,
    RetHeartDialNpcNotFound = 5259,
    RetHeartDialTraceConfigNotFound = 5260,
    RetHeartDialFloorTraceExist = 5261,
    RetHeartDialTraceFloorNotMatch = 5262,
    RetTravelBrochureConfigError = 5301,
    RetTravelBrochureParamInvalid = 5302,
    RetTravelBrochureLocked = 5303,
    RetTravelBrochureCannotOperate = 5304,
    RetTravelBrochureWorldIdNotMatch = 5305,
    RetTravelBrochureHasNoWorldBook = 5306,
    RetTravelBrochurePageFull = 5307,
    RetMapRotationNotInRegion = 5351,
    RetMapRotationRotaterAlreadyDeployed = 5352,
    RetMapRotationEnergyNotEnough = 5353,
    RetMapRotationEntityNotOnCurPose = 5354,
    RetMapRotationRotaterNotDeployed = 5355,
    RetMapRotationPoseRotaterMismatch = 5356,
    RetMapRotationRotaterNotRemovable = 5357,
    RetMapRotationRotaterDisposable = 5358,
    RetSpaceZooActivityCatNotFound = 5401,
    RetSpaceZooActivityCatParamInvalid = 5402,
    RetSpaceZooActivityCatItemNotEnough = 5403,
    RetSpaceZooActivityCatBagFull = 5404,
    RetSpaceZooActivityCatNotToMutate = 5405,
    RetSpaceZooActivityCatStateError = 5406,
    RetSpaceZooActivityCatCatteryLocked = 5407,
    RetSpaceZooActivityCatOutNow = 5408,
    RetSpaceZooActivityCatConfigNotFound = 5409,
    RetSpaceZooActivityCatFeatureNotFound = 5410,
    RetSpaceZooActivityCatAddCatError = 5411,
    RetSpaceZooActivityCatMoneyNotEnough = 5412,
    RetSpaceZooActivityCatCondNotMatch = 5413,
    RetStrongChallengeActivityStageCfgMiss = 5501,
    RetStrongChallengeActivityStageNotOpen = 5502,
    RetStrongChallengeActivityBuffError = 5503,
    RetRollShopNotFound = 5551,
    RetRollShopGroupEmpty = 5552,
    RetRollShopEmpty = 5553,
    RetRollShopGachaReqDuplicated = 5554,
    RetRollShopRandomError = 5555,
    RetRollShopGroupTypeNotFound = 5556,
    RetRollShopHasStoredRewardAlready = 5557,
    RetRollShopNoStoredReward = 5558,
    RetRollShopNotInValidScene = 5559,
    RetRollShopInvalidRollShopType = 5560,
    RetActivityRaidCollectionPrevNotFinish = 5601,
    RetActivityRaidCollectionGroupEnterNextUnavailable = 5602,
    RetActivityRaidCollectionIsLast = 5603,
    RetActivityRaidCollectionIsNotNext = 5604,
    RetOfferingNotUnlock = 5651,
    RetOfferingLevelNotUnlock = 5652,
    RetOfferingReachMaxLevel = 5653,
    RetOfferingItemNotEnough = 5654,
    RetOfferingLongtailNotOpen = 5655,
    RetOfferingRewardCondition = 5656,
    RetDrinkMakerChatInvalid = 5701,
    RetDrinkMakerParamInvalid = 5702,
    RetDrinkMakerParamNotUnlock = 5703,
    RetDrinkMakerConfigNotFound = 5704,
    RetDrinkMakerNotLastChat = 5705,
    RetDrinkMakerDayAndFreePhaseNotOpen = 5706,
    RetMonopolyNotOpen = 5751,
    RetMonopolyConfigError = 5752,
    RetMonopolyDiceNotEnough = 5753,
    RetMonopolyCurCellNotFinish = 5754,
    RetMonopolyCoinNotEnough = 5755,
    RetMonopolyCellWaitPending = 5756,
    RetMonopolyCellStateError = 5757,
    RetMonopolyCellContentError = 5758,
    RetMonopolyItemNotEnough = 5759,
    RetMonopolyCellContentCannotGiveup = 5760,
    RetMonopolyAssetLevelInvalid = 5761,
    RetMonopolyTurnNotFinish = 5762,
    RetMonopolyGuideNotFinish = 5763,
    RetMonopolyRaffleRewardReissued = 5764,
    RetMonopolyNoGameActive = 5771,
    RetMonopolyGameRatioNotIncreasable = 5772,
    RetMonopolyGameRatioMax = 5773,
    RetMonopolyGameTargetRatioInvalid = 5774,
    RetMonopolyGameBingoFlipPosInvalid = 5775,
    RetMonopolyGameGuessAlreadyChoose = 5776,
    RetMonopolyGameGuessChooseInvalid = 5777,
    RetMonopolyGameGuessInformationAlreadyBought = 5778,
    RetMonopolyGameRaiseRatioNotUnlock = 5779,
    RetMonopolyFriendNotSynced = 5785,
    RetMonopolyGetFriendRankingListInCd = 5786,
    RetMonopolyLikeTargetNotFriend = 5787,
    RetMonopolyDailyAlreadyLiked = 5788,
    RetMonopolySocialEventStatusNotMatch = 5789,
    RetMonopolySocialEventServerCacheNotExist = 5790,
    RetMonopolyActivityIdNotMatch = 5791,
    RetMonopolyRafflePoolNotExist = 5792,
    RetMonopolyRafflePoolTimeNotMatch = 5793,
    RetMonopolyRafflePoolPhaseNotMeet = 5794,
    RetMonopolyRafflePoolShowTimeNotMeet = 5795,
    RetMonopolyRaffleTicketNotFound = 5796,
    RetMonopolyRaffleTicketTimeNotMeet = 5797,
    RetMonopolyRaffleTicketRewardAlreadyTaken = 5798,
    RetMonopolyRafflePoolNotInRaffleTime = 5799,
    RetMonopolyMbtiReportRewardAlreadyTaken = 5800,
    RetEvolveBuildLevelGaming = 5801,
    RetEveolveBuildLevelBanRandom = 5802,
    RetEvolveBuildFirstRewardAlreadyTaken = 5803,
    RetEvolveBuildLevelUnfinish = 5804,
    RetEvolveBuildShopAbilityMaxLevel = 5805,
    RetEvolveBuildShopAbilityMinLevel = 5806,
    RetEvolveBuildShopAbilityNotGet = 5807,
    RetEvolveBuildLevelLock = 5808,
    RetEvolveBuildExpNotEnough = 5809,
    RetEvolveBuildShopAbilityLevelError = 5810,
    RetEvolveBuildActivityNotOpen = 5811,
    RetEvolveBuildShopAbilityEmpty = 5812,
    RetEvolveBuildLevelNotStart = 5813,
    RetEvolveBuildShopLock = 5814,
    RetEvolveBuildRewardLock = 5815,
    RetEvolveBuildRewardLevelMax = 5816,
    RetEvolveBuildRewardAlreadyAllTaken = 5717,
    RetClockParkConfigError = 5851,
    RetClockParkEffectError = 5852,
    RetClockParkScriptAlreadyUnlock = 5853,
    RetClockParkScriptUnlockConditionNotMeet = 5854,
    RetClockParkTalentAlreadyUnlock = 5855,
    RetClockParkScriptLocked = 5856,
    RetClockParkHasOngoingScript = 5857,
    RetClockParkNoOngoingScript = 5858,
    RetClockParkDicePlacementError = 5859,
    RetClockParkMismatchStatus = 5860,
    RetClockParkNoBuff = 5861,
    RetClockParkSlotMachineGachaReqDuplicated = 5862,
    RetClockParkSlotMachineCostNotEnough = 5863,
    RetClockParkSlotMachineGachaCntExceedLimit = 5864,
    RetClockParkNotOpen = 5865,
    RetTournRogueStatusMismatch = 5901,
    RetMagicRogueStatusMismatch = 5902,
    RetAutoMountMagicUnitNoMatchedMagicScepter = 5903,
    RetMagicUnitWorkbenchReforgeGenFail = 5904,
    RetMatchAlreadyInMatch = 6201,
    RetMatchNotInMatch = 6202,
    RetMatchPlayNotOpen = 6203,
    RetCrossStateError = 6204,
    RetMatchVersionNotEqual = 6205,
    RetMatchPlayerNotInLobbyRoom = 6206,
    RetLobbyStateNotMatch = 6207,
    RetLobbyRoomNotExist = 6208,
    RetLobbyRoomPalyerFull = 6209,
    RetLobbyRoomPalyerNotReady = 6210,
    RetLobbyRoomPalyerFighting = 6211,
    RetFightRoomNotExist = 6250,
    RetFightMatch3PlayerStateErr = 6251,
    RetFightMatch3RoomStateErr = 6252,
    RetCrossStateTimeOut = 6253,
    RetSwordTrainingNoActiveGame = 6301,
    RetSwordTrainingNoPendingActionMatch = 6302,
    RetSwordTrainingPartnerAbilityInvalid = 6303,
    RetSwordTrainingSkillAlreadyLearned = 6304,
    RetSwordTrainingConditionNotMeet = 6305,
    RetSwordTrainingParentSkillNotLearned = 6306,
    RetSwordTrainingSkillTypeNotUnlock = 6307,
    RetSwordTrainingGameAlreadyExist = 6308,
    RetSwordTrainingEndingHintNotMatch = 6309,
    RetSwordTrainingStorylineConfigNotFound = 6310,
    RetSwordTrainingStoryConfigNotFound = 6311,
    RetSwordTrainingUnlockNotFinish = 6312,
    RetSwordTrainingOptionMismatch = 6313,
    RetSwordTrainingRestoreWithoutExamFailed = 6314,
    RetSwordTrainingNoRestoreGameAvailable = 6315,
    RetSwordTrainingEndingStoryNotMatch = 6316,
    RetSwordTrainingEndingNotFinish = 6317,
    RetSwordTrainingEndingRewardTaken = 6318,
    RetSwordTrainingCombatRankNotChange = 6319,
    RetSwordTrainingDirectBattleDisable = 6320,
    RetFightFestPhaseNotMatch = 6351,
    RetFightFestScoreRaceAlreadyFinish = 6352,
    RetFightFestChallengeLocked = 6353,
    RetFightFestCoachSkillLocked = 6354,
    RetFightFestCoachSkillEquipTypeExisted = 6355,
    RetFightFestScoreRaceMissionDoind = 6356,
    RetFightFestCoachSkillNoEquip = 6357,
    RetPetNotExist = 6401,
    RetPetAlreadySummoned = 6402,
    RetPetNotSummoned = 6403,
    RetMusicRhythmLevelTimeTooShort = 6451,
    RetMusicRhythmNotInLevel = 6452,
    RetMusicRhythmPreDifficultyNotPass = 6453,
    RetMusicRhythmSongLimited = 6454,
    RetMusicRhythmSongLocked = 6455,
    RetMusicRhythmTrackLocked = 6456,
    RetMusicRhythmLevelNotUnlock = 6457,
    RetMusicRhythmSongSfxLocked = 6458,
    RetTrainPartyCoinNotEnough = 6501,
    RetTrainPartyDiyTagNotMatch = 6502,
    RetTrainPartyUseCardMobilityNotEnough = 6503,
    RetTrainPartyAreaUnlockCoinNotEnough = 6504,
}
impl Bcnpbgkklao {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RetSucc => "RET_SUCC",
            Self::RetFail => "RET_FAIL",
            Self::RetServerInternalError => "RET_SERVER_INTERNAL_ERROR",
            Self::RetTimeout => "RET_TIMEOUT",
            Self::RetRepeatedReq => "RET_REPEATED_REQ",
            Self::RetReqParaInvalid => "RET_REQ_PARA_INVALID",
            Self::RetPlayerDataError => "RET_PLAYER_DATA_ERROR",
            Self::RetPlayerClientPaused => "RET_PLAYER_CLIENT_PAUSED",
            Self::RetFuncCheckFailed => "RET_FUNC_CHECK_FAILED",
            Self::RetFeatureSwitchClosed => "RET_FEATURE_SWITCH_CLOSED",
            Self::RetFreqOverLimit => "RET_FREQ_OVER_LIMIT",
            Self::RetSystemBusy => "RET_SYSTEM_BUSY",
            Self::RetPlayerNotOnline => "RET_PLAYER_NOT_ONLINE",
            Self::RetOperationInCd => "RET_OPERATION_IN_CD",
            Self::RetRepeateLogin => "RET_REPEATE_LOGIN",
            Self::RetRetryLogin => "RET_RETRY_LOGIN",
            Self::RetWaitLogin => "RET_WAIT_LOGIN",
            Self::RetNotInWhiteList => "RET_NOT_IN_WHITE_LIST",
            Self::RetInBlackList => "RET_IN_BLACK_LIST",
            Self::RetAccountVerifyError => "RET_ACCOUNT_VERIFY_ERROR",
            Self::RetAccountParaError => "RET_ACCOUNT_PARA_ERROR",
            Self::RetAntiAddictLogin => "RET_ANTI_ADDICT_LOGIN",
            Self::RetCheckSumError => "RET_CHECK_SUM_ERROR",
            Self::RetReachMaxPlayerNum => "RET_REACH_MAX_PLAYER_NUM",
            Self::RetAlreadyRegistered => "RET_ALREADY_REGISTERED",
            Self::RetGenderError => "RET_GENDER_ERROR",
            Self::SetNicknameRetCallbackProcessing => {
                "SET_NICKNAME_RET_CALLBACK_PROCESSING"
            }
            Self::RetInGmBindAccess => "RET_IN_GM_BIND_ACCESS",
            Self::RetQuestRewardAlreadyTaken => "RET_QUEST_REWARD_ALREADY_TAKEN",
            Self::RetQuestNotAccept => "RET_QUEST_NOT_ACCEPT",
            Self::RetQuestNotFinish => "RET_QUEST_NOT_FINISH",
            Self::RetQuestStatusError => "RET_QUEST_STATUS_ERROR",
            Self::RetAchievementLevelNotReach => "RET_ACHIEVEMENT_LEVEL_NOT_REACH",
            Self::RetAchievementLevelAlreadyTaken => {
                "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN"
            }
            Self::RetAvatarNotExist => "RET_AVATAR_NOT_EXIST",
            Self::RetAvatarResExpNotEnough => "RET_AVATAR_RES_EXP_NOT_ENOUGH",
            Self::RetAvatarExpReachPromotionLimit => {
                "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT"
            }
            Self::RetAvatarReachMaxPromotion => "RET_AVATAR_REACH_MAX_PROMOTION",
            Self::RetSkilltreeConfigNotExist => "RET_SKILLTREE_CONFIG_NOT_EXIST",
            Self::RetSkilltreeAlreadyUnlock => "RET_SKILLTREE_ALREADY_UNLOCK",
            Self::RetSkilltreePreLocked => "RET_SKILLTREE_PRE_LOCKED",
            Self::RetSkilltreeLevelNotMeet => "RET_SKILLTREE_LEVEL_NOT_MEET",
            Self::RetSkilltreeRankNotMeet => "RET_SKILLTREE_RANK_NOT_MEET",
            Self::RetAvatarDressNoEquipment => "RET_AVATAR_DRESS_NO_EQUIPMENT",
            Self::RetAvatarExpItemNotExist => "RET_AVATAR_EXP_ITEM_NOT_EXIST",
            Self::RetSkilltreePointLocked => "RET_SKILLTREE_POINT_LOCKED",
            Self::RetSkilltreePointLevelUpgradeNotMatch => {
                "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH"
            }
            Self::RetSkilltreePointLevelReachMax => "RET_SKILLTREE_POINT_LEVEL_REACH_MAX",
            Self::RetWorldLevelNotMeet => "RET_WORLD_LEVEL_NOT_MEET",
            Self::RetPlayerLevelNotMeet => "RET_PLAYER_LEVEL_NOT_MEET",
            Self::RetAvatarRankNotMatch => "RET_AVATAR_RANK_NOT_MATCH",
            Self::RetAvatarRankReachMax => "RET_AVATAR_RANK_REACH_MAX",
            Self::RetHeroBasicTypeNotMatch => "RET_HERO_BASIC_TYPE_NOT_MATCH",
            Self::RetAvatarPromotionNotMeet => "RET_AVATAR_PROMOTION_NOT_MEET",
            Self::RetPromotionRewardConfigNotExist => {
                "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetPromotionRewardAlreadyTaken => "RET_PROMOTION_REWARD_ALREADY_TAKEN",
            Self::RetAvatarSkinItemNotExist => "RET_AVATAR_SKIN_ITEM_NOT_EXIST",
            Self::RetAvatarSkinAlreadyDressed => "RET_AVATAR_SKIN_ALREADY_DRESSED",
            Self::RetAvatarNotDressSkin => "RET_AVATAR_NOT_DRESS_SKIN",
            Self::RetAvatarSkinNotMatchAvatar => "RET_AVATAR_SKIN_NOT_MATCH_AVATAR",
            Self::RetItemNotExist => "RET_ITEM_NOT_EXIST",
            Self::RetItemCostNotEnough => "RET_ITEM_COST_NOT_ENOUGH",
            Self::RetItemCostTooMuch => "RET_ITEM_COST_TOO_MUCH",
            Self::RetItemNoCost => "RET_ITEM_NO_COST",
            Self::RetItemNotEnough => "RET_ITEM_NOT_ENOUGH",
            Self::RetItemInvalid => "RET_ITEM_INVALID",
            Self::RetItemConfigNotExist => "RET_ITEM_CONFIG_NOT_EXIST",
            Self::RetScoinNotEnough => "RET_SCOIN_NOT_ENOUGH",
            Self::RetItemRewardExceedLimit => "RET_ITEM_REWARD_EXCEED_LIMIT",
            Self::RetItemInvalidUse => "RET_ITEM_INVALID_USE",
            Self::RetItemUseConfigNotExist => "RET_ITEM_USE_CONFIG_NOT_EXIST",
            Self::RetRewardConfigNotExist => "RET_REWARD_CONFIG_NOT_EXIST",
            Self::RetItemExceedLimit => "RET_ITEM_EXCEED_LIMIT",
            Self::RetItemCountInvalid => "RET_ITEM_COUNT_INVALID",
            Self::RetItemUseTargetTypeInvalid => "RET_ITEM_USE_TARGET_TYPE_INVALID",
            Self::RetItemUseSatietyFull => "RET_ITEM_USE_SATIETY_FULL",
            Self::RetItemComposeNotExist => "RET_ITEM_COMPOSE_NOT_EXIST",
            Self::RetRelicComposeNotExist => "RET_RELIC_COMPOSE_NOT_EXIST",
            Self::RetItemCanNotSell => "RET_ITEM_CAN_NOT_SELL",
            Self::RetItemSellExceddLimit => "RET_ITEM_SELL_EXCEDD_LIMIT",
            Self::RetItemNotInCostList => "RET_ITEM_NOT_IN_COST_LIST",
            Self::RetItemSpecialCostNotEnough => "RET_ITEM_SPECIAL_COST_NOT_ENOUGH",
            Self::RetItemSpecialCostTooMuch => "RET_ITEM_SPECIAL_COST_TOO_MUCH",
            Self::RetItemFormulaNotExist => "RET_ITEM_FORMULA_NOT_EXIST",
            Self::RetItemAutoGiftOptionalNotExist => {
                "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST"
            }
            Self::RetRelicComposeRelicInvalid => "RET_RELIC_COMPOSE_RELIC_INVALID",
            Self::RetRelicComposeMainAffixIdInvalid => {
                "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID"
            }
            Self::RetRelicComposeWrongFormulaType => {
                "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE"
            }
            Self::RetRelicComposeRelicNotExist => "RET_RELIC_COMPOSE_RELIC_NOT_EXIST",
            Self::RetRelicComposeBlackGoldCountInvalid => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID"
            }
            Self::RetRelicComposeBlackGoldNotNeed => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED"
            }
            Self::RetMonthCardCannotUse => "RET_MONTH_CARD_CANNOT_USE",
            Self::RetItemRewardExceedDisappear => "RET_ITEM_REWARD_EXCEED_DISAPPEAR",
            Self::RetItemNeedRecycle => "RET_ITEM_NEED_RECYCLE",
            Self::RetItemComposeExceedLimit => "RET_ITEM_COMPOSE_EXCEED_LIMIT",
            Self::RetItemCanNotDestroy => "RET_ITEM_CAN_NOT_DESTROY",
            Self::RetItemAlreadyMark => "RET_ITEM_ALREADY_MARK",
            Self::RetItemMarkExceedLimit => "RET_ITEM_MARK_EXCEED_LIMIT",
            Self::RetItemNotMark => "RET_ITEM_NOT_MARK",
            Self::RetItenTurnFoodNotSet => "RET_ITEN_TURN_FOOD_NOT_SET",
            Self::RetItemTurnFoodAlreadySet => "RET_ITEM_TURN_FOOD_ALREADY_SET",
            Self::RetItemTurnFoodConsumeTypeError => {
                "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR"
            }
            Self::RetItemTurnFoodSwitchAlreadyOpen => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN"
            }
            Self::RetItemTurnFoodSwitchAlreadyClose => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE"
            }
            Self::RetHcoinExchangeTooMuch => "RET_HCOIN_EXCHANGE_TOO_MUCH",
            Self::RetItemTurnFoodSceneTypeError => "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR",
            Self::RetEquipmentAlreadyDressed => "RET_EQUIPMENT_ALREADY_DRESSED",
            Self::RetEquipmentNotExist => "RET_EQUIPMENT_NOT_EXIST",
            Self::RetEquipmentReachLevelLimit => "RET_EQUIPMENT_REACH_LEVEL_LIMIT",
            Self::RetEquipmentConsumeSelf => "RET_EQUIPMENT_CONSUME_SELF",
            Self::RetEquipmentAlreadyLocked => "RET_EQUIPMENT_ALREADY_LOCKED",
            Self::RetEquipmentAlreadyUnlocked => "RET_EQUIPMENT_ALREADY_UNLOCKED",
            Self::RetEquipmentLocked => "RET_EQUIPMENT_LOCKED",
            Self::RetEquipmentSelectNumOverLimit => "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT",
            Self::RetEquipmentRankUpMustConsumeSameTid => {
                "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID"
            }
            Self::RetEquipmentPromotionReachMax => "RET_EQUIPMENT_PROMOTION_REACH_MAX",
            Self::RetEquipmentRankUpReachMax => "RET_EQUIPMENT_RANK_UP_REACH_MAX",
            Self::RetEquipmentLevelReachMax => "RET_EQUIPMENT_LEVEL_REACH_MAX",
            Self::RetEquipmentExceedLimit => "RET_EQUIPMENT_EXCEED_LIMIT",
            Self::RetRelicNotExist => "RET_RELIC_NOT_EXIST",
            Self::RetRelicReachLevelLimit => "RET_RELIC_REACH_LEVEL_LIMIT",
            Self::RetRelicConsumeSelf => "RET_RELIC_CONSUME_SELF",
            Self::RetRelicAlreadyDressed => "RET_RELIC_ALREADY_DRESSED",
            Self::RetRelicLocked => "RET_RELIC_LOCKED",
            Self::RetRelicAlreadyLocked => "RET_RELIC_ALREADY_LOCKED",
            Self::RetRelicAlreadyUnlocked => "RET_RELIC_ALREADY_UNLOCKED",
            Self::RetRelicLevelIsNotZero => "RET_RELIC_LEVEL_IS_NOT_ZERO",
            Self::RetUniqueIdRepeated => "RET_UNIQUE_ID_REPEATED",
            Self::RetEquipmentLevelNotMeet => "RET_EQUIPMENT_LEVEL_NOT_MEET",
            Self::RetEquipmentItemNotInCostList => "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST",
            Self::RetEquipmentLevelGreaterThanOne => {
                "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE"
            }
            Self::RetEquipmentAlreadyRanked => "RET_EQUIPMENT_ALREADY_RANKED",
            Self::RetRelicExceedLimit => "RET_RELIC_EXCEED_LIMIT",
            Self::RetRelicAlreadyDiscarded => "RET_RELIC_ALREADY_DISCARDED",
            Self::RetRelicAlreadyUndiscarded => "RET_RELIC_ALREADY_UNDISCARDED",
            Self::RetEquipmentBatchLockTooFast => "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST",
            Self::RetRelicFilterPlanSlotEmpty => "RET_RELIC_FILTER_PLAN_SLOT_EMPTY",
            Self::RetRelicFilterPlanNumExceedLimit => {
                "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT"
            }
            Self::RetRelicFilterPlanNameUtf8Error => {
                "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR"
            }
            Self::RetRelicFilterPlanNameFormatError => {
                "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR"
            }
            Self::RetRelicFilterPlanNoChange => "RET_RELIC_FILTER_PLAN_NO_CHANGE",
            Self::RetLineupInvalidIndex => "RET_LINEUP_INVALID_INDEX",
            Self::RetLineupInvalidMemberPos => "RET_LINEUP_INVALID_MEMBER_POS",
            Self::RetLineupSwapNotExist => "RET_LINEUP_SWAP_NOT_EXIST",
            Self::RetLineupAvatarAlreadyIn => "RET_LINEUP_AVATAR_ALREADY_IN",
            Self::RetLineupCreateAvatarError => "RET_LINEUP_CREATE_AVATAR_ERROR",
            Self::RetLineupAvatarInitError => "RET_LINEUP_AVATAR_INIT_ERROR",
            Self::RetLineupNotExist => "RET_LINEUP_NOT_EXIST",
            Self::RetLineupOnlyOneMember => "RET_LINEUP_ONLY_ONE_MEMBER",
            Self::RetLineupSameLeaderSlot => "RET_LINEUP_SAME_LEADER_SLOT",
            Self::RetLineupNoLeaderSelect => "RET_LINEUP_NO_LEADER_SELECT",
            Self::RetLineupSwapSameSlot => "RET_LINEUP_SWAP_SAME_SLOT",
            Self::RetLineupAvatarNotExist => "RET_LINEUP_AVATAR_NOT_EXIST",
            Self::RetLineupTrialAvatarCanNotQuit => {
                "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT"
            }
            Self::RetLineupVirtualLineupPlaneNotMatch => {
                "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH"
            }
            Self::RetLineupNotValidLeader => "RET_LINEUP_NOT_VALID_LEADER",
            Self::RetLineupSameIndex => "RET_LINEUP_SAME_INDEX",
            Self::RetLineupIsEmpty => "RET_LINEUP_IS_EMPTY",
            Self::RetLineupNameFormatError => "RET_LINEUP_NAME_FORMAT_ERROR",
            Self::RetLineupTypeNotMatch => "RET_LINEUP_TYPE_NOT_MATCH",
            Self::RetLineupReplaceAllFailed => "RET_LINEUP_REPLACE_ALL_FAILED",
            Self::RetLineupNotAllowEdit => "RET_LINEUP_NOT_ALLOW_EDIT",
            Self::RetLineupAvatarIsAlive => "RET_LINEUP_AVATAR_IS_ALIVE",
            Self::RetLineupAssistHasOnlyMember => "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER",
            Self::RetLineupAssistCannotSwitch => "RET_LINEUP_ASSIST_CANNOT_SWITCH",
            Self::RetLineupAvatarTypeInvalid => "RET_LINEUP_AVATAR_TYPE_INVALID",
            Self::RetLineupNameUtf8Error => "RET_LINEUP_NAME_UTF8_ERROR",
            Self::RetLineupLeaderLock => "RET_LINEUP_LEADER_LOCK",
            Self::RetLineupStoryLineNotMatch => "RET_LINEUP_STORY_LINE_NOT_MATCH",
            Self::RetLineupAvatarLock => "RET_LINEUP_AVATAR_LOCK",
            Self::RetLineupAvatarInvalid => "RET_LINEUP_AVATAR_INVALID",
            Self::RetLineupAvatarAlreadyInit => "RET_LINEUP_AVATAR_ALREADY_INIT",
            Self::RetLineupLimited => "RET_LINEUP_LIMITED",
            Self::RetMailNotExist => "RET_MAIL_NOT_EXIST",
            Self::RetMailRangeInvalid => "RET_MAIL_RANGE_INVALID",
            Self::RetMailMailIdInvalid => "RET_MAIL_MAIL_ID_INVALID",
            Self::RetMailNoMailTakeAttachment => "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT",
            Self::RetMailNoMailToDel => "RET_MAIL_NO_MAIL_TO_DEL",
            Self::RetMailTypeInvalid => "RET_MAIL_TYPE_INVALID",
            Self::RetMailParaInvalid => "RET_MAIL_PARA_INVALID",
            Self::RetMailAttachementInvalid => "RET_MAIL_ATTACHEMENT_INVALID",
            Self::RetMailTicketInvalid => "RET_MAIL_TICKET_INVALID",
            Self::RetMailTicketRepeated => "RET_MAIL_TICKET_REPEATED",
            Self::RetStageSettleError => "RET_STAGE_SETTLE_ERROR",
            Self::RetStageConfigNotExist => "RET_STAGE_CONFIG_NOT_EXIST",
            Self::RetStageNotFound => "RET_STAGE_NOT_FOUND",
            Self::RetStageCocoonPropNotValid => "RET_STAGE_COCOON_PROP_NOT_VALID",
            Self::RetStageCocoonWaveNotValid => "RET_STAGE_COCOON_WAVE_NOT_VALID",
            Self::RetStagePropIdNotEqual => "RET_STAGE_PROP_ID_NOT_EQUAL",
            Self::RetStageCocoonWaveOver => "RET_STAGE_COCOON_WAVE_OVER",
            Self::RetStageWeekCocoonOverCnt => "RET_STAGE_WEEK_COCOON_OVER_CNT",
            Self::RetStageCocoonNotOpen => "RET_STAGE_COCOON_NOT_OPEN",
            Self::RetStageTrialNotOpen => "RET_STAGE_TRIAL_NOT_OPEN",
            Self::RetStageFarmNotOpen => "RET_STAGE_FARM_NOT_OPEN",
            Self::RetStageFarmTypeError => "RET_STAGE_FARM_TYPE_ERROR",
            Self::RetChapterLock => "RET_CHAPTER_LOCK",
            Self::RetChapterChallengeNumNotEnough => {
                "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH"
            }
            Self::RetChapterRewardIdNotExist => "RET_CHAPTER_REWARD_ID_NOT_EXIST",
            Self::RetChapterRewardAlreadyTaken => "RET_CHAPTER_REWARD_ALREADY_TAKEN",
            Self::RetBattleStageNotMatch => "RET_BATTLE_STAGE_NOT_MATCH",
            Self::RetInBattleNow => "RET_IN_BATTLE_NOW",
            Self::RetBattleCheat => "RET_BATTLE_CHEAT",
            Self::RetBattleFail => "RET_BATTLE_FAIL",
            Self::RetBattleNoLineup => "RET_BATTLE_NO_LINEUP",
            Self::RetBattleLineupEmpty => "RET_BATTLE_LINEUP_EMPTY",
            Self::RetBattleVersionNotMatch => "RET_BATTLE_VERSION_NOT_MATCH",
            Self::RetBattleQuitByServer => "RET_BATTLE_QUIT_BY_SERVER",
            Self::RetInBattleCheck => "RET_IN_BATTLE_CHECK",
            Self::RetBattleCheckNeedRetry => "RET_BATTLE_CHECK_NEED_RETRY",
            Self::RetBattleCostTimeCheckFail => "RET_BATTLE_COST_TIME_CHECK_FAIL",
            Self::RetLackExchangeStaminaTimes => "RET_LACK_EXCHANGE_STAMINA_TIMES",
            Self::RetLackStamina => "RET_LACK_STAMINA",
            Self::RetStaminaFull => "RET_STAMINA_FULL",
            Self::RetAuthkeySignTypeError => "RET_AUTHKEY_SIGN_TYPE_ERROR",
            Self::RetAuthkeySignVerError => "RET_AUTHKEY_SIGN_VER_ERROR",
            Self::RetNicknameFormatError => "RET_NICKNAME_FORMAT_ERROR",
            Self::RetSensitiveWords => "RET_SENSITIVE_WORDS",
            Self::RetLevelRewardHasTaken => "RET_LEVEL_REWARD_HAS_TAKEN",
            Self::RetLevelRewardLevelError => "RET_LEVEL_REWARD_LEVEL_ERROR",
            Self::RetLanguageInvalid => "RET_LANGUAGE_INVALID",
            Self::RetNicknameInCd => "RET_NICKNAME_IN_CD",
            Self::RetGameplayBirthdayInvalid => "RET_GAMEPLAY_BIRTHDAY_INVALID",
            Self::RetGameplayBirthdayAlreadySet => "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET",
            Self::RetNicknameUtf8Error => "RET_NICKNAME_UTF8_ERROR",
            Self::RetNicknameDigitLimitError => "RET_NICKNAME_DIGIT_LIMIT_ERROR",
            Self::RetSensitiveWordsPlatformError => "RET_SENSITIVE_WORDS_PLATFORM_ERROR",
            Self::RetPlayerSettingTypeInvalid => "RET_PLAYER_SETTING_TYPE_INVALID",
            Self::RetMazeLackTicket => "RET_MAZE_LACK_TICKET",
            Self::RetMazeNotUnlock => "RET_MAZE_NOT_UNLOCK",
            Self::RetMazeNoAbility => "RET_MAZE_NO_ABILITY",
            Self::RetMazeNoPlane => "RET_MAZE_NO_PLANE",
            Self::RetMazeMapNotExist => "RET_MAZE_MAP_NOT_EXIST",
            Self::RetMazeMpNotEnough => "RET_MAZE_MP_NOT_ENOUGH",
            Self::RetSpringNotEnable => "RET_SPRING_NOT_ENABLE",
            Self::RetSpringTooFar => "RET_SPRING_TOO_FAR",
            Self::RetNotInMaze => "RET_NOT_IN_MAZE",
            Self::RetMazeTimeOfDayTypeError => "RET_MAZE_TIME_OF_DAY_TYPE_ERROR",
            Self::RetSceneTransferLockedByTask => "RET_SCENE_TRANSFER_LOCKED_BY_TASK",
            Self::RetPlotNotUnlock => "RET_PLOT_NOT_UNLOCK",
            Self::RetMissionNotExist => "RET_MISSION_NOT_EXIST",
            Self::RetMissionAlreadyDone => "RET_MISSION_ALREADY_DONE",
            Self::RetDailyTaskNotFinish => "RET_DAILY_TASK_NOT_FINISH",
            Self::RetDailyTaskRewardHasTaken => "RET_DAILY_TASK_REWARD_HAS_TAKEN",
            Self::RetMissionNotFinish => "RET_MISSION_NOT_FINISH",
            Self::RetMissionNotDoing => "RET_MISSION_NOT_DOING",
            Self::RetMissionFinishWayNotMatch => "RET_MISSION_FINISH_WAY_NOT_MATCH",
            Self::RetMissionSceneNotMatch => "RET_MISSION_SCENE_NOT_MATCH",
            Self::RetMissionCustomValueNotValid => "RET_MISSION_CUSTOM_VALUE_NOT_VALID",
            Self::RetMissionSubMissionNotMatch => "RET_MISSION_SUB_MISSION_NOT_MATCH",
            Self::RetAdventureMapNotExist => "RET_ADVENTURE_MAP_NOT_EXIST",
            Self::RetSceneEntityNotExist => "RET_SCENE_ENTITY_NOT_EXIST",
            Self::RetNotInScene => "RET_NOT_IN_SCENE",
            Self::RetSceneMonsterNotExist => "RET_SCENE_MONSTER_NOT_EXIST",
            Self::RetInteractConfigNotExist => "RET_INTERACT_CONFIG_NOT_EXIST",
            Self::RetUnsupportedPropState => "RET_UNSUPPORTED_PROP_STATE",
            Self::RetSceneEntryIdNotMatch => "RET_SCENE_ENTRY_ID_NOT_MATCH",
            Self::RetSceneEntityMoveCheckFailed => "RET_SCENE_ENTITY_MOVE_CHECK_FAILED",
            Self::RetAssistMonsterCountLimit => "RET_ASSIST_MONSTER_COUNT_LIMIT",
            Self::RetSceneUseSkillFail => "RET_SCENE_USE_SKILL_FAIL",
            Self::RetPropIsHidden => "RET_PROP_IS_HIDDEN",
            Self::RetLoadingSuccAlready => "RET_LOADING_SUCC_ALREADY",
            Self::RetSceneEntityTypeInvalid => "RET_SCENE_ENTITY_TYPE_INVALID",
            Self::RetInteractTypeInvalid => "RET_INTERACT_TYPE_INVALID",
            Self::RetInteractNotInRegion => "RET_INTERACT_NOT_IN_REGION",
            Self::RetInteractSubTypeInvalid => "RET_INTERACT_SUB_TYPE_INVALID",
            Self::RetNotLeaderEntity => "RET_NOT_LEADER_ENTITY",
            Self::RetMonsterIsNotFarmElement => "RET_MONSTER_IS_NOT_FARM_ELEMENT",
            Self::RetMonsterConfigNotExist => "RET_MONSTER_CONFIG_NOT_EXIST",
            Self::RetAvatarHpAlreadyFull => "RET_AVATAR_HP_ALREADY_FULL",
            Self::RetCurInteractEntityNotMatch => "RET_CUR_INTERACT_ENTITY_NOT_MATCH",
            Self::RetPlaneTypeNotAllow => "RET_PLANE_TYPE_NOT_ALLOW",
            Self::RetGroupNotExist => "RET_GROUP_NOT_EXIST",
            Self::RetGroupSaveDataInCd => "RET_GROUP_SAVE_DATA_IN_CD",
            Self::RetGroupSaveLenghReachMax => "RET_GROUP_SAVE_LENGH_REACH_MAX",
            Self::RetRecentElementNotExist => "RET_RECENT_ELEMENT_NOT_EXIST",
            Self::RetRecentElementStageNotMatch => "RET_RECENT_ELEMENT_STAGE_NOT_MATCH",
            Self::RetScenePositionVersionNotMatch => {
                "RET_SCENE_POSITION_VERSION_NOT_MATCH"
            }
            Self::RetGameplayCounterNotExist => "RET_GAMEPLAY_COUNTER_NOT_EXIST",
            Self::RetGameplayCounterNotEnough => "RET_GAMEPLAY_COUNTER_NOT_ENOUGH",
            Self::RetGroupStateNotMatch => "RET_GROUP_STATE_NOT_MATCH",
            Self::RetSceneEntityPosNotMatch => "RET_SCENE_ENTITY_POS_NOT_MATCH",
            Self::RetGroupStateCustomSaveDataOff => {
                "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF"
            }
            Self::RetSceneNotMatch => "RET_SCENE_NOT_MATCH",
            Self::RetBuyTimesLimit => "RET_BUY_TIMES_LIMIT",
            Self::RetBuyLimitType => "RET_BUY_LIMIT_TYPE",
            Self::RetShopNotOpen => "RET_SHOP_NOT_OPEN",
            Self::RetGoodsNotOpen => "RET_GOODS_NOT_OPEN",
            Self::RetCityLevelRewardTaken => "RET_CITY_LEVEL_REWARD_TAKEN",
            Self::RetCityLevelNotMeet => "RET_CITY_LEVEL_NOT_MEET",
            Self::RetSingleBuyLimit => "RET_SINGLE_BUY_LIMIT",
            Self::RetTutorialNotUnlock => "RET_TUTORIAL_NOT_UNLOCK",
            Self::RetTutorialUnlockAlready => "RET_TUTORIAL_UNLOCK_ALREADY",
            Self::RetTutorialFinishAlready => "RET_TUTORIAL_FINISH_ALREADY",
            Self::RetTutorialPreNotUnlock => "RET_TUTORIAL_PRE_NOT_UNLOCK",
            Self::RetTutorialPlayerLevelNotMatch => "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH",
            Self::RetTutorialTutorialNotFound => "RET_TUTORIAL_TUTORIAL_NOT_FOUND",
            Self::RetChallengeNotExist => "RET_CHALLENGE_NOT_EXIST",
            Self::RetChallengeNotUnlock => "RET_CHALLENGE_NOT_UNLOCK",
            Self::RetChallengeAlready => "RET_CHALLENGE_ALREADY",
            Self::RetChallengeLineupEditForbidden => {
                "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN"
            }
            Self::RetChallengeLineupEmpty => "RET_CHALLENGE_LINEUP_EMPTY",
            Self::RetChallengeNotDoing => "RET_CHALLENGE_NOT_DOING",
            Self::RetChallengeNotFinish => "RET_CHALLENGE_NOT_FINISH",
            Self::RetChallengeTargetNotFinish => "RET_CHALLENGE_TARGET_NOT_FINISH",
            Self::RetChallengeTargetRewardTaken => "RET_CHALLENGE_TARGET_REWARD_TAKEN",
            Self::RetChallengeTimeNotValid => "RET_CHALLENGE_TIME_NOT_VALID",
            Self::RetChallengeStarsCountNotMeet => "RET_CHALLENGE_STARS_COUNT_NOT_MEET",
            Self::RetChallengeStarsRewardTaken => "RET_CHALLENGE_STARS_REWARD_TAKEN",
            Self::RetChallengeStarsNotExist => "RET_CHALLENGE_STARS_NOT_EXIST",
            Self::RetChallengeCurSceneNotEntryFloor => {
                "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR"
            }
            Self::RetChallengeNoTeamArchive => "RET_CHALLENGE_NO_TEAM_ARCHIVE",
            Self::RetChallengeLineupAvatarTypeInvalid => {
                "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID"
            }
            Self::RetChallengeLineupRecommendInCd => {
                "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetBasicTypeAlready => "RET_BASIC_TYPE_ALREADY",
            Self::RetNoBasicType => "RET_NO_BASIC_TYPE",
            Self::RetNotChooseBasicType => "RET_NOT_CHOOSE_BASIC_TYPE",
            Self::RetNotFuncClose => "RET_NOT_FUNC_CLOSE",
            Self::RetNotChooseGender => "RET_NOT_CHOOSE_GENDER",
            Self::RetNotReqUnlockBasicType => "RET_NOT_REQ_UNLOCK_BASIC_TYPE",
            Self::RetAvatarPathLocked => "RET_AVATAR_PATH_LOCKED",
            Self::RetRogueStatusNotMatch => "RET_ROGUE_STATUS_NOT_MATCH",
            Self::RetRogueSelectBuffNotExist => "RET_ROGUE_SELECT_BUFF_NOT_EXIST",
            Self::RetRogueCoinNotEnough => "RET_ROGUE_COIN_NOT_ENOUGH",
            Self::RetRogueStaminaNotEnough => "RET_ROGUE_STAMINA_NOT_ENOUGH",
            Self::RetRogueAppraisalCountNotEnough => {
                "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH"
            }
            Self::RetRoguePropAlreadyUsed => "RET_ROGUE_PROP_ALREADY_USED",
            Self::RetRogueRecordAlreadySaved => "RET_ROGUE_RECORD_ALREADY_SAVED",
            Self::RetRogueRollBuffMaxCount => "RET_ROGUE_ROLL_BUFF_MAX_COUNT",
            Self::RetRoguePickAvatarInvalid => "RET_ROGUE_PICK_AVATAR_INVALID",
            Self::RetRogueQuestExpire => "RET_ROGUE_QUEST_EXPIRE",
            Self::RetRogueQuestRewardAlready => "RET_ROGUE_QUEST_REWARD_ALREADY",
            Self::RetRogueReviveCountNotEnough => "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH",
            Self::RetRogueAreaInvalid => "RET_ROGUE_AREA_INVALID",
            Self::RetRogueScoreRewardPoolInvalid => "RET_ROGUE_SCORE_REWARD_POOL_INVALID",
            Self::RetRogueScoreRewardRowInvalid => "RET_ROGUE_SCORE_REWARD_ROW_INVALID",
            Self::RetRogueAeonLevelNotMeet => "RET_ROGUE_AEON_LEVEL_NOT_MEET",
            Self::RetRogueAeonLevelRewardAlreadyTaken => {
                "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueAeonConfigNotExist => "RET_ROGUE_AEON_CONFIG_NOT_EXIST",
            Self::RetRogueTrialAvatarInvalid => "RET_ROGUE_TRIAL_AVATAR_INVALID",
            Self::RetRogueHandbookRewardAlreadyTaken => {
                "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN"
            }
            Self::RetRogueRoomTypeNotMatch => "RET_ROGUE_ROOM_TYPE_NOT_MATCH",
            Self::RetRogueShopGoodNotFound => "RET_ROGUE_SHOP_GOOD_NOT_FOUND",
            Self::RetRogueShopGoodAlreadyBought => "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT",
            Self::RetRogueShopGoodAlreadyOwn => "RET_ROGUE_SHOP_GOOD_ALREADY_OWN",
            Self::RetRogueShopMiracleNotExist => "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST",
            Self::RetRogueShopNotExist => "RET_ROGUE_SHOP_NOT_EXIST",
            Self::RetRogueShopCannotRefresh => "RET_ROGUE_SHOP_CANNOT_REFRESH",
            Self::RetRogueSelectBuffCertainMismatch => {
                "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH"
            }
            Self::RetMissionEventConfigNotExist => "RET_MISSION_EVENT_CONFIG_NOT_EXIST",
            Self::RetMissionEventNotClient => "RET_MISSION_EVENT_NOT_CLIENT",
            Self::RetMissionEventFinished => "RET_MISSION_EVENT_FINISHED",
            Self::RetMissionEventDoing => "RET_MISSION_EVENT_DOING",
            Self::RetHasChallengeMissionEvent => "RET_HAS_CHALLENGE_MISSION_EVENT",
            Self::RetNotChallengeMissionEvent => "RET_NOT_CHALLENGE_MISSION_EVENT",
            Self::RetGachaIdNotExist => "RET_GACHA_ID_NOT_EXIST",
            Self::RetGachaNumInvalid => "RET_GACHA_NUM_INVALID",
            Self::RetGachaFirstGachaMustOne => "RET_GACHA_FIRST_GACHA_MUST_ONE",
            Self::RetGachaReqDuplicated => "RET_GACHA_REQ_DUPLICATED",
            Self::RetGachaNotInSchedule => "RET_GACHA_NOT_IN_SCHEDULE",
            Self::RetGachaNewbieClose => "RET_GACHA_NEWBIE_CLOSE",
            Self::RetGachaTodayLimited => "RET_GACHA_TODAY_LIMITED",
            Self::RetGachaNotSupport => "RET_GACHA_NOT_SUPPORT",
            Self::RetGachaCeilingNotEnough => "RET_GACHA_CEILING_NOT_ENOUGH",
            Self::RetGachaCeilingClose => "RET_GACHA_CEILING_CLOSE",
            Self::RetNotInRaid => "RET_NOT_IN_RAID",
            Self::RetRaidDoing => "RET_RAID_DOING",
            Self::RetNotProp => "RET_NOT_PROP",
            Self::RetRaidIdNotMatch => "RET_RAID_ID_NOT_MATCH",
            Self::RetRaidRestartNotMatch => "RET_RAID_RESTART_NOT_MATCH",
            Self::RetRaidLimit => "RET_RAID_LIMIT",
            Self::RetRaidAvatarListEmpty => "RET_RAID_AVATAR_LIST_EMPTY",
            Self::RetRaidAvatarNotExist => "RET_RAID_AVATAR_NOT_EXIST",
            Self::RetChallengeRaidRewardAlready => "RET_CHALLENGE_RAID_REWARD_ALREADY",
            Self::RetChallengeRaidScoreNotReach => "RET_CHALLENGE_RAID_SCORE_NOT_REACH",
            Self::RetChallengeRaidNotOpen => "RET_CHALLENGE_RAID_NOT_OPEN",
            Self::RetRaidFinished => "RET_RAID_FINISHED",
            Self::RetRaidWorldLevelNotLock => "RET_RAID_WORLD_LEVEL_NOT_LOCK",
            Self::RetRaidCannotUseAssist => "RET_RAID_CANNOT_USE_ASSIST",
            Self::RetRaidAvatarNotMatch => "RET_RAID_AVATAR_NOT_MATCH",
            Self::RetRaidCanNotSave => "RET_RAID_CAN_NOT_SAVE",
            Self::RetRaidNoSave => "RET_RAID_NO_SAVE",
            Self::RetActivityRaidNotOpen => "RET_ACTIVITY_RAID_NOT_OPEN",
            Self::RetRaidAvatarCaptainNotExist => "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST",
            Self::RetRaidStoryLineNotMatch => "RET_RAID_STORY_LINE_NOT_MATCH",
            Self::RetTalkEventAlreadyTaken => "RET_TALK_EVENT_ALREADY_TAKEN",
            Self::RetNpcAlreadyMeet => "RET_NPC_ALREADY_MEET",
            Self::RetNpcNotInConfig => "RET_NPC_NOT_IN_CONFIG",
            Self::RetDialogueGroupDismatch => "RET_DIALOGUE_GROUP_DISMATCH",
            Self::RetDialogueEventInvalid => "RET_DIALOGUE_EVENT_INVALID",
            Self::RetTalkEventTakeProtoNotMatch => "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH",
            Self::RetTalkEventNotValid => "RET_TALK_EVENT_NOT_VALID",
            Self::RetExpeditionConfigNotExist => "RET_EXPEDITION_CONFIG_NOT_EXIST",
            Self::RetExpeditionRewardConfigNotExist => {
                "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST"
            }
            Self::RetExpeditionNotUnlocked => "RET_EXPEDITION_NOT_UNLOCKED",
            Self::RetExpeditionAlreadyAccepted => "RET_EXPEDITION_ALREADY_ACCEPTED",
            Self::RetExpeditionRepeatedAvatar => "RET_EXPEDITION_REPEATED_AVATAR",
            Self::RetAvatarAlreadyDispatched => "RET_AVATAR_ALREADY_DISPATCHED",
            Self::RetExpeditionNotAccepted => "RET_EXPEDITION_NOT_ACCEPTED",
            Self::RetExpeditionNotFinish => "RET_EXPEDITION_NOT_FINISH",
            Self::RetExpeditionAlreadyFinish => "RET_EXPEDITION_ALREADY_FINISH",
            Self::RetExpeditionTeamCountLimit => "RET_EXPEDITION_TEAM_COUNT_LIMIT",
            Self::RetExpeditionAvatarNumNotMatch => "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH",
            Self::RetExpeditionNotOpen => "RET_EXPEDITION_NOT_OPEN",
            Self::RetExpeditionFriendAvatarNotValid => {
                "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID"
            }
            Self::RetExpeditionNotPublished => "RET_EXPEDITION_NOT_PUBLISHED",
            Self::RetLoginActivityHasTaken => "RET_LOGIN_ACTIVITY_HAS_TAKEN",
            Self::RetLoginActivityDaysLack => "RET_LOGIN_ACTIVITY_DAYS_LACK",
            Self::RetTrialActivityRewardAlreadyTake => {
                "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE"
            }
            Self::RetTrialActivityStageNotFinish => "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH",
            Self::RetMaterialSubmitActivityHasTaken => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN"
            }
            Self::RetMaterialSubmitActivityMaterialNotSubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED"
            }
            Self::RetMaterialSubmitActivityMaterialAlreadySubmitted => {
                "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED"
            }
            Self::RetFantasticStoryActivityStoryError => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR"
            }
            Self::RetFantasticStoryActivityStoryNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR"
            }
            Self::RetFantasticStoryActivityBattleNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN"
            }
            Self::RetFantasticStoryActivityBattleAvatarError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR"
            }
            Self::RetFantasticStoryActivityBattleBuffError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR"
            }
            Self::RetFantasticStoryActivityPreBattleScoreNotEnough => {
                "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH"
            }
            Self::RetTrialActivityAlreadyInTrialActivity => {
                "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY"
            }
            Self::RetCommonActivityNotOpen => "RET_COMMON_ACTIVITY_NOT_OPEN",
            Self::RetMessageConfigNotExist => "RET_MESSAGE_CONFIG_NOT_EXIST",
            Self::RetMessageSectionNotTake => "RET_MESSAGE_SECTION_NOT_TAKE",
            Self::RetMessageGroupNotTake => "RET_MESSAGE_GROUP_NOT_TAKE",
            Self::RetMessageSectionIdNotMatch => "RET_MESSAGE_SECTION_ID_NOT_MATCH",
            Self::RetMessageSectionCanNotFinish => "RET_MESSAGE_SECTION_CAN_NOT_FINISH",
            Self::RetMessageItemCanNotFinish => "RET_MESSAGE_ITEM_CAN_NOT_FINISH",
            Self::RetMessageItemRaidCanNotFinish => {
                "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH"
            }
            Self::RetFriendAlreadyIsFriend => "RET_FRIEND_ALREADY_IS_FRIEND",
            Self::RetFriendIsNotFriend => "RET_FRIEND_IS_NOT_FRIEND",
            Self::RetFriendApplyExpire => "RET_FRIEND_APPLY_EXPIRE",
            Self::RetFriendInBlacklist => "RET_FRIEND_IN_BLACKLIST",
            Self::RetFriendNotInBlacklist => "RET_FRIEND_NOT_IN_BLACKLIST",
            Self::RetFriendNumberLimit => "RET_FRIEND_NUMBER_LIMIT",
            Self::RetFriendBlacklistNumberLimit => "RET_FRIEND_BLACKLIST_NUMBER_LIMIT",
            Self::RetFriendDailyApplyLimit => "RET_FRIEND_DAILY_APPLY_LIMIT",
            Self::RetFriendInHandleLimit => "RET_FRIEND_IN_HANDLE_LIMIT",
            Self::RetFriendApplyInCd => "RET_FRIEND_APPLY_IN_CD",
            Self::RetFriendRemarkNameFormatError => "RET_FRIEND_REMARK_NAME_FORMAT_ERROR",
            Self::RetFriendPlayerNotFound => "RET_FRIEND_PLAYER_NOT_FOUND",
            Self::RetFriendInTargetBlacklist => "RET_FRIEND_IN_TARGET_BLACKLIST",
            Self::RetFriendTargetNumberLimit => "RET_FRIEND_TARGET_NUMBER_LIMIT",
            Self::RetAssistQueryTooFast => "RET_ASSIST_QUERY_TOO_FAST",
            Self::RetAssistNotExist => "RET_ASSIST_NOT_EXIST",
            Self::RetAssistUsedAlready => "RET_ASSIST_USED_ALREADY",
            Self::RetFriendReportReasonFormatError => {
                "RET_FRIEND_REPORT_REASON_FORMAT_ERROR"
            }
            Self::RetFriendReportSensitiveWords => "RET_FRIEND_REPORT_SENSITIVE_WORDS",
            Self::RetAssistUsedTimesOver => "RET_ASSIST_USED_TIMES_OVER",
            Self::RetAssistQuitAlready => "RET_ASSIST_QUIT_ALREADY",
            Self::RetAssistAvatarInLineup => "RET_ASSIST_AVATAR_IN_LINEUP",
            Self::RetAssistNoReward => "RET_ASSIST_NO_REWARD",
            Self::RetFriendSearchNumLimit => "RET_FRIEND_SEARCH_NUM_LIMIT",
            Self::RetFriendSearchInCd => "RET_FRIEND_SEARCH_IN_CD",
            Self::RetFriendRemarkNameUtf8Error => "RET_FRIEND_REMARK_NAME_UTF8_ERROR",
            Self::RetFriendReportReasonUtf8Error => "RET_FRIEND_REPORT_REASON_UTF8_ERROR",
            Self::RetAssistSetAlready => "RET_ASSIST_SET_ALREADY",
            Self::RetFriendTargetForbidOtherApply => {
                "RET_FRIEND_TARGET_FORBID_OTHER_APPLY"
            }
            Self::RetFriendMarkedCntMax => "RET_FRIEND_MARKED_CNT_MAX",
            Self::RetFriendMarkedAlready => "RET_FRIEND_MARKED_ALREADY",
            Self::RetFriendNotMarked => "RET_FRIEND_NOT_MARKED",
            Self::RetFriendChallengeLineupRecommendInCd => {
                "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Self::RetViewPlayerCardInCd => "RET_VIEW_PLAYER_CARD_IN_CD",
            Self::RetViewPlayerBattleRecordInCd => "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD",
            Self::RetPlayerBoardHeadIconNotExist => {
                "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST"
            }
            Self::RetPlayerBoardHeadIconLocked => "RET_PLAYER_BOARD_HEAD_ICON_LOCKED",
            Self::RetPlayerBoardHeadIconAlreadyUnlocked => {
                "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED"
            }
            Self::RetPlayerBoardDisplayAvatarNotExist => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardDisplayAvatarExceedLimit => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT"
            }
            Self::RetPlayerBoardDisplayRepeatedAvatar => {
                "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR"
            }
            Self::RetPlayerBoardDisplayAvatarSamePos => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS"
            }
            Self::RetPlayerBoardDisplayAvatarLocked => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED"
            }
            Self::RetSignatureLengthExceedLimit => "RET_SIGNATURE_LENGTH_EXCEED_LIMIT",
            Self::RetSignatureSensitiveWords => "RET_SIGNATURE_SENSITIVE_WORDS",
            Self::RetPlayerBoardAssistAvatarNotExist => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST"
            }
            Self::RetPlayerBoardAssistAvatarLocked => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED"
            }
            Self::RetSignatureUtf8Error => "RET_SIGNATURE_UTF8_ERROR",
            Self::RetPlayerBoardAssistAvatarCntError => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR"
            }
            Self::RetBattlePassTierNotValid => "RET_BATTLE_PASS_TIER_NOT_VALID",
            Self::RetBattlePassLevelNotMeet => "RET_BATTLE_PASS_LEVEL_NOT_MEET",
            Self::RetBattlePassRewardTakeAlready => "RET_BATTLE_PASS_REWARD_TAKE_ALREADY",
            Self::RetBattlePassNotPremium => "RET_BATTLE_PASS_NOT_PREMIUM",
            Self::RetBattlePassNotDoing => "RET_BATTLE_PASS_NOT_DOING",
            Self::RetBattlePassLevelInvalid => "RET_BATTLE_PASS_LEVEL_INVALID",
            Self::RetBattlePassNotUnlock => "RET_BATTLE_PASS_NOT_UNLOCK",
            Self::RetBattlePassNoReward => "RET_BATTLE_PASS_NO_REWARD",
            Self::RetBattlePassQuestNotValid => "RET_BATTLE_PASS_QUEST_NOT_VALID",
            Self::RetBattlePassNotChooseOptional => "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL",
            Self::RetBattlePassNotTakeReward => "RET_BATTLE_PASS_NOT_TAKE_REWARD",
            Self::RetBattlePassOptionalNotValid => "RET_BATTLE_PASS_OPTIONAL_NOT_VALID",
            Self::RetBattlePassBuyAlready => "RET_BATTLE_PASS_BUY_ALREADY",
            Self::RetBattlePassNearEnd => "RET_BATTLE_PASS_NEAR_END",
            Self::RetMusicLocked => "RET_MUSIC_LOCKED",
            Self::RetMusicNotExist => "RET_MUSIC_NOT_EXIST",
            Self::RetMusicUnlockFailed => "RET_MUSIC_UNLOCK_FAILED",
            Self::RetPunkLordLackSummonTimes => "RET_PUNK_LORD_LACK_SUMMON_TIMES",
            Self::RetPunkLordAttackingMonsterLimit => {
                "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT"
            }
            Self::RetPunkLordMonsterNotExist => "RET_PUNK_LORD_MONSTER_NOT_EXIST",
            Self::RetPunkLordMonsterAlreadyShared => {
                "RET_PUNK_LORD_MONSTER_ALREADY_SHARED"
            }
            Self::RetPunkLordMonsterExpired => "RET_PUNK_LORD_MONSTER_EXPIRED",
            Self::RetPunkLordSelfMonsterAttackLimit => {
                "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT"
            }
            Self::RetPunkLordLackSupportTimes => "RET_PUNK_LORD_LACK_SUPPORT_TIMES",
            Self::RetPunkLordMonsterAlreadyKilled => {
                "RET_PUNK_LORD_MONSTER_ALREADY_KILLED"
            }
            Self::RetPunkLordMonsterAttackerLimit => {
                "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT"
            }
            Self::RetPunkLordWorldLevleNotValid => "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID",
            Self::RetPunkLordRewardLevleNotExist => {
                "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST"
            }
            Self::RetPunkLordPointNotMeet => "RET_PUNK_LORD_POINT_NOT_MEET",
            Self::RetPunkLordInAttacking => "RET_PUNK_LORD_IN_ATTACKING",
            Self::RetPunkLordOperationInCd => "RET_PUNK_LORD_OPERATION_IN_CD",
            Self::RetPunkLordRewardAlreadyTaken => "RET_PUNK_LORD_REWARD_ALREADY_TAKEN",
            Self::RetPunkLordOverBonusRewardLimit => {
                "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetPunkLordNotInSchedule => "RET_PUNK_LORD_NOT_IN_SCHEDULE",
            Self::RetPunkLordMonsterNotAttacked => "RET_PUNK_LORD_MONSTER_NOT_ATTACKED",
            Self::RetPunkLordMonsterNotKilled => "RET_PUNK_LORD_MONSTER_NOT_KILLED",
            Self::RetPunkLordMonsterKilledScoreAlreadyTake => {
                "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE"
            }
            Self::RetPunkLordRewardLevleAlreadyTake => {
                "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetDailyActiveLevelInvalid => "RET_DAILY_ACTIVE_LEVEL_INVALID",
            Self::RetDailyActiveLevelRewardAlreadyTaken => {
                "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Self::RetDailyActiveLevelApNotEnough => {
                "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH"
            }
            Self::RetDailyMeetPam => "RET_DAILY_MEET_PAM",
            Self::RetReplayIdNotMatch => "RET_REPLAY_ID_NOT_MATCH",
            Self::RetReplayReqNotValid => "RET_REPLAY_REQ_NOT_VALID",
            Self::RetFightActivityDifficultyLevelNotPassed => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED"
            }
            Self::RetFightActivityDifficultyLevelRewardAlreadyTake => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE"
            }
            Self::RetFightActivityStageNotOpen => "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN",
            Self::RetFightActivityLevelNotUnlock => "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK",
            Self::RetTrainVisitorVisitorNotExist => "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST",
            Self::RetTrainVisitorBehaviorNotExist => {
                "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST"
            }
            Self::RetTrainVisitorBehaviorFinished => {
                "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED"
            }
            Self::RetTrainVisitorAllBehaviorRewardTaken => {
                "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN"
            }
            Self::RetTrainVisitorGetOnMissionNotFinish => {
                "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH"
            }
            Self::RetTrainVisitorNotGetOff => "RET_TRAIN_VISITOR_NOT_GET_OFF",
            Self::RetTextJoinUnknowIsOverride => "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE",
            Self::RetTextJoinIdNotExist => "RET_TEXT_JOIN_ID_NOT_EXIST",
            Self::RetTextJoinCanNotOverride => "RET_TEXT_JOIN_CAN_NOT_OVERRIDE",
            Self::RetTextJoinItemIdError => "RET_TEXT_JOIN_ITEM_ID_ERROR",
            Self::RetTextJoinSensitiveCheckError => "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR",
            Self::RetTextJoinMustOverride => "RET_TEXT_JOIN_MUST_OVERRIDE",
            Self::RetTextJoinTextEmpty => "RET_TEXT_JOIN_TEXT_EMPTY",
            Self::RetTextJoinTextFormatError => "RET_TEXT_JOIN_TEXT_FORMAT_ERROR",
            Self::RetTextJoinTextUtf8Error => "RET_TEXT_JOIN_TEXT_UTF8_ERROR",
            Self::RetTextJoinBatchReqIdRepeat => "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT",
            Self::RetTextJoinTypeNotSupportBatchReq => {
                "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ"
            }
            Self::RetTextJoinAvatarIdNotExist => "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST",
            Self::RetTextJoinUnknowType => "RET_TEXT_JOIN_UNKNOW_TYPE",
            Self::RetPamMissionMissionIdError => "RET_PAM_MISSION_MISSION_ID_ERROR",
            Self::RetPamMissionMissionExpire => "RET_PAM_MISSION_MISSION_EXPIRE",
            Self::RetChatTypeNotExist => "RET_CHAT_TYPE_NOT_EXIST",
            Self::RetMsgTypeNotExist => "RET_MSG_TYPE_NOT_EXIST",
            Self::RetChatNoTargetUid => "RET_CHAT_NO_TARGET_UID",
            Self::RetChatMsgEmpty => "RET_CHAT_MSG_EMPTY",
            Self::RetChatMsgExceedLimit => "RET_CHAT_MSG_EXCEED_LIMIT",
            Self::RetChatMsgSensitiveCheckError => "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR",
            Self::RetChatMsgUtf8Error => "RET_CHAT_MSG_UTF8_ERROR",
            Self::RetChatForbidSwitchOpen => "RET_CHAT_FORBID_SWITCH_OPEN",
            Self::RetChatForbid => "RET_CHAT_FORBID",
            Self::RetChatMsgIncludeSpecialStr => "RET_CHAT_MSG_INCLUDE_SPECIAL_STR",
            Self::RetChatMsgEmojiNotExist => "RET_CHAT_MSG_EMOJI_NOT_EXIST",
            Self::RetChatMsgEmojiGenderNotMatch => "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH",
            Self::RetChatMsgEmojiNotMarked => "RET_CHAT_MSG_EMOJI_NOT_MARKED",
            Self::RetChatMsgEmojiAlreadyMarked => "RET_CHAT_MSG_EMOJI_ALREADY_MARKED",
            Self::RetChatMsgEmojiMarkedMaxLimit => "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT",
            Self::RetBoxingClubChallengeNotOpen => "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN",
            Self::RetMuseumNotOpen => "RET_MUSEUM_NOT_OPEN",
            Self::RetMuseumTurnCntNotMatch => "RET_MUSEUM_TURN_CNT_NOT_MATCH",
            Self::RetMuseumPhaseNotReach => "RET_MUSEUM_PHASE_NOT_REACH",
            Self::RetMuseumUnknowStuff => "RET_MUSEUM_UNKNOW_STUFF",
            Self::RetMuseumUnknowArea => "RET_MUSEUM_UNKNOW_AREA",
            Self::RetMuseumUnknowPos => "RET_MUSEUM_UNKNOW_POS",
            Self::RetMuseumStuffAlreadyInArea => "RET_MUSEUM_STUFF_ALREADY_IN_AREA",
            Self::RetMuseumStuffNotInArea => "RET_MUSEUM_STUFF_NOT_IN_AREA",
            Self::RetMuseumGetNpcRepeat => "RET_MUSEUM_GET_NPC_REPEAT",
            Self::RetMuseumGetNpcUnlock => "RET_MUSEUM_GET_NPC_UNLOCK",
            Self::RetMuseumGetNpcNotEnough => "RET_MUSEUM_GET_NPC_NOT_ENOUGH",
            Self::RetMuseumChangeStuffAreaError => "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR",
            Self::RetMuseumNotInit => "RET_MUSEUM_NOT_INIT",
            Self::RetMuseumEventError => "RET_MUSEUM_EVENT_ERROR",
            Self::RetMuseumUnknowChooseEventId => "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID",
            Self::RetMuseumEventOrderNotMatch => "RET_MUSEUM_EVENT_ORDER_NOT_MATCH",
            Self::RetMuseumEventPhaseNotUnlock => "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK",
            Self::RetMuseumEventMissionNotFound => "RET_MUSEUM_EVENT_MISSION_NOT_FOUND",
            Self::RetMuseumAreaLevelUpAlready => "RET_MUSEUM_AREA_LEVEL_UP_ALREADY",
            Self::RetMuseumStuffAlreadyUsed => "RET_MUSEUM_STUFF_ALREADY_USED",
            Self::RetMuseumEventRoundNotUnlock => "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK",
            Self::RetMuseumStuffInArea => "RET_MUSEUM_STUFF_IN_AREA",
            Self::RetMuseumStuffDispatch => "RET_MUSEUM_STUFF_DISPATCH",
            Self::RetMuseumIsEnd => "RET_MUSEUM_IS_END",
            Self::RetMuseumStuffLeaving => "RET_MUSEUM_STUFF_LEAVING",
            Self::RetMuseumEventMissionNotFinish => "RET_MUSEUM_EVENT_MISSION_NOT_FINISH",
            Self::RetMuseumCollectRewardNotExist => "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST",
            Self::RetMuseumCollectRewardAlreadyTaken => {
                "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN"
            }
            Self::RetMuseumAcceptMissionMaxLimit => "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT",
            Self::RetRogueChallengeNotOpen => "RET_ROGUE_CHALLENGE_NOT_OPEN",
            Self::RetRogueChallengeAssisRefreshLimit => {
                "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT"
            }
            Self::RetAlleyNotInit => "RET_ALLEY_NOT_INIT",
            Self::RetAlleyNotOpen => "RET_ALLEY_NOT_OPEN",
            Self::RetAlleyMapNotExist => "RET_ALLEY_MAP_NOT_EXIST",
            Self::RetAlleyEmptyPosList => "RET_ALLEY_EMPTY_POS_LIST",
            Self::RetAlleyLinePosInvalid => "RET_ALLEY_LINE_POS_INVALID",
            Self::RetAlleyShopNotUnlock => "RET_ALLEY_SHOP_NOT_UNLOCK",
            Self::RetAlleyDepotFull => "RET_ALLEY_DEPOT_FULL",
            Self::RetAlleyShopNotInclude => "RET_ALLEY_SHOP_NOT_INCLUDE",
            Self::RetAlleyEventNotUnlock => "RET_ALLEY_EVENT_NOT_UNLOCK",
            Self::RetAlleyEventNotRefresh => "RET_ALLEY_EVENT_NOT_REFRESH",
            Self::RetAlleyEventStateDoing => "RET_ALLEY_EVENT_STATE_DOING",
            Self::RetAlleyEventStateFinish => "RET_ALLEY_EVENT_STATE_FINISH",
            Self::RetAlleyEventError => "RET_ALLEY_EVENT_ERROR",
            Self::RetAlleyRewardLevelError => "RET_ALLEY_REWARD_LEVEL_ERROR",
            Self::RetAlleyRewardPrestigeNotEnough => {
                "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH"
            }
            Self::RetAlleyShipEmpty => "RET_ALLEY_SHIP_EMPTY",
            Self::RetAlleyShipIdDismatch => "RET_ALLEY_SHIP_ID_DISMATCH",
            Self::RetAlleyShipNotExist => "RET_ALLEY_SHIP_NOT_EXIST",
            Self::RetAlleyShipNotUnlock => "RET_ALLEY_SHIP_NOT_UNLOCK",
            Self::RetAlleyGoodsNotExist => "RET_ALLEY_GOODS_NOT_EXIST",
            Self::RetAlleyGoodsNotUnlock => "RET_ALLEY_GOODS_NOT_UNLOCK",
            Self::RetAlleyProfitNotPositive => "RET_ALLEY_PROFIT_NOT_POSITIVE",
            Self::RetAlleySpecialOrderDismatch => "RET_ALLEY_SPECIAL_ORDER_DISMATCH",
            Self::RetAlleyOrderGoodsOverLimit => "RET_ALLEY_ORDER_GOODS_OVER_LIMIT",
            Self::RetAlleySpecialOrderConditionNotMeet => {
                "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET"
            }
            Self::RetAlleyDepotSizeOverLimit => "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT",
            Self::RetAlleyGoodsNotEnough => "RET_ALLEY_GOODS_NOT_ENOUGH",
            Self::RetAlleyOrderIndexInvalid => "RET_ALLEY_ORDER_INDEX_INVALID",
            Self::RetAlleyRewardAlreadyTake => "RET_ALLEY_REWARD_ALREADY_TAKE",
            Self::RetAlleyRewardNotExist => "RET_ALLEY_REWARD_NOT_EXIST",
            Self::RetAlleyMainMissionNotDoing => "RET_ALLEY_MAIN_MISSION_NOT_DOING",
            Self::RetAlleyCriticalEventNotFinish => "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH",
            Self::RetAlleyShopGoodsNotValid => "RET_ALLEY_SHOP_GOODS_NOT_VALID",
            Self::RetAlleySlashNotOpen => "RET_ALLEY_SLASH_NOT_OPEN",
            Self::RetAlleyPlacingAnchorInvalid => "RET_ALLEY_PLACING_ANCHOR_INVALID",
            Self::RetAlleyPlacingGoodsIndexInvalid => {
                "RET_ALLEY_PLACING_GOODS_INDEX_INVALID"
            }
            Self::RetAlleySaveMapTooQuick => "RET_ALLEY_SAVE_MAP_TOO_QUICK",
            Self::RetAlleyMapNotLink => "RET_ALLEY_MAP_NOT_LINK",
            Self::RetAlleyFundsNotLowerBase => "RET_ALLEY_FUNDS_NOT_LOWER_BASE",
            Self::RetAlleyEventNotFinish => "RET_ALLEY_EVENT_NOT_FINISH",
            Self::RetAlleyNormalOrderNotMeet => "RET_ALLEY_NORMAL_ORDER_NOT_MEET",
            Self::RetPlayerReturnNotOpen => "RET_PLAYER_RETURN_NOT_OPEN",
            Self::RetPlayerReturnIsSigned => "RET_PLAYER_RETURN_IS_SIGNED",
            Self::RetPlayerReturnPointNotEnough => "RET_PLAYER_RETURN_POINT_NOT_ENOUGH",
            Self::RetPlayerReturnConditionInvalid => {
                "RET_PLAYER_RETURN_CONDITION_INVALID"
            }
            Self::RetPlayerReturnHasSigned => "RET_PLAYER_RETURN_HAS_SIGNED",
            Self::RetPlayerReturnRewardTaken => "RET_PLAYER_RETURN_REWARD_TAKEN",
            Self::RetAetherDivideNoLineup => "RET_AETHER_DIVIDE_NO_LINEUP",
            Self::RetAetherDivideLineupInvalid => "RET_AETHER_DIVIDE_LINEUP_INVALID",
            Self::RetChatBubbleIdError => "RET_CHAT_BUBBLE_ID_ERROR",
            Self::RetChatBubbleIdNotUnlock => "RET_CHAT_BUBBLE_ID_NOT_UNLOCK",
            Self::RetPhoneThemeIdError => "RET_PHONE_THEME_ID_ERROR",
            Self::RetPhoneThemeIdNotUnlock => "RET_PHONE_THEME_ID_NOT_UNLOCK",
            Self::RetChatBubbleSelectIsCurrent => "RET_CHAT_BUBBLE_SELECT_IS_CURRENT",
            Self::RetPhoneThemeSelectIsCurrent => "RET_PHONE_THEME_SELECT_IS_CURRENT",
            Self::RetChessRogueConfigNotFound => "RET_CHESS_ROGUE_CONFIG_NOT_FOUND",
            Self::RetChessRogueConfigInvalid => "RET_CHESS_ROGUE_CONFIG_INVALID",
            Self::RetChessRogueNoValidRoom => "RET_CHESS_ROGUE_NO_VALID_ROOM",
            Self::RetChessRogueNoCellInfo => "RET_CHESS_ROGUE_NO_CELL_INFO",
            Self::RetChessRogueCellNotFinish => "RET_CHESS_ROGUE_CELL_NOT_FINISH",
            Self::RetChessRogueCellIsLocked => "RET_CHESS_ROGUE_CELL_IS_LOCKED",
            Self::RetChessRogueScheduleNotMatch => "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH",
            Self::RetChessRogueStatusFail => "RET_CHESS_ROGUE_STATUS_FAIL",
            Self::RetChessRogueAreaNotExist => "RET_CHESS_ROGUE_AREA_NOT_EXIST",
            Self::RetChessRogueLineupFail => "RET_CHESS_ROGUE_LINEUP_FAIL",
            Self::RetChessRogueAeonFail => "RET_CHESS_ROGUE_AEON_FAIL",
            Self::RetChessRogueEnterCellFail => "RET_CHESS_ROGUE_ENTER_CELL_FAIL",
            Self::RetChessRogueRollDiceFail => "RET_CHESS_ROGUE_ROLL_DICE_FAIL",
            Self::RetChessRogueDiceStatusFail => "RET_CHESS_ROGUE_DICE_STATUS_FAIL",
            Self::RetChessRogueDiceCntNotFull => "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL",
            Self::RetChessRogueUnlock => "RET_CHESS_ROGUE_UNLOCK",
            Self::RetChessRoguePickAvatarFail => "RET_CHESS_ROGUE_PICK_AVATAR_FAIL",
            Self::RetChessRogueAvatarInvalid => "RET_CHESS_ROGUE_AVATAR_INVALID",
            Self::RetChessRogueCellCanNotSelect => "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT",
            Self::RetChessRogueDiceConfirmed => "RET_CHESS_ROGUE_DICE_CONFIRMED",
            Self::RetChessRogueNousDiceNotMatch => "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH",
            Self::RetChessRogueNousDiceRarityFail => {
                "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL"
            }
            Self::RetChessRogueNousDiceSurfaceDuplicate => {
                "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE"
            }
            Self::RetChessRogueNotInRogue => "RET_CHESS_ROGUE_NOT_IN_ROGUE",
            Self::RetChessRogueNousDiceBranchLimit => {
                "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT"
            }
            Self::RetHeliobusNotOpen => "RET_HELIOBUS_NOT_OPEN",
            Self::RetHeliobusSnsPostNotUnlock => "RET_HELIOBUS_SNS_POST_NOT_UNLOCK",
            Self::RetHeliobusSnsAlreadyRead => "RET_HELIOBUS_SNS_ALREADY_READ",
            Self::RetHeliobusSnsAlreadyLiked => "RET_HELIOBUS_SNS_ALREADY_LIKED",
            Self::RetHeliobusSnsAlreadyCommented => "RET_HELIOBUS_SNS_ALREADY_COMMENTED",
            Self::RetHeliobusSnsInMission => "RET_HELIOBUS_SNS_IN_MISSION",
            Self::RetHeliobusSnsAlreadyPosted => "RET_HELIOBUS_SNS_ALREADY_POSTED",
            Self::RetHeliobusSnsNotDoingMission => "RET_HELIOBUS_SNS_NOT_DOING_MISSION",
            Self::RetHeliobusRewardLevelMax => "RET_HELIOBUS_REWARD_LEVEL_MAX",
            Self::RetHeliobusIncomeNotEnough => "RET_HELIOBUS_INCOME_NOT_ENOUGH",
            Self::RetHeliobusSnsCommentNotUnlock => "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK",
            Self::RetHeliobusChallengeNotUnlock => "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK",
            Self::RetHeliobusChallengeIdError => "RET_HELIOBUS_CHALLENGE_ID_ERROR",
            Self::RetHeliobusSkillNotUnlock => "RET_HELIOBUS_SKILL_NOT_UNLOCK",
            Self::RetHeliobusAcceptPostMissionFail => {
                "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL"
            }
            Self::RetHeliobusSkillNotSelected => "RET_HELIOBUS_SKILL_NOT_SELECTED",
            Self::RetHeliobusPlaneTypeInvalid => "RET_HELIOBUS_PLANE_TYPE_INVALID",
            Self::RetReddotParamInvalid => "RET_REDDOT_PARAM_INVALID",
            Self::RetReddotActivityNotOpen => "RET_REDDOT_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityConfigError => {
                "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR"
            }
            Self::RetRogueEndlessActivityNotOpen => "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN",
            Self::RetRogueEndlessActivityOverBonusRewardLimit => {
                "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT"
            }
            Self::RetRogueEndlessActivityScoreNotMeet => {
                "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET"
            }
            Self::RetRogueEndlessActivityRewardLevleAlreadyTake => {
                "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE"
            }
            Self::RetHeartDialScriptNotFound => "RET_HEART_DIAL_SCRIPT_NOT_FOUND",
            Self::RetHeartDialScriptEmotionTheSame => {
                "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME"
            }
            Self::RetHeartDialScriptStepNotNormal => {
                "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL"
            }
            Self::RetHeartDialScriptConditionNotMatch => {
                "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemNumNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH"
            }
            Self::RetHeartDialScriptSubmitItemIdNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH"
            }
            Self::RetHeartDialDialogueNotFound => "RET_HEART_DIAL_DIALOGUE_NOT_FOUND",
            Self::RetHeartDialDialogueAlreadyPerformed => {
                "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED"
            }
            Self::RetHeartDialNpcNotFound => "RET_HEART_DIAL_NPC_NOT_FOUND",
            Self::RetHeartDialTraceConfigNotFound => {
                "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND"
            }
            Self::RetHeartDialFloorTraceExist => "RET_HEART_DIAL_FLOOR_TRACE_EXIST",
            Self::RetHeartDialTraceFloorNotMatch => {
                "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH"
            }
            Self::RetTravelBrochureConfigError => "RET_TRAVEL_BROCHURE_CONFIG_ERROR",
            Self::RetTravelBrochureParamInvalid => "RET_TRAVEL_BROCHURE_PARAM_INVALID",
            Self::RetTravelBrochureLocked => "RET_TRAVEL_BROCHURE_LOCKED",
            Self::RetTravelBrochureCannotOperate => "RET_TRAVEL_BROCHURE_CANNOT_OPERATE",
            Self::RetTravelBrochureWorldIdNotMatch => {
                "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH"
            }
            Self::RetTravelBrochureHasNoWorldBook => {
                "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK"
            }
            Self::RetTravelBrochurePageFull => "RET_TRAVEL_BROCHURE_PAGE_FULL",
            Self::RetMapRotationNotInRegion => "RET_MAP_ROTATION_NOT_IN_REGION",
            Self::RetMapRotationRotaterAlreadyDeployed => {
                "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED"
            }
            Self::RetMapRotationEnergyNotEnough => "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH",
            Self::RetMapRotationEntityNotOnCurPose => {
                "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE"
            }
            Self::RetMapRotationRotaterNotDeployed => {
                "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED"
            }
            Self::RetMapRotationPoseRotaterMismatch => {
                "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH"
            }
            Self::RetMapRotationRotaterNotRemovable => {
                "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE"
            }
            Self::RetMapRotationRotaterDisposable => {
                "RET_MAP_ROTATION_ROTATER_DISPOSABLE"
            }
            Self::RetSpaceZooActivityCatNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatParamInvalid => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID"
            }
            Self::RetSpaceZooActivityCatItemNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatBagFull => "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL",
            Self::RetSpaceZooActivityCatNotToMutate => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE"
            }
            Self::RetSpaceZooActivityCatStateError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR"
            }
            Self::RetSpaceZooActivityCatCatteryLocked => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED"
            }
            Self::RetSpaceZooActivityCatOutNow => "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW",
            Self::RetSpaceZooActivityCatConfigNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatFeatureNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND"
            }
            Self::RetSpaceZooActivityCatAddCatError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR"
            }
            Self::RetSpaceZooActivityCatMoneyNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH"
            }
            Self::RetSpaceZooActivityCatCondNotMatch => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH"
            }
            Self::RetStrongChallengeActivityStageCfgMiss => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS"
            }
            Self::RetStrongChallengeActivityStageNotOpen => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN"
            }
            Self::RetStrongChallengeActivityBuffError => {
                "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR"
            }
            Self::RetRollShopNotFound => "RET_ROLL_SHOP_NOT_FOUND",
            Self::RetRollShopGroupEmpty => "RET_ROLL_SHOP_GROUP_EMPTY",
            Self::RetRollShopEmpty => "RET_ROLL_SHOP_EMPTY",
            Self::RetRollShopGachaReqDuplicated => "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED",
            Self::RetRollShopRandomError => "RET_ROLL_SHOP_RANDOM_ERROR",
            Self::RetRollShopGroupTypeNotFound => "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND",
            Self::RetRollShopHasStoredRewardAlready => {
                "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY"
            }
            Self::RetRollShopNoStoredReward => "RET_ROLL_SHOP_NO_STORED_REWARD",
            Self::RetRollShopNotInValidScene => "RET_ROLL_SHOP_NOT_IN_VALID_SCENE",
            Self::RetRollShopInvalidRollShopType => {
                "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE"
            }
            Self::RetActivityRaidCollectionPrevNotFinish => {
                "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH"
            }
            Self::RetActivityRaidCollectionGroupEnterNextUnavailable => {
                "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE"
            }
            Self::RetActivityRaidCollectionIsLast => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_LAST"
            }
            Self::RetActivityRaidCollectionIsNotNext => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT"
            }
            Self::RetOfferingNotUnlock => "RET_OFFERING_NOT_UNLOCK",
            Self::RetOfferingLevelNotUnlock => "RET_OFFERING_LEVEL_NOT_UNLOCK",
            Self::RetOfferingReachMaxLevel => "RET_OFFERING_REACH_MAX_LEVEL",
            Self::RetOfferingItemNotEnough => "RET_OFFERING_ITEM_NOT_ENOUGH",
            Self::RetOfferingLongtailNotOpen => "RET_OFFERING_LONGTAIL_NOT_OPEN",
            Self::RetOfferingRewardCondition => "RET_OFFERING_REWARD_CONDITION",
            Self::RetDrinkMakerChatInvalid => "RET_DRINK_MAKER_CHAT_INVALID",
            Self::RetDrinkMakerParamInvalid => "RET_DRINK_MAKER_PARAM_INVALID",
            Self::RetDrinkMakerParamNotUnlock => "RET_DRINK_MAKER_PARAM_NOT_UNLOCK",
            Self::RetDrinkMakerConfigNotFound => "RET_DRINK_MAKER_CONFIG_NOT_FOUND",
            Self::RetDrinkMakerNotLastChat => "RET_DRINK_MAKER_NOT_LAST_CHAT",
            Self::RetDrinkMakerDayAndFreePhaseNotOpen => {
                "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN"
            }
            Self::RetMonopolyNotOpen => "RET_MONOPOLY_NOT_OPEN",
            Self::RetMonopolyConfigError => "RET_MONOPOLY_CONFIG_ERROR",
            Self::RetMonopolyDiceNotEnough => "RET_MONOPOLY_DICE_NOT_ENOUGH",
            Self::RetMonopolyCurCellNotFinish => "RET_MONOPOLY_CUR_CELL_NOT_FINISH",
            Self::RetMonopolyCoinNotEnough => "RET_MONOPOLY_COIN_NOT_ENOUGH",
            Self::RetMonopolyCellWaitPending => "RET_MONOPOLY_CELL_WAIT_PENDING",
            Self::RetMonopolyCellStateError => "RET_MONOPOLY_CELL_STATE_ERROR",
            Self::RetMonopolyCellContentError => "RET_MONOPOLY_CELL_CONTENT_ERROR",
            Self::RetMonopolyItemNotEnough => "RET_MONOPOLY_ITEM_NOT_ENOUGH",
            Self::RetMonopolyCellContentCannotGiveup => {
                "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP"
            }
            Self::RetMonopolyAssetLevelInvalid => "RET_MONOPOLY_ASSET_LEVEL_INVALID",
            Self::RetMonopolyTurnNotFinish => "RET_MONOPOLY_TURN_NOT_FINISH",
            Self::RetMonopolyGuideNotFinish => "RET_MONOPOLY_GUIDE_NOT_FINISH",
            Self::RetMonopolyRaffleRewardReissued => {
                "RET_MONOPOLY_RAFFLE_REWARD_REISSUED"
            }
            Self::RetMonopolyNoGameActive => "RET_MONOPOLY_NO_GAME_ACTIVE",
            Self::RetMonopolyGameRatioNotIncreasable => {
                "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE"
            }
            Self::RetMonopolyGameRatioMax => "RET_MONOPOLY_GAME_RATIO_MAX",
            Self::RetMonopolyGameTargetRatioInvalid => {
                "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID"
            }
            Self::RetMonopolyGameBingoFlipPosInvalid => {
                "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID"
            }
            Self::RetMonopolyGameGuessAlreadyChoose => {
                "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE"
            }
            Self::RetMonopolyGameGuessChooseInvalid => {
                "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID"
            }
            Self::RetMonopolyGameGuessInformationAlreadyBought => {
                "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT"
            }
            Self::RetMonopolyGameRaiseRatioNotUnlock => {
                "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK"
            }
            Self::RetMonopolyFriendNotSynced => "RET_MONOPOLY_FRIEND_NOT_SYNCED",
            Self::RetMonopolyGetFriendRankingListInCd => {
                "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD"
            }
            Self::RetMonopolyLikeTargetNotFriend => "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND",
            Self::RetMonopolyDailyAlreadyLiked => "RET_MONOPOLY_DAILY_ALREADY_LIKED",
            Self::RetMonopolySocialEventStatusNotMatch => {
                "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH"
            }
            Self::RetMonopolySocialEventServerCacheNotExist => {
                "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST"
            }
            Self::RetMonopolyActivityIdNotMatch => "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH",
            Self::RetMonopolyRafflePoolNotExist => "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST",
            Self::RetMonopolyRafflePoolTimeNotMatch => {
                "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH"
            }
            Self::RetMonopolyRafflePoolPhaseNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET"
            }
            Self::RetMonopolyRafflePoolShowTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketNotFound => {
                "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND"
            }
            Self::RetMonopolyRaffleTicketTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET"
            }
            Self::RetMonopolyRaffleTicketRewardAlreadyTaken => {
                "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN"
            }
            Self::RetMonopolyRafflePoolNotInRaffleTime => {
                "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME"
            }
            Self::RetMonopolyMbtiReportRewardAlreadyTaken => {
                "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelGaming => "RET_EVOLVE_BUILD_LEVEL_GAMING",
            Self::RetEveolveBuildLevelBanRandom => "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM",
            Self::RetEvolveBuildFirstRewardAlreadyTaken => {
                "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN"
            }
            Self::RetEvolveBuildLevelUnfinish => "RET_EVOLVE_BUILD_LEVEL_UNFINISH",
            Self::RetEvolveBuildShopAbilityMaxLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityMinLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL"
            }
            Self::RetEvolveBuildShopAbilityNotGet => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET"
            }
            Self::RetEvolveBuildLevelLock => "RET_EVOLVE_BUILD_LEVEL_LOCK",
            Self::RetEvolveBuildExpNotEnough => "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH",
            Self::RetEvolveBuildShopAbilityLevelError => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR"
            }
            Self::RetEvolveBuildActivityNotOpen => "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN",
            Self::RetEvolveBuildShopAbilityEmpty => "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY",
            Self::RetEvolveBuildLevelNotStart => "RET_EVOLVE_BUILD_LEVEL_NOT_START",
            Self::RetEvolveBuildShopLock => "RET_EVOLVE_BUILD_SHOP_LOCK",
            Self::RetEvolveBuildRewardLock => "RET_EVOLVE_BUILD_REWARD_LOCK",
            Self::RetEvolveBuildRewardLevelMax => "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX",
            Self::RetEvolveBuildRewardAlreadyAllTaken => {
                "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN"
            }
            Self::RetClockParkConfigError => "RET_CLOCK_PARK_CONFIG_ERROR",
            Self::RetClockParkEffectError => "RET_CLOCK_PARK_EFFECT_ERROR",
            Self::RetClockParkScriptAlreadyUnlock => {
                "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptUnlockConditionNotMeet => {
                "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET"
            }
            Self::RetClockParkTalentAlreadyUnlock => {
                "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK"
            }
            Self::RetClockParkScriptLocked => "RET_CLOCK_PARK_SCRIPT_LOCKED",
            Self::RetClockParkHasOngoingScript => "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT",
            Self::RetClockParkNoOngoingScript => "RET_CLOCK_PARK_NO_ONGOING_SCRIPT",
            Self::RetClockParkDicePlacementError => "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR",
            Self::RetClockParkMismatchStatus => "RET_CLOCK_PARK_MISMATCH_STATUS",
            Self::RetClockParkNoBuff => "RET_CLOCK_PARK_NO_BUFF",
            Self::RetClockParkSlotMachineGachaReqDuplicated => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED"
            }
            Self::RetClockParkSlotMachineCostNotEnough => {
                "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH"
            }
            Self::RetClockParkSlotMachineGachaCntExceedLimit => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT"
            }
            Self::RetClockParkNotOpen => "RET_CLOCK_PARK_NOT_OPEN",
            Self::RetTournRogueStatusMismatch => "RET_TOURN_ROGUE_STATUS_MISMATCH",
            Self::RetMagicRogueStatusMismatch => "RET_MAGIC_ROGUE_STATUS_MISMATCH",
            Self::RetAutoMountMagicUnitNoMatchedMagicScepter => {
                "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER"
            }
            Self::RetMagicUnitWorkbenchReforgeGenFail => {
                "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL"
            }
            Self::RetMatchAlreadyInMatch => "RET_MATCH_ALREADY_IN_MATCH",
            Self::RetMatchNotInMatch => "RET_MATCH_NOT_IN_MATCH",
            Self::RetMatchPlayNotOpen => "RET_MATCH_PLAY_NOT_OPEN",
            Self::RetCrossStateError => "RET_CROSS_STATE_ERROR",
            Self::RetMatchVersionNotEqual => "RET_MATCH_VERSION_NOT_EQUAL",
            Self::RetMatchPlayerNotInLobbyRoom => "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM",
            Self::RetLobbyStateNotMatch => "RET_LOBBY_STATE_NOT_MATCH",
            Self::RetLobbyRoomNotExist => "RET_LOBBY_ROOM_NOT_EXIST",
            Self::RetLobbyRoomPalyerFull => "RET_LOBBY_ROOM_PALYER_FULL",
            Self::RetLobbyRoomPalyerNotReady => "RET_LOBBY_ROOM_PALYER_NOT_READY",
            Self::RetLobbyRoomPalyerFighting => "RET_LOBBY_ROOM_PALYER_FIGHTING",
            Self::RetFightRoomNotExist => "RET_FIGHT_ROOM_NOT_EXIST",
            Self::RetFightMatch3PlayerStateErr => "RET_FIGHT_MATCH3_PLAYER_STATE_ERR",
            Self::RetFightMatch3RoomStateErr => "RET_FIGHT_MATCH3_ROOM_STATE_ERR",
            Self::RetCrossStateTimeOut => "RET_CROSS_STATE_TIME_OUT",
            Self::RetSwordTrainingNoActiveGame => "RET_SWORD_TRAINING_NO_ACTIVE_GAME",
            Self::RetSwordTrainingNoPendingActionMatch => {
                "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH"
            }
            Self::RetSwordTrainingPartnerAbilityInvalid => {
                "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID"
            }
            Self::RetSwordTrainingSkillAlreadyLearned => {
                "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED"
            }
            Self::RetSwordTrainingConditionNotMeet => {
                "RET_SWORD_TRAINING_CONDITION_NOT_MEET"
            }
            Self::RetSwordTrainingParentSkillNotLearned => {
                "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED"
            }
            Self::RetSwordTrainingSkillTypeNotUnlock => {
                "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK"
            }
            Self::RetSwordTrainingGameAlreadyExist => {
                "RET_SWORD_TRAINING_GAME_ALREADY_EXIST"
            }
            Self::RetSwordTrainingEndingHintNotMatch => {
                "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH"
            }
            Self::RetSwordTrainingStorylineConfigNotFound => {
                "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingStoryConfigNotFound => {
                "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND"
            }
            Self::RetSwordTrainingUnlockNotFinish => {
                "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH"
            }
            Self::RetSwordTrainingOptionMismatch => "RET_SWORD_TRAINING_OPTION_MISMATCH",
            Self::RetSwordTrainingRestoreWithoutExamFailed => {
                "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED"
            }
            Self::RetSwordTrainingNoRestoreGameAvailable => {
                "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE"
            }
            Self::RetSwordTrainingEndingStoryNotMatch => {
                "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH"
            }
            Self::RetSwordTrainingEndingNotFinish => {
                "RET_SWORD_TRAINING_ENDING_NOT_FINISH"
            }
            Self::RetSwordTrainingEndingRewardTaken => {
                "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN"
            }
            Self::RetSwordTrainingCombatRankNotChange => {
                "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE"
            }
            Self::RetSwordTrainingDirectBattleDisable => {
                "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE"
            }
            Self::RetFightFestPhaseNotMatch => "RET_FIGHT_FEST_PHASE_NOT_MATCH",
            Self::RetFightFestScoreRaceAlreadyFinish => {
                "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH"
            }
            Self::RetFightFestChallengeLocked => "RET_FIGHT_FEST_CHALLENGE_LOCKED",
            Self::RetFightFestCoachSkillLocked => "RET_FIGHT_FEST_COACH_SKILL_LOCKED",
            Self::RetFightFestCoachSkillEquipTypeExisted => {
                "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED"
            }
            Self::RetFightFestScoreRaceMissionDoind => {
                "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND"
            }
            Self::RetFightFestCoachSkillNoEquip => "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP",
            Self::RetPetNotExist => "RET_PET_NOT_EXIST",
            Self::RetPetAlreadySummoned => "RET_PET_ALREADY_SUMMONED",
            Self::RetPetNotSummoned => "RET_PET_NOT_SUMMONED",
            Self::RetMusicRhythmLevelTimeTooShort => {
                "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT"
            }
            Self::RetMusicRhythmNotInLevel => "RET_MUSIC_RHYTHM_NOT_IN_LEVEL",
            Self::RetMusicRhythmPreDifficultyNotPass => {
                "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS"
            }
            Self::RetMusicRhythmSongLimited => "RET_MUSIC_RHYTHM_SONG_LIMITED",
            Self::RetMusicRhythmSongLocked => "RET_MUSIC_RHYTHM_SONG_LOCKED",
            Self::RetMusicRhythmTrackLocked => "RET_MUSIC_RHYTHM_TRACK_LOCKED",
            Self::RetMusicRhythmLevelNotUnlock => "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK",
            Self::RetMusicRhythmSongSfxLocked => "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED",
            Self::RetTrainPartyCoinNotEnough => "RET_TRAIN_PARTY_COIN_NOT_ENOUGH",
            Self::RetTrainPartyDiyTagNotMatch => "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH",
            Self::RetTrainPartyUseCardMobilityNotEnough => {
                "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH"
            }
            Self::RetTrainPartyAreaUnlockCoinNotEnough => {
                "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RET_SUCC" => Some(Self::RetSucc),
            "RET_FAIL" => Some(Self::RetFail),
            "RET_SERVER_INTERNAL_ERROR" => Some(Self::RetServerInternalError),
            "RET_TIMEOUT" => Some(Self::RetTimeout),
            "RET_REPEATED_REQ" => Some(Self::RetRepeatedReq),
            "RET_REQ_PARA_INVALID" => Some(Self::RetReqParaInvalid),
            "RET_PLAYER_DATA_ERROR" => Some(Self::RetPlayerDataError),
            "RET_PLAYER_CLIENT_PAUSED" => Some(Self::RetPlayerClientPaused),
            "RET_FUNC_CHECK_FAILED" => Some(Self::RetFuncCheckFailed),
            "RET_FEATURE_SWITCH_CLOSED" => Some(Self::RetFeatureSwitchClosed),
            "RET_FREQ_OVER_LIMIT" => Some(Self::RetFreqOverLimit),
            "RET_SYSTEM_BUSY" => Some(Self::RetSystemBusy),
            "RET_PLAYER_NOT_ONLINE" => Some(Self::RetPlayerNotOnline),
            "RET_OPERATION_IN_CD" => Some(Self::RetOperationInCd),
            "RET_REPEATE_LOGIN" => Some(Self::RetRepeateLogin),
            "RET_RETRY_LOGIN" => Some(Self::RetRetryLogin),
            "RET_WAIT_LOGIN" => Some(Self::RetWaitLogin),
            "RET_NOT_IN_WHITE_LIST" => Some(Self::RetNotInWhiteList),
            "RET_IN_BLACK_LIST" => Some(Self::RetInBlackList),
            "RET_ACCOUNT_VERIFY_ERROR" => Some(Self::RetAccountVerifyError),
            "RET_ACCOUNT_PARA_ERROR" => Some(Self::RetAccountParaError),
            "RET_ANTI_ADDICT_LOGIN" => Some(Self::RetAntiAddictLogin),
            "RET_CHECK_SUM_ERROR" => Some(Self::RetCheckSumError),
            "RET_REACH_MAX_PLAYER_NUM" => Some(Self::RetReachMaxPlayerNum),
            "RET_ALREADY_REGISTERED" => Some(Self::RetAlreadyRegistered),
            "RET_GENDER_ERROR" => Some(Self::RetGenderError),
            "SET_NICKNAME_RET_CALLBACK_PROCESSING" => {
                Some(Self::SetNicknameRetCallbackProcessing)
            }
            "RET_IN_GM_BIND_ACCESS" => Some(Self::RetInGmBindAccess),
            "RET_QUEST_REWARD_ALREADY_TAKEN" => Some(Self::RetQuestRewardAlreadyTaken),
            "RET_QUEST_NOT_ACCEPT" => Some(Self::RetQuestNotAccept),
            "RET_QUEST_NOT_FINISH" => Some(Self::RetQuestNotFinish),
            "RET_QUEST_STATUS_ERROR" => Some(Self::RetQuestStatusError),
            "RET_ACHIEVEMENT_LEVEL_NOT_REACH" => Some(Self::RetAchievementLevelNotReach),
            "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN" => {
                Some(Self::RetAchievementLevelAlreadyTaken)
            }
            "RET_AVATAR_NOT_EXIST" => Some(Self::RetAvatarNotExist),
            "RET_AVATAR_RES_EXP_NOT_ENOUGH" => Some(Self::RetAvatarResExpNotEnough),
            "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT" => {
                Some(Self::RetAvatarExpReachPromotionLimit)
            }
            "RET_AVATAR_REACH_MAX_PROMOTION" => Some(Self::RetAvatarReachMaxPromotion),
            "RET_SKILLTREE_CONFIG_NOT_EXIST" => Some(Self::RetSkilltreeConfigNotExist),
            "RET_SKILLTREE_ALREADY_UNLOCK" => Some(Self::RetSkilltreeAlreadyUnlock),
            "RET_SKILLTREE_PRE_LOCKED" => Some(Self::RetSkilltreePreLocked),
            "RET_SKILLTREE_LEVEL_NOT_MEET" => Some(Self::RetSkilltreeLevelNotMeet),
            "RET_SKILLTREE_RANK_NOT_MEET" => Some(Self::RetSkilltreeRankNotMeet),
            "RET_AVATAR_DRESS_NO_EQUIPMENT" => Some(Self::RetAvatarDressNoEquipment),
            "RET_AVATAR_EXP_ITEM_NOT_EXIST" => Some(Self::RetAvatarExpItemNotExist),
            "RET_SKILLTREE_POINT_LOCKED" => Some(Self::RetSkilltreePointLocked),
            "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH" => {
                Some(Self::RetSkilltreePointLevelUpgradeNotMatch)
            }
            "RET_SKILLTREE_POINT_LEVEL_REACH_MAX" => {
                Some(Self::RetSkilltreePointLevelReachMax)
            }
            "RET_WORLD_LEVEL_NOT_MEET" => Some(Self::RetWorldLevelNotMeet),
            "RET_PLAYER_LEVEL_NOT_MEET" => Some(Self::RetPlayerLevelNotMeet),
            "RET_AVATAR_RANK_NOT_MATCH" => Some(Self::RetAvatarRankNotMatch),
            "RET_AVATAR_RANK_REACH_MAX" => Some(Self::RetAvatarRankReachMax),
            "RET_HERO_BASIC_TYPE_NOT_MATCH" => Some(Self::RetHeroBasicTypeNotMatch),
            "RET_AVATAR_PROMOTION_NOT_MEET" => Some(Self::RetAvatarPromotionNotMeet),
            "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetPromotionRewardConfigNotExist)
            }
            "RET_PROMOTION_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPromotionRewardAlreadyTaken)
            }
            "RET_AVATAR_SKIN_ITEM_NOT_EXIST" => Some(Self::RetAvatarSkinItemNotExist),
            "RET_AVATAR_SKIN_ALREADY_DRESSED" => Some(Self::RetAvatarSkinAlreadyDressed),
            "RET_AVATAR_NOT_DRESS_SKIN" => Some(Self::RetAvatarNotDressSkin),
            "RET_AVATAR_SKIN_NOT_MATCH_AVATAR" => Some(Self::RetAvatarSkinNotMatchAvatar),
            "RET_ITEM_NOT_EXIST" => Some(Self::RetItemNotExist),
            "RET_ITEM_COST_NOT_ENOUGH" => Some(Self::RetItemCostNotEnough),
            "RET_ITEM_COST_TOO_MUCH" => Some(Self::RetItemCostTooMuch),
            "RET_ITEM_NO_COST" => Some(Self::RetItemNoCost),
            "RET_ITEM_NOT_ENOUGH" => Some(Self::RetItemNotEnough),
            "RET_ITEM_INVALID" => Some(Self::RetItemInvalid),
            "RET_ITEM_CONFIG_NOT_EXIST" => Some(Self::RetItemConfigNotExist),
            "RET_SCOIN_NOT_ENOUGH" => Some(Self::RetScoinNotEnough),
            "RET_ITEM_REWARD_EXCEED_LIMIT" => Some(Self::RetItemRewardExceedLimit),
            "RET_ITEM_INVALID_USE" => Some(Self::RetItemInvalidUse),
            "RET_ITEM_USE_CONFIG_NOT_EXIST" => Some(Self::RetItemUseConfigNotExist),
            "RET_REWARD_CONFIG_NOT_EXIST" => Some(Self::RetRewardConfigNotExist),
            "RET_ITEM_EXCEED_LIMIT" => Some(Self::RetItemExceedLimit),
            "RET_ITEM_COUNT_INVALID" => Some(Self::RetItemCountInvalid),
            "RET_ITEM_USE_TARGET_TYPE_INVALID" => Some(Self::RetItemUseTargetTypeInvalid),
            "RET_ITEM_USE_SATIETY_FULL" => Some(Self::RetItemUseSatietyFull),
            "RET_ITEM_COMPOSE_NOT_EXIST" => Some(Self::RetItemComposeNotExist),
            "RET_RELIC_COMPOSE_NOT_EXIST" => Some(Self::RetRelicComposeNotExist),
            "RET_ITEM_CAN_NOT_SELL" => Some(Self::RetItemCanNotSell),
            "RET_ITEM_SELL_EXCEDD_LIMIT" => Some(Self::RetItemSellExceddLimit),
            "RET_ITEM_NOT_IN_COST_LIST" => Some(Self::RetItemNotInCostList),
            "RET_ITEM_SPECIAL_COST_NOT_ENOUGH" => Some(Self::RetItemSpecialCostNotEnough),
            "RET_ITEM_SPECIAL_COST_TOO_MUCH" => Some(Self::RetItemSpecialCostTooMuch),
            "RET_ITEM_FORMULA_NOT_EXIST" => Some(Self::RetItemFormulaNotExist),
            "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST" => {
                Some(Self::RetItemAutoGiftOptionalNotExist)
            }
            "RET_RELIC_COMPOSE_RELIC_INVALID" => Some(Self::RetRelicComposeRelicInvalid),
            "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID" => {
                Some(Self::RetRelicComposeMainAffixIdInvalid)
            }
            "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE" => {
                Some(Self::RetRelicComposeWrongFormulaType)
            }
            "RET_RELIC_COMPOSE_RELIC_NOT_EXIST" => {
                Some(Self::RetRelicComposeRelicNotExist)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID" => {
                Some(Self::RetRelicComposeBlackGoldCountInvalid)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED" => {
                Some(Self::RetRelicComposeBlackGoldNotNeed)
            }
            "RET_MONTH_CARD_CANNOT_USE" => Some(Self::RetMonthCardCannotUse),
            "RET_ITEM_REWARD_EXCEED_DISAPPEAR" => {
                Some(Self::RetItemRewardExceedDisappear)
            }
            "RET_ITEM_NEED_RECYCLE" => Some(Self::RetItemNeedRecycle),
            "RET_ITEM_COMPOSE_EXCEED_LIMIT" => Some(Self::RetItemComposeExceedLimit),
            "RET_ITEM_CAN_NOT_DESTROY" => Some(Self::RetItemCanNotDestroy),
            "RET_ITEM_ALREADY_MARK" => Some(Self::RetItemAlreadyMark),
            "RET_ITEM_MARK_EXCEED_LIMIT" => Some(Self::RetItemMarkExceedLimit),
            "RET_ITEM_NOT_MARK" => Some(Self::RetItemNotMark),
            "RET_ITEN_TURN_FOOD_NOT_SET" => Some(Self::RetItenTurnFoodNotSet),
            "RET_ITEM_TURN_FOOD_ALREADY_SET" => Some(Self::RetItemTurnFoodAlreadySet),
            "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodConsumeTypeError)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyOpen)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyClose)
            }
            "RET_HCOIN_EXCHANGE_TOO_MUCH" => Some(Self::RetHcoinExchangeTooMuch),
            "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodSceneTypeError)
            }
            "RET_EQUIPMENT_ALREADY_DRESSED" => Some(Self::RetEquipmentAlreadyDressed),
            "RET_EQUIPMENT_NOT_EXIST" => Some(Self::RetEquipmentNotExist),
            "RET_EQUIPMENT_REACH_LEVEL_LIMIT" => Some(Self::RetEquipmentReachLevelLimit),
            "RET_EQUIPMENT_CONSUME_SELF" => Some(Self::RetEquipmentConsumeSelf),
            "RET_EQUIPMENT_ALREADY_LOCKED" => Some(Self::RetEquipmentAlreadyLocked),
            "RET_EQUIPMENT_ALREADY_UNLOCKED" => Some(Self::RetEquipmentAlreadyUnlocked),
            "RET_EQUIPMENT_LOCKED" => Some(Self::RetEquipmentLocked),
            "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT" => {
                Some(Self::RetEquipmentSelectNumOverLimit)
            }
            "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID" => {
                Some(Self::RetEquipmentRankUpMustConsumeSameTid)
            }
            "RET_EQUIPMENT_PROMOTION_REACH_MAX" => {
                Some(Self::RetEquipmentPromotionReachMax)
            }
            "RET_EQUIPMENT_RANK_UP_REACH_MAX" => Some(Self::RetEquipmentRankUpReachMax),
            "RET_EQUIPMENT_LEVEL_REACH_MAX" => Some(Self::RetEquipmentLevelReachMax),
            "RET_EQUIPMENT_EXCEED_LIMIT" => Some(Self::RetEquipmentExceedLimit),
            "RET_RELIC_NOT_EXIST" => Some(Self::RetRelicNotExist),
            "RET_RELIC_REACH_LEVEL_LIMIT" => Some(Self::RetRelicReachLevelLimit),
            "RET_RELIC_CONSUME_SELF" => Some(Self::RetRelicConsumeSelf),
            "RET_RELIC_ALREADY_DRESSED" => Some(Self::RetRelicAlreadyDressed),
            "RET_RELIC_LOCKED" => Some(Self::RetRelicLocked),
            "RET_RELIC_ALREADY_LOCKED" => Some(Self::RetRelicAlreadyLocked),
            "RET_RELIC_ALREADY_UNLOCKED" => Some(Self::RetRelicAlreadyUnlocked),
            "RET_RELIC_LEVEL_IS_NOT_ZERO" => Some(Self::RetRelicLevelIsNotZero),
            "RET_UNIQUE_ID_REPEATED" => Some(Self::RetUniqueIdRepeated),
            "RET_EQUIPMENT_LEVEL_NOT_MEET" => Some(Self::RetEquipmentLevelNotMeet),
            "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST" => {
                Some(Self::RetEquipmentItemNotInCostList)
            }
            "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE" => {
                Some(Self::RetEquipmentLevelGreaterThanOne)
            }
            "RET_EQUIPMENT_ALREADY_RANKED" => Some(Self::RetEquipmentAlreadyRanked),
            "RET_RELIC_EXCEED_LIMIT" => Some(Self::RetRelicExceedLimit),
            "RET_RELIC_ALREADY_DISCARDED" => Some(Self::RetRelicAlreadyDiscarded),
            "RET_RELIC_ALREADY_UNDISCARDED" => Some(Self::RetRelicAlreadyUndiscarded),
            "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST" => {
                Some(Self::RetEquipmentBatchLockTooFast)
            }
            "RET_RELIC_FILTER_PLAN_SLOT_EMPTY" => Some(Self::RetRelicFilterPlanSlotEmpty),
            "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT" => {
                Some(Self::RetRelicFilterPlanNumExceedLimit)
            }
            "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR" => {
                Some(Self::RetRelicFilterPlanNameUtf8Error)
            }
            "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR" => {
                Some(Self::RetRelicFilterPlanNameFormatError)
            }
            "RET_RELIC_FILTER_PLAN_NO_CHANGE" => Some(Self::RetRelicFilterPlanNoChange),
            "RET_LINEUP_INVALID_INDEX" => Some(Self::RetLineupInvalidIndex),
            "RET_LINEUP_INVALID_MEMBER_POS" => Some(Self::RetLineupInvalidMemberPos),
            "RET_LINEUP_SWAP_NOT_EXIST" => Some(Self::RetLineupSwapNotExist),
            "RET_LINEUP_AVATAR_ALREADY_IN" => Some(Self::RetLineupAvatarAlreadyIn),
            "RET_LINEUP_CREATE_AVATAR_ERROR" => Some(Self::RetLineupCreateAvatarError),
            "RET_LINEUP_AVATAR_INIT_ERROR" => Some(Self::RetLineupAvatarInitError),
            "RET_LINEUP_NOT_EXIST" => Some(Self::RetLineupNotExist),
            "RET_LINEUP_ONLY_ONE_MEMBER" => Some(Self::RetLineupOnlyOneMember),
            "RET_LINEUP_SAME_LEADER_SLOT" => Some(Self::RetLineupSameLeaderSlot),
            "RET_LINEUP_NO_LEADER_SELECT" => Some(Self::RetLineupNoLeaderSelect),
            "RET_LINEUP_SWAP_SAME_SLOT" => Some(Self::RetLineupSwapSameSlot),
            "RET_LINEUP_AVATAR_NOT_EXIST" => Some(Self::RetLineupAvatarNotExist),
            "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT" => {
                Some(Self::RetLineupTrialAvatarCanNotQuit)
            }
            "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH" => {
                Some(Self::RetLineupVirtualLineupPlaneNotMatch)
            }
            "RET_LINEUP_NOT_VALID_LEADER" => Some(Self::RetLineupNotValidLeader),
            "RET_LINEUP_SAME_INDEX" => Some(Self::RetLineupSameIndex),
            "RET_LINEUP_IS_EMPTY" => Some(Self::RetLineupIsEmpty),
            "RET_LINEUP_NAME_FORMAT_ERROR" => Some(Self::RetLineupNameFormatError),
            "RET_LINEUP_TYPE_NOT_MATCH" => Some(Self::RetLineupTypeNotMatch),
            "RET_LINEUP_REPLACE_ALL_FAILED" => Some(Self::RetLineupReplaceAllFailed),
            "RET_LINEUP_NOT_ALLOW_EDIT" => Some(Self::RetLineupNotAllowEdit),
            "RET_LINEUP_AVATAR_IS_ALIVE" => Some(Self::RetLineupAvatarIsAlive),
            "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER" => {
                Some(Self::RetLineupAssistHasOnlyMember)
            }
            "RET_LINEUP_ASSIST_CANNOT_SWITCH" => Some(Self::RetLineupAssistCannotSwitch),
            "RET_LINEUP_AVATAR_TYPE_INVALID" => Some(Self::RetLineupAvatarTypeInvalid),
            "RET_LINEUP_NAME_UTF8_ERROR" => Some(Self::RetLineupNameUtf8Error),
            "RET_LINEUP_LEADER_LOCK" => Some(Self::RetLineupLeaderLock),
            "RET_LINEUP_STORY_LINE_NOT_MATCH" => Some(Self::RetLineupStoryLineNotMatch),
            "RET_LINEUP_AVATAR_LOCK" => Some(Self::RetLineupAvatarLock),
            "RET_LINEUP_AVATAR_INVALID" => Some(Self::RetLineupAvatarInvalid),
            "RET_LINEUP_AVATAR_ALREADY_INIT" => Some(Self::RetLineupAvatarAlreadyInit),
            "RET_LINEUP_LIMITED" => Some(Self::RetLineupLimited),
            "RET_MAIL_NOT_EXIST" => Some(Self::RetMailNotExist),
            "RET_MAIL_RANGE_INVALID" => Some(Self::RetMailRangeInvalid),
            "RET_MAIL_MAIL_ID_INVALID" => Some(Self::RetMailMailIdInvalid),
            "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT" => Some(Self::RetMailNoMailTakeAttachment),
            "RET_MAIL_NO_MAIL_TO_DEL" => Some(Self::RetMailNoMailToDel),
            "RET_MAIL_TYPE_INVALID" => Some(Self::RetMailTypeInvalid),
            "RET_MAIL_PARA_INVALID" => Some(Self::RetMailParaInvalid),
            "RET_MAIL_ATTACHEMENT_INVALID" => Some(Self::RetMailAttachementInvalid),
            "RET_MAIL_TICKET_INVALID" => Some(Self::RetMailTicketInvalid),
            "RET_MAIL_TICKET_REPEATED" => Some(Self::RetMailTicketRepeated),
            "RET_STAGE_SETTLE_ERROR" => Some(Self::RetStageSettleError),
            "RET_STAGE_CONFIG_NOT_EXIST" => Some(Self::RetStageConfigNotExist),
            "RET_STAGE_NOT_FOUND" => Some(Self::RetStageNotFound),
            "RET_STAGE_COCOON_PROP_NOT_VALID" => Some(Self::RetStageCocoonPropNotValid),
            "RET_STAGE_COCOON_WAVE_NOT_VALID" => Some(Self::RetStageCocoonWaveNotValid),
            "RET_STAGE_PROP_ID_NOT_EQUAL" => Some(Self::RetStagePropIdNotEqual),
            "RET_STAGE_COCOON_WAVE_OVER" => Some(Self::RetStageCocoonWaveOver),
            "RET_STAGE_WEEK_COCOON_OVER_CNT" => Some(Self::RetStageWeekCocoonOverCnt),
            "RET_STAGE_COCOON_NOT_OPEN" => Some(Self::RetStageCocoonNotOpen),
            "RET_STAGE_TRIAL_NOT_OPEN" => Some(Self::RetStageTrialNotOpen),
            "RET_STAGE_FARM_NOT_OPEN" => Some(Self::RetStageFarmNotOpen),
            "RET_STAGE_FARM_TYPE_ERROR" => Some(Self::RetStageFarmTypeError),
            "RET_CHAPTER_LOCK" => Some(Self::RetChapterLock),
            "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH" => {
                Some(Self::RetChapterChallengeNumNotEnough)
            }
            "RET_CHAPTER_REWARD_ID_NOT_EXIST" => Some(Self::RetChapterRewardIdNotExist),
            "RET_CHAPTER_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetChapterRewardAlreadyTaken)
            }
            "RET_BATTLE_STAGE_NOT_MATCH" => Some(Self::RetBattleStageNotMatch),
            "RET_IN_BATTLE_NOW" => Some(Self::RetInBattleNow),
            "RET_BATTLE_CHEAT" => Some(Self::RetBattleCheat),
            "RET_BATTLE_FAIL" => Some(Self::RetBattleFail),
            "RET_BATTLE_NO_LINEUP" => Some(Self::RetBattleNoLineup),
            "RET_BATTLE_LINEUP_EMPTY" => Some(Self::RetBattleLineupEmpty),
            "RET_BATTLE_VERSION_NOT_MATCH" => Some(Self::RetBattleVersionNotMatch),
            "RET_BATTLE_QUIT_BY_SERVER" => Some(Self::RetBattleQuitByServer),
            "RET_IN_BATTLE_CHECK" => Some(Self::RetInBattleCheck),
            "RET_BATTLE_CHECK_NEED_RETRY" => Some(Self::RetBattleCheckNeedRetry),
            "RET_BATTLE_COST_TIME_CHECK_FAIL" => Some(Self::RetBattleCostTimeCheckFail),
            "RET_LACK_EXCHANGE_STAMINA_TIMES" => Some(Self::RetLackExchangeStaminaTimes),
            "RET_LACK_STAMINA" => Some(Self::RetLackStamina),
            "RET_STAMINA_FULL" => Some(Self::RetStaminaFull),
            "RET_AUTHKEY_SIGN_TYPE_ERROR" => Some(Self::RetAuthkeySignTypeError),
            "RET_AUTHKEY_SIGN_VER_ERROR" => Some(Self::RetAuthkeySignVerError),
            "RET_NICKNAME_FORMAT_ERROR" => Some(Self::RetNicknameFormatError),
            "RET_SENSITIVE_WORDS" => Some(Self::RetSensitiveWords),
            "RET_LEVEL_REWARD_HAS_TAKEN" => Some(Self::RetLevelRewardHasTaken),
            "RET_LEVEL_REWARD_LEVEL_ERROR" => Some(Self::RetLevelRewardLevelError),
            "RET_LANGUAGE_INVALID" => Some(Self::RetLanguageInvalid),
            "RET_NICKNAME_IN_CD" => Some(Self::RetNicknameInCd),
            "RET_GAMEPLAY_BIRTHDAY_INVALID" => Some(Self::RetGameplayBirthdayInvalid),
            "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET" => {
                Some(Self::RetGameplayBirthdayAlreadySet)
            }
            "RET_NICKNAME_UTF8_ERROR" => Some(Self::RetNicknameUtf8Error),
            "RET_NICKNAME_DIGIT_LIMIT_ERROR" => Some(Self::RetNicknameDigitLimitError),
            "RET_SENSITIVE_WORDS_PLATFORM_ERROR" => {
                Some(Self::RetSensitiveWordsPlatformError)
            }
            "RET_PLAYER_SETTING_TYPE_INVALID" => Some(Self::RetPlayerSettingTypeInvalid),
            "RET_MAZE_LACK_TICKET" => Some(Self::RetMazeLackTicket),
            "RET_MAZE_NOT_UNLOCK" => Some(Self::RetMazeNotUnlock),
            "RET_MAZE_NO_ABILITY" => Some(Self::RetMazeNoAbility),
            "RET_MAZE_NO_PLANE" => Some(Self::RetMazeNoPlane),
            "RET_MAZE_MAP_NOT_EXIST" => Some(Self::RetMazeMapNotExist),
            "RET_MAZE_MP_NOT_ENOUGH" => Some(Self::RetMazeMpNotEnough),
            "RET_SPRING_NOT_ENABLE" => Some(Self::RetSpringNotEnable),
            "RET_SPRING_TOO_FAR" => Some(Self::RetSpringTooFar),
            "RET_NOT_IN_MAZE" => Some(Self::RetNotInMaze),
            "RET_MAZE_TIME_OF_DAY_TYPE_ERROR" => Some(Self::RetMazeTimeOfDayTypeError),
            "RET_SCENE_TRANSFER_LOCKED_BY_TASK" => {
                Some(Self::RetSceneTransferLockedByTask)
            }
            "RET_PLOT_NOT_UNLOCK" => Some(Self::RetPlotNotUnlock),
            "RET_MISSION_NOT_EXIST" => Some(Self::RetMissionNotExist),
            "RET_MISSION_ALREADY_DONE" => Some(Self::RetMissionAlreadyDone),
            "RET_DAILY_TASK_NOT_FINISH" => Some(Self::RetDailyTaskNotFinish),
            "RET_DAILY_TASK_REWARD_HAS_TAKEN" => Some(Self::RetDailyTaskRewardHasTaken),
            "RET_MISSION_NOT_FINISH" => Some(Self::RetMissionNotFinish),
            "RET_MISSION_NOT_DOING" => Some(Self::RetMissionNotDoing),
            "RET_MISSION_FINISH_WAY_NOT_MATCH" => Some(Self::RetMissionFinishWayNotMatch),
            "RET_MISSION_SCENE_NOT_MATCH" => Some(Self::RetMissionSceneNotMatch),
            "RET_MISSION_CUSTOM_VALUE_NOT_VALID" => {
                Some(Self::RetMissionCustomValueNotValid)
            }
            "RET_MISSION_SUB_MISSION_NOT_MATCH" => {
                Some(Self::RetMissionSubMissionNotMatch)
            }
            "RET_ADVENTURE_MAP_NOT_EXIST" => Some(Self::RetAdventureMapNotExist),
            "RET_SCENE_ENTITY_NOT_EXIST" => Some(Self::RetSceneEntityNotExist),
            "RET_NOT_IN_SCENE" => Some(Self::RetNotInScene),
            "RET_SCENE_MONSTER_NOT_EXIST" => Some(Self::RetSceneMonsterNotExist),
            "RET_INTERACT_CONFIG_NOT_EXIST" => Some(Self::RetInteractConfigNotExist),
            "RET_UNSUPPORTED_PROP_STATE" => Some(Self::RetUnsupportedPropState),
            "RET_SCENE_ENTRY_ID_NOT_MATCH" => Some(Self::RetSceneEntryIdNotMatch),
            "RET_SCENE_ENTITY_MOVE_CHECK_FAILED" => {
                Some(Self::RetSceneEntityMoveCheckFailed)
            }
            "RET_ASSIST_MONSTER_COUNT_LIMIT" => Some(Self::RetAssistMonsterCountLimit),
            "RET_SCENE_USE_SKILL_FAIL" => Some(Self::RetSceneUseSkillFail),
            "RET_PROP_IS_HIDDEN" => Some(Self::RetPropIsHidden),
            "RET_LOADING_SUCC_ALREADY" => Some(Self::RetLoadingSuccAlready),
            "RET_SCENE_ENTITY_TYPE_INVALID" => Some(Self::RetSceneEntityTypeInvalid),
            "RET_INTERACT_TYPE_INVALID" => Some(Self::RetInteractTypeInvalid),
            "RET_INTERACT_NOT_IN_REGION" => Some(Self::RetInteractNotInRegion),
            "RET_INTERACT_SUB_TYPE_INVALID" => Some(Self::RetInteractSubTypeInvalid),
            "RET_NOT_LEADER_ENTITY" => Some(Self::RetNotLeaderEntity),
            "RET_MONSTER_IS_NOT_FARM_ELEMENT" => Some(Self::RetMonsterIsNotFarmElement),
            "RET_MONSTER_CONFIG_NOT_EXIST" => Some(Self::RetMonsterConfigNotExist),
            "RET_AVATAR_HP_ALREADY_FULL" => Some(Self::RetAvatarHpAlreadyFull),
            "RET_CUR_INTERACT_ENTITY_NOT_MATCH" => {
                Some(Self::RetCurInteractEntityNotMatch)
            }
            "RET_PLANE_TYPE_NOT_ALLOW" => Some(Self::RetPlaneTypeNotAllow),
            "RET_GROUP_NOT_EXIST" => Some(Self::RetGroupNotExist),
            "RET_GROUP_SAVE_DATA_IN_CD" => Some(Self::RetGroupSaveDataInCd),
            "RET_GROUP_SAVE_LENGH_REACH_MAX" => Some(Self::RetGroupSaveLenghReachMax),
            "RET_RECENT_ELEMENT_NOT_EXIST" => Some(Self::RetRecentElementNotExist),
            "RET_RECENT_ELEMENT_STAGE_NOT_MATCH" => {
                Some(Self::RetRecentElementStageNotMatch)
            }
            "RET_SCENE_POSITION_VERSION_NOT_MATCH" => {
                Some(Self::RetScenePositionVersionNotMatch)
            }
            "RET_GAMEPLAY_COUNTER_NOT_EXIST" => Some(Self::RetGameplayCounterNotExist),
            "RET_GAMEPLAY_COUNTER_NOT_ENOUGH" => Some(Self::RetGameplayCounterNotEnough),
            "RET_GROUP_STATE_NOT_MATCH" => Some(Self::RetGroupStateNotMatch),
            "RET_SCENE_ENTITY_POS_NOT_MATCH" => Some(Self::RetSceneEntityPosNotMatch),
            "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF" => {
                Some(Self::RetGroupStateCustomSaveDataOff)
            }
            "RET_SCENE_NOT_MATCH" => Some(Self::RetSceneNotMatch),
            "RET_BUY_TIMES_LIMIT" => Some(Self::RetBuyTimesLimit),
            "RET_BUY_LIMIT_TYPE" => Some(Self::RetBuyLimitType),
            "RET_SHOP_NOT_OPEN" => Some(Self::RetShopNotOpen),
            "RET_GOODS_NOT_OPEN" => Some(Self::RetGoodsNotOpen),
            "RET_CITY_LEVEL_REWARD_TAKEN" => Some(Self::RetCityLevelRewardTaken),
            "RET_CITY_LEVEL_NOT_MEET" => Some(Self::RetCityLevelNotMeet),
            "RET_SINGLE_BUY_LIMIT" => Some(Self::RetSingleBuyLimit),
            "RET_TUTORIAL_NOT_UNLOCK" => Some(Self::RetTutorialNotUnlock),
            "RET_TUTORIAL_UNLOCK_ALREADY" => Some(Self::RetTutorialUnlockAlready),
            "RET_TUTORIAL_FINISH_ALREADY" => Some(Self::RetTutorialFinishAlready),
            "RET_TUTORIAL_PRE_NOT_UNLOCK" => Some(Self::RetTutorialPreNotUnlock),
            "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH" => {
                Some(Self::RetTutorialPlayerLevelNotMatch)
            }
            "RET_TUTORIAL_TUTORIAL_NOT_FOUND" => Some(Self::RetTutorialTutorialNotFound),
            "RET_CHALLENGE_NOT_EXIST" => Some(Self::RetChallengeNotExist),
            "RET_CHALLENGE_NOT_UNLOCK" => Some(Self::RetChallengeNotUnlock),
            "RET_CHALLENGE_ALREADY" => Some(Self::RetChallengeAlready),
            "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN" => {
                Some(Self::RetChallengeLineupEditForbidden)
            }
            "RET_CHALLENGE_LINEUP_EMPTY" => Some(Self::RetChallengeLineupEmpty),
            "RET_CHALLENGE_NOT_DOING" => Some(Self::RetChallengeNotDoing),
            "RET_CHALLENGE_NOT_FINISH" => Some(Self::RetChallengeNotFinish),
            "RET_CHALLENGE_TARGET_NOT_FINISH" => Some(Self::RetChallengeTargetNotFinish),
            "RET_CHALLENGE_TARGET_REWARD_TAKEN" => {
                Some(Self::RetChallengeTargetRewardTaken)
            }
            "RET_CHALLENGE_TIME_NOT_VALID" => Some(Self::RetChallengeTimeNotValid),
            "RET_CHALLENGE_STARS_COUNT_NOT_MEET" => {
                Some(Self::RetChallengeStarsCountNotMeet)
            }
            "RET_CHALLENGE_STARS_REWARD_TAKEN" => {
                Some(Self::RetChallengeStarsRewardTaken)
            }
            "RET_CHALLENGE_STARS_NOT_EXIST" => Some(Self::RetChallengeStarsNotExist),
            "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR" => {
                Some(Self::RetChallengeCurSceneNotEntryFloor)
            }
            "RET_CHALLENGE_NO_TEAM_ARCHIVE" => Some(Self::RetChallengeNoTeamArchive),
            "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID" => {
                Some(Self::RetChallengeLineupAvatarTypeInvalid)
            }
            "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetChallengeLineupRecommendInCd)
            }
            "RET_BASIC_TYPE_ALREADY" => Some(Self::RetBasicTypeAlready),
            "RET_NO_BASIC_TYPE" => Some(Self::RetNoBasicType),
            "RET_NOT_CHOOSE_BASIC_TYPE" => Some(Self::RetNotChooseBasicType),
            "RET_NOT_FUNC_CLOSE" => Some(Self::RetNotFuncClose),
            "RET_NOT_CHOOSE_GENDER" => Some(Self::RetNotChooseGender),
            "RET_NOT_REQ_UNLOCK_BASIC_TYPE" => Some(Self::RetNotReqUnlockBasicType),
            "RET_AVATAR_PATH_LOCKED" => Some(Self::RetAvatarPathLocked),
            "RET_ROGUE_STATUS_NOT_MATCH" => Some(Self::RetRogueStatusNotMatch),
            "RET_ROGUE_SELECT_BUFF_NOT_EXIST" => Some(Self::RetRogueSelectBuffNotExist),
            "RET_ROGUE_COIN_NOT_ENOUGH" => Some(Self::RetRogueCoinNotEnough),
            "RET_ROGUE_STAMINA_NOT_ENOUGH" => Some(Self::RetRogueStaminaNotEnough),
            "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueAppraisalCountNotEnough)
            }
            "RET_ROGUE_PROP_ALREADY_USED" => Some(Self::RetRoguePropAlreadyUsed),
            "RET_ROGUE_RECORD_ALREADY_SAVED" => Some(Self::RetRogueRecordAlreadySaved),
            "RET_ROGUE_ROLL_BUFF_MAX_COUNT" => Some(Self::RetRogueRollBuffMaxCount),
            "RET_ROGUE_PICK_AVATAR_INVALID" => Some(Self::RetRoguePickAvatarInvalid),
            "RET_ROGUE_QUEST_EXPIRE" => Some(Self::RetRogueQuestExpire),
            "RET_ROGUE_QUEST_REWARD_ALREADY" => Some(Self::RetRogueQuestRewardAlready),
            "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueReviveCountNotEnough)
            }
            "RET_ROGUE_AREA_INVALID" => Some(Self::RetRogueAreaInvalid),
            "RET_ROGUE_SCORE_REWARD_POOL_INVALID" => {
                Some(Self::RetRogueScoreRewardPoolInvalid)
            }
            "RET_ROGUE_SCORE_REWARD_ROW_INVALID" => {
                Some(Self::RetRogueScoreRewardRowInvalid)
            }
            "RET_ROGUE_AEON_LEVEL_NOT_MEET" => Some(Self::RetRogueAeonLevelNotMeet),
            "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueAeonLevelRewardAlreadyTaken)
            }
            "RET_ROGUE_AEON_CONFIG_NOT_EXIST" => Some(Self::RetRogueAeonConfigNotExist),
            "RET_ROGUE_TRIAL_AVATAR_INVALID" => Some(Self::RetRogueTrialAvatarInvalid),
            "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueHandbookRewardAlreadyTaken)
            }
            "RET_ROGUE_ROOM_TYPE_NOT_MATCH" => Some(Self::RetRogueRoomTypeNotMatch),
            "RET_ROGUE_SHOP_GOOD_NOT_FOUND" => Some(Self::RetRogueShopGoodNotFound),
            "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT" => {
                Some(Self::RetRogueShopGoodAlreadyBought)
            }
            "RET_ROGUE_SHOP_GOOD_ALREADY_OWN" => Some(Self::RetRogueShopGoodAlreadyOwn),
            "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST" => Some(Self::RetRogueShopMiracleNotExist),
            "RET_ROGUE_SHOP_NOT_EXIST" => Some(Self::RetRogueShopNotExist),
            "RET_ROGUE_SHOP_CANNOT_REFRESH" => Some(Self::RetRogueShopCannotRefresh),
            "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH" => {
                Some(Self::RetRogueSelectBuffCertainMismatch)
            }
            "RET_MISSION_EVENT_CONFIG_NOT_EXIST" => {
                Some(Self::RetMissionEventConfigNotExist)
            }
            "RET_MISSION_EVENT_NOT_CLIENT" => Some(Self::RetMissionEventNotClient),
            "RET_MISSION_EVENT_FINISHED" => Some(Self::RetMissionEventFinished),
            "RET_MISSION_EVENT_DOING" => Some(Self::RetMissionEventDoing),
            "RET_HAS_CHALLENGE_MISSION_EVENT" => Some(Self::RetHasChallengeMissionEvent),
            "RET_NOT_CHALLENGE_MISSION_EVENT" => Some(Self::RetNotChallengeMissionEvent),
            "RET_GACHA_ID_NOT_EXIST" => Some(Self::RetGachaIdNotExist),
            "RET_GACHA_NUM_INVALID" => Some(Self::RetGachaNumInvalid),
            "RET_GACHA_FIRST_GACHA_MUST_ONE" => Some(Self::RetGachaFirstGachaMustOne),
            "RET_GACHA_REQ_DUPLICATED" => Some(Self::RetGachaReqDuplicated),
            "RET_GACHA_NOT_IN_SCHEDULE" => Some(Self::RetGachaNotInSchedule),
            "RET_GACHA_NEWBIE_CLOSE" => Some(Self::RetGachaNewbieClose),
            "RET_GACHA_TODAY_LIMITED" => Some(Self::RetGachaTodayLimited),
            "RET_GACHA_NOT_SUPPORT" => Some(Self::RetGachaNotSupport),
            "RET_GACHA_CEILING_NOT_ENOUGH" => Some(Self::RetGachaCeilingNotEnough),
            "RET_GACHA_CEILING_CLOSE" => Some(Self::RetGachaCeilingClose),
            "RET_NOT_IN_RAID" => Some(Self::RetNotInRaid),
            "RET_RAID_DOING" => Some(Self::RetRaidDoing),
            "RET_NOT_PROP" => Some(Self::RetNotProp),
            "RET_RAID_ID_NOT_MATCH" => Some(Self::RetRaidIdNotMatch),
            "RET_RAID_RESTART_NOT_MATCH" => Some(Self::RetRaidRestartNotMatch),
            "RET_RAID_LIMIT" => Some(Self::RetRaidLimit),
            "RET_RAID_AVATAR_LIST_EMPTY" => Some(Self::RetRaidAvatarListEmpty),
            "RET_RAID_AVATAR_NOT_EXIST" => Some(Self::RetRaidAvatarNotExist),
            "RET_CHALLENGE_RAID_REWARD_ALREADY" => {
                Some(Self::RetChallengeRaidRewardAlready)
            }
            "RET_CHALLENGE_RAID_SCORE_NOT_REACH" => {
                Some(Self::RetChallengeRaidScoreNotReach)
            }
            "RET_CHALLENGE_RAID_NOT_OPEN" => Some(Self::RetChallengeRaidNotOpen),
            "RET_RAID_FINISHED" => Some(Self::RetRaidFinished),
            "RET_RAID_WORLD_LEVEL_NOT_LOCK" => Some(Self::RetRaidWorldLevelNotLock),
            "RET_RAID_CANNOT_USE_ASSIST" => Some(Self::RetRaidCannotUseAssist),
            "RET_RAID_AVATAR_NOT_MATCH" => Some(Self::RetRaidAvatarNotMatch),
            "RET_RAID_CAN_NOT_SAVE" => Some(Self::RetRaidCanNotSave),
            "RET_RAID_NO_SAVE" => Some(Self::RetRaidNoSave),
            "RET_ACTIVITY_RAID_NOT_OPEN" => Some(Self::RetActivityRaidNotOpen),
            "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST" => {
                Some(Self::RetRaidAvatarCaptainNotExist)
            }
            "RET_RAID_STORY_LINE_NOT_MATCH" => Some(Self::RetRaidStoryLineNotMatch),
            "RET_TALK_EVENT_ALREADY_TAKEN" => Some(Self::RetTalkEventAlreadyTaken),
            "RET_NPC_ALREADY_MEET" => Some(Self::RetNpcAlreadyMeet),
            "RET_NPC_NOT_IN_CONFIG" => Some(Self::RetNpcNotInConfig),
            "RET_DIALOGUE_GROUP_DISMATCH" => Some(Self::RetDialogueGroupDismatch),
            "RET_DIALOGUE_EVENT_INVALID" => Some(Self::RetDialogueEventInvalid),
            "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH" => {
                Some(Self::RetTalkEventTakeProtoNotMatch)
            }
            "RET_TALK_EVENT_NOT_VALID" => Some(Self::RetTalkEventNotValid),
            "RET_EXPEDITION_CONFIG_NOT_EXIST" => Some(Self::RetExpeditionConfigNotExist),
            "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetExpeditionRewardConfigNotExist)
            }
            "RET_EXPEDITION_NOT_UNLOCKED" => Some(Self::RetExpeditionNotUnlocked),
            "RET_EXPEDITION_ALREADY_ACCEPTED" => Some(Self::RetExpeditionAlreadyAccepted),
            "RET_EXPEDITION_REPEATED_AVATAR" => Some(Self::RetExpeditionRepeatedAvatar),
            "RET_AVATAR_ALREADY_DISPATCHED" => Some(Self::RetAvatarAlreadyDispatched),
            "RET_EXPEDITION_NOT_ACCEPTED" => Some(Self::RetExpeditionNotAccepted),
            "RET_EXPEDITION_NOT_FINISH" => Some(Self::RetExpeditionNotFinish),
            "RET_EXPEDITION_ALREADY_FINISH" => Some(Self::RetExpeditionAlreadyFinish),
            "RET_EXPEDITION_TEAM_COUNT_LIMIT" => Some(Self::RetExpeditionTeamCountLimit),
            "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH" => {
                Some(Self::RetExpeditionAvatarNumNotMatch)
            }
            "RET_EXPEDITION_NOT_OPEN" => Some(Self::RetExpeditionNotOpen),
            "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID" => {
                Some(Self::RetExpeditionFriendAvatarNotValid)
            }
            "RET_EXPEDITION_NOT_PUBLISHED" => Some(Self::RetExpeditionNotPublished),
            "RET_LOGIN_ACTIVITY_HAS_TAKEN" => Some(Self::RetLoginActivityHasTaken),
            "RET_LOGIN_ACTIVITY_DAYS_LACK" => Some(Self::RetLoginActivityDaysLack),
            "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE" => {
                Some(Self::RetTrialActivityRewardAlreadyTake)
            }
            "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH" => {
                Some(Self::RetTrialActivityStageNotFinish)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_HAS_TAKEN" => {
                Some(Self::RetMaterialSubmitActivityHasTaken)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_NOT_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialNotSubmitted)
            }
            "RET_MATERIAL_SUBMIT_ACTIVITY_MATERIAL_ALREADY_SUBMITTED" => {
                Some(Self::RetMaterialSubmitActivityMaterialAlreadySubmitted)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR" => {
                Some(Self::RetFantasticStoryActivityStoryError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityStoryNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityBattleNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleAvatarError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleBuffError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH" => {
                Some(Self::RetFantasticStoryActivityPreBattleScoreNotEnough)
            }
            "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY" => {
                Some(Self::RetTrialActivityAlreadyInTrialActivity)
            }
            "RET_COMMON_ACTIVITY_NOT_OPEN" => Some(Self::RetCommonActivityNotOpen),
            "RET_MESSAGE_CONFIG_NOT_EXIST" => Some(Self::RetMessageConfigNotExist),
            "RET_MESSAGE_SECTION_NOT_TAKE" => Some(Self::RetMessageSectionNotTake),
            "RET_MESSAGE_GROUP_NOT_TAKE" => Some(Self::RetMessageGroupNotTake),
            "RET_MESSAGE_SECTION_ID_NOT_MATCH" => Some(Self::RetMessageSectionIdNotMatch),
            "RET_MESSAGE_SECTION_CAN_NOT_FINISH" => {
                Some(Self::RetMessageSectionCanNotFinish)
            }
            "RET_MESSAGE_ITEM_CAN_NOT_FINISH" => Some(Self::RetMessageItemCanNotFinish),
            "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH" => {
                Some(Self::RetMessageItemRaidCanNotFinish)
            }
            "RET_FRIEND_ALREADY_IS_FRIEND" => Some(Self::RetFriendAlreadyIsFriend),
            "RET_FRIEND_IS_NOT_FRIEND" => Some(Self::RetFriendIsNotFriend),
            "RET_FRIEND_APPLY_EXPIRE" => Some(Self::RetFriendApplyExpire),
            "RET_FRIEND_IN_BLACKLIST" => Some(Self::RetFriendInBlacklist),
            "RET_FRIEND_NOT_IN_BLACKLIST" => Some(Self::RetFriendNotInBlacklist),
            "RET_FRIEND_NUMBER_LIMIT" => Some(Self::RetFriendNumberLimit),
            "RET_FRIEND_BLACKLIST_NUMBER_LIMIT" => {
                Some(Self::RetFriendBlacklistNumberLimit)
            }
            "RET_FRIEND_DAILY_APPLY_LIMIT" => Some(Self::RetFriendDailyApplyLimit),
            "RET_FRIEND_IN_HANDLE_LIMIT" => Some(Self::RetFriendInHandleLimit),
            "RET_FRIEND_APPLY_IN_CD" => Some(Self::RetFriendApplyInCd),
            "RET_FRIEND_REMARK_NAME_FORMAT_ERROR" => {
                Some(Self::RetFriendRemarkNameFormatError)
            }
            "RET_FRIEND_PLAYER_NOT_FOUND" => Some(Self::RetFriendPlayerNotFound),
            "RET_FRIEND_IN_TARGET_BLACKLIST" => Some(Self::RetFriendInTargetBlacklist),
            "RET_FRIEND_TARGET_NUMBER_LIMIT" => Some(Self::RetFriendTargetNumberLimit),
            "RET_ASSIST_QUERY_TOO_FAST" => Some(Self::RetAssistQueryTooFast),
            "RET_ASSIST_NOT_EXIST" => Some(Self::RetAssistNotExist),
            "RET_ASSIST_USED_ALREADY" => Some(Self::RetAssistUsedAlready),
            "RET_FRIEND_REPORT_REASON_FORMAT_ERROR" => {
                Some(Self::RetFriendReportReasonFormatError)
            }
            "RET_FRIEND_REPORT_SENSITIVE_WORDS" => {
                Some(Self::RetFriendReportSensitiveWords)
            }
            "RET_ASSIST_USED_TIMES_OVER" => Some(Self::RetAssistUsedTimesOver),
            "RET_ASSIST_QUIT_ALREADY" => Some(Self::RetAssistQuitAlready),
            "RET_ASSIST_AVATAR_IN_LINEUP" => Some(Self::RetAssistAvatarInLineup),
            "RET_ASSIST_NO_REWARD" => Some(Self::RetAssistNoReward),
            "RET_FRIEND_SEARCH_NUM_LIMIT" => Some(Self::RetFriendSearchNumLimit),
            "RET_FRIEND_SEARCH_IN_CD" => Some(Self::RetFriendSearchInCd),
            "RET_FRIEND_REMARK_NAME_UTF8_ERROR" => {
                Some(Self::RetFriendRemarkNameUtf8Error)
            }
            "RET_FRIEND_REPORT_REASON_UTF8_ERROR" => {
                Some(Self::RetFriendReportReasonUtf8Error)
            }
            "RET_ASSIST_SET_ALREADY" => Some(Self::RetAssistSetAlready),
            "RET_FRIEND_TARGET_FORBID_OTHER_APPLY" => {
                Some(Self::RetFriendTargetForbidOtherApply)
            }
            "RET_FRIEND_MARKED_CNT_MAX" => Some(Self::RetFriendMarkedCntMax),
            "RET_FRIEND_MARKED_ALREADY" => Some(Self::RetFriendMarkedAlready),
            "RET_FRIEND_NOT_MARKED" => Some(Self::RetFriendNotMarked),
            "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetFriendChallengeLineupRecommendInCd)
            }
            "RET_VIEW_PLAYER_CARD_IN_CD" => Some(Self::RetViewPlayerCardInCd),
            "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD" => {
                Some(Self::RetViewPlayerBattleRecordInCd)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST" => {
                Some(Self::RetPlayerBoardHeadIconNotExist)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_LOCKED" => {
                Some(Self::RetPlayerBoardHeadIconLocked)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED" => {
                Some(Self::RetPlayerBoardHeadIconAlreadyUnlocked)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardDisplayAvatarNotExist)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT" => {
                Some(Self::RetPlayerBoardDisplayAvatarExceedLimit)
            }
            "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR" => {
                Some(Self::RetPlayerBoardDisplayRepeatedAvatar)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS" => {
                Some(Self::RetPlayerBoardDisplayAvatarSamePos)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardDisplayAvatarLocked)
            }
            "RET_SIGNATURE_LENGTH_EXCEED_LIMIT" => {
                Some(Self::RetSignatureLengthExceedLimit)
            }
            "RET_SIGNATURE_SENSITIVE_WORDS" => Some(Self::RetSignatureSensitiveWords),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardAssistAvatarNotExist)
            }
            "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardAssistAvatarLocked)
            }
            "RET_SIGNATURE_UTF8_ERROR" => Some(Self::RetSignatureUtf8Error),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR" => {
                Some(Self::RetPlayerBoardAssistAvatarCntError)
            }
            "RET_BATTLE_PASS_TIER_NOT_VALID" => Some(Self::RetBattlePassTierNotValid),
            "RET_BATTLE_PASS_LEVEL_NOT_MEET" => Some(Self::RetBattlePassLevelNotMeet),
            "RET_BATTLE_PASS_REWARD_TAKE_ALREADY" => {
                Some(Self::RetBattlePassRewardTakeAlready)
            }
            "RET_BATTLE_PASS_NOT_PREMIUM" => Some(Self::RetBattlePassNotPremium),
            "RET_BATTLE_PASS_NOT_DOING" => Some(Self::RetBattlePassNotDoing),
            "RET_BATTLE_PASS_LEVEL_INVALID" => Some(Self::RetBattlePassLevelInvalid),
            "RET_BATTLE_PASS_NOT_UNLOCK" => Some(Self::RetBattlePassNotUnlock),
            "RET_BATTLE_PASS_NO_REWARD" => Some(Self::RetBattlePassNoReward),
            "RET_BATTLE_PASS_QUEST_NOT_VALID" => Some(Self::RetBattlePassQuestNotValid),
            "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL" => {
                Some(Self::RetBattlePassNotChooseOptional)
            }
            "RET_BATTLE_PASS_NOT_TAKE_REWARD" => Some(Self::RetBattlePassNotTakeReward),
            "RET_BATTLE_PASS_OPTIONAL_NOT_VALID" => {
                Some(Self::RetBattlePassOptionalNotValid)
            }
            "RET_BATTLE_PASS_BUY_ALREADY" => Some(Self::RetBattlePassBuyAlready),
            "RET_BATTLE_PASS_NEAR_END" => Some(Self::RetBattlePassNearEnd),
            "RET_MUSIC_LOCKED" => Some(Self::RetMusicLocked),
            "RET_MUSIC_NOT_EXIST" => Some(Self::RetMusicNotExist),
            "RET_MUSIC_UNLOCK_FAILED" => Some(Self::RetMusicUnlockFailed),
            "RET_PUNK_LORD_LACK_SUMMON_TIMES" => Some(Self::RetPunkLordLackSummonTimes),
            "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT" => {
                Some(Self::RetPunkLordAttackingMonsterLimit)
            }
            "RET_PUNK_LORD_MONSTER_NOT_EXIST" => Some(Self::RetPunkLordMonsterNotExist),
            "RET_PUNK_LORD_MONSTER_ALREADY_SHARED" => {
                Some(Self::RetPunkLordMonsterAlreadyShared)
            }
            "RET_PUNK_LORD_MONSTER_EXPIRED" => Some(Self::RetPunkLordMonsterExpired),
            "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT" => {
                Some(Self::RetPunkLordSelfMonsterAttackLimit)
            }
            "RET_PUNK_LORD_LACK_SUPPORT_TIMES" => Some(Self::RetPunkLordLackSupportTimes),
            "RET_PUNK_LORD_MONSTER_ALREADY_KILLED" => {
                Some(Self::RetPunkLordMonsterAlreadyKilled)
            }
            "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT" => {
                Some(Self::RetPunkLordMonsterAttackerLimit)
            }
            "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID" => {
                Some(Self::RetPunkLordWorldLevleNotValid)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST" => {
                Some(Self::RetPunkLordRewardLevleNotExist)
            }
            "RET_PUNK_LORD_POINT_NOT_MEET" => Some(Self::RetPunkLordPointNotMeet),
            "RET_PUNK_LORD_IN_ATTACKING" => Some(Self::RetPunkLordInAttacking),
            "RET_PUNK_LORD_OPERATION_IN_CD" => Some(Self::RetPunkLordOperationInCd),
            "RET_PUNK_LORD_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPunkLordRewardAlreadyTaken)
            }
            "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetPunkLordOverBonusRewardLimit)
            }
            "RET_PUNK_LORD_NOT_IN_SCHEDULE" => Some(Self::RetPunkLordNotInSchedule),
            "RET_PUNK_LORD_MONSTER_NOT_ATTACKED" => {
                Some(Self::RetPunkLordMonsterNotAttacked)
            }
            "RET_PUNK_LORD_MONSTER_NOT_KILLED" => Some(Self::RetPunkLordMonsterNotKilled),
            "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordMonsterKilledScoreAlreadyTake)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordRewardLevleAlreadyTake)
            }
            "RET_DAILY_ACTIVE_LEVEL_INVALID" => Some(Self::RetDailyActiveLevelInvalid),
            "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetDailyActiveLevelRewardAlreadyTaken)
            }
            "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH" => {
                Some(Self::RetDailyActiveLevelApNotEnough)
            }
            "RET_DAILY_MEET_PAM" => Some(Self::RetDailyMeetPam),
            "RET_REPLAY_ID_NOT_MATCH" => Some(Self::RetReplayIdNotMatch),
            "RET_REPLAY_REQ_NOT_VALID" => Some(Self::RetReplayReqNotValid),
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED" => {
                Some(Self::RetFightActivityDifficultyLevelNotPassed)
            }
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE" => {
                Some(Self::RetFightActivityDifficultyLevelRewardAlreadyTake)
            }
            "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetFightActivityStageNotOpen)
            }
            "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetFightActivityLevelNotUnlock)
            }
            "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorVisitorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorBehaviorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED" => {
                Some(Self::RetTrainVisitorBehaviorFinished)
            }
            "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN" => {
                Some(Self::RetTrainVisitorAllBehaviorRewardTaken)
            }
            "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH" => {
                Some(Self::RetTrainVisitorGetOnMissionNotFinish)
            }
            "RET_TRAIN_VISITOR_NOT_GET_OFF" => Some(Self::RetTrainVisitorNotGetOff),
            "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE" => Some(Self::RetTextJoinUnknowIsOverride),
            "RET_TEXT_JOIN_ID_NOT_EXIST" => Some(Self::RetTextJoinIdNotExist),
            "RET_TEXT_JOIN_CAN_NOT_OVERRIDE" => Some(Self::RetTextJoinCanNotOverride),
            "RET_TEXT_JOIN_ITEM_ID_ERROR" => Some(Self::RetTextJoinItemIdError),
            "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetTextJoinSensitiveCheckError)
            }
            "RET_TEXT_JOIN_MUST_OVERRIDE" => Some(Self::RetTextJoinMustOverride),
            "RET_TEXT_JOIN_TEXT_EMPTY" => Some(Self::RetTextJoinTextEmpty),
            "RET_TEXT_JOIN_TEXT_FORMAT_ERROR" => Some(Self::RetTextJoinTextFormatError),
            "RET_TEXT_JOIN_TEXT_UTF8_ERROR" => Some(Self::RetTextJoinTextUtf8Error),
            "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT" => {
                Some(Self::RetTextJoinBatchReqIdRepeat)
            }
            "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ" => {
                Some(Self::RetTextJoinTypeNotSupportBatchReq)
            }
            "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST" => {
                Some(Self::RetTextJoinAvatarIdNotExist)
            }
            "RET_TEXT_JOIN_UNKNOW_TYPE" => Some(Self::RetTextJoinUnknowType),
            "RET_PAM_MISSION_MISSION_ID_ERROR" => Some(Self::RetPamMissionMissionIdError),
            "RET_PAM_MISSION_MISSION_EXPIRE" => Some(Self::RetPamMissionMissionExpire),
            "RET_CHAT_TYPE_NOT_EXIST" => Some(Self::RetChatTypeNotExist),
            "RET_MSG_TYPE_NOT_EXIST" => Some(Self::RetMsgTypeNotExist),
            "RET_CHAT_NO_TARGET_UID" => Some(Self::RetChatNoTargetUid),
            "RET_CHAT_MSG_EMPTY" => Some(Self::RetChatMsgEmpty),
            "RET_CHAT_MSG_EXCEED_LIMIT" => Some(Self::RetChatMsgExceedLimit),
            "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetChatMsgSensitiveCheckError)
            }
            "RET_CHAT_MSG_UTF8_ERROR" => Some(Self::RetChatMsgUtf8Error),
            "RET_CHAT_FORBID_SWITCH_OPEN" => Some(Self::RetChatForbidSwitchOpen),
            "RET_CHAT_FORBID" => Some(Self::RetChatForbid),
            "RET_CHAT_MSG_INCLUDE_SPECIAL_STR" => Some(Self::RetChatMsgIncludeSpecialStr),
            "RET_CHAT_MSG_EMOJI_NOT_EXIST" => Some(Self::RetChatMsgEmojiNotExist),
            "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH" => {
                Some(Self::RetChatMsgEmojiGenderNotMatch)
            }
            "RET_CHAT_MSG_EMOJI_NOT_MARKED" => Some(Self::RetChatMsgEmojiNotMarked),
            "RET_CHAT_MSG_EMOJI_ALREADY_MARKED" => {
                Some(Self::RetChatMsgEmojiAlreadyMarked)
            }
            "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT" => {
                Some(Self::RetChatMsgEmojiMarkedMaxLimit)
            }
            "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN" => {
                Some(Self::RetBoxingClubChallengeNotOpen)
            }
            "RET_MUSEUM_NOT_OPEN" => Some(Self::RetMuseumNotOpen),
            "RET_MUSEUM_TURN_CNT_NOT_MATCH" => Some(Self::RetMuseumTurnCntNotMatch),
            "RET_MUSEUM_PHASE_NOT_REACH" => Some(Self::RetMuseumPhaseNotReach),
            "RET_MUSEUM_UNKNOW_STUFF" => Some(Self::RetMuseumUnknowStuff),
            "RET_MUSEUM_UNKNOW_AREA" => Some(Self::RetMuseumUnknowArea),
            "RET_MUSEUM_UNKNOW_POS" => Some(Self::RetMuseumUnknowPos),
            "RET_MUSEUM_STUFF_ALREADY_IN_AREA" => Some(Self::RetMuseumStuffAlreadyInArea),
            "RET_MUSEUM_STUFF_NOT_IN_AREA" => Some(Self::RetMuseumStuffNotInArea),
            "RET_MUSEUM_GET_NPC_REPEAT" => Some(Self::RetMuseumGetNpcRepeat),
            "RET_MUSEUM_GET_NPC_UNLOCK" => Some(Self::RetMuseumGetNpcUnlock),
            "RET_MUSEUM_GET_NPC_NOT_ENOUGH" => Some(Self::RetMuseumGetNpcNotEnough),
            "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR" => {
                Some(Self::RetMuseumChangeStuffAreaError)
            }
            "RET_MUSEUM_NOT_INIT" => Some(Self::RetMuseumNotInit),
            "RET_MUSEUM_EVENT_ERROR" => Some(Self::RetMuseumEventError),
            "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID" => {
                Some(Self::RetMuseumUnknowChooseEventId)
            }
            "RET_MUSEUM_EVENT_ORDER_NOT_MATCH" => Some(Self::RetMuseumEventOrderNotMatch),
            "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventPhaseNotUnlock)
            }
            "RET_MUSEUM_EVENT_MISSION_NOT_FOUND" => {
                Some(Self::RetMuseumEventMissionNotFound)
            }
            "RET_MUSEUM_AREA_LEVEL_UP_ALREADY" => Some(Self::RetMuseumAreaLevelUpAlready),
            "RET_MUSEUM_STUFF_ALREADY_USED" => Some(Self::RetMuseumStuffAlreadyUsed),
            "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventRoundNotUnlock)
            }
            "RET_MUSEUM_STUFF_IN_AREA" => Some(Self::RetMuseumStuffInArea),
            "RET_MUSEUM_STUFF_DISPATCH" => Some(Self::RetMuseumStuffDispatch),
            "RET_MUSEUM_IS_END" => Some(Self::RetMuseumIsEnd),
            "RET_MUSEUM_STUFF_LEAVING" => Some(Self::RetMuseumStuffLeaving),
            "RET_MUSEUM_EVENT_MISSION_NOT_FINISH" => {
                Some(Self::RetMuseumEventMissionNotFinish)
            }
            "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST" => {
                Some(Self::RetMuseumCollectRewardNotExist)
            }
            "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMuseumCollectRewardAlreadyTaken)
            }
            "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT" => {
                Some(Self::RetMuseumAcceptMissionMaxLimit)
            }
            "RET_ROGUE_CHALLENGE_NOT_OPEN" => Some(Self::RetRogueChallengeNotOpen),
            "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT" => {
                Some(Self::RetRogueChallengeAssisRefreshLimit)
            }
            "RET_ALLEY_NOT_INIT" => Some(Self::RetAlleyNotInit),
            "RET_ALLEY_NOT_OPEN" => Some(Self::RetAlleyNotOpen),
            "RET_ALLEY_MAP_NOT_EXIST" => Some(Self::RetAlleyMapNotExist),
            "RET_ALLEY_EMPTY_POS_LIST" => Some(Self::RetAlleyEmptyPosList),
            "RET_ALLEY_LINE_POS_INVALID" => Some(Self::RetAlleyLinePosInvalid),
            "RET_ALLEY_SHOP_NOT_UNLOCK" => Some(Self::RetAlleyShopNotUnlock),
            "RET_ALLEY_DEPOT_FULL" => Some(Self::RetAlleyDepotFull),
            "RET_ALLEY_SHOP_NOT_INCLUDE" => Some(Self::RetAlleyShopNotInclude),
            "RET_ALLEY_EVENT_NOT_UNLOCK" => Some(Self::RetAlleyEventNotUnlock),
            "RET_ALLEY_EVENT_NOT_REFRESH" => Some(Self::RetAlleyEventNotRefresh),
            "RET_ALLEY_EVENT_STATE_DOING" => Some(Self::RetAlleyEventStateDoing),
            "RET_ALLEY_EVENT_STATE_FINISH" => Some(Self::RetAlleyEventStateFinish),
            "RET_ALLEY_EVENT_ERROR" => Some(Self::RetAlleyEventError),
            "RET_ALLEY_REWARD_LEVEL_ERROR" => Some(Self::RetAlleyRewardLevelError),
            "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH" => {
                Some(Self::RetAlleyRewardPrestigeNotEnough)
            }
            "RET_ALLEY_SHIP_EMPTY" => Some(Self::RetAlleyShipEmpty),
            "RET_ALLEY_SHIP_ID_DISMATCH" => Some(Self::RetAlleyShipIdDismatch),
            "RET_ALLEY_SHIP_NOT_EXIST" => Some(Self::RetAlleyShipNotExist),
            "RET_ALLEY_SHIP_NOT_UNLOCK" => Some(Self::RetAlleyShipNotUnlock),
            "RET_ALLEY_GOODS_NOT_EXIST" => Some(Self::RetAlleyGoodsNotExist),
            "RET_ALLEY_GOODS_NOT_UNLOCK" => Some(Self::RetAlleyGoodsNotUnlock),
            "RET_ALLEY_PROFIT_NOT_POSITIVE" => Some(Self::RetAlleyProfitNotPositive),
            "RET_ALLEY_SPECIAL_ORDER_DISMATCH" => {
                Some(Self::RetAlleySpecialOrderDismatch)
            }
            "RET_ALLEY_ORDER_GOODS_OVER_LIMIT" => Some(Self::RetAlleyOrderGoodsOverLimit),
            "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET" => {
                Some(Self::RetAlleySpecialOrderConditionNotMeet)
            }
            "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT" => Some(Self::RetAlleyDepotSizeOverLimit),
            "RET_ALLEY_GOODS_NOT_ENOUGH" => Some(Self::RetAlleyGoodsNotEnough),
            "RET_ALLEY_ORDER_INDEX_INVALID" => Some(Self::RetAlleyOrderIndexInvalid),
            "RET_ALLEY_REWARD_ALREADY_TAKE" => Some(Self::RetAlleyRewardAlreadyTake),
            "RET_ALLEY_REWARD_NOT_EXIST" => Some(Self::RetAlleyRewardNotExist),
            "RET_ALLEY_MAIN_MISSION_NOT_DOING" => Some(Self::RetAlleyMainMissionNotDoing),
            "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH" => {
                Some(Self::RetAlleyCriticalEventNotFinish)
            }
            "RET_ALLEY_SHOP_GOODS_NOT_VALID" => Some(Self::RetAlleyShopGoodsNotValid),
            "RET_ALLEY_SLASH_NOT_OPEN" => Some(Self::RetAlleySlashNotOpen),
            "RET_ALLEY_PLACING_ANCHOR_INVALID" => {
                Some(Self::RetAlleyPlacingAnchorInvalid)
            }
            "RET_ALLEY_PLACING_GOODS_INDEX_INVALID" => {
                Some(Self::RetAlleyPlacingGoodsIndexInvalid)
            }
            "RET_ALLEY_SAVE_MAP_TOO_QUICK" => Some(Self::RetAlleySaveMapTooQuick),
            "RET_ALLEY_MAP_NOT_LINK" => Some(Self::RetAlleyMapNotLink),
            "RET_ALLEY_FUNDS_NOT_LOWER_BASE" => Some(Self::RetAlleyFundsNotLowerBase),
            "RET_ALLEY_EVENT_NOT_FINISH" => Some(Self::RetAlleyEventNotFinish),
            "RET_ALLEY_NORMAL_ORDER_NOT_MEET" => Some(Self::RetAlleyNormalOrderNotMeet),
            "RET_PLAYER_RETURN_NOT_OPEN" => Some(Self::RetPlayerReturnNotOpen),
            "RET_PLAYER_RETURN_IS_SIGNED" => Some(Self::RetPlayerReturnIsSigned),
            "RET_PLAYER_RETURN_POINT_NOT_ENOUGH" => {
                Some(Self::RetPlayerReturnPointNotEnough)
            }
            "RET_PLAYER_RETURN_CONDITION_INVALID" => {
                Some(Self::RetPlayerReturnConditionInvalid)
            }
            "RET_PLAYER_RETURN_HAS_SIGNED" => Some(Self::RetPlayerReturnHasSigned),
            "RET_PLAYER_RETURN_REWARD_TAKEN" => Some(Self::RetPlayerReturnRewardTaken),
            "RET_AETHER_DIVIDE_NO_LINEUP" => Some(Self::RetAetherDivideNoLineup),
            "RET_AETHER_DIVIDE_LINEUP_INVALID" => {
                Some(Self::RetAetherDivideLineupInvalid)
            }
            "RET_CHAT_BUBBLE_ID_ERROR" => Some(Self::RetChatBubbleIdError),
            "RET_CHAT_BUBBLE_ID_NOT_UNLOCK" => Some(Self::RetChatBubbleIdNotUnlock),
            "RET_PHONE_THEME_ID_ERROR" => Some(Self::RetPhoneThemeIdError),
            "RET_PHONE_THEME_ID_NOT_UNLOCK" => Some(Self::RetPhoneThemeIdNotUnlock),
            "RET_CHAT_BUBBLE_SELECT_IS_CURRENT" => {
                Some(Self::RetChatBubbleSelectIsCurrent)
            }
            "RET_PHONE_THEME_SELECT_IS_CURRENT" => {
                Some(Self::RetPhoneThemeSelectIsCurrent)
            }
            "RET_CHESS_ROGUE_CONFIG_NOT_FOUND" => Some(Self::RetChessRogueConfigNotFound),
            "RET_CHESS_ROGUE_CONFIG_INVALID" => Some(Self::RetChessRogueConfigInvalid),
            "RET_CHESS_ROGUE_NO_VALID_ROOM" => Some(Self::RetChessRogueNoValidRoom),
            "RET_CHESS_ROGUE_NO_CELL_INFO" => Some(Self::RetChessRogueNoCellInfo),
            "RET_CHESS_ROGUE_CELL_NOT_FINISH" => Some(Self::RetChessRogueCellNotFinish),
            "RET_CHESS_ROGUE_CELL_IS_LOCKED" => Some(Self::RetChessRogueCellIsLocked),
            "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH" => {
                Some(Self::RetChessRogueScheduleNotMatch)
            }
            "RET_CHESS_ROGUE_STATUS_FAIL" => Some(Self::RetChessRogueStatusFail),
            "RET_CHESS_ROGUE_AREA_NOT_EXIST" => Some(Self::RetChessRogueAreaNotExist),
            "RET_CHESS_ROGUE_LINEUP_FAIL" => Some(Self::RetChessRogueLineupFail),
            "RET_CHESS_ROGUE_AEON_FAIL" => Some(Self::RetChessRogueAeonFail),
            "RET_CHESS_ROGUE_ENTER_CELL_FAIL" => Some(Self::RetChessRogueEnterCellFail),
            "RET_CHESS_ROGUE_ROLL_DICE_FAIL" => Some(Self::RetChessRogueRollDiceFail),
            "RET_CHESS_ROGUE_DICE_STATUS_FAIL" => Some(Self::RetChessRogueDiceStatusFail),
            "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL" => {
                Some(Self::RetChessRogueDiceCntNotFull)
            }
            "RET_CHESS_ROGUE_UNLOCK" => Some(Self::RetChessRogueUnlock),
            "RET_CHESS_ROGUE_PICK_AVATAR_FAIL" => Some(Self::RetChessRoguePickAvatarFail),
            "RET_CHESS_ROGUE_AVATAR_INVALID" => Some(Self::RetChessRogueAvatarInvalid),
            "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT" => {
                Some(Self::RetChessRogueCellCanNotSelect)
            }
            "RET_CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::RetChessRogueDiceConfirmed),
            "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH" => {
                Some(Self::RetChessRogueNousDiceNotMatch)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL" => {
                Some(Self::RetChessRogueNousDiceRarityFail)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE" => {
                Some(Self::RetChessRogueNousDiceSurfaceDuplicate)
            }
            "RET_CHESS_ROGUE_NOT_IN_ROGUE" => Some(Self::RetChessRogueNotInRogue),
            "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT" => {
                Some(Self::RetChessRogueNousDiceBranchLimit)
            }
            "RET_HELIOBUS_NOT_OPEN" => Some(Self::RetHeliobusNotOpen),
            "RET_HELIOBUS_SNS_POST_NOT_UNLOCK" => Some(Self::RetHeliobusSnsPostNotUnlock),
            "RET_HELIOBUS_SNS_ALREADY_READ" => Some(Self::RetHeliobusSnsAlreadyRead),
            "RET_HELIOBUS_SNS_ALREADY_LIKED" => Some(Self::RetHeliobusSnsAlreadyLiked),
            "RET_HELIOBUS_SNS_ALREADY_COMMENTED" => {
                Some(Self::RetHeliobusSnsAlreadyCommented)
            }
            "RET_HELIOBUS_SNS_IN_MISSION" => Some(Self::RetHeliobusSnsInMission),
            "RET_HELIOBUS_SNS_ALREADY_POSTED" => Some(Self::RetHeliobusSnsAlreadyPosted),
            "RET_HELIOBUS_SNS_NOT_DOING_MISSION" => {
                Some(Self::RetHeliobusSnsNotDoingMission)
            }
            "RET_HELIOBUS_REWARD_LEVEL_MAX" => Some(Self::RetHeliobusRewardLevelMax),
            "RET_HELIOBUS_INCOME_NOT_ENOUGH" => Some(Self::RetHeliobusIncomeNotEnough),
            "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK" => {
                Some(Self::RetHeliobusSnsCommentNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK" => {
                Some(Self::RetHeliobusChallengeNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_ID_ERROR" => Some(Self::RetHeliobusChallengeIdError),
            "RET_HELIOBUS_SKILL_NOT_UNLOCK" => Some(Self::RetHeliobusSkillNotUnlock),
            "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL" => {
                Some(Self::RetHeliobusAcceptPostMissionFail)
            }
            "RET_HELIOBUS_SKILL_NOT_SELECTED" => Some(Self::RetHeliobusSkillNotSelected),
            "RET_HELIOBUS_PLANE_TYPE_INVALID" => Some(Self::RetHeliobusPlaneTypeInvalid),
            "RET_REDDOT_PARAM_INVALID" => Some(Self::RetReddotParamInvalid),
            "RET_REDDOT_ACTIVITY_NOT_OPEN" => Some(Self::RetReddotActivityNotOpen),
            "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR" => {
                Some(Self::RetRogueEndlessActivityConfigError)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetRogueEndlessActivityNotOpen)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetRogueEndlessActivityOverBonusRewardLimit)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET" => {
                Some(Self::RetRogueEndlessActivityScoreNotMeet)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetRogueEndlessActivityRewardLevleAlreadyTake)
            }
            "RET_HEART_DIAL_SCRIPT_NOT_FOUND" => Some(Self::RetHeartDialScriptNotFound),
            "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME" => {
                Some(Self::RetHeartDialScriptEmotionTheSame)
            }
            "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL" => {
                Some(Self::RetHeartDialScriptStepNotNormal)
            }
            "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptConditionNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemNumNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemIdNotMatch)
            }
            "RET_HEART_DIAL_DIALOGUE_NOT_FOUND" => {
                Some(Self::RetHeartDialDialogueNotFound)
            }
            "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED" => {
                Some(Self::RetHeartDialDialogueAlreadyPerformed)
            }
            "RET_HEART_DIAL_NPC_NOT_FOUND" => Some(Self::RetHeartDialNpcNotFound),
            "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND" => {
                Some(Self::RetHeartDialTraceConfigNotFound)
            }
            "RET_HEART_DIAL_FLOOR_TRACE_EXIST" => Some(Self::RetHeartDialFloorTraceExist),
            "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH" => {
                Some(Self::RetHeartDialTraceFloorNotMatch)
            }
            "RET_TRAVEL_BROCHURE_CONFIG_ERROR" => {
                Some(Self::RetTravelBrochureConfigError)
            }
            "RET_TRAVEL_BROCHURE_PARAM_INVALID" => {
                Some(Self::RetTravelBrochureParamInvalid)
            }
            "RET_TRAVEL_BROCHURE_LOCKED" => Some(Self::RetTravelBrochureLocked),
            "RET_TRAVEL_BROCHURE_CANNOT_OPERATE" => {
                Some(Self::RetTravelBrochureCannotOperate)
            }
            "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH" => {
                Some(Self::RetTravelBrochureWorldIdNotMatch)
            }
            "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK" => {
                Some(Self::RetTravelBrochureHasNoWorldBook)
            }
            "RET_TRAVEL_BROCHURE_PAGE_FULL" => Some(Self::RetTravelBrochurePageFull),
            "RET_MAP_ROTATION_NOT_IN_REGION" => Some(Self::RetMapRotationNotInRegion),
            "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterAlreadyDeployed)
            }
            "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH" => {
                Some(Self::RetMapRotationEnergyNotEnough)
            }
            "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE" => {
                Some(Self::RetMapRotationEntityNotOnCurPose)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterNotDeployed)
            }
            "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH" => {
                Some(Self::RetMapRotationPoseRotaterMismatch)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE" => {
                Some(Self::RetMapRotationRotaterNotRemovable)
            }
            "RET_MAP_ROTATION_ROTATER_DISPOSABLE" => {
                Some(Self::RetMapRotationRotaterDisposable)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID" => {
                Some(Self::RetSpaceZooActivityCatParamInvalid)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatItemNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL" => {
                Some(Self::RetSpaceZooActivityCatBagFull)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE" => {
                Some(Self::RetSpaceZooActivityCatNotToMutate)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR" => {
                Some(Self::RetSpaceZooActivityCatStateError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED" => {
                Some(Self::RetSpaceZooActivityCatCatteryLocked)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW" => {
                Some(Self::RetSpaceZooActivityCatOutNow)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatConfigNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatFeatureNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR" => {
                Some(Self::RetSpaceZooActivityCatAddCatError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatMoneyNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH" => {
                Some(Self::RetSpaceZooActivityCatCondNotMatch)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS" => {
                Some(Self::RetStrongChallengeActivityStageCfgMiss)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetStrongChallengeActivityStageNotOpen)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR" => {
                Some(Self::RetStrongChallengeActivityBuffError)
            }
            "RET_ROLL_SHOP_NOT_FOUND" => Some(Self::RetRollShopNotFound),
            "RET_ROLL_SHOP_GROUP_EMPTY" => Some(Self::RetRollShopGroupEmpty),
            "RET_ROLL_SHOP_EMPTY" => Some(Self::RetRollShopEmpty),
            "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetRollShopGachaReqDuplicated)
            }
            "RET_ROLL_SHOP_RANDOM_ERROR" => Some(Self::RetRollShopRandomError),
            "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND" => {
                Some(Self::RetRollShopGroupTypeNotFound)
            }
            "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY" => {
                Some(Self::RetRollShopHasStoredRewardAlready)
            }
            "RET_ROLL_SHOP_NO_STORED_REWARD" => Some(Self::RetRollShopNoStoredReward),
            "RET_ROLL_SHOP_NOT_IN_VALID_SCENE" => Some(Self::RetRollShopNotInValidScene),
            "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE" => {
                Some(Self::RetRollShopInvalidRollShopType)
            }
            "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH" => {
                Some(Self::RetActivityRaidCollectionPrevNotFinish)
            }
            "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE" => {
                Some(Self::RetActivityRaidCollectionGroupEnterNextUnavailable)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_LAST" => {
                Some(Self::RetActivityRaidCollectionIsLast)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT" => {
                Some(Self::RetActivityRaidCollectionIsNotNext)
            }
            "RET_OFFERING_NOT_UNLOCK" => Some(Self::RetOfferingNotUnlock),
            "RET_OFFERING_LEVEL_NOT_UNLOCK" => Some(Self::RetOfferingLevelNotUnlock),
            "RET_OFFERING_REACH_MAX_LEVEL" => Some(Self::RetOfferingReachMaxLevel),
            "RET_OFFERING_ITEM_NOT_ENOUGH" => Some(Self::RetOfferingItemNotEnough),
            "RET_OFFERING_LONGTAIL_NOT_OPEN" => Some(Self::RetOfferingLongtailNotOpen),
            "RET_OFFERING_REWARD_CONDITION" => Some(Self::RetOfferingRewardCondition),
            "RET_DRINK_MAKER_CHAT_INVALID" => Some(Self::RetDrinkMakerChatInvalid),
            "RET_DRINK_MAKER_PARAM_INVALID" => Some(Self::RetDrinkMakerParamInvalid),
            "RET_DRINK_MAKER_PARAM_NOT_UNLOCK" => Some(Self::RetDrinkMakerParamNotUnlock),
            "RET_DRINK_MAKER_CONFIG_NOT_FOUND" => Some(Self::RetDrinkMakerConfigNotFound),
            "RET_DRINK_MAKER_NOT_LAST_CHAT" => Some(Self::RetDrinkMakerNotLastChat),
            "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN" => {
                Some(Self::RetDrinkMakerDayAndFreePhaseNotOpen)
            }
            "RET_MONOPOLY_NOT_OPEN" => Some(Self::RetMonopolyNotOpen),
            "RET_MONOPOLY_CONFIG_ERROR" => Some(Self::RetMonopolyConfigError),
            "RET_MONOPOLY_DICE_NOT_ENOUGH" => Some(Self::RetMonopolyDiceNotEnough),
            "RET_MONOPOLY_CUR_CELL_NOT_FINISH" => Some(Self::RetMonopolyCurCellNotFinish),
            "RET_MONOPOLY_COIN_NOT_ENOUGH" => Some(Self::RetMonopolyCoinNotEnough),
            "RET_MONOPOLY_CELL_WAIT_PENDING" => Some(Self::RetMonopolyCellWaitPending),
            "RET_MONOPOLY_CELL_STATE_ERROR" => Some(Self::RetMonopolyCellStateError),
            "RET_MONOPOLY_CELL_CONTENT_ERROR" => Some(Self::RetMonopolyCellContentError),
            "RET_MONOPOLY_ITEM_NOT_ENOUGH" => Some(Self::RetMonopolyItemNotEnough),
            "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP" => {
                Some(Self::RetMonopolyCellContentCannotGiveup)
            }
            "RET_MONOPOLY_ASSET_LEVEL_INVALID" => {
                Some(Self::RetMonopolyAssetLevelInvalid)
            }
            "RET_MONOPOLY_TURN_NOT_FINISH" => Some(Self::RetMonopolyTurnNotFinish),
            "RET_MONOPOLY_GUIDE_NOT_FINISH" => Some(Self::RetMonopolyGuideNotFinish),
            "RET_MONOPOLY_RAFFLE_REWARD_REISSUED" => {
                Some(Self::RetMonopolyRaffleRewardReissued)
            }
            "RET_MONOPOLY_NO_GAME_ACTIVE" => Some(Self::RetMonopolyNoGameActive),
            "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE" => {
                Some(Self::RetMonopolyGameRatioNotIncreasable)
            }
            "RET_MONOPOLY_GAME_RATIO_MAX" => Some(Self::RetMonopolyGameRatioMax),
            "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID" => {
                Some(Self::RetMonopolyGameTargetRatioInvalid)
            }
            "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID" => {
                Some(Self::RetMonopolyGameBingoFlipPosInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE" => {
                Some(Self::RetMonopolyGameGuessAlreadyChoose)
            }
            "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID" => {
                Some(Self::RetMonopolyGameGuessChooseInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT" => {
                Some(Self::RetMonopolyGameGuessInformationAlreadyBought)
            }
            "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK" => {
                Some(Self::RetMonopolyGameRaiseRatioNotUnlock)
            }
            "RET_MONOPOLY_FRIEND_NOT_SYNCED" => Some(Self::RetMonopolyFriendNotSynced),
            "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD" => {
                Some(Self::RetMonopolyGetFriendRankingListInCd)
            }
            "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND" => {
                Some(Self::RetMonopolyLikeTargetNotFriend)
            }
            "RET_MONOPOLY_DAILY_ALREADY_LIKED" => {
                Some(Self::RetMonopolyDailyAlreadyLiked)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH" => {
                Some(Self::RetMonopolySocialEventStatusNotMatch)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST" => {
                Some(Self::RetMonopolySocialEventServerCacheNotExist)
            }
            "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH" => {
                Some(Self::RetMonopolyActivityIdNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST" => {
                Some(Self::RetMonopolyRafflePoolNotExist)
            }
            "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH" => {
                Some(Self::RetMonopolyRafflePoolTimeNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolPhaseNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolShowTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND" => {
                Some(Self::RetMonopolyRaffleTicketNotFound)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRaffleTicketTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyRaffleTicketRewardAlreadyTaken)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME" => {
                Some(Self::RetMonopolyRafflePoolNotInRaffleTime)
            }
            "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyMbtiReportRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_GAMING" => Some(Self::RetEvolveBuildLevelGaming),
            "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM" => {
                Some(Self::RetEveolveBuildLevelBanRandom)
            }
            "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetEvolveBuildFirstRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_UNFINISH" => Some(Self::RetEvolveBuildLevelUnfinish),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMaxLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMinLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET" => {
                Some(Self::RetEvolveBuildShopAbilityNotGet)
            }
            "RET_EVOLVE_BUILD_LEVEL_LOCK" => Some(Self::RetEvolveBuildLevelLock),
            "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH" => Some(Self::RetEvolveBuildExpNotEnough),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR" => {
                Some(Self::RetEvolveBuildShopAbilityLevelError)
            }
            "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetEvolveBuildActivityNotOpen)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY" => {
                Some(Self::RetEvolveBuildShopAbilityEmpty)
            }
            "RET_EVOLVE_BUILD_LEVEL_NOT_START" => Some(Self::RetEvolveBuildLevelNotStart),
            "RET_EVOLVE_BUILD_SHOP_LOCK" => Some(Self::RetEvolveBuildShopLock),
            "RET_EVOLVE_BUILD_REWARD_LOCK" => Some(Self::RetEvolveBuildRewardLock),
            "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX" => {
                Some(Self::RetEvolveBuildRewardLevelMax)
            }
            "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN" => {
                Some(Self::RetEvolveBuildRewardAlreadyAllTaken)
            }
            "RET_CLOCK_PARK_CONFIG_ERROR" => Some(Self::RetClockParkConfigError),
            "RET_CLOCK_PARK_EFFECT_ERROR" => Some(Self::RetClockParkEffectError),
            "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkScriptAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET" => {
                Some(Self::RetClockParkScriptUnlockConditionNotMeet)
            }
            "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkTalentAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_LOCKED" => Some(Self::RetClockParkScriptLocked),
            "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT" => {
                Some(Self::RetClockParkHasOngoingScript)
            }
            "RET_CLOCK_PARK_NO_ONGOING_SCRIPT" => Some(Self::RetClockParkNoOngoingScript),
            "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR" => {
                Some(Self::RetClockParkDicePlacementError)
            }
            "RET_CLOCK_PARK_MISMATCH_STATUS" => Some(Self::RetClockParkMismatchStatus),
            "RET_CLOCK_PARK_NO_BUFF" => Some(Self::RetClockParkNoBuff),
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetClockParkSlotMachineGachaReqDuplicated)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH" => {
                Some(Self::RetClockParkSlotMachineCostNotEnough)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT" => {
                Some(Self::RetClockParkSlotMachineGachaCntExceedLimit)
            }
            "RET_CLOCK_PARK_NOT_OPEN" => Some(Self::RetClockParkNotOpen),
            "RET_TOURN_ROGUE_STATUS_MISMATCH" => Some(Self::RetTournRogueStatusMismatch),
            "RET_MAGIC_ROGUE_STATUS_MISMATCH" => Some(Self::RetMagicRogueStatusMismatch),
            "RET_AUTO_MOUNT_MAGIC_UNIT_NO_MATCHED_MAGIC_SCEPTER" => {
                Some(Self::RetAutoMountMagicUnitNoMatchedMagicScepter)
            }
            "RET_MAGIC_UNIT_WORKBENCH_REFORGE_GEN_FAIL" => {
                Some(Self::RetMagicUnitWorkbenchReforgeGenFail)
            }
            "RET_MATCH_ALREADY_IN_MATCH" => Some(Self::RetMatchAlreadyInMatch),
            "RET_MATCH_NOT_IN_MATCH" => Some(Self::RetMatchNotInMatch),
            "RET_MATCH_PLAY_NOT_OPEN" => Some(Self::RetMatchPlayNotOpen),
            "RET_CROSS_STATE_ERROR" => Some(Self::RetCrossStateError),
            "RET_MATCH_VERSION_NOT_EQUAL" => Some(Self::RetMatchVersionNotEqual),
            "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM" => {
                Some(Self::RetMatchPlayerNotInLobbyRoom)
            }
            "RET_LOBBY_STATE_NOT_MATCH" => Some(Self::RetLobbyStateNotMatch),
            "RET_LOBBY_ROOM_NOT_EXIST" => Some(Self::RetLobbyRoomNotExist),
            "RET_LOBBY_ROOM_PALYER_FULL" => Some(Self::RetLobbyRoomPalyerFull),
            "RET_LOBBY_ROOM_PALYER_NOT_READY" => Some(Self::RetLobbyRoomPalyerNotReady),
            "RET_LOBBY_ROOM_PALYER_FIGHTING" => Some(Self::RetLobbyRoomPalyerFighting),
            "RET_FIGHT_ROOM_NOT_EXIST" => Some(Self::RetFightRoomNotExist),
            "RET_FIGHT_MATCH3_PLAYER_STATE_ERR" => {
                Some(Self::RetFightMatch3PlayerStateErr)
            }
            "RET_FIGHT_MATCH3_ROOM_STATE_ERR" => Some(Self::RetFightMatch3RoomStateErr),
            "RET_CROSS_STATE_TIME_OUT" => Some(Self::RetCrossStateTimeOut),
            "RET_SWORD_TRAINING_NO_ACTIVE_GAME" => {
                Some(Self::RetSwordTrainingNoActiveGame)
            }
            "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH" => {
                Some(Self::RetSwordTrainingNoPendingActionMatch)
            }
            "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID" => {
                Some(Self::RetSwordTrainingPartnerAbilityInvalid)
            }
            "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED" => {
                Some(Self::RetSwordTrainingSkillAlreadyLearned)
            }
            "RET_SWORD_TRAINING_CONDITION_NOT_MEET" => {
                Some(Self::RetSwordTrainingConditionNotMeet)
            }
            "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED" => {
                Some(Self::RetSwordTrainingParentSkillNotLearned)
            }
            "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK" => {
                Some(Self::RetSwordTrainingSkillTypeNotUnlock)
            }
            "RET_SWORD_TRAINING_GAME_ALREADY_EXIST" => {
                Some(Self::RetSwordTrainingGameAlreadyExist)
            }
            "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingHintNotMatch)
            }
            "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStorylineConfigNotFound)
            }
            "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStoryConfigNotFound)
            }
            "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH" => {
                Some(Self::RetSwordTrainingUnlockNotFinish)
            }
            "RET_SWORD_TRAINING_OPTION_MISMATCH" => {
                Some(Self::RetSwordTrainingOptionMismatch)
            }
            "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED" => {
                Some(Self::RetSwordTrainingRestoreWithoutExamFailed)
            }
            "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE" => {
                Some(Self::RetSwordTrainingNoRestoreGameAvailable)
            }
            "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingStoryNotMatch)
            }
            "RET_SWORD_TRAINING_ENDING_NOT_FINISH" => {
                Some(Self::RetSwordTrainingEndingNotFinish)
            }
            "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN" => {
                Some(Self::RetSwordTrainingEndingRewardTaken)
            }
            "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE" => {
                Some(Self::RetSwordTrainingCombatRankNotChange)
            }
            "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE" => {
                Some(Self::RetSwordTrainingDirectBattleDisable)
            }
            "RET_FIGHT_FEST_PHASE_NOT_MATCH" => Some(Self::RetFightFestPhaseNotMatch),
            "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH" => {
                Some(Self::RetFightFestScoreRaceAlreadyFinish)
            }
            "RET_FIGHT_FEST_CHALLENGE_LOCKED" => Some(Self::RetFightFestChallengeLocked),
            "RET_FIGHT_FEST_COACH_SKILL_LOCKED" => {
                Some(Self::RetFightFestCoachSkillLocked)
            }
            "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED" => {
                Some(Self::RetFightFestCoachSkillEquipTypeExisted)
            }
            "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND" => {
                Some(Self::RetFightFestScoreRaceMissionDoind)
            }
            "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP" => {
                Some(Self::RetFightFestCoachSkillNoEquip)
            }
            "RET_PET_NOT_EXIST" => Some(Self::RetPetNotExist),
            "RET_PET_ALREADY_SUMMONED" => Some(Self::RetPetAlreadySummoned),
            "RET_PET_NOT_SUMMONED" => Some(Self::RetPetNotSummoned),
            "RET_MUSIC_RHYTHM_LEVEL_TIME_TOO_SHORT" => {
                Some(Self::RetMusicRhythmLevelTimeTooShort)
            }
            "RET_MUSIC_RHYTHM_NOT_IN_LEVEL" => Some(Self::RetMusicRhythmNotInLevel),
            "RET_MUSIC_RHYTHM_PRE_DIFFICULTY_NOT_PASS" => {
                Some(Self::RetMusicRhythmPreDifficultyNotPass)
            }
            "RET_MUSIC_RHYTHM_SONG_LIMITED" => Some(Self::RetMusicRhythmSongLimited),
            "RET_MUSIC_RHYTHM_SONG_LOCKED" => Some(Self::RetMusicRhythmSongLocked),
            "RET_MUSIC_RHYTHM_TRACK_LOCKED" => Some(Self::RetMusicRhythmTrackLocked),
            "RET_MUSIC_RHYTHM_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetMusicRhythmLevelNotUnlock)
            }
            "RET_MUSIC_RHYTHM_SONG_SFX_LOCKED" => Some(Self::RetMusicRhythmSongSfxLocked),
            "RET_TRAIN_PARTY_COIN_NOT_ENOUGH" => Some(Self::RetTrainPartyCoinNotEnough),
            "RET_TRAIN_PARTY_DIY_TAG_NOT_MATCH" => {
                Some(Self::RetTrainPartyDiyTagNotMatch)
            }
            "RET_TRAIN_PARTY_USE_CARD_MOBILITY_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyUseCardMobilityNotEnough)
            }
            "RET_TRAIN_PARTY_AREA_UNLOCK_COIN_NOT_ENOUGH" => {
                Some(Self::RetTrainPartyAreaUnlockCoinNotEnough)
            }
            _ => None,
        }
    }
}
/// PNKGAFFDMFB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdActivityType {
    None = 0,
    CmdSubmitMaterialSubmitActivityMaterialScRsp = 2625,
    CmdTakeMaterialSubmitActivityRewardScRsp = 2633,
    CmdGetActivityScheduleConfigCsReq = 2639,
    CmdLeaveTrialActivityCsReq = 2682,
    CmdGetLoginActivityCsReq = 2659,
    CmdTakeLoginActivityRewardScRsp = 2646,
    CmdSubmitMaterialSubmitActivityMaterialCsReq = 2661,
    CmdEnterTrialActivityStageCsReq = 2612,
    CmdTrialActivityDataChangeScNotify = 2624,
    CmdGetMaterialSubmitActivityDataScRsp = 2619,
    CmdGetLoginActivityScRsp = 2620,
    CmdEnterTrialActivityStageScRsp = 2660,
    CmdCurTrialActivityScNotify = 2684,
    CmdGetMaterialSubmitActivityDataCsReq = 2679,
    CmdGetActivityScheduleConfigScRsp = 2653,
    CmdTakeMaterialSubmitActivityRewardCsReq = 2629,
    CmdLeaveTrialActivityScRsp = 2662,
    CmdStartTrialActivityCsReq = 2631,
    CmdStartTrialActivityScRsp = 2671,
    CmdGetTrialActivityDataScRsp = 2672,
    CmdGetTrialActivityDataCsReq = 2678,
    CmdTakeTrialActivityRewardScRsp = 2696,
    CmdTakeTrialActivityRewardCsReq = 2632,
    CmdTakeLoginActivityRewardCsReq = 2603,
}
impl CmdActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdActivityTypeNone",
            Self::CmdSubmitMaterialSubmitActivityMaterialScRsp => {
                "CmdSubmitMaterialSubmitActivityMaterialScRsp"
            }
            Self::CmdTakeMaterialSubmitActivityRewardScRsp => {
                "CmdTakeMaterialSubmitActivityRewardScRsp"
            }
            Self::CmdGetActivityScheduleConfigCsReq => {
                "CmdGetActivityScheduleConfigCsReq"
            }
            Self::CmdLeaveTrialActivityCsReq => "CmdLeaveTrialActivityCsReq",
            Self::CmdGetLoginActivityCsReq => "CmdGetLoginActivityCsReq",
            Self::CmdTakeLoginActivityRewardScRsp => "CmdTakeLoginActivityRewardScRsp",
            Self::CmdSubmitMaterialSubmitActivityMaterialCsReq => {
                "CmdSubmitMaterialSubmitActivityMaterialCsReq"
            }
            Self::CmdEnterTrialActivityStageCsReq => "CmdEnterTrialActivityStageCsReq",
            Self::CmdTrialActivityDataChangeScNotify => {
                "CmdTrialActivityDataChangeScNotify"
            }
            Self::CmdGetMaterialSubmitActivityDataScRsp => {
                "CmdGetMaterialSubmitActivityDataScRsp"
            }
            Self::CmdGetLoginActivityScRsp => "CmdGetLoginActivityScRsp",
            Self::CmdEnterTrialActivityStageScRsp => "CmdEnterTrialActivityStageScRsp",
            Self::CmdCurTrialActivityScNotify => "CmdCurTrialActivityScNotify",
            Self::CmdGetMaterialSubmitActivityDataCsReq => {
                "CmdGetMaterialSubmitActivityDataCsReq"
            }
            Self::CmdGetActivityScheduleConfigScRsp => {
                "CmdGetActivityScheduleConfigScRsp"
            }
            Self::CmdTakeMaterialSubmitActivityRewardCsReq => {
                "CmdTakeMaterialSubmitActivityRewardCsReq"
            }
            Self::CmdLeaveTrialActivityScRsp => "CmdLeaveTrialActivityScRsp",
            Self::CmdStartTrialActivityCsReq => "CmdStartTrialActivityCsReq",
            Self::CmdStartTrialActivityScRsp => "CmdStartTrialActivityScRsp",
            Self::CmdGetTrialActivityDataScRsp => "CmdGetTrialActivityDataScRsp",
            Self::CmdGetTrialActivityDataCsReq => "CmdGetTrialActivityDataCsReq",
            Self::CmdTakeTrialActivityRewardScRsp => "CmdTakeTrialActivityRewardScRsp",
            Self::CmdTakeTrialActivityRewardCsReq => "CmdTakeTrialActivityRewardCsReq",
            Self::CmdTakeLoginActivityRewardCsReq => "CmdTakeLoginActivityRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdActivityTypeNone" => Some(Self::None),
            "CmdSubmitMaterialSubmitActivityMaterialScRsp" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialScRsp)
            }
            "CmdTakeMaterialSubmitActivityRewardScRsp" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardScRsp)
            }
            "CmdGetActivityScheduleConfigCsReq" => {
                Some(Self::CmdGetActivityScheduleConfigCsReq)
            }
            "CmdLeaveTrialActivityCsReq" => Some(Self::CmdLeaveTrialActivityCsReq),
            "CmdGetLoginActivityCsReq" => Some(Self::CmdGetLoginActivityCsReq),
            "CmdTakeLoginActivityRewardScRsp" => {
                Some(Self::CmdTakeLoginActivityRewardScRsp)
            }
            "CmdSubmitMaterialSubmitActivityMaterialCsReq" => {
                Some(Self::CmdSubmitMaterialSubmitActivityMaterialCsReq)
            }
            "CmdEnterTrialActivityStageCsReq" => {
                Some(Self::CmdEnterTrialActivityStageCsReq)
            }
            "CmdTrialActivityDataChangeScNotify" => {
                Some(Self::CmdTrialActivityDataChangeScNotify)
            }
            "CmdGetMaterialSubmitActivityDataScRsp" => {
                Some(Self::CmdGetMaterialSubmitActivityDataScRsp)
            }
            "CmdGetLoginActivityScRsp" => Some(Self::CmdGetLoginActivityScRsp),
            "CmdEnterTrialActivityStageScRsp" => {
                Some(Self::CmdEnterTrialActivityStageScRsp)
            }
            "CmdCurTrialActivityScNotify" => Some(Self::CmdCurTrialActivityScNotify),
            "CmdGetMaterialSubmitActivityDataCsReq" => {
                Some(Self::CmdGetMaterialSubmitActivityDataCsReq)
            }
            "CmdGetActivityScheduleConfigScRsp" => {
                Some(Self::CmdGetActivityScheduleConfigScRsp)
            }
            "CmdTakeMaterialSubmitActivityRewardCsReq" => {
                Some(Self::CmdTakeMaterialSubmitActivityRewardCsReq)
            }
            "CmdLeaveTrialActivityScRsp" => Some(Self::CmdLeaveTrialActivityScRsp),
            "CmdStartTrialActivityCsReq" => Some(Self::CmdStartTrialActivityCsReq),
            "CmdStartTrialActivityScRsp" => Some(Self::CmdStartTrialActivityScRsp),
            "CmdGetTrialActivityDataScRsp" => Some(Self::CmdGetTrialActivityDataScRsp),
            "CmdGetTrialActivityDataCsReq" => Some(Self::CmdGetTrialActivityDataCsReq),
            "CmdTakeTrialActivityRewardScRsp" => {
                Some(Self::CmdTakeTrialActivityRewardScRsp)
            }
            "CmdTakeTrialActivityRewardCsReq" => {
                Some(Self::CmdTakeTrialActivityRewardCsReq)
            }
            "CmdTakeLoginActivityRewardCsReq" => {
                Some(Self::CmdTakeLoginActivityRewardCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ickijppdppe {
    TrialActivityStatusNone = 0,
    TrialActivityStatusFinish = 1,
}
impl Ickijppdppe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrialActivityStatusNone => "TRIAL_ACTIVITY_STATUS_NONE",
            Self::TrialActivityStatusFinish => "TRIAL_ACTIVITY_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRIAL_ACTIVITY_STATUS_NONE" => Some(Self::TrialActivityStatusNone),
            "TRIAL_ACTIVITY_STATUS_FINISH" => Some(Self::TrialActivityStatusFinish),
            _ => None,
        }
    }
}
/// IFNGHPBHIBA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAdventureType {
    None = 0,
    CmdEnterAdventureScRsp = 1320,
    CmdGetFarmStageGachaInfoScRsp = 1346,
    CmdGetFarmStageGachaInfoCsReq = 1303,
    CmdEnterAdventureCsReq = 1359,
}
impl CmdAdventureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAdventureTypeNone",
            Self::CmdEnterAdventureScRsp => "CmdEnterAdventureScRsp",
            Self::CmdGetFarmStageGachaInfoScRsp => "CmdGetFarmStageGachaInfoScRsp",
            Self::CmdGetFarmStageGachaInfoCsReq => "CmdGetFarmStageGachaInfoCsReq",
            Self::CmdEnterAdventureCsReq => "CmdEnterAdventureCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAdventureTypeNone" => Some(Self::None),
            "CmdEnterAdventureScRsp" => Some(Self::CmdEnterAdventureScRsp),
            "CmdGetFarmStageGachaInfoScRsp" => Some(Self::CmdGetFarmStageGachaInfoScRsp),
            "CmdGetFarmStageGachaInfoCsReq" => Some(Self::CmdGetFarmStageGachaInfoCsReq),
            "CmdEnterAdventureCsReq" => Some(Self::CmdEnterAdventureCsReq),
            _ => None,
        }
    }
}
/// ELALJIGEOCC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAetherDivideType {
    None = 0,
    CmdStartAetherDivideSceneBattleCsReq = 4839,
    CmdSetAetherDivideLineUpCsReq = 4830,
    CmdStartAetherDivideChallengeBattleScRsp = 4837,
    CmdAetherDivideLineupScNotify = 4870,
    CmdEquipAetherDividePassiveSkillScRsp = 4890,
    CmdAetherDivideFinishChallengeScNotify = 4893,
    CmdSetAetherDivideLineUpScRsp = 4875,
    CmdLeaveAetherDivideSceneScRsp = 4846,
    CmdGetAetherDivideChallengeInfoScRsp = 4809,
    CmdSwitchAetherDivideLineUpSlotCsReq = 4861,
    CmdClearAetherDividePassiveSkillCsReq = 4879,
    CmdAetherDivideSkillItemScNotify = 4894,
    CmdClearAetherDividePassiveSkillScRsp = 4819,
    CmdStartAetherDivideStageBattleCsReq = 4829,
    CmdAetherDivideRefreshEndlessScNotify = 4826,
    CmdAetherDivideTainerInfoScNotify = 4864,
    CmdAetherDivideRefreshEndlessScRsp = 4865,
    CmdAetherDivideRefreshEndlessCsReq = 4836,
    CmdAetherDivideSpiritExpUpScRsp = 4873,
    CmdGetAetherDivideInfoCsReq = 4847,
    CmdSwitchAetherDivideLineUpSlotScRsp = 4825,
    CmdAetherDivideTakeChallengeRewardScRsp = 4877,
    CmdStartAetherDivideSceneBattleScRsp = 4853,
    CmdAetherDivideTakeChallengeRewardCsReq = 4813,
    CmdGetAetherDivideChallengeInfoCsReq = 4899,
    CmdAetherDivideSpiritExpUpCsReq = 4851,
    CmdEnterAetherDivideSceneScRsp = 4820,
    CmdGetAetherDivideInfoScRsp = 4874,
    CmdAetherDivideSpiritInfoScNotify = 4883,
    CmdEquipAetherDividePassiveSkillCsReq = 4848,
    CmdStartAetherDivideStageBattleScRsp = 4833,
    CmdLeaveAetherDivideSceneCsReq = 4803,
    CmdStartAetherDivideChallengeBattleCsReq = 4834,
    CmdEnterAetherDivideSceneCsReq = 4859,
}
impl CmdAetherDivideType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAetherDivideTypeNone",
            Self::CmdStartAetherDivideSceneBattleCsReq => {
                "CmdStartAetherDivideSceneBattleCsReq"
            }
            Self::CmdSetAetherDivideLineUpCsReq => "CmdSetAetherDivideLineUpCsReq",
            Self::CmdStartAetherDivideChallengeBattleScRsp => {
                "CmdStartAetherDivideChallengeBattleScRsp"
            }
            Self::CmdAetherDivideLineupScNotify => "CmdAetherDivideLineupScNotify",
            Self::CmdEquipAetherDividePassiveSkillScRsp => {
                "CmdEquipAetherDividePassiveSkillScRsp"
            }
            Self::CmdAetherDivideFinishChallengeScNotify => {
                "CmdAetherDivideFinishChallengeScNotify"
            }
            Self::CmdSetAetherDivideLineUpScRsp => "CmdSetAetherDivideLineUpScRsp",
            Self::CmdLeaveAetherDivideSceneScRsp => "CmdLeaveAetherDivideSceneScRsp",
            Self::CmdGetAetherDivideChallengeInfoScRsp => {
                "CmdGetAetherDivideChallengeInfoScRsp"
            }
            Self::CmdSwitchAetherDivideLineUpSlotCsReq => {
                "CmdSwitchAetherDivideLineUpSlotCsReq"
            }
            Self::CmdClearAetherDividePassiveSkillCsReq => {
                "CmdClearAetherDividePassiveSkillCsReq"
            }
            Self::CmdAetherDivideSkillItemScNotify => "CmdAetherDivideSkillItemScNotify",
            Self::CmdClearAetherDividePassiveSkillScRsp => {
                "CmdClearAetherDividePassiveSkillScRsp"
            }
            Self::CmdStartAetherDivideStageBattleCsReq => {
                "CmdStartAetherDivideStageBattleCsReq"
            }
            Self::CmdAetherDivideRefreshEndlessScNotify => {
                "CmdAetherDivideRefreshEndlessScNotify"
            }
            Self::CmdAetherDivideTainerInfoScNotify => {
                "CmdAetherDivideTainerInfoScNotify"
            }
            Self::CmdAetherDivideRefreshEndlessScRsp => {
                "CmdAetherDivideRefreshEndlessScRsp"
            }
            Self::CmdAetherDivideRefreshEndlessCsReq => {
                "CmdAetherDivideRefreshEndlessCsReq"
            }
            Self::CmdAetherDivideSpiritExpUpScRsp => "CmdAetherDivideSpiritExpUpScRsp",
            Self::CmdGetAetherDivideInfoCsReq => "CmdGetAetherDivideInfoCsReq",
            Self::CmdSwitchAetherDivideLineUpSlotScRsp => {
                "CmdSwitchAetherDivideLineUpSlotScRsp"
            }
            Self::CmdAetherDivideTakeChallengeRewardScRsp => {
                "CmdAetherDivideTakeChallengeRewardScRsp"
            }
            Self::CmdStartAetherDivideSceneBattleScRsp => {
                "CmdStartAetherDivideSceneBattleScRsp"
            }
            Self::CmdAetherDivideTakeChallengeRewardCsReq => {
                "CmdAetherDivideTakeChallengeRewardCsReq"
            }
            Self::CmdGetAetherDivideChallengeInfoCsReq => {
                "CmdGetAetherDivideChallengeInfoCsReq"
            }
            Self::CmdAetherDivideSpiritExpUpCsReq => "CmdAetherDivideSpiritExpUpCsReq",
            Self::CmdEnterAetherDivideSceneScRsp => "CmdEnterAetherDivideSceneScRsp",
            Self::CmdGetAetherDivideInfoScRsp => "CmdGetAetherDivideInfoScRsp",
            Self::CmdAetherDivideSpiritInfoScNotify => {
                "CmdAetherDivideSpiritInfoScNotify"
            }
            Self::CmdEquipAetherDividePassiveSkillCsReq => {
                "CmdEquipAetherDividePassiveSkillCsReq"
            }
            Self::CmdStartAetherDivideStageBattleScRsp => {
                "CmdStartAetherDivideStageBattleScRsp"
            }
            Self::CmdLeaveAetherDivideSceneCsReq => "CmdLeaveAetherDivideSceneCsReq",
            Self::CmdStartAetherDivideChallengeBattleCsReq => {
                "CmdStartAetherDivideChallengeBattleCsReq"
            }
            Self::CmdEnterAetherDivideSceneCsReq => "CmdEnterAetherDivideSceneCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAetherDivideTypeNone" => Some(Self::None),
            "CmdStartAetherDivideSceneBattleCsReq" => {
                Some(Self::CmdStartAetherDivideSceneBattleCsReq)
            }
            "CmdSetAetherDivideLineUpCsReq" => Some(Self::CmdSetAetherDivideLineUpCsReq),
            "CmdStartAetherDivideChallengeBattleScRsp" => {
                Some(Self::CmdStartAetherDivideChallengeBattleScRsp)
            }
            "CmdAetherDivideLineupScNotify" => Some(Self::CmdAetherDivideLineupScNotify),
            "CmdEquipAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdEquipAetherDividePassiveSkillScRsp)
            }
            "CmdAetherDivideFinishChallengeScNotify" => {
                Some(Self::CmdAetherDivideFinishChallengeScNotify)
            }
            "CmdSetAetherDivideLineUpScRsp" => Some(Self::CmdSetAetherDivideLineUpScRsp),
            "CmdLeaveAetherDivideSceneScRsp" => {
                Some(Self::CmdLeaveAetherDivideSceneScRsp)
            }
            "CmdGetAetherDivideChallengeInfoScRsp" => {
                Some(Self::CmdGetAetherDivideChallengeInfoScRsp)
            }
            "CmdSwitchAetherDivideLineUpSlotCsReq" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotCsReq)
            }
            "CmdClearAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdClearAetherDividePassiveSkillCsReq)
            }
            "CmdAetherDivideSkillItemScNotify" => {
                Some(Self::CmdAetherDivideSkillItemScNotify)
            }
            "CmdClearAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdClearAetherDividePassiveSkillScRsp)
            }
            "CmdStartAetherDivideStageBattleCsReq" => {
                Some(Self::CmdStartAetherDivideStageBattleCsReq)
            }
            "CmdAetherDivideRefreshEndlessScNotify" => {
                Some(Self::CmdAetherDivideRefreshEndlessScNotify)
            }
            "CmdAetherDivideTainerInfoScNotify" => {
                Some(Self::CmdAetherDivideTainerInfoScNotify)
            }
            "CmdAetherDivideRefreshEndlessScRsp" => {
                Some(Self::CmdAetherDivideRefreshEndlessScRsp)
            }
            "CmdAetherDivideRefreshEndlessCsReq" => {
                Some(Self::CmdAetherDivideRefreshEndlessCsReq)
            }
            "CmdAetherDivideSpiritExpUpScRsp" => {
                Some(Self::CmdAetherDivideSpiritExpUpScRsp)
            }
            "CmdGetAetherDivideInfoCsReq" => Some(Self::CmdGetAetherDivideInfoCsReq),
            "CmdSwitchAetherDivideLineUpSlotScRsp" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotScRsp)
            }
            "CmdAetherDivideTakeChallengeRewardScRsp" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardScRsp)
            }
            "CmdStartAetherDivideSceneBattleScRsp" => {
                Some(Self::CmdStartAetherDivideSceneBattleScRsp)
            }
            "CmdAetherDivideTakeChallengeRewardCsReq" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardCsReq)
            }
            "CmdGetAetherDivideChallengeInfoCsReq" => {
                Some(Self::CmdGetAetherDivideChallengeInfoCsReq)
            }
            "CmdAetherDivideSpiritExpUpCsReq" => {
                Some(Self::CmdAetherDivideSpiritExpUpCsReq)
            }
            "CmdEnterAetherDivideSceneScRsp" => {
                Some(Self::CmdEnterAetherDivideSceneScRsp)
            }
            "CmdGetAetherDivideInfoScRsp" => Some(Self::CmdGetAetherDivideInfoScRsp),
            "CmdAetherDivideSpiritInfoScNotify" => {
                Some(Self::CmdAetherDivideSpiritInfoScNotify)
            }
            "CmdEquipAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdEquipAetherDividePassiveSkillCsReq)
            }
            "CmdStartAetherDivideStageBattleScRsp" => {
                Some(Self::CmdStartAetherDivideStageBattleScRsp)
            }
            "CmdLeaveAetherDivideSceneCsReq" => {
                Some(Self::CmdLeaveAetherDivideSceneCsReq)
            }
            "CmdStartAetherDivideChallengeBattleCsReq" => {
                Some(Self::CmdStartAetherDivideChallengeBattleCsReq)
            }
            "CmdEnterAetherDivideSceneCsReq" => {
                Some(Self::CmdEnterAetherDivideSceneCsReq)
            }
            _ => None,
        }
    }
}
/// AKBBJPBBCAM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAlleyType {
    None = 0,
    CmdStartAlleyEventCsReq = 4734,
    CmdActivityRaidPlacingGameScRsp = 4743,
    CmdTakePrestigeRewardCsReq = 4747,
    CmdLogisticsDetonateStarSkiffScRsp = 4791,
    CmdAlleyOrderChangedScNotify = 4761,
    CmdGetAlleyInfoScRsp = 4720,
    CmdLogisticsScoreRewardSyncInfoScNotify = 4704,
    CmdAlleyShopLevelScNotify = 4773,
    CmdAlleyPlacingGameScRsp = 4775,
    CmdGetSaveLogisticsMapCsReq = 4794,
    CmdGetSaveLogisticsMapScRsp = 4710,
    CmdSaveLogisticsScRsp = 4709,
    CmdAlleyTakeEventRewardCsReq = 4726,
    CmdLogisticsInfoScNotify = 4793,
    CmdAlleyPlacingGameCsReq = 4730,
    CmdLogisticsGameScRsp = 4746,
    CmdGetAlleyInfoCsReq = 4759,
    CmdAlleyTakeEventRewardScRsp = 4713,
    CmdPrestigeLevelUpCsReq = 4729,
    CmdRefreshAlleyOrderScRsp = 4719,
    CmdAlleyShipUnlockScNotify = 4783,
    CmdAlleyShipUsedCountScNotify = 4770,
    CmdLogisticsGameCsReq = 4703,
    CmdAlleyEventEffectNotify = 4716,
    CmdTakePrestigeRewardScRsp = 4774,
    CmdPrestigeLevelUpScRsp = 4733,
    CmdStartAlleyEventScRsp = 4737,
    CmdAlleyFundsScNotify = 4751,
    CmdRefreshAlleyOrderCsReq = 4779,
    CmdAlleyShipmentEventEffectsScNotify = 4764,
    CmdAlleyGuaranteedFundsCsReq = 4736,
    CmdAlleyGuaranteedFundsScRsp = 4765,
    CmdAlleyEventChangeNotify = 4780,
    CmdSaveLogisticsCsReq = 4799,
    CmdActivityRaidPlacingGameCsReq = 4788,
    CmdLogisticsDetonateStarSkiffCsReq = 4777,
}
impl CmdAlleyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAlleyTypeNone",
            Self::CmdStartAlleyEventCsReq => "CmdStartAlleyEventCsReq",
            Self::CmdActivityRaidPlacingGameScRsp => "CmdActivityRaidPlacingGameScRsp",
            Self::CmdTakePrestigeRewardCsReq => "CmdTakePrestigeRewardCsReq",
            Self::CmdLogisticsDetonateStarSkiffScRsp => {
                "CmdLogisticsDetonateStarSkiffScRsp"
            }
            Self::CmdAlleyOrderChangedScNotify => "CmdAlleyOrderChangedScNotify",
            Self::CmdGetAlleyInfoScRsp => "CmdGetAlleyInfoScRsp",
            Self::CmdLogisticsScoreRewardSyncInfoScNotify => {
                "CmdLogisticsScoreRewardSyncInfoScNotify"
            }
            Self::CmdAlleyShopLevelScNotify => "CmdAlleyShopLevelScNotify",
            Self::CmdAlleyPlacingGameScRsp => "CmdAlleyPlacingGameScRsp",
            Self::CmdGetSaveLogisticsMapCsReq => "CmdGetSaveLogisticsMapCsReq",
            Self::CmdGetSaveLogisticsMapScRsp => "CmdGetSaveLogisticsMapScRsp",
            Self::CmdSaveLogisticsScRsp => "CmdSaveLogisticsScRsp",
            Self::CmdAlleyTakeEventRewardCsReq => "CmdAlleyTakeEventRewardCsReq",
            Self::CmdLogisticsInfoScNotify => "CmdLogisticsInfoScNotify",
            Self::CmdAlleyPlacingGameCsReq => "CmdAlleyPlacingGameCsReq",
            Self::CmdLogisticsGameScRsp => "CmdLogisticsGameScRsp",
            Self::CmdGetAlleyInfoCsReq => "CmdGetAlleyInfoCsReq",
            Self::CmdAlleyTakeEventRewardScRsp => "CmdAlleyTakeEventRewardScRsp",
            Self::CmdPrestigeLevelUpCsReq => "CmdPrestigeLevelUpCsReq",
            Self::CmdRefreshAlleyOrderScRsp => "CmdRefreshAlleyOrderScRsp",
            Self::CmdAlleyShipUnlockScNotify => "CmdAlleyShipUnlockScNotify",
            Self::CmdAlleyShipUsedCountScNotify => "CmdAlleyShipUsedCountScNotify",
            Self::CmdLogisticsGameCsReq => "CmdLogisticsGameCsReq",
            Self::CmdAlleyEventEffectNotify => "CmdAlleyEventEffectNotify",
            Self::CmdTakePrestigeRewardScRsp => "CmdTakePrestigeRewardScRsp",
            Self::CmdPrestigeLevelUpScRsp => "CmdPrestigeLevelUpScRsp",
            Self::CmdStartAlleyEventScRsp => "CmdStartAlleyEventScRsp",
            Self::CmdAlleyFundsScNotify => "CmdAlleyFundsScNotify",
            Self::CmdRefreshAlleyOrderCsReq => "CmdRefreshAlleyOrderCsReq",
            Self::CmdAlleyShipmentEventEffectsScNotify => {
                "CmdAlleyShipmentEventEffectsScNotify"
            }
            Self::CmdAlleyGuaranteedFundsCsReq => "CmdAlleyGuaranteedFundsCsReq",
            Self::CmdAlleyGuaranteedFundsScRsp => "CmdAlleyGuaranteedFundsScRsp",
            Self::CmdAlleyEventChangeNotify => "CmdAlleyEventChangeNotify",
            Self::CmdSaveLogisticsCsReq => "CmdSaveLogisticsCsReq",
            Self::CmdActivityRaidPlacingGameCsReq => "CmdActivityRaidPlacingGameCsReq",
            Self::CmdLogisticsDetonateStarSkiffCsReq => {
                "CmdLogisticsDetonateStarSkiffCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAlleyTypeNone" => Some(Self::None),
            "CmdStartAlleyEventCsReq" => Some(Self::CmdStartAlleyEventCsReq),
            "CmdActivityRaidPlacingGameScRsp" => {
                Some(Self::CmdActivityRaidPlacingGameScRsp)
            }
            "CmdTakePrestigeRewardCsReq" => Some(Self::CmdTakePrestigeRewardCsReq),
            "CmdLogisticsDetonateStarSkiffScRsp" => {
                Some(Self::CmdLogisticsDetonateStarSkiffScRsp)
            }
            "CmdAlleyOrderChangedScNotify" => Some(Self::CmdAlleyOrderChangedScNotify),
            "CmdGetAlleyInfoScRsp" => Some(Self::CmdGetAlleyInfoScRsp),
            "CmdLogisticsScoreRewardSyncInfoScNotify" => {
                Some(Self::CmdLogisticsScoreRewardSyncInfoScNotify)
            }
            "CmdAlleyShopLevelScNotify" => Some(Self::CmdAlleyShopLevelScNotify),
            "CmdAlleyPlacingGameScRsp" => Some(Self::CmdAlleyPlacingGameScRsp),
            "CmdGetSaveLogisticsMapCsReq" => Some(Self::CmdGetSaveLogisticsMapCsReq),
            "CmdGetSaveLogisticsMapScRsp" => Some(Self::CmdGetSaveLogisticsMapScRsp),
            "CmdSaveLogisticsScRsp" => Some(Self::CmdSaveLogisticsScRsp),
            "CmdAlleyTakeEventRewardCsReq" => Some(Self::CmdAlleyTakeEventRewardCsReq),
            "CmdLogisticsInfoScNotify" => Some(Self::CmdLogisticsInfoScNotify),
            "CmdAlleyPlacingGameCsReq" => Some(Self::CmdAlleyPlacingGameCsReq),
            "CmdLogisticsGameScRsp" => Some(Self::CmdLogisticsGameScRsp),
            "CmdGetAlleyInfoCsReq" => Some(Self::CmdGetAlleyInfoCsReq),
            "CmdAlleyTakeEventRewardScRsp" => Some(Self::CmdAlleyTakeEventRewardScRsp),
            "CmdPrestigeLevelUpCsReq" => Some(Self::CmdPrestigeLevelUpCsReq),
            "CmdRefreshAlleyOrderScRsp" => Some(Self::CmdRefreshAlleyOrderScRsp),
            "CmdAlleyShipUnlockScNotify" => Some(Self::CmdAlleyShipUnlockScNotify),
            "CmdAlleyShipUsedCountScNotify" => Some(Self::CmdAlleyShipUsedCountScNotify),
            "CmdLogisticsGameCsReq" => Some(Self::CmdLogisticsGameCsReq),
            "CmdAlleyEventEffectNotify" => Some(Self::CmdAlleyEventEffectNotify),
            "CmdTakePrestigeRewardScRsp" => Some(Self::CmdTakePrestigeRewardScRsp),
            "CmdPrestigeLevelUpScRsp" => Some(Self::CmdPrestigeLevelUpScRsp),
            "CmdStartAlleyEventScRsp" => Some(Self::CmdStartAlleyEventScRsp),
            "CmdAlleyFundsScNotify" => Some(Self::CmdAlleyFundsScNotify),
            "CmdRefreshAlleyOrderCsReq" => Some(Self::CmdRefreshAlleyOrderCsReq),
            "CmdAlleyShipmentEventEffectsScNotify" => {
                Some(Self::CmdAlleyShipmentEventEffectsScNotify)
            }
            "CmdAlleyGuaranteedFundsCsReq" => Some(Self::CmdAlleyGuaranteedFundsCsReq),
            "CmdAlleyGuaranteedFundsScRsp" => Some(Self::CmdAlleyGuaranteedFundsScRsp),
            "CmdAlleyEventChangeNotify" => Some(Self::CmdAlleyEventChangeNotify),
            "CmdSaveLogisticsCsReq" => Some(Self::CmdSaveLogisticsCsReq),
            "CmdActivityRaidPlacingGameCsReq" => {
                Some(Self::CmdActivityRaidPlacingGameCsReq)
            }
            "CmdLogisticsDetonateStarSkiffCsReq" => {
                Some(Self::CmdLogisticsDetonateStarSkiffCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hmffljcdjda {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
    LeftUp = 4,
    LeftDown = 5,
    RightUp = 6,
    RightDown = 7,
}
impl Hmffljcdjda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Left => "LEFT",
            Self::Right => "RIGHT",
            Self::Up => "UP",
            Self::Down => "DOWN",
            Self::LeftUp => "LEFT_UP",
            Self::LeftDown => "LEFT_DOWN",
            Self::RightUp => "RIGHT_UP",
            Self::RightDown => "RIGHT_DOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEFT" => Some(Self::Left),
            "RIGHT" => Some(Self::Right),
            "UP" => Some(Self::Up),
            "DOWN" => Some(Self::Down),
            "LEFT_UP" => Some(Self::LeftUp),
            "LEFT_DOWN" => Some(Self::LeftDown),
            "RIGHT_UP" => Some(Self::RightUp),
            "RIGHT_DOWN" => Some(Self::RightDown),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iigkcbeldem {
    AlleyEventTypeNone = 0,
    AlleyMainEvent = 1,
    AlleyCriticalEvent = 2,
    AlleyDailyEvent = 3,
}
impl Iigkcbeldem {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AlleyEventTypeNone => "ALLEY_EVENT_TYPE_NONE",
            Self::AlleyMainEvent => "ALLEY_MAIN_EVENT",
            Self::AlleyCriticalEvent => "ALLEY_CRITICAL_EVENT",
            Self::AlleyDailyEvent => "ALLEY_DAILY_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_EVENT_TYPE_NONE" => Some(Self::AlleyEventTypeNone),
            "ALLEY_MAIN_EVENT" => Some(Self::AlleyMainEvent),
            "ALLEY_CRITICAL_EVENT" => Some(Self::AlleyCriticalEvent),
            "ALLEY_DAILY_EVENT" => Some(Self::AlleyDailyEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cjgfgplalem {
    AlleyStateNone = 0,
    AlleyEventDoing = 1,
    AlleyEventFinish = 2,
    AlleyEventRewarded = 3,
}
impl Cjgfgplalem {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AlleyStateNone => "ALLEY_STATE_NONE",
            Self::AlleyEventDoing => "ALLEY_EVENT_DOING",
            Self::AlleyEventFinish => "ALLEY_EVENT_FINISH",
            Self::AlleyEventRewarded => "ALLEY_EVENT_REWARDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_STATE_NONE" => Some(Self::AlleyStateNone),
            "ALLEY_EVENT_DOING" => Some(Self::AlleyEventDoing),
            "ALLEY_EVENT_FINISH" => Some(Self::AlleyEventFinish),
            "ALLEY_EVENT_REWARDED" => Some(Self::AlleyEventRewarded),
            _ => None,
        }
    }
}
/// FIMMBHPOLFF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdArchiveType {
    None = 0,
    CmdGetArchiveDataCsReq = 2359,
    CmdGetArchiveDataScRsp = 2320,
    CmdGetUpdatedArchiveDataScRsp = 2346,
    CmdGetUpdatedArchiveDataCsReq = 2303,
}
impl CmdArchiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdArchiveTypeNone",
            Self::CmdGetArchiveDataCsReq => "CmdGetArchiveDataCsReq",
            Self::CmdGetArchiveDataScRsp => "CmdGetArchiveDataScRsp",
            Self::CmdGetUpdatedArchiveDataScRsp => "CmdGetUpdatedArchiveDataScRsp",
            Self::CmdGetUpdatedArchiveDataCsReq => "CmdGetUpdatedArchiveDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdArchiveTypeNone" => Some(Self::None),
            "CmdGetArchiveDataCsReq" => Some(Self::CmdGetArchiveDataCsReq),
            "CmdGetArchiveDataScRsp" => Some(Self::CmdGetArchiveDataScRsp),
            "CmdGetUpdatedArchiveDataScRsp" => Some(Self::CmdGetUpdatedArchiveDataScRsp),
            "CmdGetUpdatedArchiveDataCsReq" => Some(Self::CmdGetUpdatedArchiveDataCsReq),
            _ => None,
        }
    }
}
/// HGGFOGGJOLL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAvatarType {
    None = 0,
    CmdTakeOffRelicScRsp = 361,
    CmdDressRelicAvatarScRsp = 379,
    CmdDressAvatarSkinScRsp = 351,
    CmdAvatarExpUpScRsp = 346,
    CmdTakeOffEquipmentScRsp = 374,
    CmdGetAvatarDataCsReq = 359,
    CmdDressAvatarCsReq = 380,
    CmdDressRelicAvatarCsReq = 390,
    CmdTakePromotionRewardScRsp = 329,
    CmdTakePromotionRewardCsReq = 325,
    CmdUnlockAvatarSkinScNotify = 399,
    CmdMarkAvatarScRsp = 393,
    CmdUnlockSkilltreeScRsp = 353,
    CmdGetAvatarDataScRsp = 320,
    CmdTakeOffEquipmentCsReq = 347,
    CmdAddAvatarScNotify = 330,
    CmdTakeOffRelicCsReq = 319,
    CmdRankUpAvatarScRsp = 348,
    CmdUnlockSkilltreeCsReq = 339,
    CmdPromoteAvatarScRsp = 337,
    CmdTakeOffAvatarSkinScRsp = 383,
    CmdTakeOffAvatarSkinCsReq = 373,
    CmdAvatarExpUpCsReq = 303,
    CmdRankUpAvatarCsReq = 375,
    CmdDressAvatarSkinCsReq = 333,
    CmdDressAvatarScRsp = 316,
    CmdMarkAvatarCsReq = 309,
    CmdPromoteAvatarCsReq = 334,
}
impl CmdAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdAvatarTypeNone",
            Self::CmdTakeOffRelicScRsp => "CmdTakeOffRelicScRsp",
            Self::CmdDressRelicAvatarScRsp => "CmdDressRelicAvatarScRsp",
            Self::CmdDressAvatarSkinScRsp => "CmdDressAvatarSkinScRsp",
            Self::CmdAvatarExpUpScRsp => "CmdAvatarExpUpScRsp",
            Self::CmdTakeOffEquipmentScRsp => "CmdTakeOffEquipmentScRsp",
            Self::CmdGetAvatarDataCsReq => "CmdGetAvatarDataCsReq",
            Self::CmdDressAvatarCsReq => "CmdDressAvatarCsReq",
            Self::CmdDressRelicAvatarCsReq => "CmdDressRelicAvatarCsReq",
            Self::CmdTakePromotionRewardScRsp => "CmdTakePromotionRewardScRsp",
            Self::CmdTakePromotionRewardCsReq => "CmdTakePromotionRewardCsReq",
            Self::CmdUnlockAvatarSkinScNotify => "CmdUnlockAvatarSkinScNotify",
            Self::CmdMarkAvatarScRsp => "CmdMarkAvatarScRsp",
            Self::CmdUnlockSkilltreeScRsp => "CmdUnlockSkilltreeScRsp",
            Self::CmdGetAvatarDataScRsp => "CmdGetAvatarDataScRsp",
            Self::CmdTakeOffEquipmentCsReq => "CmdTakeOffEquipmentCsReq",
            Self::CmdAddAvatarScNotify => "CmdAddAvatarScNotify",
            Self::CmdTakeOffRelicCsReq => "CmdTakeOffRelicCsReq",
            Self::CmdRankUpAvatarScRsp => "CmdRankUpAvatarScRsp",
            Self::CmdUnlockSkilltreeCsReq => "CmdUnlockSkilltreeCsReq",
            Self::CmdPromoteAvatarScRsp => "CmdPromoteAvatarScRsp",
            Self::CmdTakeOffAvatarSkinScRsp => "CmdTakeOffAvatarSkinScRsp",
            Self::CmdTakeOffAvatarSkinCsReq => "CmdTakeOffAvatarSkinCsReq",
            Self::CmdAvatarExpUpCsReq => "CmdAvatarExpUpCsReq",
            Self::CmdRankUpAvatarCsReq => "CmdRankUpAvatarCsReq",
            Self::CmdDressAvatarSkinCsReq => "CmdDressAvatarSkinCsReq",
            Self::CmdDressAvatarScRsp => "CmdDressAvatarScRsp",
            Self::CmdMarkAvatarCsReq => "CmdMarkAvatarCsReq",
            Self::CmdPromoteAvatarCsReq => "CmdPromoteAvatarCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAvatarTypeNone" => Some(Self::None),
            "CmdTakeOffRelicScRsp" => Some(Self::CmdTakeOffRelicScRsp),
            "CmdDressRelicAvatarScRsp" => Some(Self::CmdDressRelicAvatarScRsp),
            "CmdDressAvatarSkinScRsp" => Some(Self::CmdDressAvatarSkinScRsp),
            "CmdAvatarExpUpScRsp" => Some(Self::CmdAvatarExpUpScRsp),
            "CmdTakeOffEquipmentScRsp" => Some(Self::CmdTakeOffEquipmentScRsp),
            "CmdGetAvatarDataCsReq" => Some(Self::CmdGetAvatarDataCsReq),
            "CmdDressAvatarCsReq" => Some(Self::CmdDressAvatarCsReq),
            "CmdDressRelicAvatarCsReq" => Some(Self::CmdDressRelicAvatarCsReq),
            "CmdTakePromotionRewardScRsp" => Some(Self::CmdTakePromotionRewardScRsp),
            "CmdTakePromotionRewardCsReq" => Some(Self::CmdTakePromotionRewardCsReq),
            "CmdUnlockAvatarSkinScNotify" => Some(Self::CmdUnlockAvatarSkinScNotify),
            "CmdMarkAvatarScRsp" => Some(Self::CmdMarkAvatarScRsp),
            "CmdUnlockSkilltreeScRsp" => Some(Self::CmdUnlockSkilltreeScRsp),
            "CmdGetAvatarDataScRsp" => Some(Self::CmdGetAvatarDataScRsp),
            "CmdTakeOffEquipmentCsReq" => Some(Self::CmdTakeOffEquipmentCsReq),
            "CmdAddAvatarScNotify" => Some(Self::CmdAddAvatarScNotify),
            "CmdTakeOffRelicCsReq" => Some(Self::CmdTakeOffRelicCsReq),
            "CmdRankUpAvatarScRsp" => Some(Self::CmdRankUpAvatarScRsp),
            "CmdUnlockSkilltreeCsReq" => Some(Self::CmdUnlockSkilltreeCsReq),
            "CmdPromoteAvatarScRsp" => Some(Self::CmdPromoteAvatarScRsp),
            "CmdTakeOffAvatarSkinScRsp" => Some(Self::CmdTakeOffAvatarSkinScRsp),
            "CmdTakeOffAvatarSkinCsReq" => Some(Self::CmdTakeOffAvatarSkinCsReq),
            "CmdAvatarExpUpCsReq" => Some(Self::CmdAvatarExpUpCsReq),
            "CmdRankUpAvatarCsReq" => Some(Self::CmdRankUpAvatarCsReq),
            "CmdDressAvatarSkinCsReq" => Some(Self::CmdDressAvatarSkinCsReq),
            "CmdDressAvatarScRsp" => Some(Self::CmdDressAvatarScRsp),
            "CmdMarkAvatarCsReq" => Some(Self::CmdMarkAvatarCsReq),
            "CmdPromoteAvatarCsReq" => Some(Self::CmdPromoteAvatarCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bgcbdajjebp {
    AddAvatarSrcNone = 0,
    AddAvatarSrcGacha = 1,
    AddAvatarSrcRogue = 2,
}
impl Bgcbdajjebp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AddAvatarSrcNone => "ADD_AVATAR_SRC_NONE",
            Self::AddAvatarSrcGacha => "ADD_AVATAR_SRC_GACHA",
            Self::AddAvatarSrcRogue => "ADD_AVATAR_SRC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_AVATAR_SRC_NONE" => Some(Self::AddAvatarSrcNone),
            "ADD_AVATAR_SRC_GACHA" => Some(Self::AddAvatarSrcGacha),
            "ADD_AVATAR_SRC_ROGUE" => Some(Self::AddAvatarSrcRogue),
            _ => None,
        }
    }
}
/// JAEOAFLJBFA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleType {
    None = 0,
    CmdBattleLogReportCsReq = 116,
    CmdQuitBattleCsReq = 103,
    CmdGetCurBattleInfoCsReq = 139,
    CmdRebattleByClientCsNotify = 175,
    CmdQuitBattleScRsp = 146,
    CmdPveBattleResultCsReq = 159,
    CmdBattleLogReportScRsp = 147,
    CmdServerSimulateBattleFinishScNotify = 174,
    CmdSyncClientResVersionScRsp = 137,
    CmdQuitBattleScNotify = 180,
    CmdGetCurBattleInfoScRsp = 153,
    CmdPveBattleResultScRsp = 120,
    CmdReBattleAfterBattleLoseCsNotify = 130,
    CmdSyncClientResVersionCsReq = 134,
}
impl CmdBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleTypeNone",
            Self::CmdBattleLogReportCsReq => "CmdBattleLogReportCsReq",
            Self::CmdQuitBattleCsReq => "CmdQuitBattleCsReq",
            Self::CmdGetCurBattleInfoCsReq => "CmdGetCurBattleInfoCsReq",
            Self::CmdRebattleByClientCsNotify => "CmdRebattleByClientCsNotify",
            Self::CmdQuitBattleScRsp => "CmdQuitBattleScRsp",
            Self::CmdPveBattleResultCsReq => "CmdPVEBattleResultCsReq",
            Self::CmdBattleLogReportScRsp => "CmdBattleLogReportScRsp",
            Self::CmdServerSimulateBattleFinishScNotify => {
                "CmdServerSimulateBattleFinishScNotify"
            }
            Self::CmdSyncClientResVersionScRsp => "CmdSyncClientResVersionScRsp",
            Self::CmdQuitBattleScNotify => "CmdQuitBattleScNotify",
            Self::CmdGetCurBattleInfoScRsp => "CmdGetCurBattleInfoScRsp",
            Self::CmdPveBattleResultScRsp => "CmdPVEBattleResultScRsp",
            Self::CmdReBattleAfterBattleLoseCsNotify => {
                "CmdReBattleAfterBattleLoseCsNotify"
            }
            Self::CmdSyncClientResVersionCsReq => "CmdSyncClientResVersionCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleTypeNone" => Some(Self::None),
            "CmdBattleLogReportCsReq" => Some(Self::CmdBattleLogReportCsReq),
            "CmdQuitBattleCsReq" => Some(Self::CmdQuitBattleCsReq),
            "CmdGetCurBattleInfoCsReq" => Some(Self::CmdGetCurBattleInfoCsReq),
            "CmdRebattleByClientCsNotify" => Some(Self::CmdRebattleByClientCsNotify),
            "CmdQuitBattleScRsp" => Some(Self::CmdQuitBattleScRsp),
            "CmdPVEBattleResultCsReq" => Some(Self::CmdPveBattleResultCsReq),
            "CmdBattleLogReportScRsp" => Some(Self::CmdBattleLogReportScRsp),
            "CmdServerSimulateBattleFinishScNotify" => {
                Some(Self::CmdServerSimulateBattleFinishScNotify)
            }
            "CmdSyncClientResVersionScRsp" => Some(Self::CmdSyncClientResVersionScRsp),
            "CmdQuitBattleScNotify" => Some(Self::CmdQuitBattleScNotify),
            "CmdGetCurBattleInfoScRsp" => Some(Self::CmdGetCurBattleInfoScRsp),
            "CmdPVEBattleResultScRsp" => Some(Self::CmdPveBattleResultScRsp),
            "CmdReBattleAfterBattleLoseCsNotify" => {
                Some(Self::CmdReBattleAfterBattleLoseCsNotify)
            }
            "CmdSyncClientResVersionCsReq" => Some(Self::CmdSyncClientResVersionCsReq),
            _ => None,
        }
    }
}
/// FDNODLNLAHG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleCollegeType {
    None = 0,
    CmdBattleCollegeDataChangeScNotify = 5703,
    CmdGetBattleCollegeDataCsReq = 5759,
    CmdStartBattleCollegeCsReq = 5746,
    CmdGetBattleCollegeDataScRsp = 5720,
    CmdStartBattleCollegeScRsp = 5739,
}
impl CmdBattleCollegeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattleCollegeTypeNone",
            Self::CmdBattleCollegeDataChangeScNotify => {
                "CmdBattleCollegeDataChangeScNotify"
            }
            Self::CmdGetBattleCollegeDataCsReq => "CmdGetBattleCollegeDataCsReq",
            Self::CmdStartBattleCollegeCsReq => "CmdStartBattleCollegeCsReq",
            Self::CmdGetBattleCollegeDataScRsp => "CmdGetBattleCollegeDataScRsp",
            Self::CmdStartBattleCollegeScRsp => "CmdStartBattleCollegeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleCollegeTypeNone" => Some(Self::None),
            "CmdBattleCollegeDataChangeScNotify" => {
                Some(Self::CmdBattleCollegeDataChangeScNotify)
            }
            "CmdGetBattleCollegeDataCsReq" => Some(Self::CmdGetBattleCollegeDataCsReq),
            "CmdStartBattleCollegeCsReq" => Some(Self::CmdStartBattleCollegeCsReq),
            "CmdGetBattleCollegeDataScRsp" => Some(Self::CmdGetBattleCollegeDataScRsp),
            "CmdStartBattleCollegeScRsp" => Some(Self::CmdStartBattleCollegeScRsp),
            _ => None,
        }
    }
}
/// HLDGEKMPNMD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattlePassType {
    None = 0,
    CmdBattlePassInfoNotify = 3059,
    CmdTakeAllRewardScRsp = 3080,
    CmdBuyBpLevelScRsp = 3034,
    CmdTakeBpRewardScRsp = 3039,
    CmdTakeBpRewardCsReq = 3046,
    CmdTakeAllRewardCsReq = 3037,
    CmdBuyBpLevelCsReq = 3053,
}
impl CmdBattlePassType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBattlePassTypeNone",
            Self::CmdBattlePassInfoNotify => "CmdBattlePassInfoNotify",
            Self::CmdTakeAllRewardScRsp => "CmdTakeAllRewardScRsp",
            Self::CmdBuyBpLevelScRsp => "CmdBuyBpLevelScRsp",
            Self::CmdTakeBpRewardScRsp => "CmdTakeBpRewardScRsp",
            Self::CmdTakeBpRewardCsReq => "CmdTakeBpRewardCsReq",
            Self::CmdTakeAllRewardCsReq => "CmdTakeAllRewardCsReq",
            Self::CmdBuyBpLevelCsReq => "CmdBuyBpLevelCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattlePassTypeNone" => Some(Self::None),
            "CmdBattlePassInfoNotify" => Some(Self::CmdBattlePassInfoNotify),
            "CmdTakeAllRewardScRsp" => Some(Self::CmdTakeAllRewardScRsp),
            "CmdBuyBpLevelScRsp" => Some(Self::CmdBuyBpLevelScRsp),
            "CmdTakeBpRewardScRsp" => Some(Self::CmdTakeBpRewardScRsp),
            "CmdTakeBpRewardCsReq" => Some(Self::CmdTakeBpRewardCsReq),
            "CmdTakeAllRewardCsReq" => Some(Self::CmdTakeAllRewardCsReq),
            "CmdBuyBpLevelCsReq" => Some(Self::CmdBuyBpLevelCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BpTierType {
    None = 0,
    Free = 1,
    Premium1 = 2,
    Premium2 = 3,
}
impl BpTierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "BP_TIER_TYPE_NONE",
            Self::Free => "BP_TIER_TYPE_FREE",
            Self::Premium1 => "BP_TIER_TYPE_PREMIUM_1",
            Self::Premium2 => "BP_TIER_TYPE_PREMIUM_2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_TIER_TYPE_NONE" => Some(Self::None),
            "BP_TIER_TYPE_FREE" => Some(Self::Free),
            "BP_TIER_TYPE_PREMIUM_1" => Some(Self::Premium1),
            "BP_TIER_TYPE_PREMIUM_2" => Some(Self::Premium2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lnafgdhgdek {
    BpRewaradTypeNone = 0,
    BpRewaradTypeFree = 1,
    BpRewaradTypePremium1 = 2,
    BpRewaradTypePremium2 = 3,
    BpRewaradTypePremiumOptional = 4,
}
impl Lnafgdhgdek {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BpRewaradTypeNone => "BP_REWARAD_TYPE_NONE",
            Self::BpRewaradTypeFree => "BP_REWARAD_TYPE_FREE",
            Self::BpRewaradTypePremium1 => "BP_REWARAD_TYPE_PREMIUM_1",
            Self::BpRewaradTypePremium2 => "BP_REWARAD_TYPE_PREMIUM_2",
            Self::BpRewaradTypePremiumOptional => "BP_REWARAD_TYPE_PREMIUM_OPTIONAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_REWARAD_TYPE_NONE" => Some(Self::BpRewaradTypeNone),
            "BP_REWARAD_TYPE_FREE" => Some(Self::BpRewaradTypeFree),
            "BP_REWARAD_TYPE_PREMIUM_1" => Some(Self::BpRewaradTypePremium1),
            "BP_REWARAD_TYPE_PREMIUM_2" => Some(Self::BpRewaradTypePremium2),
            "BP_REWARAD_TYPE_PREMIUM_OPTIONAL" => {
                Some(Self::BpRewaradTypePremiumOptional)
            }
            _ => None,
        }
    }
}
/// FGACGKIGLGO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBoxingClubType {
    None = 0,
    CmdBoxingClubRewardScNotify = 4280,
    CmdMatchBoxingClubOpponentScRsp = 4246,
    CmdSetBoxingClubResonanceLineupScRsp = 4275,
    CmdStartBoxingClubBattleScRsp = 4253,
    CmdGetBoxingClubInfoScRsp = 4220,
    CmdChooseBoxingClubStageOptionalBuffCsReq = 4248,
    CmdChooseBoxingClubResonanceScRsp = 4274,
    CmdGetBoxingClubInfoCsReq = 4259,
    CmdSetBoxingClubResonanceLineupCsReq = 4230,
    CmdStartBoxingClubBattleCsReq = 4239,
    CmdBoxingClubChallengeUpdateScNotify = 4216,
    CmdMatchBoxingClubOpponentCsReq = 4203,
    CmdGiveUpBoxingClubChallengeScRsp = 4237,
    CmdChooseBoxingClubStageOptionalBuffScRsp = 4290,
    CmdGiveUpBoxingClubChallengeCsReq = 4234,
    CmdChooseBoxingClubResonanceCsReq = 4247,
}
impl CmdBoxingClubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdBoxingClubTypeNone",
            Self::CmdBoxingClubRewardScNotify => "CmdBoxingClubRewardScNotify",
            Self::CmdMatchBoxingClubOpponentScRsp => "CmdMatchBoxingClubOpponentScRsp",
            Self::CmdSetBoxingClubResonanceLineupScRsp => {
                "CmdSetBoxingClubResonanceLineupScRsp"
            }
            Self::CmdStartBoxingClubBattleScRsp => "CmdStartBoxingClubBattleScRsp",
            Self::CmdGetBoxingClubInfoScRsp => "CmdGetBoxingClubInfoScRsp",
            Self::CmdChooseBoxingClubStageOptionalBuffCsReq => {
                "CmdChooseBoxingClubStageOptionalBuffCsReq"
            }
            Self::CmdChooseBoxingClubResonanceScRsp => {
                "CmdChooseBoxingClubResonanceScRsp"
            }
            Self::CmdGetBoxingClubInfoCsReq => "CmdGetBoxingClubInfoCsReq",
            Self::CmdSetBoxingClubResonanceLineupCsReq => {
                "CmdSetBoxingClubResonanceLineupCsReq"
            }
            Self::CmdStartBoxingClubBattleCsReq => "CmdStartBoxingClubBattleCsReq",
            Self::CmdBoxingClubChallengeUpdateScNotify => {
                "CmdBoxingClubChallengeUpdateScNotify"
            }
            Self::CmdMatchBoxingClubOpponentCsReq => "CmdMatchBoxingClubOpponentCsReq",
            Self::CmdGiveUpBoxingClubChallengeScRsp => {
                "CmdGiveUpBoxingClubChallengeScRsp"
            }
            Self::CmdChooseBoxingClubStageOptionalBuffScRsp => {
                "CmdChooseBoxingClubStageOptionalBuffScRsp"
            }
            Self::CmdGiveUpBoxingClubChallengeCsReq => {
                "CmdGiveUpBoxingClubChallengeCsReq"
            }
            Self::CmdChooseBoxingClubResonanceCsReq => {
                "CmdChooseBoxingClubResonanceCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBoxingClubTypeNone" => Some(Self::None),
            "CmdBoxingClubRewardScNotify" => Some(Self::CmdBoxingClubRewardScNotify),
            "CmdMatchBoxingClubOpponentScRsp" => {
                Some(Self::CmdMatchBoxingClubOpponentScRsp)
            }
            "CmdSetBoxingClubResonanceLineupScRsp" => {
                Some(Self::CmdSetBoxingClubResonanceLineupScRsp)
            }
            "CmdStartBoxingClubBattleScRsp" => Some(Self::CmdStartBoxingClubBattleScRsp),
            "CmdGetBoxingClubInfoScRsp" => Some(Self::CmdGetBoxingClubInfoScRsp),
            "CmdChooseBoxingClubStageOptionalBuffCsReq" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffCsReq)
            }
            "CmdChooseBoxingClubResonanceScRsp" => {
                Some(Self::CmdChooseBoxingClubResonanceScRsp)
            }
            "CmdGetBoxingClubInfoCsReq" => Some(Self::CmdGetBoxingClubInfoCsReq),
            "CmdSetBoxingClubResonanceLineupCsReq" => {
                Some(Self::CmdSetBoxingClubResonanceLineupCsReq)
            }
            "CmdStartBoxingClubBattleCsReq" => Some(Self::CmdStartBoxingClubBattleCsReq),
            "CmdBoxingClubChallengeUpdateScNotify" => {
                Some(Self::CmdBoxingClubChallengeUpdateScNotify)
            }
            "CmdMatchBoxingClubOpponentCsReq" => {
                Some(Self::CmdMatchBoxingClubOpponentCsReq)
            }
            "CmdGiveUpBoxingClubChallengeScRsp" => {
                Some(Self::CmdGiveUpBoxingClubChallengeScRsp)
            }
            "CmdChooseBoxingClubStageOptionalBuffScRsp" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffScRsp)
            }
            "CmdGiveUpBoxingClubChallengeCsReq" => {
                Some(Self::CmdGiveUpBoxingClubChallengeCsReq)
            }
            "CmdChooseBoxingClubResonanceCsReq" => {
                Some(Self::CmdChooseBoxingClubResonanceCsReq)
            }
            _ => None,
        }
    }
}
/// FNGBPOAMLEI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChallengeType {
    None = 0,
    CmdLeaveChallengeCsReq = 1739,
    CmdRestartChallengePhaseCsReq = 1733,
    CmdStartChallengeCsReq = 1703,
    CmdTakeChallengeRewardCsReq = 1748,
    CmdEnterChallengeNextPhaseCsReq = 1773,
    CmdGetChallengeGroupStatisticsCsReq = 1779,
    CmdChallengeBossPhaseSettleNotify = 1799,
    CmdChallengeLineupNotify = 1774,
    CmdGetChallengeGroupStatisticsScRsp = 1719,
    CmdStartPartialChallengeCsReq = 1761,
    CmdRestartChallengePhaseScRsp = 1751,
    CmdChallengeSettleNotify = 1734,
    CmdStartPartialChallengeScRsp = 1725,
    CmdStartChallengeScRsp = 1746,
    CmdGetCurChallengeCsReq = 1716,
    CmdEnterChallengeNextPhaseScRsp = 1783,
    CmdTakeChallengeRewardScRsp = 1790,
    CmdGetCurChallengeScRsp = 1747,
    CmdGetChallengeCsReq = 1759,
    CmdLeaveChallengeScRsp = 1753,
    CmdGetChallengeScRsp = 1720,
}
impl CmdChallengeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChallengeTypeNone",
            Self::CmdLeaveChallengeCsReq => "CmdLeaveChallengeCsReq",
            Self::CmdRestartChallengePhaseCsReq => "CmdRestartChallengePhaseCsReq",
            Self::CmdStartChallengeCsReq => "CmdStartChallengeCsReq",
            Self::CmdTakeChallengeRewardCsReq => "CmdTakeChallengeRewardCsReq",
            Self::CmdEnterChallengeNextPhaseCsReq => "CmdEnterChallengeNextPhaseCsReq",
            Self::CmdGetChallengeGroupStatisticsCsReq => {
                "CmdGetChallengeGroupStatisticsCsReq"
            }
            Self::CmdChallengeBossPhaseSettleNotify => {
                "CmdChallengeBossPhaseSettleNotify"
            }
            Self::CmdChallengeLineupNotify => "CmdChallengeLineupNotify",
            Self::CmdGetChallengeGroupStatisticsScRsp => {
                "CmdGetChallengeGroupStatisticsScRsp"
            }
            Self::CmdStartPartialChallengeCsReq => "CmdStartPartialChallengeCsReq",
            Self::CmdRestartChallengePhaseScRsp => "CmdRestartChallengePhaseScRsp",
            Self::CmdChallengeSettleNotify => "CmdChallengeSettleNotify",
            Self::CmdStartPartialChallengeScRsp => "CmdStartPartialChallengeScRsp",
            Self::CmdStartChallengeScRsp => "CmdStartChallengeScRsp",
            Self::CmdGetCurChallengeCsReq => "CmdGetCurChallengeCsReq",
            Self::CmdEnterChallengeNextPhaseScRsp => "CmdEnterChallengeNextPhaseScRsp",
            Self::CmdTakeChallengeRewardScRsp => "CmdTakeChallengeRewardScRsp",
            Self::CmdGetCurChallengeScRsp => "CmdGetCurChallengeScRsp",
            Self::CmdGetChallengeCsReq => "CmdGetChallengeCsReq",
            Self::CmdLeaveChallengeScRsp => "CmdLeaveChallengeScRsp",
            Self::CmdGetChallengeScRsp => "CmdGetChallengeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChallengeTypeNone" => Some(Self::None),
            "CmdLeaveChallengeCsReq" => Some(Self::CmdLeaveChallengeCsReq),
            "CmdRestartChallengePhaseCsReq" => Some(Self::CmdRestartChallengePhaseCsReq),
            "CmdStartChallengeCsReq" => Some(Self::CmdStartChallengeCsReq),
            "CmdTakeChallengeRewardCsReq" => Some(Self::CmdTakeChallengeRewardCsReq),
            "CmdEnterChallengeNextPhaseCsReq" => {
                Some(Self::CmdEnterChallengeNextPhaseCsReq)
            }
            "CmdGetChallengeGroupStatisticsCsReq" => {
                Some(Self::CmdGetChallengeGroupStatisticsCsReq)
            }
            "CmdChallengeBossPhaseSettleNotify" => {
                Some(Self::CmdChallengeBossPhaseSettleNotify)
            }
            "CmdChallengeLineupNotify" => Some(Self::CmdChallengeLineupNotify),
            "CmdGetChallengeGroupStatisticsScRsp" => {
                Some(Self::CmdGetChallengeGroupStatisticsScRsp)
            }
            "CmdStartPartialChallengeCsReq" => Some(Self::CmdStartPartialChallengeCsReq),
            "CmdRestartChallengePhaseScRsp" => Some(Self::CmdRestartChallengePhaseScRsp),
            "CmdChallengeSettleNotify" => Some(Self::CmdChallengeSettleNotify),
            "CmdStartPartialChallengeScRsp" => Some(Self::CmdStartPartialChallengeScRsp),
            "CmdStartChallengeScRsp" => Some(Self::CmdStartChallengeScRsp),
            "CmdGetCurChallengeCsReq" => Some(Self::CmdGetCurChallengeCsReq),
            "CmdEnterChallengeNextPhaseScRsp" => {
                Some(Self::CmdEnterChallengeNextPhaseScRsp)
            }
            "CmdTakeChallengeRewardScRsp" => Some(Self::CmdTakeChallengeRewardScRsp),
            "CmdGetCurChallengeScRsp" => Some(Self::CmdGetCurChallengeScRsp),
            "CmdGetChallengeCsReq" => Some(Self::CmdGetChallengeCsReq),
            "CmdLeaveChallengeScRsp" => Some(Self::CmdLeaveChallengeScRsp),
            "CmdGetChallengeScRsp" => Some(Self::CmdGetChallengeScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChallengeStatus {
    ChallengeUnknown = 0,
    ChallengeDoing = 1,
    ChallengeFinish = 2,
    ChallengeFailed = 3,
}
impl ChallengeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChallengeUnknown => "CHALLENGE_UNKNOWN",
            Self::ChallengeDoing => "CHALLENGE_DOING",
            Self::ChallengeFinish => "CHALLENGE_FINISH",
            Self::ChallengeFailed => "CHALLENGE_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHALLENGE_UNKNOWN" => Some(Self::ChallengeUnknown),
            "CHALLENGE_DOING" => Some(Self::ChallengeDoing),
            "CHALLENGE_FINISH" => Some(Self::ChallengeFinish),
            "CHALLENGE_FAILED" => Some(Self::ChallengeFailed),
            _ => None,
        }
    }
}
/// JNJGLEDECJH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChatType {
    None = 0,
    CmdGetPrivateChatHistoryScRsp = 3953,
    CmdGetChatEmojiListCsReq = 3980,
    CmdGetChatFriendHistoryCsReq = 3934,
    CmdGetLoginChatInfoScRsp = 3990,
    CmdMarkChatEmojiScRsp = 3974,
    CmdBatchMarkChatEmojiCsReq = 3930,
    CmdMarkChatEmojiCsReq = 3947,
    CmdGetPrivateChatHistoryCsReq = 3939,
    CmdGetChatFriendHistoryScRsp = 3937,
    CmdRevcMsgScNotify = 3903,
    CmdBatchMarkChatEmojiScRsp = 3975,
    CmdPrivateMsgOfflineUsersScNotify = 3946,
    CmdSendMsgCsReq = 3959,
    CmdGetLoginChatInfoCsReq = 3948,
    CmdGetChatEmojiListScRsp = 3916,
    CmdSendMsgScRsp = 3920,
}
impl CmdChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChatTypeNone",
            Self::CmdGetPrivateChatHistoryScRsp => "CmdGetPrivateChatHistoryScRsp",
            Self::CmdGetChatEmojiListCsReq => "CmdGetChatEmojiListCsReq",
            Self::CmdGetChatFriendHistoryCsReq => "CmdGetChatFriendHistoryCsReq",
            Self::CmdGetLoginChatInfoScRsp => "CmdGetLoginChatInfoScRsp",
            Self::CmdMarkChatEmojiScRsp => "CmdMarkChatEmojiScRsp",
            Self::CmdBatchMarkChatEmojiCsReq => "CmdBatchMarkChatEmojiCsReq",
            Self::CmdMarkChatEmojiCsReq => "CmdMarkChatEmojiCsReq",
            Self::CmdGetPrivateChatHistoryCsReq => "CmdGetPrivateChatHistoryCsReq",
            Self::CmdGetChatFriendHistoryScRsp => "CmdGetChatFriendHistoryScRsp",
            Self::CmdRevcMsgScNotify => "CmdRevcMsgScNotify",
            Self::CmdBatchMarkChatEmojiScRsp => "CmdBatchMarkChatEmojiScRsp",
            Self::CmdPrivateMsgOfflineUsersScNotify => {
                "CmdPrivateMsgOfflineUsersScNotify"
            }
            Self::CmdSendMsgCsReq => "CmdSendMsgCsReq",
            Self::CmdGetLoginChatInfoCsReq => "CmdGetLoginChatInfoCsReq",
            Self::CmdGetChatEmojiListScRsp => "CmdGetChatEmojiListScRsp",
            Self::CmdSendMsgScRsp => "CmdSendMsgScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChatTypeNone" => Some(Self::None),
            "CmdGetPrivateChatHistoryScRsp" => Some(Self::CmdGetPrivateChatHistoryScRsp),
            "CmdGetChatEmojiListCsReq" => Some(Self::CmdGetChatEmojiListCsReq),
            "CmdGetChatFriendHistoryCsReq" => Some(Self::CmdGetChatFriendHistoryCsReq),
            "CmdGetLoginChatInfoScRsp" => Some(Self::CmdGetLoginChatInfoScRsp),
            "CmdMarkChatEmojiScRsp" => Some(Self::CmdMarkChatEmojiScRsp),
            "CmdBatchMarkChatEmojiCsReq" => Some(Self::CmdBatchMarkChatEmojiCsReq),
            "CmdMarkChatEmojiCsReq" => Some(Self::CmdMarkChatEmojiCsReq),
            "CmdGetPrivateChatHistoryCsReq" => Some(Self::CmdGetPrivateChatHistoryCsReq),
            "CmdGetChatFriendHistoryScRsp" => Some(Self::CmdGetChatFriendHistoryScRsp),
            "CmdRevcMsgScNotify" => Some(Self::CmdRevcMsgScNotify),
            "CmdBatchMarkChatEmojiScRsp" => Some(Self::CmdBatchMarkChatEmojiScRsp),
            "CmdPrivateMsgOfflineUsersScNotify" => {
                Some(Self::CmdPrivateMsgOfflineUsersScNotify)
            }
            "CmdSendMsgCsReq" => Some(Self::CmdSendMsgCsReq),
            "CmdGetLoginChatInfoCsReq" => Some(Self::CmdGetLoginChatInfoCsReq),
            "CmdGetChatEmojiListScRsp" => Some(Self::CmdGetChatEmojiListScRsp),
            "CmdSendMsgScRsp" => Some(Self::CmdSendMsgScRsp),
            _ => None,
        }
    }
}
/// NFDAHMLAPOI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChessRogueType {
    None = 0,
    CmdGetChessRogueBuffEnhanceInfoScRsp = 5540,
    CmdGetChessRogueNousStoryInfoCsReq = 5486,
    CmdChessRogueNousGetRogueTalentInfoCsReq = 5560,
    CmdChessRogueQuestFinishNotify = 5524,
    CmdChessRogueQueryAeonDimensionsCsReq = 5512,
    CmdChessRogueEnterNextLayerCsReq = 5568,
    CmdChessRogueFinishCurRoomNotify = 5489,
    CmdChessRogueCheatRollScRsp = 5573,
    CmdSelectChessRogueSubStoryCsReq = 5500,
    CmdGetChessRogueStoryAeonTalkInfoScRsp = 5566,
    CmdEnterChessRogueAeonRoomScRsp = 5576,
    CmdChessRogueGiveUpRollScRsp = 5522,
    CmdSyncChessRogueNousSubStoryScNotify = 5411,
    CmdChessRogueQueryScRsp = 5443,
    CmdChessRogueQueryBpCsReq = 5420,
    CmdChessRogueEnterCsReq = 5502,
    CmdChessRogueCheatRollCsReq = 5544,
    CmdChessRogueNousEnableRogueTalentCsReq = 5581,
    CmdChessRogueCellUpdateNotify = 5436,
    CmdChessRogueConfirmRollScRsp = 5450,
    CmdChessRogueUpdateUnlockLevelScNotify = 5596,
    CmdChessRogueGoAheadCsReq = 5539,
    CmdGetChessRogueStoryInfoScRsp = 5407,
    CmdChessRogueLeaveScRsp = 5506,
    CmdFinishChessRogueSubStoryScRsp = 5565,
    CmdChessRogueStartScRsp = 5567,
    CmdChessRogueReRollDiceCsReq = 5558,
    CmdChessRogueMoveCellNotify = 5547,
    CmdSelectChessRogueNousSubStoryCsReq = 5472,
    CmdChessRogueLayerAccountInfoNotify = 5468,
    CmdChessRogueReviveAvatarCsReq = 5597,
    CmdChessRogueEnterNextLayerScRsp = 5404,
    CmdSelectChessRogueNousSubStoryScRsp = 5496,
    CmdChessRogueEnterScRsp = 5575,
    CmdChessRogueSkipTeachingLevelScRsp = 5557,
    CmdChessRogueEnterCellScRsp = 5431,
    CmdChessRogueUpdateDicePassiveAccumulateValueScNotify = 5406,
    CmdChessRogueUpdateDiceInfoScNotify = 5438,
    CmdGetChessRogueBuffEnhanceInfoCsReq = 5562,
    CmdChessRogueSelectBpCsReq = 5448,
    CmdChessRogueGoAheadScRsp = 5417,
    CmdChessRogueQuitCsReq = 5473,
    CmdSelectChessRogueSubStoryScRsp = 5452,
    CmdChessRogueUpdateAllowedSelectCellScNotify = 5592,
    CmdChessRogueUpdateLevelBaseInfoScNotify = 5531,
    CmdChessRogueEnterCellCsReq = 5462,
    CmdChessRogueSelectBpScRsp = 5561,
    CmdGetChessRogueStoryInfoCsReq = 5509,
    CmdSyncChessRogueNousValueScNotify = 5405,
    CmdChessRogueReRollDiceScRsp = 5494,
    CmdChessRoguePickAvatarCsReq = 5585,
    CmdEnhanceChessRogueBuffScRsp = 5457,
    CmdChessRogueGiveUpCsReq = 5476,
    CmdChessRogueQuitScRsp = 5595,
    CmdChessRogueQueryAeonDimensionsScRsp = 5594,
    CmdFinishChessRogueNousSubStoryScRsp = 5591,
    CmdChessRogueUpdateActionPointScNotify = 5481,
    CmdChessRogueStartCsReq = 5446,
    CmdGetChessRogueStoryAeonTalkInfoCsReq = 5556,
    CmdChessRogueSkipTeachingLevelCsReq = 5459,
    CmdChessRogueRollDiceScRsp = 5532,
    CmdChessRogueChangeyAeonDimensionNotify = 5458,
    CmdFinishChessRogueSubStoryCsReq = 5550,
    CmdChessRogueQueryCsReq = 5587,
    CmdChessRogueRollDiceCsReq = 5414,
    CmdGetChessRogueNousStoryInfoScRsp = 5538,
    CmdEnterChessRogueAeonRoomCsReq = 5533,
    CmdChessRogueUpdateAeonModifierValueScNotify = 5464,
    CmdEnhanceChessRogueBuffCsReq = 5471,
    CmdChessRogueNousEditDiceScRsp = 5599,
    CmdChessRogueNousEditDiceCsReq = 5453,
    CmdChessRogueSelectCellCsReq = 5542,
    CmdChessRogueNousEnableRogueTalentScRsp = 5510,
    CmdChessRogueLeaveCsReq = 5401,
    CmdChessRogueReviveAvatarScRsp = 5484,
    CmdChessRogueUpdateMoneyInfoScNotify = 5477,
    CmdChessRogueConfirmRollCsReq = 5580,
    CmdSyncChessRogueMainStoryFinishScNotify = 5593,
    CmdChessRoguePickAvatarScRsp = 5425,
    CmdChessRogueNousDiceUpdateNotify = 5490,
    CmdChessRogueGiveUpScRsp = 5461,
    CmdChessRogueNousDiceSurfaceUnlockNotify = 5460,
    CmdChessRogueGiveUpRollCsReq = 5424,
    CmdFinishChessRogueNousSubStoryCsReq = 5447,
    CmdSyncChessRogueNousMainStoryScNotify = 5521,
    CmdChessRogueNousGetRogueTalentInfoScRsp = 5505,
    CmdChessRogueQueryBpScRsp = 5535,
    CmdChessRogueUpdateBoardScNotify = 5553,
    CmdChessRogueSelectCellScRsp = 5517,
    CmdChessRogueUpdateReviveInfoScNotify = 5520,
}
impl CmdChessRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdChessRogueTypeNone",
            Self::CmdGetChessRogueBuffEnhanceInfoScRsp => {
                "CmdGetChessRogueBuffEnhanceInfoScRsp"
            }
            Self::CmdGetChessRogueNousStoryInfoCsReq => {
                "CmdGetChessRogueNousStoryInfoCsReq"
            }
            Self::CmdChessRogueNousGetRogueTalentInfoCsReq => {
                "CmdChessRogueNousGetRogueTalentInfoCsReq"
            }
            Self::CmdChessRogueQuestFinishNotify => "CmdChessRogueQuestFinishNotify",
            Self::CmdChessRogueQueryAeonDimensionsCsReq => {
                "CmdChessRogueQueryAeonDimensionsCsReq"
            }
            Self::CmdChessRogueEnterNextLayerCsReq => "CmdChessRogueEnterNextLayerCsReq",
            Self::CmdChessRogueFinishCurRoomNotify => "CmdChessRogueFinishCurRoomNotify",
            Self::CmdChessRogueCheatRollScRsp => "CmdChessRogueCheatRollScRsp",
            Self::CmdSelectChessRogueSubStoryCsReq => "CmdSelectChessRogueSubStoryCsReq",
            Self::CmdGetChessRogueStoryAeonTalkInfoScRsp => {
                "CmdGetChessRogueStoryAeonTalkInfoScRsp"
            }
            Self::CmdEnterChessRogueAeonRoomScRsp => "CmdEnterChessRogueAeonRoomScRsp",
            Self::CmdChessRogueGiveUpRollScRsp => "CmdChessRogueGiveUpRollScRsp",
            Self::CmdSyncChessRogueNousSubStoryScNotify => {
                "CmdSyncChessRogueNousSubStoryScNotify"
            }
            Self::CmdChessRogueQueryScRsp => "CmdChessRogueQueryScRsp",
            Self::CmdChessRogueQueryBpCsReq => "CmdChessRogueQueryBpCsReq",
            Self::CmdChessRogueEnterCsReq => "CmdChessRogueEnterCsReq",
            Self::CmdChessRogueCheatRollCsReq => "CmdChessRogueCheatRollCsReq",
            Self::CmdChessRogueNousEnableRogueTalentCsReq => {
                "CmdChessRogueNousEnableRogueTalentCsReq"
            }
            Self::CmdChessRogueCellUpdateNotify => "CmdChessRogueCellUpdateNotify",
            Self::CmdChessRogueConfirmRollScRsp => "CmdChessRogueConfirmRollScRsp",
            Self::CmdChessRogueUpdateUnlockLevelScNotify => {
                "CmdChessRogueUpdateUnlockLevelScNotify"
            }
            Self::CmdChessRogueGoAheadCsReq => "CmdChessRogueGoAheadCsReq",
            Self::CmdGetChessRogueStoryInfoScRsp => "CmdGetChessRogueStoryInfoScRsp",
            Self::CmdChessRogueLeaveScRsp => "CmdChessRogueLeaveScRsp",
            Self::CmdFinishChessRogueSubStoryScRsp => "CmdFinishChessRogueSubStoryScRsp",
            Self::CmdChessRogueStartScRsp => "CmdChessRogueStartScRsp",
            Self::CmdChessRogueReRollDiceCsReq => "CmdChessRogueReRollDiceCsReq",
            Self::CmdChessRogueMoveCellNotify => "CmdChessRogueMoveCellNotify",
            Self::CmdSelectChessRogueNousSubStoryCsReq => {
                "CmdSelectChessRogueNousSubStoryCsReq"
            }
            Self::CmdChessRogueLayerAccountInfoNotify => {
                "CmdChessRogueLayerAccountInfoNotify"
            }
            Self::CmdChessRogueReviveAvatarCsReq => "CmdChessRogueReviveAvatarCsReq",
            Self::CmdChessRogueEnterNextLayerScRsp => "CmdChessRogueEnterNextLayerScRsp",
            Self::CmdSelectChessRogueNousSubStoryScRsp => {
                "CmdSelectChessRogueNousSubStoryScRsp"
            }
            Self::CmdChessRogueEnterScRsp => "CmdChessRogueEnterScRsp",
            Self::CmdChessRogueSkipTeachingLevelScRsp => {
                "CmdChessRogueSkipTeachingLevelScRsp"
            }
            Self::CmdChessRogueEnterCellScRsp => "CmdChessRogueEnterCellScRsp",
            Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify => {
                "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify"
            }
            Self::CmdChessRogueUpdateDiceInfoScNotify => {
                "CmdChessRogueUpdateDiceInfoScNotify"
            }
            Self::CmdGetChessRogueBuffEnhanceInfoCsReq => {
                "CmdGetChessRogueBuffEnhanceInfoCsReq"
            }
            Self::CmdChessRogueSelectBpCsReq => "CmdChessRogueSelectBpCsReq",
            Self::CmdChessRogueGoAheadScRsp => "CmdChessRogueGoAheadScRsp",
            Self::CmdChessRogueQuitCsReq => "CmdChessRogueQuitCsReq",
            Self::CmdSelectChessRogueSubStoryScRsp => "CmdSelectChessRogueSubStoryScRsp",
            Self::CmdChessRogueUpdateAllowedSelectCellScNotify => {
                "CmdChessRogueUpdateAllowedSelectCellScNotify"
            }
            Self::CmdChessRogueUpdateLevelBaseInfoScNotify => {
                "CmdChessRogueUpdateLevelBaseInfoScNotify"
            }
            Self::CmdChessRogueEnterCellCsReq => "CmdChessRogueEnterCellCsReq",
            Self::CmdChessRogueSelectBpScRsp => "CmdChessRogueSelectBpScRsp",
            Self::CmdGetChessRogueStoryInfoCsReq => "CmdGetChessRogueStoryInfoCsReq",
            Self::CmdSyncChessRogueNousValueScNotify => {
                "CmdSyncChessRogueNousValueScNotify"
            }
            Self::CmdChessRogueReRollDiceScRsp => "CmdChessRogueReRollDiceScRsp",
            Self::CmdChessRoguePickAvatarCsReq => "CmdChessRoguePickAvatarCsReq",
            Self::CmdEnhanceChessRogueBuffScRsp => "CmdEnhanceChessRogueBuffScRsp",
            Self::CmdChessRogueGiveUpCsReq => "CmdChessRogueGiveUpCsReq",
            Self::CmdChessRogueQuitScRsp => "CmdChessRogueQuitScRsp",
            Self::CmdChessRogueQueryAeonDimensionsScRsp => {
                "CmdChessRogueQueryAeonDimensionsScRsp"
            }
            Self::CmdFinishChessRogueNousSubStoryScRsp => {
                "CmdFinishChessRogueNousSubStoryScRsp"
            }
            Self::CmdChessRogueUpdateActionPointScNotify => {
                "CmdChessRogueUpdateActionPointScNotify"
            }
            Self::CmdChessRogueStartCsReq => "CmdChessRogueStartCsReq",
            Self::CmdGetChessRogueStoryAeonTalkInfoCsReq => {
                "CmdGetChessRogueStoryAeonTalkInfoCsReq"
            }
            Self::CmdChessRogueSkipTeachingLevelCsReq => {
                "CmdChessRogueSkipTeachingLevelCsReq"
            }
            Self::CmdChessRogueRollDiceScRsp => "CmdChessRogueRollDiceScRsp",
            Self::CmdChessRogueChangeyAeonDimensionNotify => {
                "CmdChessRogueChangeyAeonDimensionNotify"
            }
            Self::CmdFinishChessRogueSubStoryCsReq => "CmdFinishChessRogueSubStoryCsReq",
            Self::CmdChessRogueQueryCsReq => "CmdChessRogueQueryCsReq",
            Self::CmdChessRogueRollDiceCsReq => "CmdChessRogueRollDiceCsReq",
            Self::CmdGetChessRogueNousStoryInfoScRsp => {
                "CmdGetChessRogueNousStoryInfoScRsp"
            }
            Self::CmdEnterChessRogueAeonRoomCsReq => "CmdEnterChessRogueAeonRoomCsReq",
            Self::CmdChessRogueUpdateAeonModifierValueScNotify => {
                "CmdChessRogueUpdateAeonModifierValueScNotify"
            }
            Self::CmdEnhanceChessRogueBuffCsReq => "CmdEnhanceChessRogueBuffCsReq",
            Self::CmdChessRogueNousEditDiceScRsp => "CmdChessRogueNousEditDiceScRsp",
            Self::CmdChessRogueNousEditDiceCsReq => "CmdChessRogueNousEditDiceCsReq",
            Self::CmdChessRogueSelectCellCsReq => "CmdChessRogueSelectCellCsReq",
            Self::CmdChessRogueNousEnableRogueTalentScRsp => {
                "CmdChessRogueNousEnableRogueTalentScRsp"
            }
            Self::CmdChessRogueLeaveCsReq => "CmdChessRogueLeaveCsReq",
            Self::CmdChessRogueReviveAvatarScRsp => "CmdChessRogueReviveAvatarScRsp",
            Self::CmdChessRogueUpdateMoneyInfoScNotify => {
                "CmdChessRogueUpdateMoneyInfoScNotify"
            }
            Self::CmdChessRogueConfirmRollCsReq => "CmdChessRogueConfirmRollCsReq",
            Self::CmdSyncChessRogueMainStoryFinishScNotify => {
                "CmdSyncChessRogueMainStoryFinishScNotify"
            }
            Self::CmdChessRoguePickAvatarScRsp => "CmdChessRoguePickAvatarScRsp",
            Self::CmdChessRogueNousDiceUpdateNotify => {
                "CmdChessRogueNousDiceUpdateNotify"
            }
            Self::CmdChessRogueGiveUpScRsp => "CmdChessRogueGiveUpScRsp",
            Self::CmdChessRogueNousDiceSurfaceUnlockNotify => {
                "CmdChessRogueNousDiceSurfaceUnlockNotify"
            }
            Self::CmdChessRogueGiveUpRollCsReq => "CmdChessRogueGiveUpRollCsReq",
            Self::CmdFinishChessRogueNousSubStoryCsReq => {
                "CmdFinishChessRogueNousSubStoryCsReq"
            }
            Self::CmdSyncChessRogueNousMainStoryScNotify => {
                "CmdSyncChessRogueNousMainStoryScNotify"
            }
            Self::CmdChessRogueNousGetRogueTalentInfoScRsp => {
                "CmdChessRogueNousGetRogueTalentInfoScRsp"
            }
            Self::CmdChessRogueQueryBpScRsp => "CmdChessRogueQueryBpScRsp",
            Self::CmdChessRogueUpdateBoardScNotify => "CmdChessRogueUpdateBoardScNotify",
            Self::CmdChessRogueSelectCellScRsp => "CmdChessRogueSelectCellScRsp",
            Self::CmdChessRogueUpdateReviveInfoScNotify => {
                "CmdChessRogueUpdateReviveInfoScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChessRogueTypeNone" => Some(Self::None),
            "CmdGetChessRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoScRsp)
            }
            "CmdGetChessRogueNousStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueNousStoryInfoCsReq)
            }
            "CmdChessRogueNousGetRogueTalentInfoCsReq" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoCsReq)
            }
            "CmdChessRogueQuestFinishNotify" => {
                Some(Self::CmdChessRogueQuestFinishNotify)
            }
            "CmdChessRogueQueryAeonDimensionsCsReq" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsCsReq)
            }
            "CmdChessRogueEnterNextLayerCsReq" => {
                Some(Self::CmdChessRogueEnterNextLayerCsReq)
            }
            "CmdChessRogueFinishCurRoomNotify" => {
                Some(Self::CmdChessRogueFinishCurRoomNotify)
            }
            "CmdChessRogueCheatRollScRsp" => Some(Self::CmdChessRogueCheatRollScRsp),
            "CmdSelectChessRogueSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueSubStoryCsReq)
            }
            "CmdGetChessRogueStoryAeonTalkInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoScRsp)
            }
            "CmdEnterChessRogueAeonRoomScRsp" => {
                Some(Self::CmdEnterChessRogueAeonRoomScRsp)
            }
            "CmdChessRogueGiveUpRollScRsp" => Some(Self::CmdChessRogueGiveUpRollScRsp),
            "CmdSyncChessRogueNousSubStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousSubStoryScNotify)
            }
            "CmdChessRogueQueryScRsp" => Some(Self::CmdChessRogueQueryScRsp),
            "CmdChessRogueQueryBpCsReq" => Some(Self::CmdChessRogueQueryBpCsReq),
            "CmdChessRogueEnterCsReq" => Some(Self::CmdChessRogueEnterCsReq),
            "CmdChessRogueCheatRollCsReq" => Some(Self::CmdChessRogueCheatRollCsReq),
            "CmdChessRogueNousEnableRogueTalentCsReq" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentCsReq)
            }
            "CmdChessRogueCellUpdateNotify" => Some(Self::CmdChessRogueCellUpdateNotify),
            "CmdChessRogueConfirmRollScRsp" => Some(Self::CmdChessRogueConfirmRollScRsp),
            "CmdChessRogueUpdateUnlockLevelScNotify" => {
                Some(Self::CmdChessRogueUpdateUnlockLevelScNotify)
            }
            "CmdChessRogueGoAheadCsReq" => Some(Self::CmdChessRogueGoAheadCsReq),
            "CmdGetChessRogueStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryInfoScRsp)
            }
            "CmdChessRogueLeaveScRsp" => Some(Self::CmdChessRogueLeaveScRsp),
            "CmdFinishChessRogueSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueSubStoryScRsp)
            }
            "CmdChessRogueStartScRsp" => Some(Self::CmdChessRogueStartScRsp),
            "CmdChessRogueReRollDiceCsReq" => Some(Self::CmdChessRogueReRollDiceCsReq),
            "CmdChessRogueMoveCellNotify" => Some(Self::CmdChessRogueMoveCellNotify),
            "CmdSelectChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueNousSubStoryCsReq)
            }
            "CmdChessRogueLayerAccountInfoNotify" => {
                Some(Self::CmdChessRogueLayerAccountInfoNotify)
            }
            "CmdChessRogueReviveAvatarCsReq" => {
                Some(Self::CmdChessRogueReviveAvatarCsReq)
            }
            "CmdChessRogueEnterNextLayerScRsp" => {
                Some(Self::CmdChessRogueEnterNextLayerScRsp)
            }
            "CmdSelectChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueNousSubStoryScRsp)
            }
            "CmdChessRogueEnterScRsp" => Some(Self::CmdChessRogueEnterScRsp),
            "CmdChessRogueSkipTeachingLevelScRsp" => {
                Some(Self::CmdChessRogueSkipTeachingLevelScRsp)
            }
            "CmdChessRogueEnterCellScRsp" => Some(Self::CmdChessRogueEnterCellScRsp),
            "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify" => {
                Some(Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify)
            }
            "CmdChessRogueUpdateDiceInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateDiceInfoScNotify)
            }
            "CmdGetChessRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoCsReq)
            }
            "CmdChessRogueSelectBpCsReq" => Some(Self::CmdChessRogueSelectBpCsReq),
            "CmdChessRogueGoAheadScRsp" => Some(Self::CmdChessRogueGoAheadScRsp),
            "CmdChessRogueQuitCsReq" => Some(Self::CmdChessRogueQuitCsReq),
            "CmdSelectChessRogueSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueSubStoryScRsp)
            }
            "CmdChessRogueUpdateAllowedSelectCellScNotify" => {
                Some(Self::CmdChessRogueUpdateAllowedSelectCellScNotify)
            }
            "CmdChessRogueUpdateLevelBaseInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateLevelBaseInfoScNotify)
            }
            "CmdChessRogueEnterCellCsReq" => Some(Self::CmdChessRogueEnterCellCsReq),
            "CmdChessRogueSelectBpScRsp" => Some(Self::CmdChessRogueSelectBpScRsp),
            "CmdGetChessRogueStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryInfoCsReq)
            }
            "CmdSyncChessRogueNousValueScNotify" => {
                Some(Self::CmdSyncChessRogueNousValueScNotify)
            }
            "CmdChessRogueReRollDiceScRsp" => Some(Self::CmdChessRogueReRollDiceScRsp),
            "CmdChessRoguePickAvatarCsReq" => Some(Self::CmdChessRoguePickAvatarCsReq),
            "CmdEnhanceChessRogueBuffScRsp" => Some(Self::CmdEnhanceChessRogueBuffScRsp),
            "CmdChessRogueGiveUpCsReq" => Some(Self::CmdChessRogueGiveUpCsReq),
            "CmdChessRogueQuitScRsp" => Some(Self::CmdChessRogueQuitScRsp),
            "CmdChessRogueQueryAeonDimensionsScRsp" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsScRsp)
            }
            "CmdFinishChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueNousSubStoryScRsp)
            }
            "CmdChessRogueUpdateActionPointScNotify" => {
                Some(Self::CmdChessRogueUpdateActionPointScNotify)
            }
            "CmdChessRogueStartCsReq" => Some(Self::CmdChessRogueStartCsReq),
            "CmdGetChessRogueStoryAeonTalkInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoCsReq)
            }
            "CmdChessRogueSkipTeachingLevelCsReq" => {
                Some(Self::CmdChessRogueSkipTeachingLevelCsReq)
            }
            "CmdChessRogueRollDiceScRsp" => Some(Self::CmdChessRogueRollDiceScRsp),
            "CmdChessRogueChangeyAeonDimensionNotify" => {
                Some(Self::CmdChessRogueChangeyAeonDimensionNotify)
            }
            "CmdFinishChessRogueSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueSubStoryCsReq)
            }
            "CmdChessRogueQueryCsReq" => Some(Self::CmdChessRogueQueryCsReq),
            "CmdChessRogueRollDiceCsReq" => Some(Self::CmdChessRogueRollDiceCsReq),
            "CmdGetChessRogueNousStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueNousStoryInfoScRsp)
            }
            "CmdEnterChessRogueAeonRoomCsReq" => {
                Some(Self::CmdEnterChessRogueAeonRoomCsReq)
            }
            "CmdChessRogueUpdateAeonModifierValueScNotify" => {
                Some(Self::CmdChessRogueUpdateAeonModifierValueScNotify)
            }
            "CmdEnhanceChessRogueBuffCsReq" => Some(Self::CmdEnhanceChessRogueBuffCsReq),
            "CmdChessRogueNousEditDiceScRsp" => {
                Some(Self::CmdChessRogueNousEditDiceScRsp)
            }
            "CmdChessRogueNousEditDiceCsReq" => {
                Some(Self::CmdChessRogueNousEditDiceCsReq)
            }
            "CmdChessRogueSelectCellCsReq" => Some(Self::CmdChessRogueSelectCellCsReq),
            "CmdChessRogueNousEnableRogueTalentScRsp" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentScRsp)
            }
            "CmdChessRogueLeaveCsReq" => Some(Self::CmdChessRogueLeaveCsReq),
            "CmdChessRogueReviveAvatarScRsp" => {
                Some(Self::CmdChessRogueReviveAvatarScRsp)
            }
            "CmdChessRogueUpdateMoneyInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateMoneyInfoScNotify)
            }
            "CmdChessRogueConfirmRollCsReq" => Some(Self::CmdChessRogueConfirmRollCsReq),
            "CmdSyncChessRogueMainStoryFinishScNotify" => {
                Some(Self::CmdSyncChessRogueMainStoryFinishScNotify)
            }
            "CmdChessRoguePickAvatarScRsp" => Some(Self::CmdChessRoguePickAvatarScRsp),
            "CmdChessRogueNousDiceUpdateNotify" => {
                Some(Self::CmdChessRogueNousDiceUpdateNotify)
            }
            "CmdChessRogueGiveUpScRsp" => Some(Self::CmdChessRogueGiveUpScRsp),
            "CmdChessRogueNousDiceSurfaceUnlockNotify" => {
                Some(Self::CmdChessRogueNousDiceSurfaceUnlockNotify)
            }
            "CmdChessRogueGiveUpRollCsReq" => Some(Self::CmdChessRogueGiveUpRollCsReq),
            "CmdFinishChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueNousSubStoryCsReq)
            }
            "CmdSyncChessRogueNousMainStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousMainStoryScNotify)
            }
            "CmdChessRogueNousGetRogueTalentInfoScRsp" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoScRsp)
            }
            "CmdChessRogueQueryBpScRsp" => Some(Self::CmdChessRogueQueryBpScRsp),
            "CmdChessRogueUpdateBoardScNotify" => {
                Some(Self::CmdChessRogueUpdateBoardScNotify)
            }
            "CmdChessRogueSelectCellScRsp" => Some(Self::CmdChessRogueSelectCellScRsp),
            "CmdChessRogueUpdateReviveInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateReviveInfoScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dkgdpgpjfkj {
    ChessRogueDiceIdle = 0,
    ChessRogueDiceRolled = 1,
    ChessRogueDiceConfirmed = 2,
    ChessRogueDiceGiveup = 3,
}
impl Dkgdpgpjfkj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceIdle => "CHESS_ROGUE_DICE_IDLE",
            Self::ChessRogueDiceRolled => "CHESS_ROGUE_DICE_ROLLED",
            Self::ChessRogueDiceConfirmed => "CHESS_ROGUE_DICE_CONFIRMED",
            Self::ChessRogueDiceGiveup => "CHESS_ROGUE_DICE_GIVEUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_IDLE" => Some(Self::ChessRogueDiceIdle),
            "CHESS_ROGUE_DICE_ROLLED" => Some(Self::ChessRogueDiceRolled),
            "CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::ChessRogueDiceConfirmed),
            "CHESS_ROGUE_DICE_GIVEUP" => Some(Self::ChessRogueDiceGiveup),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dipbaengolm {
    ChessRogueDiceFixed = 0,
    ChessRogueDiceEditable = 1,
}
impl Dipbaengolm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceFixed => "CHESS_ROGUE_DICE_FIXED",
            Self::ChessRogueDiceEditable => "CHESS_ROGUE_DICE_EDITABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_FIXED" => Some(Self::ChessRogueDiceFixed),
            "CHESS_ROGUE_DICE_EDITABLE" => Some(Self::ChessRogueDiceEditable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pcbifjfhegk {
    Idle = 0,
    Selected = 1,
    Processing = 2,
    Finish = 3,
}
impl Pcbifjfhegk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Idle => "IDLE",
            Self::Selected => "SELECTED",
            Self::Processing => "PROCESSING",
            Self::Finish => "FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IDLE" => Some(Self::Idle),
            "SELECTED" => Some(Self::Selected),
            "PROCESSING" => Some(Self::Processing),
            "FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ccjdfdemcjl {
    ChessRogueCellSpecialTypeNone = 0,
    ChessRogueCellSpecialTypeLocked = 1,
    ChessRogueCellSpecialTypeReplicate = 2,
    ChessRogueCellSpecialTypeProtected = 3,
    ChessRogueCellSpecialTypeSeed = 4,
    ChessRogueCellSpecialTypeStamp = 5,
}
impl Ccjdfdemcjl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellSpecialTypeNone => "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE",
            Self::ChessRogueCellSpecialTypeLocked => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED"
            }
            Self::ChessRogueCellSpecialTypeReplicate => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE"
            }
            Self::ChessRogueCellSpecialTypeProtected => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED"
            }
            Self::ChessRogueCellSpecialTypeSeed => "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED",
            Self::ChessRogueCellSpecialTypeStamp => "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE" => {
                Some(Self::ChessRogueCellSpecialTypeNone)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED" => {
                Some(Self::ChessRogueCellSpecialTypeLocked)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE" => {
                Some(Self::ChessRogueCellSpecialTypeReplicate)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED" => {
                Some(Self::ChessRogueCellSpecialTypeProtected)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED" => {
                Some(Self::ChessRogueCellSpecialTypeSeed)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP" => {
                Some(Self::ChessRogueCellSpecialTypeStamp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ggilddcjlga {
    ChessRogueLevelIdle = 0,
    ChessRogueLevelProcessing = 1,
    ChessRogueLevelPending = 2,
    ChessRogueLevelFinish = 3,
    ChessRogueLevelFailed = 4,
    ChessRogueLevelForceFinish = 5,
}
impl Ggilddcjlga {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueLevelIdle => "CHESS_ROGUE_LEVEL_IDLE",
            Self::ChessRogueLevelProcessing => "CHESS_ROGUE_LEVEL_PROCESSING",
            Self::ChessRogueLevelPending => "CHESS_ROGUE_LEVEL_PENDING",
            Self::ChessRogueLevelFinish => "CHESS_ROGUE_LEVEL_FINISH",
            Self::ChessRogueLevelFailed => "CHESS_ROGUE_LEVEL_FAILED",
            Self::ChessRogueLevelForceFinish => "CHESS_ROGUE_LEVEL_FORCE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_LEVEL_IDLE" => Some(Self::ChessRogueLevelIdle),
            "CHESS_ROGUE_LEVEL_PROCESSING" => Some(Self::ChessRogueLevelProcessing),
            "CHESS_ROGUE_LEVEL_PENDING" => Some(Self::ChessRogueLevelPending),
            "CHESS_ROGUE_LEVEL_FINISH" => Some(Self::ChessRogueLevelFinish),
            "CHESS_ROGUE_LEVEL_FAILED" => Some(Self::ChessRogueLevelFailed),
            "CHESS_ROGUE_LEVEL_FORCE_FINISH" => Some(Self::ChessRogueLevelForceFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gjnepiieicj {
    ChessRogueAccountByNone = 0,
    ChessRogueAccountByNormalFinish = 1,
    ChessRogueAccountByNormalQuit = 2,
    ChessRogueAccountByDialog = 3,
    ChessRogueAccountByFailed = 4,
    ChessRogueAccountByCustomOp = 5,
}
impl Gjnepiieicj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAccountByNone => "CHESS_ROGUE_ACCOUNT_BY_NONE",
            Self::ChessRogueAccountByNormalFinish => {
                "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH"
            }
            Self::ChessRogueAccountByNormalQuit => "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT",
            Self::ChessRogueAccountByDialog => "CHESS_ROGUE_ACCOUNT_BY_DIALOG",
            Self::ChessRogueAccountByFailed => "CHESS_ROGUE_ACCOUNT_BY_FAILED",
            Self::ChessRogueAccountByCustomOp => "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_ACCOUNT_BY_NONE" => Some(Self::ChessRogueAccountByNone),
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH" => {
                Some(Self::ChessRogueAccountByNormalFinish)
            }
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT" => {
                Some(Self::ChessRogueAccountByNormalQuit)
            }
            "CHESS_ROGUE_ACCOUNT_BY_DIALOG" => Some(Self::ChessRogueAccountByDialog),
            "CHESS_ROGUE_ACCOUNT_BY_FAILED" => Some(Self::ChessRogueAccountByFailed),
            "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP" => Some(Self::ChessRogueAccountByCustomOp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mgpdlondpcn {
    ChessRogueBuffSourceTypeNone = 0,
    ChessRogueBuffSourceTypeSelect = 1,
    ChessRogueBuffSourceTypeEnhance = 2,
    ChessRogueBuffSourceTypeMiracle = 3,
    ChessRogueBuffSourceTypeDialogue = 4,
    ChessRogueBuffSourceTypeBonus = 5,
    ChessRogueBuffSourceTypeShop = 6,
    ChessRogueBuffSourceTypeDice = 7,
    ChessRogueBuffSourceTypeAeon = 8,
    ChessRogueBuffSourceTypeMazeSkill = 9,
    ChessRogueBuffSourceTypeLevelMechanism = 10,
}
impl Mgpdlondpcn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueBuffSourceTypeNone => "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::ChessRogueBuffSourceTypeSelect => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::ChessRogueBuffSourceTypeEnhance => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE"
            }
            Self::ChessRogueBuffSourceTypeMiracle => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE"
            }
            Self::ChessRogueBuffSourceTypeDialogue => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueBuffSourceTypeBonus => "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::ChessRogueBuffSourceTypeShop => "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::ChessRogueBuffSourceTypeDice => "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE",
            Self::ChessRogueBuffSourceTypeAeon => "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON",
            Self::ChessRogueBuffSourceTypeMazeSkill => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueBuffSourceTypeLevelMechanism => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueBuffSourceTypeNone)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueBuffSourceTypeSelect)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => {
                Some(Self::ChessRogueBuffSourceTypeEnhance)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => {
                Some(Self::ChessRogueBuffSourceTypeMiracle)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueBuffSourceTypeDialogue)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueBuffSourceTypeBonus)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueBuffSourceTypeShop)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE" => {
                Some(Self::ChessRogueBuffSourceTypeDice)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON" => {
                Some(Self::ChessRogueBuffSourceTypeAeon)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueBuffSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueBuffSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dbefpcdfpob {
    ChessRogueMiracleSourceTypeNone = 0,
    ChessRogueMiracleSourceTypeSelect = 1,
    ChessRogueMiracleSourceTypeDialogue = 2,
    ChessRogueMiracleSourceTypeBonus = 3,
    ChessRogueMiracleSourceTypeUse = 4,
    ChessRogueMiracleSourceTypeReset = 5,
    ChessRogueMiracleSourceTypeReplace = 6,
    ChessRogueMiracleSourceTypeTrade = 7,
    ChessRogueMiracleSourceTypeGet = 8,
    ChessRogueMiracleSourceTypeShop = 9,
    ChessRogueMiracleSourceTypeMazeSkill = 10,
    ChessRogueMiracleSourceTypeLevelMechanism = 11,
}
impl Dbefpcdfpob {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueMiracleSourceTypeNone => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE"
            }
            Self::ChessRogueMiracleSourceTypeSelect => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT"
            }
            Self::ChessRogueMiracleSourceTypeDialogue => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE"
            }
            Self::ChessRogueMiracleSourceTypeBonus => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS"
            }
            Self::ChessRogueMiracleSourceTypeUse => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::ChessRogueMiracleSourceTypeReset => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET"
            }
            Self::ChessRogueMiracleSourceTypeReplace => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE"
            }
            Self::ChessRogueMiracleSourceTypeTrade => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE"
            }
            Self::ChessRogueMiracleSourceTypeGet => "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::ChessRogueMiracleSourceTypeShop => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP"
            }
            Self::ChessRogueMiracleSourceTypeMazeSkill => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::ChessRogueMiracleSourceTypeLevelMechanism => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueMiracleSourceTypeNone)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueMiracleSourceTypeSelect)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueMiracleSourceTypeDialogue)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueMiracleSourceTypeBonus)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE" => {
                Some(Self::ChessRogueMiracleSourceTypeUse)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET" => {
                Some(Self::ChessRogueMiracleSourceTypeReset)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::ChessRogueMiracleSourceTypeReplace)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => {
                Some(Self::ChessRogueMiracleSourceTypeTrade)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET" => {
                Some(Self::ChessRogueMiracleSourceTypeGet)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueMiracleSourceTypeShop)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueMiracleSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueMiracleSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mkckfooagpf {
    ChessRogueUpdateLevelStatusByNone = 0,
    ChessRogueUpdateLevelStatusByDialog = 1,
}
impl Mkckfooagpf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueUpdateLevelStatusByNone => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE"
            }
            Self::ChessRogueUpdateLevelStatusByDialog => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE" => {
                Some(Self::ChessRogueUpdateLevelStatusByNone)
            }
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG" => {
                Some(Self::ChessRogueUpdateLevelStatusByDialog)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aanmenpdodi {
    ChessRogueCellUpdateReasonNone = 0,
    ChessRogueCellUpdateReasonModifier = 1,
}
impl Aanmenpdodi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueCellUpdateReasonNone => "CHESS_ROGUE_CELL_UPDATE_REASON_NONE",
            Self::ChessRogueCellUpdateReasonModifier => {
                "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_UPDATE_REASON_NONE" => {
                Some(Self::ChessRogueCellUpdateReasonNone)
            }
            "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER" => {
                Some(Self::ChessRogueCellUpdateReasonModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ecdckomgncm {
    ChessRogueAeonTypeNone = 0,
    ChessRogueAeonTypeKnight = 1,
    ChessRogueAeonTypeMemory = 2,
    ChessRogueAeonTypeWarlock = 3,
    ChessRogueAeonTypePriest = 4,
    ChessRogueAeonTypeRogue = 5,
    ChessRogueAeonTypeWarrior = 6,
    ChessRogueAeonTypeHappy = 7,
    ChessRogueAeonTypeBreed = 8,
}
impl Ecdckomgncm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueAeonTypeNone => "CHESS_ROGUE_AEON_TYPE_NONE",
            Self::ChessRogueAeonTypeKnight => "CHESS_ROGUE_AEON_TYPE_KNIGHT",
            Self::ChessRogueAeonTypeMemory => "CHESS_ROGUE_AEON_TYPE_MEMORY",
            Self::ChessRogueAeonTypeWarlock => "CHESS_ROGUE_AEON_TYPE_WARLOCK",
            Self::ChessRogueAeonTypePriest => "CHESS_ROGUE_AEON_TYPE_PRIEST",
            Self::ChessRogueAeonTypeRogue => "CHESS_ROGUE_AEON_TYPE_ROGUE",
            Self::ChessRogueAeonTypeWarrior => "CHESS_ROGUE_AEON_TYPE_WARRIOR",
            Self::ChessRogueAeonTypeHappy => "CHESS_ROGUE_AEON_TYPE_HAPPY",
            Self::ChessRogueAeonTypeBreed => "CHESS_ROGUE_AEON_TYPE_BREED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_AEON_TYPE_NONE" => Some(Self::ChessRogueAeonTypeNone),
            "CHESS_ROGUE_AEON_TYPE_KNIGHT" => Some(Self::ChessRogueAeonTypeKnight),
            "CHESS_ROGUE_AEON_TYPE_MEMORY" => Some(Self::ChessRogueAeonTypeMemory),
            "CHESS_ROGUE_AEON_TYPE_WARLOCK" => Some(Self::ChessRogueAeonTypeWarlock),
            "CHESS_ROGUE_AEON_TYPE_PRIEST" => Some(Self::ChessRogueAeonTypePriest),
            "CHESS_ROGUE_AEON_TYPE_ROGUE" => Some(Self::ChessRogueAeonTypeRogue),
            "CHESS_ROGUE_AEON_TYPE_WARRIOR" => Some(Self::ChessRogueAeonTypeWarrior),
            "CHESS_ROGUE_AEON_TYPE_HAPPY" => Some(Self::ChessRogueAeonTypeHappy),
            "CHESS_ROGUE_AEON_TYPE_BREED" => Some(Self::ChessRogueAeonTypeBreed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iogdjdobmop {
    ChessRogueDiceSourceTypeNone = 0,
    ChessRogueDiceSourceTypeNormal = 1,
    ChessRogueDiceSourceTypeRepeat = 2,
    ChessRogueDiceSourceTypeCheat = 3,
}
impl Iogdjdobmop {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueDiceSourceTypeNone => "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE",
            Self::ChessRogueDiceSourceTypeNormal => "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL",
            Self::ChessRogueDiceSourceTypeRepeat => "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT",
            Self::ChessRogueDiceSourceTypeCheat => "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueDiceSourceTypeNone)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL" => {
                Some(Self::ChessRogueDiceSourceTypeNormal)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT" => {
                Some(Self::ChessRogueDiceSourceTypeRepeat)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT" => {
                Some(Self::ChessRogueDiceSourceTypeCheat)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Elgemhkfoii {
    ChessRogueNousMainStoryStatusNone = 0,
    ChessRogueNousMainStoryStatusUnlock = 1,
    ChessRogueNousMainStoryStatusFinish = 2,
    ChessRogueNousMainStoryStatusCanTrigger = 3,
}
impl Elgemhkfoii {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChessRogueNousMainStoryStatusNone => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE"
            }
            Self::ChessRogueNousMainStoryStatusUnlock => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK"
            }
            Self::ChessRogueNousMainStoryStatusFinish => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH"
            }
            Self::ChessRogueNousMainStoryStatusCanTrigger => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE" => {
                Some(Self::ChessRogueNousMainStoryStatusNone)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK" => {
                Some(Self::ChessRogueNousMainStoryStatusUnlock)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH" => {
                Some(Self::ChessRogueNousMainStoryStatusFinish)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER" => {
                Some(Self::ChessRogueNousMainStoryStatusCanTrigger)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Khamkbgholf {
    None = 0,
    PhaseOne = 1,
    PhaseTwo = 2,
}
impl Khamkbgholf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::PhaseOne => "PHASE_ONE",
            Self::PhaseTwo => "PHASE_TWO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "PHASE_ONE" => Some(Self::PhaseOne),
            "PHASE_TWO" => Some(Self::PhaseTwo),
            _ => None,
        }
    }
}
/// HKNLNCHLBKK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdClockParkType {
    None = 0,
    CmdClockParkGetInfoScRsp = 7216,
    CmdClockParkQuitScriptScRsp = 7234,
    CmdClockParkUseBuffScRsp = 7205,
    CmdClockParkHandleWaitOperationCsReq = 7235,
    CmdClockParkUnlockTalentScRsp = 7237,
    CmdClockParkUnlockTalentCsReq = 7242,
    CmdClockParkHandleWaitOperationScRsp = 7228,
    CmdClockParkGetInfoCsReq = 7215,
    CmdClockParkFinishScriptScNotify = 7231,
    CmdClockParkBattleEndScNotify = 7233,
    CmdClockParkUseBuffCsReq = 7220,
    CmdClockParkGetOngoingScriptInfoCsReq = 7208,
    CmdClockParkGetOngoingScriptInfoScRsp = 7230,
    CmdClockParkStartScriptScRsp = 7223,
    CmdClockParkQuitScriptCsReq = 7207,
    CmdClockParkStartScriptCsReq = 7240,
}
impl CmdClockParkType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdClockParkTypeNone",
            Self::CmdClockParkGetInfoScRsp => "CmdClockParkGetInfoScRsp",
            Self::CmdClockParkQuitScriptScRsp => "CmdClockParkQuitScriptScRsp",
            Self::CmdClockParkUseBuffScRsp => "CmdClockParkUseBuffScRsp",
            Self::CmdClockParkHandleWaitOperationCsReq => {
                "CmdClockParkHandleWaitOperationCsReq"
            }
            Self::CmdClockParkUnlockTalentScRsp => "CmdClockParkUnlockTalentScRsp",
            Self::CmdClockParkUnlockTalentCsReq => "CmdClockParkUnlockTalentCsReq",
            Self::CmdClockParkHandleWaitOperationScRsp => {
                "CmdClockParkHandleWaitOperationScRsp"
            }
            Self::CmdClockParkGetInfoCsReq => "CmdClockParkGetInfoCsReq",
            Self::CmdClockParkFinishScriptScNotify => "CmdClockParkFinishScriptScNotify",
            Self::CmdClockParkBattleEndScNotify => "CmdClockParkBattleEndScNotify",
            Self::CmdClockParkUseBuffCsReq => "CmdClockParkUseBuffCsReq",
            Self::CmdClockParkGetOngoingScriptInfoCsReq => {
                "CmdClockParkGetOngoingScriptInfoCsReq"
            }
            Self::CmdClockParkGetOngoingScriptInfoScRsp => {
                "CmdClockParkGetOngoingScriptInfoScRsp"
            }
            Self::CmdClockParkStartScriptScRsp => "CmdClockParkStartScriptScRsp",
            Self::CmdClockParkQuitScriptCsReq => "CmdClockParkQuitScriptCsReq",
            Self::CmdClockParkStartScriptCsReq => "CmdClockParkStartScriptCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdClockParkTypeNone" => Some(Self::None),
            "CmdClockParkGetInfoScRsp" => Some(Self::CmdClockParkGetInfoScRsp),
            "CmdClockParkQuitScriptScRsp" => Some(Self::CmdClockParkQuitScriptScRsp),
            "CmdClockParkUseBuffScRsp" => Some(Self::CmdClockParkUseBuffScRsp),
            "CmdClockParkHandleWaitOperationCsReq" => {
                Some(Self::CmdClockParkHandleWaitOperationCsReq)
            }
            "CmdClockParkUnlockTalentScRsp" => Some(Self::CmdClockParkUnlockTalentScRsp),
            "CmdClockParkUnlockTalentCsReq" => Some(Self::CmdClockParkUnlockTalentCsReq),
            "CmdClockParkHandleWaitOperationScRsp" => {
                Some(Self::CmdClockParkHandleWaitOperationScRsp)
            }
            "CmdClockParkGetInfoCsReq" => Some(Self::CmdClockParkGetInfoCsReq),
            "CmdClockParkFinishScriptScNotify" => {
                Some(Self::CmdClockParkFinishScriptScNotify)
            }
            "CmdClockParkBattleEndScNotify" => Some(Self::CmdClockParkBattleEndScNotify),
            "CmdClockParkUseBuffCsReq" => Some(Self::CmdClockParkUseBuffCsReq),
            "CmdClockParkGetOngoingScriptInfoCsReq" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoCsReq)
            }
            "CmdClockParkGetOngoingScriptInfoScRsp" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoScRsp)
            }
            "CmdClockParkStartScriptScRsp" => Some(Self::CmdClockParkStartScriptScRsp),
            "CmdClockParkQuitScriptCsReq" => Some(Self::CmdClockParkQuitScriptCsReq),
            "CmdClockParkStartScriptCsReq" => Some(Self::CmdClockParkStartScriptCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Klokgjnianl {
    ClockParkPlayNone = 0,
    ClockParkPlayNormalDeath = 1,
    ClockParkPlayNormalPass = 2,
    ClockParkPlayFinishScript = 5,
}
impl Klokgjnianl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClockParkPlayNone => "CLOCK_PARK_PLAY_NONE",
            Self::ClockParkPlayNormalDeath => "CLOCK_PARK_PLAY_NORMAL_DEATH",
            Self::ClockParkPlayNormalPass => "CLOCK_PARK_PLAY_NORMAL_PASS",
            Self::ClockParkPlayFinishScript => "CLOCK_PARK_PLAY_FINISH_SCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLOCK_PARK_PLAY_NONE" => Some(Self::ClockParkPlayNone),
            "CLOCK_PARK_PLAY_NORMAL_DEATH" => Some(Self::ClockParkPlayNormalDeath),
            "CLOCK_PARK_PLAY_NORMAL_PASS" => Some(Self::ClockParkPlayNormalPass),
            "CLOCK_PARK_PLAY_FINISH_SCRIPT" => Some(Self::ClockParkPlayFinishScript),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionStatus {
    MissionNone = 0,
    MissionDoing = 1,
    MissionFinish = 2,
    MissionPrepared = 3,
}
impl MissionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MissionNone => "MISSION_NONE",
            Self::MissionDoing => "MISSION_DOING",
            Self::MissionFinish => "MISSION_FINISH",
            Self::MissionPrepared => "MISSION_PREPARED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_NONE" => Some(Self::MissionNone),
            "MISSION_DOING" => Some(Self::MissionDoing),
            "MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_PREPARED" => Some(Self::MissionPrepared),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jenpnhigkdc {
    MessageSectionNone = 0,
    MessageSectionDoing = 1,
    MessageSectionFinish = 2,
    MessageSectionFrozen = 3,
}
impl Jenpnhigkdc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageSectionNone => "MESSAGE_SECTION_NONE",
            Self::MessageSectionDoing => "MESSAGE_SECTION_DOING",
            Self::MessageSectionFinish => "MESSAGE_SECTION_FINISH",
            Self::MessageSectionFrozen => "MESSAGE_SECTION_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_SECTION_NONE" => Some(Self::MessageSectionNone),
            "MESSAGE_SECTION_DOING" => Some(Self::MessageSectionDoing),
            "MESSAGE_SECTION_FINISH" => Some(Self::MessageSectionFinish),
            "MESSAGE_SECTION_FROZEN" => Some(Self::MessageSectionFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gbkepcmhcem {
    MessageGroupNone = 0,
    MessageGroupDoing = 1,
    MessageGroupFinish = 2,
    MessageGroupFrozen = 3,
}
impl Gbkepcmhcem {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MessageGroupNone => "MESSAGE_GROUP_NONE",
            Self::MessageGroupDoing => "MESSAGE_GROUP_DOING",
            Self::MessageGroupFinish => "MESSAGE_GROUP_FINISH",
            Self::MessageGroupFrozen => "MESSAGE_GROUP_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_GROUP_NONE" => Some(Self::MessageGroupNone),
            "MESSAGE_GROUP_DOING" => Some(Self::MessageGroupDoing),
            "MESSAGE_GROUP_FINISH" => Some(Self::MessageGroupFinish),
            "MESSAGE_GROUP_FROZEN" => Some(Self::MessageGroupFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DisplayRecordType {
    BattleRecordNone = 0,
    BattleRecordChallenge = 1,
    BattleRecordRogue = 2,
}
impl DisplayRecordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BattleRecordNone => "BATTLE_RECORD_NONE",
            Self::BattleRecordChallenge => "BATTLE_RECORD_CHALLENGE",
            Self::BattleRecordRogue => "BATTLE_RECORD_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_RECORD_NONE" => Some(Self::BattleRecordNone),
            "BATTLE_RECORD_CHALLENGE" => Some(Self::BattleRecordChallenge),
            "BATTLE_RECORD_ROGUE" => Some(Self::BattleRecordRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oelnndobekp {
    RebattleTypeNone = 0,
    RebattleTypeRebattleMidway = 1,
    RebattleTypeRebattleLose = 2,
    RebattleTypeRebattleMidwayLineup = 3,
    RebattleTypeRebattleLoseLineup = 4,
    RebattleTypeQuitMidway = 5,
    RebattleTypeQuitLose = 6,
}
impl Oelnndobekp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RebattleTypeNone => "REBATTLE_TYPE_NONE",
            Self::RebattleTypeRebattleMidway => "REBATTLE_TYPE_REBATTLE_MIDWAY",
            Self::RebattleTypeRebattleLose => "REBATTLE_TYPE_REBATTLE_LOSE",
            Self::RebattleTypeRebattleMidwayLineup => {
                "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP"
            }
            Self::RebattleTypeRebattleLoseLineup => "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP",
            Self::RebattleTypeQuitMidway => "REBATTLE_TYPE_QUIT_MIDWAY",
            Self::RebattleTypeQuitLose => "REBATTLE_TYPE_QUIT_LOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REBATTLE_TYPE_NONE" => Some(Self::RebattleTypeNone),
            "REBATTLE_TYPE_REBATTLE_MIDWAY" => Some(Self::RebattleTypeRebattleMidway),
            "REBATTLE_TYPE_REBATTLE_LOSE" => Some(Self::RebattleTypeRebattleLose),
            "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP" => {
                Some(Self::RebattleTypeRebattleMidwayLineup)
            }
            "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP" => {
                Some(Self::RebattleTypeRebattleLoseLineup)
            }
            "REBATTLE_TYPE_QUIT_MIDWAY" => Some(Self::RebattleTypeQuitMidway),
            "REBATTLE_TYPE_QUIT_LOSE" => Some(Self::RebattleTypeQuitLose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentPackageStatus {
    None = 0,
    Init = 1,
    Doing = 2,
    Finished = 3,
    Release = 4,
}
impl ContentPackageStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ContentPackageStatus_None",
            Self::Init => "ContentPackageStatus_Init",
            Self::Doing => "ContentPackageStatus_Doing",
            Self::Finished => "ContentPackageStatus_Finished",
            Self::Release => "ContentPackageStatus_Release",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentPackageStatus_None" => Some(Self::None),
            "ContentPackageStatus_Init" => Some(Self::Init),
            "ContentPackageStatus_Doing" => Some(Self::Doing),
            "ContentPackageStatus_Finished" => Some(Self::Finished),
            "ContentPackageStatus_Release" => Some(Self::Release),
            _ => None,
        }
    }
}
/// NICODIGAKIP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdContentPackageType {
    None = 0,
    CmdContentPackageTransferScNotify = 7537,
    CmdContentPackageGetDataCsReq = 7515,
    CmdContentPackageUnlockCsReq = 7524,
    CmdContentPackageSyncDataScNotify = 7512,
    CmdContentPackageUnlockScRsp = 7542,
    CmdContentPackageGetDataScRsp = 7516,
}
impl CmdContentPackageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdContentPackageTypeNone",
            Self::CmdContentPackageTransferScNotify => {
                "CmdContentPackageTransferScNotify"
            }
            Self::CmdContentPackageGetDataCsReq => "CmdContentPackageGetDataCsReq",
            Self::CmdContentPackageUnlockCsReq => "CmdContentPackageUnlockCsReq",
            Self::CmdContentPackageSyncDataScNotify => {
                "CmdContentPackageSyncDataScNotify"
            }
            Self::CmdContentPackageUnlockScRsp => "CmdContentPackageUnlockScRsp",
            Self::CmdContentPackageGetDataScRsp => "CmdContentPackageGetDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdContentPackageTypeNone" => Some(Self::None),
            "CmdContentPackageTransferScNotify" => {
                Some(Self::CmdContentPackageTransferScNotify)
            }
            "CmdContentPackageGetDataCsReq" => Some(Self::CmdContentPackageGetDataCsReq),
            "CmdContentPackageUnlockCsReq" => Some(Self::CmdContentPackageUnlockCsReq),
            "CmdContentPackageSyncDataScNotify" => {
                Some(Self::CmdContentPackageSyncDataScNotify)
            }
            "CmdContentPackageUnlockScRsp" => Some(Self::CmdContentPackageUnlockScRsp),
            "CmdContentPackageGetDataScRsp" => Some(Self::CmdContentPackageGetDataScRsp),
            _ => None,
        }
    }
}
/// PFJCGBNOCLF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDailyActiveType {
    None = 0,
    CmdTakeApRewardScRsp = 3320,
    CmdDailyActiveInfoNotify = 3339,
    CmdGetDailyActiveInfoScRsp = 3346,
    CmdTakeAllApRewardScRsp = 3334,
    CmdTakeApRewardCsReq = 3359,
    CmdGetDailyActiveInfoCsReq = 3303,
    CmdTakeAllApRewardCsReq = 3353,
}
impl CmdDailyActiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDailyActiveTypeNone",
            Self::CmdTakeApRewardScRsp => "CmdTakeApRewardScRsp",
            Self::CmdDailyActiveInfoNotify => "CmdDailyActiveInfoNotify",
            Self::CmdGetDailyActiveInfoScRsp => "CmdGetDailyActiveInfoScRsp",
            Self::CmdTakeAllApRewardScRsp => "CmdTakeAllApRewardScRsp",
            Self::CmdTakeApRewardCsReq => "CmdTakeApRewardCsReq",
            Self::CmdGetDailyActiveInfoCsReq => "CmdGetDailyActiveInfoCsReq",
            Self::CmdTakeAllApRewardCsReq => "CmdTakeAllApRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDailyActiveTypeNone" => Some(Self::None),
            "CmdTakeApRewardScRsp" => Some(Self::CmdTakeApRewardScRsp),
            "CmdDailyActiveInfoNotify" => Some(Self::CmdDailyActiveInfoNotify),
            "CmdGetDailyActiveInfoScRsp" => Some(Self::CmdGetDailyActiveInfoScRsp),
            "CmdTakeAllApRewardScRsp" => Some(Self::CmdTakeAllApRewardScRsp),
            "CmdTakeApRewardCsReq" => Some(Self::CmdTakeApRewardCsReq),
            "CmdGetDailyActiveInfoCsReq" => Some(Self::CmdGetDailyActiveInfoCsReq),
            "CmdTakeAllApRewardCsReq" => Some(Self::CmdTakeAllApRewardCsReq),
            _ => None,
        }
    }
}
/// KGCKBBIPPML
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdDrinkMakerType {
    None = 0,
    CmdDrinkMakerChallengeCsReq = 6982,
    CmdGetDrinkMakerDataCsReq = 6985,
    CmdEndDrinkMakerSequenceCsReq = 6992,
    CmdDrinkMakerChallengeScRsp = 6998,
    CmdMakeMissionDrinkCsReq = 6984,
    CmdEndDrinkMakerSequenceScRsp = 6983,
    CmdGetDrinkMakerDataScRsp = 6988,
    CmdMakeDrinkScRsp = 6990,
    CmdDrinkMakerUpdateTipsNotify = 6991,
    CmdMakeDrinkCsReq = 6995,
    CmdDrinkMakerDayEndScNotify = 6996,
    CmdMakeMissionDrinkScRsp = 6989,
}
impl CmdDrinkMakerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdDrinkMakerTypeNone",
            Self::CmdDrinkMakerChallengeCsReq => "CmdDrinkMakerChallengeCsReq",
            Self::CmdGetDrinkMakerDataCsReq => "CmdGetDrinkMakerDataCsReq",
            Self::CmdEndDrinkMakerSequenceCsReq => "CmdEndDrinkMakerSequenceCsReq",
            Self::CmdDrinkMakerChallengeScRsp => "CmdDrinkMakerChallengeScRsp",
            Self::CmdMakeMissionDrinkCsReq => "CmdMakeMissionDrinkCsReq",
            Self::CmdEndDrinkMakerSequenceScRsp => "CmdEndDrinkMakerSequenceScRsp",
            Self::CmdGetDrinkMakerDataScRsp => "CmdGetDrinkMakerDataScRsp",
            Self::CmdMakeDrinkScRsp => "CmdMakeDrinkScRsp",
            Self::CmdDrinkMakerUpdateTipsNotify => "CmdDrinkMakerUpdateTipsNotify",
            Self::CmdMakeDrinkCsReq => "CmdMakeDrinkCsReq",
            Self::CmdDrinkMakerDayEndScNotify => "CmdDrinkMakerDayEndScNotify",
            Self::CmdMakeMissionDrinkScRsp => "CmdMakeMissionDrinkScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDrinkMakerTypeNone" => Some(Self::None),
            "CmdDrinkMakerChallengeCsReq" => Some(Self::CmdDrinkMakerChallengeCsReq),
            "CmdGetDrinkMakerDataCsReq" => Some(Self::CmdGetDrinkMakerDataCsReq),
            "CmdEndDrinkMakerSequenceCsReq" => Some(Self::CmdEndDrinkMakerSequenceCsReq),
            "CmdDrinkMakerChallengeScRsp" => Some(Self::CmdDrinkMakerChallengeScRsp),
            "CmdMakeMissionDrinkCsReq" => Some(Self::CmdMakeMissionDrinkCsReq),
            "CmdEndDrinkMakerSequenceScRsp" => Some(Self::CmdEndDrinkMakerSequenceScRsp),
            "CmdGetDrinkMakerDataScRsp" => Some(Self::CmdGetDrinkMakerDataScRsp),
            "CmdMakeDrinkScRsp" => Some(Self::CmdMakeDrinkScRsp),
            "CmdDrinkMakerUpdateTipsNotify" => Some(Self::CmdDrinkMakerUpdateTipsNotify),
            "CmdMakeDrinkCsReq" => Some(Self::CmdMakeDrinkCsReq),
            "CmdDrinkMakerDayEndScNotify" => Some(Self::CmdDrinkMakerDayEndScNotify),
            "CmdMakeMissionDrinkScRsp" => Some(Self::CmdMakeMissionDrinkScRsp),
            _ => None,
        }
    }
}
/// DHEHDPNMDCL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdEvolveBuild {
    None = 0,
    ShopAbilityResetScRsp = 7132,
    LeaveCsReq = 7108,
    CoinNotify = 7119,
    QueryInfoScRsp = 7116,
    LeaveScRsp = 7130,
    ShopAbilityResetCsReq = 7118,
    StartStageScRsp = 7137,
    TakeExpRewardCsReq = 7105,
    ShopAbilityDownCsReq = 7144,
    StartStageCsReq = 7142,
    ShopAbilityUpScRsp = 7133,
    UnlockInfoNotify = 7126,
    FinishScNotify = 7135,
    ShopAbilityUpCsReq = 7139,
    QueryInfoCsReq = 7115,
    ReRandomStageCsReq = 7128,
    ReRandomStageScRsp = 7107,
    StartLevelCsReq = 7112,
    StartLevelScRsp = 7124,
    GiveupCsReq = 7140,
    TakeExpRewardScRsp = 7131,
    ShopAbilityDownScRsp = 7120,
    GiveupScRsp = 7123,
}
impl CmdEvolveBuild {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdEvolveBuildNone",
            Self::ShopAbilityResetScRsp => "CmdEvolveBuildShopAbilityResetScRsp",
            Self::LeaveCsReq => "CmdEvolveBuildLeaveCsReq",
            Self::CoinNotify => "CmdEvolveBuildCoinNotify",
            Self::QueryInfoScRsp => "CmdEvolveBuildQueryInfoScRsp",
            Self::LeaveScRsp => "CmdEvolveBuildLeaveScRsp",
            Self::ShopAbilityResetCsReq => "CmdEvolveBuildShopAbilityResetCsReq",
            Self::StartStageScRsp => "CmdEvolveBuildStartStageScRsp",
            Self::TakeExpRewardCsReq => "CmdEvolveBuildTakeExpRewardCsReq",
            Self::ShopAbilityDownCsReq => "CmdEvolveBuildShopAbilityDownCsReq",
            Self::StartStageCsReq => "CmdEvolveBuildStartStageCsReq",
            Self::ShopAbilityUpScRsp => "CmdEvolveBuildShopAbilityUpScRsp",
            Self::UnlockInfoNotify => "CmdEvolveBuildUnlockInfoNotify",
            Self::FinishScNotify => "CmdEvolveBuildFinishScNotify",
            Self::ShopAbilityUpCsReq => "CmdEvolveBuildShopAbilityUpCsReq",
            Self::QueryInfoCsReq => "CmdEvolveBuildQueryInfoCsReq",
            Self::ReRandomStageCsReq => "CmdEvolveBuildReRandomStageCsReq",
            Self::ReRandomStageScRsp => "CmdEvolveBuildReRandomStageScRsp",
            Self::StartLevelCsReq => "CmdEvolveBuildStartLevelCsReq",
            Self::StartLevelScRsp => "CmdEvolveBuildStartLevelScRsp",
            Self::GiveupCsReq => "CmdEvolveBuildGiveupCsReq",
            Self::TakeExpRewardScRsp => "CmdEvolveBuildTakeExpRewardScRsp",
            Self::ShopAbilityDownScRsp => "CmdEvolveBuildShopAbilityDownScRsp",
            Self::GiveupScRsp => "CmdEvolveBuildGiveupScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEvolveBuildNone" => Some(Self::None),
            "CmdEvolveBuildShopAbilityResetScRsp" => Some(Self::ShopAbilityResetScRsp),
            "CmdEvolveBuildLeaveCsReq" => Some(Self::LeaveCsReq),
            "CmdEvolveBuildCoinNotify" => Some(Self::CoinNotify),
            "CmdEvolveBuildQueryInfoScRsp" => Some(Self::QueryInfoScRsp),
            "CmdEvolveBuildLeaveScRsp" => Some(Self::LeaveScRsp),
            "CmdEvolveBuildShopAbilityResetCsReq" => Some(Self::ShopAbilityResetCsReq),
            "CmdEvolveBuildStartStageScRsp" => Some(Self::StartStageScRsp),
            "CmdEvolveBuildTakeExpRewardCsReq" => Some(Self::TakeExpRewardCsReq),
            "CmdEvolveBuildShopAbilityDownCsReq" => Some(Self::ShopAbilityDownCsReq),
            "CmdEvolveBuildStartStageCsReq" => Some(Self::StartStageCsReq),
            "CmdEvolveBuildShopAbilityUpScRsp" => Some(Self::ShopAbilityUpScRsp),
            "CmdEvolveBuildUnlockInfoNotify" => Some(Self::UnlockInfoNotify),
            "CmdEvolveBuildFinishScNotify" => Some(Self::FinishScNotify),
            "CmdEvolveBuildShopAbilityUpCsReq" => Some(Self::ShopAbilityUpCsReq),
            "CmdEvolveBuildQueryInfoCsReq" => Some(Self::QueryInfoCsReq),
            "CmdEvolveBuildReRandomStageCsReq" => Some(Self::ReRandomStageCsReq),
            "CmdEvolveBuildReRandomStageScRsp" => Some(Self::ReRandomStageScRsp),
            "CmdEvolveBuildStartLevelCsReq" => Some(Self::StartLevelCsReq),
            "CmdEvolveBuildStartLevelScRsp" => Some(Self::StartLevelScRsp),
            "CmdEvolveBuildGiveupCsReq" => Some(Self::GiveupCsReq),
            "CmdEvolveBuildTakeExpRewardScRsp" => Some(Self::TakeExpRewardScRsp),
            "CmdEvolveBuildShopAbilityDownScRsp" => Some(Self::ShopAbilityDownScRsp),
            "CmdEvolveBuildGiveupScRsp" => Some(Self::GiveupScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jhinmamncea {
    EvolvePeriodNone = 0,
    EvolvePeriodFirst = 1,
    EvolvePeriodSecond = 2,
    EvolvePeriodThird = 3,
    EvolvePeriodExtra = 4,
}
impl Jhinmamncea {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolvePeriodNone => "EVOLVE_PERIOD_NONE",
            Self::EvolvePeriodFirst => "EVOLVE_PERIOD_FIRST",
            Self::EvolvePeriodSecond => "EVOLVE_PERIOD_SECOND",
            Self::EvolvePeriodThird => "EVOLVE_PERIOD_THIRD",
            Self::EvolvePeriodExtra => "EVOLVE_PERIOD_EXTRA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_PERIOD_NONE" => Some(Self::EvolvePeriodNone),
            "EVOLVE_PERIOD_FIRST" => Some(Self::EvolvePeriodFirst),
            "EVOLVE_PERIOD_SECOND" => Some(Self::EvolvePeriodSecond),
            "EVOLVE_PERIOD_THIRD" => Some(Self::EvolvePeriodThird),
            "EVOLVE_PERIOD_EXTRA" => Some(Self::EvolvePeriodExtra),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nkaeanajhfl {
    EvolveBattleResultNone = 0,
    EvolveBattleResultWin = 1,
    EvolveBattleResultAllAvatarDead = 2,
    EvolveBattleResultNoDeadLine = 3,
    EvolveBattleResultQuit = 4,
}
impl Nkaeanajhfl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EvolveBattleResultNone => "EVOLVE_BATTLE_RESULT_NONE",
            Self::EvolveBattleResultWin => "EVOLVE_BATTLE_RESULT_WIN",
            Self::EvolveBattleResultAllAvatarDead => {
                "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD"
            }
            Self::EvolveBattleResultNoDeadLine => "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE",
            Self::EvolveBattleResultQuit => "EVOLVE_BATTLE_RESULT_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_BATTLE_RESULT_NONE" => Some(Self::EvolveBattleResultNone),
            "EVOLVE_BATTLE_RESULT_WIN" => Some(Self::EvolveBattleResultWin),
            "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD" => {
                Some(Self::EvolveBattleResultAllAvatarDead)
            }
            "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE" => {
                Some(Self::EvolveBattleResultNoDeadLine)
            }
            "EVOLVE_BATTLE_RESULT_QUIT" => Some(Self::EvolveBattleResultQuit),
            _ => None,
        }
    }
}
/// OCGPEDHNDBD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdExpeditionType {
    None = 0,
    CmdTakeMultipleExpeditionRewardCsReq = 2519,
    CmdCancelActivityExpeditionCsReq = 2574,
    CmdAcceptActivityExpeditionScRsp = 2547,
    CmdGetExpeditionDataScRsp = 2520,
    CmdExpeditionDataChangeScNotify = 2580,
    CmdTakeMultipleActivityExpeditionRewardCsReq = 2525,
    CmdTakeExpeditionRewardScRsp = 2537,
    CmdAcceptExpeditionScRsp = 2546,
    CmdCancelExpeditionScRsp = 2553,
    CmdAcceptMultipleExpeditionCsReq = 2590,
    CmdAcceptActivityExpeditionCsReq = 2516,
    CmdTakeActivityExpeditionRewardCsReq = 2575,
    CmdAcceptMultipleExpeditionScRsp = 2579,
    CmdCancelActivityExpeditionScRsp = 2530,
    CmdTakeMultipleExpeditionRewardScRsp = 2561,
    CmdCancelExpeditionCsReq = 2539,
    CmdTakeExpeditionRewardCsReq = 2534,
    CmdAcceptExpeditionCsReq = 2503,
    CmdTakeActivityExpeditionRewardScRsp = 2548,
    CmdTakeMultipleActivityExpeditionRewardScRsp = 2529,
    CmdGetExpeditionDataCsReq = 2559,
}
impl CmdExpeditionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdExpeditionTypeNone",
            Self::CmdTakeMultipleExpeditionRewardCsReq => {
                "CmdTakeMultipleExpeditionRewardCsReq"
            }
            Self::CmdCancelActivityExpeditionCsReq => "CmdCancelActivityExpeditionCsReq",
            Self::CmdAcceptActivityExpeditionScRsp => "CmdAcceptActivityExpeditionScRsp",
            Self::CmdGetExpeditionDataScRsp => "CmdGetExpeditionDataScRsp",
            Self::CmdExpeditionDataChangeScNotify => "CmdExpeditionDataChangeScNotify",
            Self::CmdTakeMultipleActivityExpeditionRewardCsReq => {
                "CmdTakeMultipleActivityExpeditionRewardCsReq"
            }
            Self::CmdTakeExpeditionRewardScRsp => "CmdTakeExpeditionRewardScRsp",
            Self::CmdAcceptExpeditionScRsp => "CmdAcceptExpeditionScRsp",
            Self::CmdCancelExpeditionScRsp => "CmdCancelExpeditionScRsp",
            Self::CmdAcceptMultipleExpeditionCsReq => "CmdAcceptMultipleExpeditionCsReq",
            Self::CmdAcceptActivityExpeditionCsReq => "CmdAcceptActivityExpeditionCsReq",
            Self::CmdTakeActivityExpeditionRewardCsReq => {
                "CmdTakeActivityExpeditionRewardCsReq"
            }
            Self::CmdAcceptMultipleExpeditionScRsp => "CmdAcceptMultipleExpeditionScRsp",
            Self::CmdCancelActivityExpeditionScRsp => "CmdCancelActivityExpeditionScRsp",
            Self::CmdTakeMultipleExpeditionRewardScRsp => {
                "CmdTakeMultipleExpeditionRewardScRsp"
            }
            Self::CmdCancelExpeditionCsReq => "CmdCancelExpeditionCsReq",
            Self::CmdTakeExpeditionRewardCsReq => "CmdTakeExpeditionRewardCsReq",
            Self::CmdAcceptExpeditionCsReq => "CmdAcceptExpeditionCsReq",
            Self::CmdTakeActivityExpeditionRewardScRsp => {
                "CmdTakeActivityExpeditionRewardScRsp"
            }
            Self::CmdTakeMultipleActivityExpeditionRewardScRsp => {
                "CmdTakeMultipleActivityExpeditionRewardScRsp"
            }
            Self::CmdGetExpeditionDataCsReq => "CmdGetExpeditionDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdExpeditionTypeNone" => Some(Self::None),
            "CmdTakeMultipleExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleExpeditionRewardCsReq)
            }
            "CmdCancelActivityExpeditionCsReq" => {
                Some(Self::CmdCancelActivityExpeditionCsReq)
            }
            "CmdAcceptActivityExpeditionScRsp" => {
                Some(Self::CmdAcceptActivityExpeditionScRsp)
            }
            "CmdGetExpeditionDataScRsp" => Some(Self::CmdGetExpeditionDataScRsp),
            "CmdExpeditionDataChangeScNotify" => {
                Some(Self::CmdExpeditionDataChangeScNotify)
            }
            "CmdTakeMultipleActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardCsReq)
            }
            "CmdTakeExpeditionRewardScRsp" => Some(Self::CmdTakeExpeditionRewardScRsp),
            "CmdAcceptExpeditionScRsp" => Some(Self::CmdAcceptExpeditionScRsp),
            "CmdCancelExpeditionScRsp" => Some(Self::CmdCancelExpeditionScRsp),
            "CmdAcceptMultipleExpeditionCsReq" => {
                Some(Self::CmdAcceptMultipleExpeditionCsReq)
            }
            "CmdAcceptActivityExpeditionCsReq" => {
                Some(Self::CmdAcceptActivityExpeditionCsReq)
            }
            "CmdTakeActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeActivityExpeditionRewardCsReq)
            }
            "CmdAcceptMultipleExpeditionScRsp" => {
                Some(Self::CmdAcceptMultipleExpeditionScRsp)
            }
            "CmdCancelActivityExpeditionScRsp" => {
                Some(Self::CmdCancelActivityExpeditionScRsp)
            }
            "CmdTakeMultipleExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleExpeditionRewardScRsp)
            }
            "CmdCancelExpeditionCsReq" => Some(Self::CmdCancelExpeditionCsReq),
            "CmdTakeExpeditionRewardCsReq" => Some(Self::CmdTakeExpeditionRewardCsReq),
            "CmdAcceptExpeditionCsReq" => Some(Self::CmdAcceptExpeditionCsReq),
            "CmdTakeActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeActivityExpeditionRewardScRsp)
            }
            "CmdTakeMultipleActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleActivityExpeditionRewardScRsp)
            }
            "CmdGetExpeditionDataCsReq" => Some(Self::CmdGetExpeditionDataCsReq),
            _ => None,
        }
    }
}
/// JFPDGBHDFLN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFantasticStoryActivityType {
    None = 0,
    CmdEnterFantasticStoryActivityStageScRsp = 4939,
    CmdFinishChapterScNotify = 4903,
    CmdEnterFantasticStoryActivityStageCsReq = 4946,
    CmdGetFantasticStoryActivityDataScRsp = 4920,
    CmdGetFantasticStoryActivityDataCsReq = 4959,
    CmdFantasticStoryActivityBattleEndScNotify = 4953,
}
impl CmdFantasticStoryActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFantasticStoryActivityTypeNone",
            Self::CmdEnterFantasticStoryActivityStageScRsp => {
                "CmdEnterFantasticStoryActivityStageScRsp"
            }
            Self::CmdFinishChapterScNotify => "CmdFinishChapterScNotify",
            Self::CmdEnterFantasticStoryActivityStageCsReq => {
                "CmdEnterFantasticStoryActivityStageCsReq"
            }
            Self::CmdGetFantasticStoryActivityDataScRsp => {
                "CmdGetFantasticStoryActivityDataScRsp"
            }
            Self::CmdGetFantasticStoryActivityDataCsReq => {
                "CmdGetFantasticStoryActivityDataCsReq"
            }
            Self::CmdFantasticStoryActivityBattleEndScNotify => {
                "CmdFantasticStoryActivityBattleEndScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFantasticStoryActivityTypeNone" => Some(Self::None),
            "CmdEnterFantasticStoryActivityStageScRsp" => {
                Some(Self::CmdEnterFantasticStoryActivityStageScRsp)
            }
            "CmdFinishChapterScNotify" => Some(Self::CmdFinishChapterScNotify),
            "CmdEnterFantasticStoryActivityStageCsReq" => {
                Some(Self::CmdEnterFantasticStoryActivityStageCsReq)
            }
            "CmdGetFantasticStoryActivityDataScRsp" => {
                Some(Self::CmdGetFantasticStoryActivityDataScRsp)
            }
            "CmdGetFantasticStoryActivityDataCsReq" => {
                Some(Self::CmdGetFantasticStoryActivityDataCsReq)
            }
            "CmdFantasticStoryActivityBattleEndScNotify" => {
                Some(Self::CmdFantasticStoryActivityBattleEndScNotify)
            }
            _ => None,
        }
    }
}
/// HNOMICIFNLD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFeverTimeActivityType {
    None = 0,
    CmdFeverTimeActivityBattleEndScNotify = 7159,
    CmdEnterFeverTimeActivityStageScRsp = 7155,
    CmdGetFeverTimeActivityDataCsReq = 7158,
    CmdGetFeverTimeActivityDataScRsp = 7151,
    CmdEnterFeverTimeActivityStageCsReq = 7156,
}
impl CmdFeverTimeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFeverTimeActivityTypeNone",
            Self::CmdFeverTimeActivityBattleEndScNotify => {
                "CmdFeverTimeActivityBattleEndScNotify"
            }
            Self::CmdEnterFeverTimeActivityStageScRsp => {
                "CmdEnterFeverTimeActivityStageScRsp"
            }
            Self::CmdGetFeverTimeActivityDataCsReq => "CmdGetFeverTimeActivityDataCsReq",
            Self::CmdGetFeverTimeActivityDataScRsp => "CmdGetFeverTimeActivityDataScRsp",
            Self::CmdEnterFeverTimeActivityStageCsReq => {
                "CmdEnterFeverTimeActivityStageCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFeverTimeActivityTypeNone" => Some(Self::None),
            "CmdFeverTimeActivityBattleEndScNotify" => {
                Some(Self::CmdFeverTimeActivityBattleEndScNotify)
            }
            "CmdEnterFeverTimeActivityStageScRsp" => {
                Some(Self::CmdEnterFeverTimeActivityStageScRsp)
            }
            "CmdGetFeverTimeActivityDataCsReq" => {
                Some(Self::CmdGetFeverTimeActivityDataCsReq)
            }
            "CmdGetFeverTimeActivityDataScRsp" => {
                Some(Self::CmdGetFeverTimeActivityDataScRsp)
            }
            "CmdEnterFeverTimeActivityStageCsReq" => {
                Some(Self::CmdEnterFeverTimeActivityStageCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FeverTimeActivityType {
    FeverTimeBattleRankC = 0,
    FeverTimeBattleRankB = 1,
    FeverTimeBattleRankA = 2,
    FeverTimeBattleRankS = 3,
    FeverTimeBattleRankSs = 4,
}
impl FeverTimeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FeverTimeBattleRankC => "FEVER_TIME_BATTLE_RANK_C",
            Self::FeverTimeBattleRankB => "FEVER_TIME_BATTLE_RANK_B",
            Self::FeverTimeBattleRankA => "FEVER_TIME_BATTLE_RANK_A",
            Self::FeverTimeBattleRankS => "FEVER_TIME_BATTLE_RANK_S",
            Self::FeverTimeBattleRankSs => "FEVER_TIME_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEVER_TIME_BATTLE_RANK_C" => Some(Self::FeverTimeBattleRankC),
            "FEVER_TIME_BATTLE_RANK_B" => Some(Self::FeverTimeBattleRankB),
            "FEVER_TIME_BATTLE_RANK_A" => Some(Self::FeverTimeBattleRankA),
            "FEVER_TIME_BATTLE_RANK_S" => Some(Self::FeverTimeBattleRankS),
            "FEVER_TIME_BATTLE_RANK_SS" => Some(Self::FeverTimeBattleRankSs),
            _ => None,
        }
    }
}
/// IGKMANOLMII
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightType {
    None = 0,
    CmdFightEnterScRsp = 30020,
    CmdFightEnterCsReq = 30059,
    CmdFightSessionStopScNotify = 30034,
    CmdFightLeaveScNotify = 30003,
    CmdFightHeartBeatCsReq = 30039,
    CmdFightHeartBeatScRsp = 30053,
    CmdFightKickOutScNotify = 30046,
}
impl CmdFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightTypeNone",
            Self::CmdFightEnterScRsp => "CmdFightEnterScRsp",
            Self::CmdFightEnterCsReq => "CmdFightEnterCsReq",
            Self::CmdFightSessionStopScNotify => "CmdFightSessionStopScNotify",
            Self::CmdFightLeaveScNotify => "CmdFightLeaveScNotify",
            Self::CmdFightHeartBeatCsReq => "CmdFightHeartBeatCsReq",
            Self::CmdFightHeartBeatScRsp => "CmdFightHeartBeatScRsp",
            Self::CmdFightKickOutScNotify => "CmdFightKickOutScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightTypeNone" => Some(Self::None),
            "CmdFightEnterScRsp" => Some(Self::CmdFightEnterScRsp),
            "CmdFightEnterCsReq" => Some(Self::CmdFightEnterCsReq),
            "CmdFightSessionStopScNotify" => Some(Self::CmdFightSessionStopScNotify),
            "CmdFightLeaveScNotify" => Some(Self::CmdFightLeaveScNotify),
            "CmdFightHeartBeatCsReq" => Some(Self::CmdFightHeartBeatCsReq),
            "CmdFightHeartBeatScRsp" => Some(Self::CmdFightHeartBeatScRsp),
            "CmdFightKickOutScNotify" => Some(Self::CmdFightKickOutScNotify),
            _ => None,
        }
    }
}
/// KPOJCAPKIDK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightActivityType {
    None = 0,
    CmdGetFightActivityDataScRsp = 3620,
    CmdFightActivityDataChangeScNotify = 3603,
    CmdGetFightActivityDataCsReq = 3659,
    CmdEnterFightActivityStageCsReq = 3646,
    CmdTakeFightActivityRewardScRsp = 3634,
    CmdTakeFightActivityRewardCsReq = 3653,
    CmdEnterFightActivityStageScRsp = 3639,
}
impl CmdFightActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightActivityTypeNone",
            Self::CmdGetFightActivityDataScRsp => "CmdGetFightActivityDataScRsp",
            Self::CmdFightActivityDataChangeScNotify => {
                "CmdFightActivityDataChangeScNotify"
            }
            Self::CmdGetFightActivityDataCsReq => "CmdGetFightActivityDataCsReq",
            Self::CmdEnterFightActivityStageCsReq => "CmdEnterFightActivityStageCsReq",
            Self::CmdTakeFightActivityRewardScRsp => "CmdTakeFightActivityRewardScRsp",
            Self::CmdTakeFightActivityRewardCsReq => "CmdTakeFightActivityRewardCsReq",
            Self::CmdEnterFightActivityStageScRsp => "CmdEnterFightActivityStageScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightActivityTypeNone" => Some(Self::None),
            "CmdGetFightActivityDataScRsp" => Some(Self::CmdGetFightActivityDataScRsp),
            "CmdFightActivityDataChangeScNotify" => {
                Some(Self::CmdFightActivityDataChangeScNotify)
            }
            "CmdGetFightActivityDataCsReq" => Some(Self::CmdGetFightActivityDataCsReq),
            "CmdEnterFightActivityStageCsReq" => {
                Some(Self::CmdEnterFightActivityStageCsReq)
            }
            "CmdTakeFightActivityRewardScRsp" => {
                Some(Self::CmdTakeFightActivityRewardScRsp)
            }
            "CmdTakeFightActivityRewardCsReq" => {
                Some(Self::CmdTakeFightActivityRewardCsReq)
            }
            "CmdEnterFightActivityStageScRsp" => {
                Some(Self::CmdEnterFightActivityStageScRsp)
            }
            _ => None,
        }
    }
}
/// FFIDPBOPJAC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightFestType {
    None = 0,
    CmdStartFightFestScRsp = 7274,
    CmdFightFestUpdateCoinNotify = 7273,
    CmdGetFightFestDataCsReq = 7265,
    CmdFightFestUpdateChallengeRecordNotify = 7290,
    CmdFightFestUnlockSkillNotify = 7287,
    CmdStartFightFestCsReq = 7262,
    CmdGetFightFestDataScRsp = 7266,
    CmdFightFestScoreUpdateNotify = 7292,
}
impl CmdFightFestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightFestTypeNone",
            Self::CmdStartFightFestScRsp => "CmdStartFightFestScRsp",
            Self::CmdFightFestUpdateCoinNotify => "CmdFightFestUpdateCoinNotify",
            Self::CmdGetFightFestDataCsReq => "CmdGetFightFestDataCsReq",
            Self::CmdFightFestUpdateChallengeRecordNotify => {
                "CmdFightFestUpdateChallengeRecordNotify"
            }
            Self::CmdFightFestUnlockSkillNotify => "CmdFightFestUnlockSkillNotify",
            Self::CmdStartFightFestCsReq => "CmdStartFightFestCsReq",
            Self::CmdGetFightFestDataScRsp => "CmdGetFightFestDataScRsp",
            Self::CmdFightFestScoreUpdateNotify => "CmdFightFestScoreUpdateNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightFestTypeNone" => Some(Self::None),
            "CmdStartFightFestScRsp" => Some(Self::CmdStartFightFestScRsp),
            "CmdFightFestUpdateCoinNotify" => Some(Self::CmdFightFestUpdateCoinNotify),
            "CmdGetFightFestDataCsReq" => Some(Self::CmdGetFightFestDataCsReq),
            "CmdFightFestUpdateChallengeRecordNotify" => {
                Some(Self::CmdFightFestUpdateChallengeRecordNotify)
            }
            "CmdFightFestUnlockSkillNotify" => Some(Self::CmdFightFestUnlockSkillNotify),
            "CmdStartFightFestCsReq" => Some(Self::CmdStartFightFestCsReq),
            "CmdGetFightFestDataScRsp" => Some(Self::CmdGetFightFestDataScRsp),
            "CmdFightFestScoreUpdateNotify" => Some(Self::CmdFightFestScoreUpdateNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Khbfghpbacl {
    FightFestBattleRankC = 0,
    FightFestBattleRankB = 1,
    FightFestBattleRankA = 2,
    FightFestBattleRankS = 3,
    FightFestBattleRankSs = 4,
}
impl Khbfghpbacl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestBattleRankC => "FIGHT_FEST_BATTLE_RANK_C",
            Self::FightFestBattleRankB => "FIGHT_FEST_BATTLE_RANK_B",
            Self::FightFestBattleRankA => "FIGHT_FEST_BATTLE_RANK_A",
            Self::FightFestBattleRankS => "FIGHT_FEST_BATTLE_RANK_S",
            Self::FightFestBattleRankSs => "FIGHT_FEST_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_BATTLE_RANK_C" => Some(Self::FightFestBattleRankC),
            "FIGHT_FEST_BATTLE_RANK_B" => Some(Self::FightFestBattleRankB),
            "FIGHT_FEST_BATTLE_RANK_A" => Some(Self::FightFestBattleRankA),
            "FIGHT_FEST_BATTLE_RANK_S" => Some(Self::FightFestBattleRankS),
            "FIGHT_FEST_BATTLE_RANK_SS" => Some(Self::FightFestBattleRankSs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mgomnjpdchn {
    FightFestTypeNone = 0,
    FightFestTypeMain = 1,
    FightFestTypeScore = 2,
    FightFestTypeChallenge = 3,
    FightFestTypeTeach = 4,
}
impl Mgomnjpdchn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::FightFestTypeNone => "FIGHT_FEST_TYPE_NONE",
            Self::FightFestTypeMain => "FIGHT_FEST_TYPE_MAIN",
            Self::FightFestTypeScore => "FIGHT_FEST_TYPE_SCORE",
            Self::FightFestTypeChallenge => "FIGHT_FEST_TYPE_CHALLENGE",
            Self::FightFestTypeTeach => "FIGHT_FEST_TYPE_TEACH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_TYPE_NONE" => Some(Self::FightFestTypeNone),
            "FIGHT_FEST_TYPE_MAIN" => Some(Self::FightFestTypeMain),
            "FIGHT_FEST_TYPE_SCORE" => Some(Self::FightFestTypeScore),
            "FIGHT_FEST_TYPE_CHALLENGE" => Some(Self::FightFestTypeChallenge),
            "FIGHT_FEST_TYPE_TEACH" => Some(Self::FightFestTypeTeach),
            _ => None,
        }
    }
}
/// LMCHOGCBAAH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFightMathc3Type {
    None = 0,
    CmdFightMatch3TurnStartScNotify = 30146,
    CmdFightMatch3TurnEndScNotify = 30139,
    CmdFightMatch3ChatCsReq = 30180,
    CmdFightMatch3DataCsReq = 30159,
    CmdFightMatch3ChatScRsp = 30116,
    CmdFightMatch3DataScRsp = 30120,
    CmdFightMatch3ForceUpdateNotify = 30174,
    CmdFightMatch3StartCountDownScNotify = 30103,
    CmdFightMatch3OpponentDataScNotify = 30137,
    CmdFightMatch3SwapScRsp = 30134,
    CmdFightMatch3SwapCsReq = 30153,
    CmdFightMatch3ChatScNotify = 30147,
}
impl CmdFightMathc3Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFightMathc3TypeNone",
            Self::CmdFightMatch3TurnStartScNotify => "CmdFightMatch3TurnStartScNotify",
            Self::CmdFightMatch3TurnEndScNotify => "CmdFightMatch3TurnEndScNotify",
            Self::CmdFightMatch3ChatCsReq => "CmdFightMatch3ChatCsReq",
            Self::CmdFightMatch3DataCsReq => "CmdFightMatch3DataCsReq",
            Self::CmdFightMatch3ChatScRsp => "CmdFightMatch3ChatScRsp",
            Self::CmdFightMatch3DataScRsp => "CmdFightMatch3DataScRsp",
            Self::CmdFightMatch3ForceUpdateNotify => "CmdFightMatch3ForceUpdateNotify",
            Self::CmdFightMatch3StartCountDownScNotify => {
                "CmdFightMatch3StartCountDownScNotify"
            }
            Self::CmdFightMatch3OpponentDataScNotify => {
                "CmdFightMatch3OpponentDataScNotify"
            }
            Self::CmdFightMatch3SwapScRsp => "CmdFightMatch3SwapScRsp",
            Self::CmdFightMatch3SwapCsReq => "CmdFightMatch3SwapCsReq",
            Self::CmdFightMatch3ChatScNotify => "CmdFightMatch3ChatScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightMathc3TypeNone" => Some(Self::None),
            "CmdFightMatch3TurnStartScNotify" => {
                Some(Self::CmdFightMatch3TurnStartScNotify)
            }
            "CmdFightMatch3TurnEndScNotify" => Some(Self::CmdFightMatch3TurnEndScNotify),
            "CmdFightMatch3ChatCsReq" => Some(Self::CmdFightMatch3ChatCsReq),
            "CmdFightMatch3DataCsReq" => Some(Self::CmdFightMatch3DataCsReq),
            "CmdFightMatch3ChatScRsp" => Some(Self::CmdFightMatch3ChatScRsp),
            "CmdFightMatch3DataScRsp" => Some(Self::CmdFightMatch3DataScRsp),
            "CmdFightMatch3ForceUpdateNotify" => {
                Some(Self::CmdFightMatch3ForceUpdateNotify)
            }
            "CmdFightMatch3StartCountDownScNotify" => {
                Some(Self::CmdFightMatch3StartCountDownScNotify)
            }
            "CmdFightMatch3OpponentDataScNotify" => {
                Some(Self::CmdFightMatch3OpponentDataScNotify)
            }
            "CmdFightMatch3SwapScRsp" => Some(Self::CmdFightMatch3SwapScRsp),
            "CmdFightMatch3SwapCsReq" => Some(Self::CmdFightMatch3SwapCsReq),
            "CmdFightMatch3ChatScNotify" => Some(Self::CmdFightMatch3ChatScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fmbmhhbpodj {
    Match3StateIdle = 0,
    Match3StateStart = 1,
    Match3StateMatch = 2,
    Match3StateGame = 3,
    Match3StateHalftime = 4,
    Match3StateOver = 5,
}
impl Fmbmhhbpodj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3StateIdle => "MATCH3_STATE_IDLE",
            Self::Match3StateStart => "MATCH3_STATE_START",
            Self::Match3StateMatch => "MATCH3_STATE_MATCH",
            Self::Match3StateGame => "MATCH3_STATE_GAME",
            Self::Match3StateHalftime => "MATCH3_STATE_HALFTIME",
            Self::Match3StateOver => "MATCH3_STATE_OVER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_STATE_IDLE" => Some(Self::Match3StateIdle),
            "MATCH3_STATE_START" => Some(Self::Match3StateStart),
            "MATCH3_STATE_MATCH" => Some(Self::Match3StateMatch),
            "MATCH3_STATE_GAME" => Some(Self::Match3StateGame),
            "MATCH3_STATE_HALFTIME" => Some(Self::Match3StateHalftime),
            "MATCH3_STATE_OVER" => Some(Self::Match3StateOver),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eofohacmkep {
    Match3PlayerStateAlive = 0,
    Match3PlayerStateDying = 1,
    Match3PlayerStateDead = 2,
    Match3PlayerStateLeave = 3,
}
impl Eofohacmkep {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Match3PlayerStateAlive => "MATCH3_PLAYER_STATE_ALIVE",
            Self::Match3PlayerStateDying => "MATCH3_PLAYER_STATE_DYING",
            Self::Match3PlayerStateDead => "MATCH3_PLAYER_STATE_DEAD",
            Self::Match3PlayerStateLeave => "MATCH3_PLAYER_STATE_LEAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_PLAYER_STATE_ALIVE" => Some(Self::Match3PlayerStateAlive),
            "MATCH3_PLAYER_STATE_DYING" => Some(Self::Match3PlayerStateDying),
            "MATCH3_PLAYER_STATE_DEAD" => Some(Self::Match3PlayerStateDead),
            "MATCH3_PLAYER_STATE_LEAVE" => Some(Self::Match3PlayerStateLeave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jdionhboidb {
    EventBegin = 0,
    EventBreak = 1,
    EventFall = 2,
    EventRefresh = 3,
    EventBirdSkill = 4,
    EventEnv = 5,
    EventShuffle = 6,
    EventSettleTag = 7,
}
impl Jdionhboidb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::EventBegin => "EVENT_BEGIN",
            Self::EventBreak => "EVENT_BREAK",
            Self::EventFall => "EVENT_FALL",
            Self::EventRefresh => "EVENT_REFRESH",
            Self::EventBirdSkill => "EVENT_BIRD_SKILL",
            Self::EventEnv => "EVENT_ENV",
            Self::EventShuffle => "EVENT_SHUFFLE",
            Self::EventSettleTag => "EVENT_SETTLE_TAG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_BEGIN" => Some(Self::EventBegin),
            "EVENT_BREAK" => Some(Self::EventBreak),
            "EVENT_FALL" => Some(Self::EventFall),
            "EVENT_REFRESH" => Some(Self::EventRefresh),
            "EVENT_BIRD_SKILL" => Some(Self::EventBirdSkill),
            "EVENT_ENV" => Some(Self::EventEnv),
            "EVENT_SHUFFLE" => Some(Self::EventShuffle),
            "EVENT_SETTLE_TAG" => Some(Self::EventSettleTag),
            _ => None,
        }
    }
}
/// AHHLIPGMMAI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdFriendType {
    None = 0,
    CmdGetFriendRecommendListInfoScRsp = 2925,
    CmdDeleteFriendCsReq = 2930,
    CmdApplyFriendScRsp = 2937,
    CmdGetFriendListInfoCsReq = 2959,
    CmdSetForbidOtherApplyFriendScRsp = 2945,
    CmdApplyFriendCsReq = 2934,
    CmdSyncHandleFriendScNotify = 2974,
    CmdGetAssistListScRsp = 2994,
    CmdGetFriendDevelopmentInfoScRsp = 2971,
    CmdGetPlayerDetailInfoCsReq = 2903,
    CmdGetPlayerDetailInfoScRsp = 2946,
    CmdSetForbidOtherApplyFriendCsReq = 2915,
    CmdTakeAssistRewardScRsp = 2904,
    CmdDeleteBlacklistCsReq = 2983,
    CmdGetFriendListInfoScRsp = 2920,
    CmdSetAssistCsReq = 2910,
    CmdSyncAddBlacklistScNotify = 2919,
    CmdAddBlacklistCsReq = 2990,
    CmdGetAssistHistoryCsReq = 2926,
    CmdGetFriendRecommendListInfoCsReq = 2961,
    CmdSearchPlayerScRsp = 2993,
    CmdGetPlatformPlayerInfoScRsp = 2963,
    CmdSetFriendMarkCsReq = 2902,
    CmdGetFriendChallengeDetailCsReq = 2912,
    CmdGetFriendDevelopmentInfoCsReq = 2931,
    CmdReportPlayerScRsp = 2973,
    CmdGetFriendChallengeLineupCsReq = 2972,
    CmdDeleteFriendScRsp = 2975,
    CmdDeleteBlacklistScRsp = 2999,
    CmdGetFriendApplyListInfoScRsp = 2953,
    CmdGetFriendLoginInfoScRsp = 2923,
    CmdGetFriendBattleRecordDetailCsReq = 2932,
    CmdSetAssistScRsp = 2970,
    CmdCurAssistChangedNotify = 2988,
    CmdGetCurAssistScRsp = 2965,
    CmdSearchPlayerCsReq = 2909,
    CmdGetFriendLoginInfoCsReq = 2914,
    CmdTakeAssistRewardCsReq = 2991,
    CmdGetFriendAssistListCsReq = 2956,
    CmdGetFriendChallengeDetailScRsp = 2960,
    CmdNewAssistHistoryNotify = 2977,
    CmdGetPlatformPlayerInfoCsReq = 2943,
    CmdGetFriendApplyListInfoCsReq = 2939,
    CmdGetCurAssistCsReq = 2936,
    CmdSetFriendRemarkNameScRsp = 2933,
    CmdHandleFriendScRsp = 2947,
    CmdGetFriendAssistListScRsp = 2978,
    CmdGetAssistHistoryScRsp = 2913,
    CmdGetFriendChallengeLineupScRsp = 2924,
    CmdGetAssistListCsReq = 2964,
    CmdReportPlayerCsReq = 2951,
    CmdSyncApplyFriendScNotify = 2980,
    CmdAddBlacklistScRsp = 2979,
    CmdGetFriendBattleRecordDetailScRsp = 2996,
    CmdSetFriendRemarkNameCsReq = 2929,
    CmdHandleFriendCsReq = 2916,
    CmdSetFriendMarkScRsp = 2966,
    CmdSyncDeleteFriendScNotify = 2948,
}
impl CmdFriendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdFriendTypeNone",
            Self::CmdGetFriendRecommendListInfoScRsp => {
                "CmdGetFriendRecommendListInfoScRsp"
            }
            Self::CmdDeleteFriendCsReq => "CmdDeleteFriendCsReq",
            Self::CmdApplyFriendScRsp => "CmdApplyFriendScRsp",
            Self::CmdGetFriendListInfoCsReq => "CmdGetFriendListInfoCsReq",
            Self::CmdSetForbidOtherApplyFriendScRsp => {
                "CmdSetForbidOtherApplyFriendScRsp"
            }
            Self::CmdApplyFriendCsReq => "CmdApplyFriendCsReq",
            Self::CmdSyncHandleFriendScNotify => "CmdSyncHandleFriendScNotify",
            Self::CmdGetAssistListScRsp => "CmdGetAssistListScRsp",
            Self::CmdGetFriendDevelopmentInfoScRsp => "CmdGetFriendDevelopmentInfoScRsp",
            Self::CmdGetPlayerDetailInfoCsReq => "CmdGetPlayerDetailInfoCsReq",
            Self::CmdGetPlayerDetailInfoScRsp => "CmdGetPlayerDetailInfoScRsp",
            Self::CmdSetForbidOtherApplyFriendCsReq => {
                "CmdSetForbidOtherApplyFriendCsReq"
            }
            Self::CmdTakeAssistRewardScRsp => "CmdTakeAssistRewardScRsp",
            Self::CmdDeleteBlacklistCsReq => "CmdDeleteBlacklistCsReq",
            Self::CmdGetFriendListInfoScRsp => "CmdGetFriendListInfoScRsp",
            Self::CmdSetAssistCsReq => "CmdSetAssistCsReq",
            Self::CmdSyncAddBlacklistScNotify => "CmdSyncAddBlacklistScNotify",
            Self::CmdAddBlacklistCsReq => "CmdAddBlacklistCsReq",
            Self::CmdGetAssistHistoryCsReq => "CmdGetAssistHistoryCsReq",
            Self::CmdGetFriendRecommendListInfoCsReq => {
                "CmdGetFriendRecommendListInfoCsReq"
            }
            Self::CmdSearchPlayerScRsp => "CmdSearchPlayerScRsp",
            Self::CmdGetPlatformPlayerInfoScRsp => "CmdGetPlatformPlayerInfoScRsp",
            Self::CmdSetFriendMarkCsReq => "CmdSetFriendMarkCsReq",
            Self::CmdGetFriendChallengeDetailCsReq => "CmdGetFriendChallengeDetailCsReq",
            Self::CmdGetFriendDevelopmentInfoCsReq => "CmdGetFriendDevelopmentInfoCsReq",
            Self::CmdReportPlayerScRsp => "CmdReportPlayerScRsp",
            Self::CmdGetFriendChallengeLineupCsReq => "CmdGetFriendChallengeLineupCsReq",
            Self::CmdDeleteFriendScRsp => "CmdDeleteFriendScRsp",
            Self::CmdDeleteBlacklistScRsp => "CmdDeleteBlacklistScRsp",
            Self::CmdGetFriendApplyListInfoScRsp => "CmdGetFriendApplyListInfoScRsp",
            Self::CmdGetFriendLoginInfoScRsp => "CmdGetFriendLoginInfoScRsp",
            Self::CmdGetFriendBattleRecordDetailCsReq => {
                "CmdGetFriendBattleRecordDetailCsReq"
            }
            Self::CmdSetAssistScRsp => "CmdSetAssistScRsp",
            Self::CmdCurAssistChangedNotify => "CmdCurAssistChangedNotify",
            Self::CmdGetCurAssistScRsp => "CmdGetCurAssistScRsp",
            Self::CmdSearchPlayerCsReq => "CmdSearchPlayerCsReq",
            Self::CmdGetFriendLoginInfoCsReq => "CmdGetFriendLoginInfoCsReq",
            Self::CmdTakeAssistRewardCsReq => "CmdTakeAssistRewardCsReq",
            Self::CmdGetFriendAssistListCsReq => "CmdGetFriendAssistListCsReq",
            Self::CmdGetFriendChallengeDetailScRsp => "CmdGetFriendChallengeDetailScRsp",
            Self::CmdNewAssistHistoryNotify => "CmdNewAssistHistoryNotify",
            Self::CmdGetPlatformPlayerInfoCsReq => "CmdGetPlatformPlayerInfoCsReq",
            Self::CmdGetFriendApplyListInfoCsReq => "CmdGetFriendApplyListInfoCsReq",
            Self::CmdGetCurAssistCsReq => "CmdGetCurAssistCsReq",
            Self::CmdSetFriendRemarkNameScRsp => "CmdSetFriendRemarkNameScRsp",
            Self::CmdHandleFriendScRsp => "CmdHandleFriendScRsp",
            Self::CmdGetFriendAssistListScRsp => "CmdGetFriendAssistListScRsp",
            Self::CmdGetAssistHistoryScRsp => "CmdGetAssistHistoryScRsp",
            Self::CmdGetFriendChallengeLineupScRsp => "CmdGetFriendChallengeLineupScRsp",
            Self::CmdGetAssistListCsReq => "CmdGetAssistListCsReq",
            Self::CmdReportPlayerCsReq => "CmdReportPlayerCsReq",
            Self::CmdSyncApplyFriendScNotify => "CmdSyncApplyFriendScNotify",
            Self::CmdAddBlacklistScRsp => "CmdAddBlacklistScRsp",
            Self::CmdGetFriendBattleRecordDetailScRsp => {
                "CmdGetFriendBattleRecordDetailScRsp"
            }
            Self::CmdSetFriendRemarkNameCsReq => "CmdSetFriendRemarkNameCsReq",
            Self::CmdHandleFriendCsReq => "CmdHandleFriendCsReq",
            Self::CmdSetFriendMarkScRsp => "CmdSetFriendMarkScRsp",
            Self::CmdSyncDeleteFriendScNotify => "CmdSyncDeleteFriendScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFriendTypeNone" => Some(Self::None),
            "CmdGetFriendRecommendListInfoScRsp" => {
                Some(Self::CmdGetFriendRecommendListInfoScRsp)
            }
            "CmdDeleteFriendCsReq" => Some(Self::CmdDeleteFriendCsReq),
            "CmdApplyFriendScRsp" => Some(Self::CmdApplyFriendScRsp),
            "CmdGetFriendListInfoCsReq" => Some(Self::CmdGetFriendListInfoCsReq),
            "CmdSetForbidOtherApplyFriendScRsp" => {
                Some(Self::CmdSetForbidOtherApplyFriendScRsp)
            }
            "CmdApplyFriendCsReq" => Some(Self::CmdApplyFriendCsReq),
            "CmdSyncHandleFriendScNotify" => Some(Self::CmdSyncHandleFriendScNotify),
            "CmdGetAssistListScRsp" => Some(Self::CmdGetAssistListScRsp),
            "CmdGetFriendDevelopmentInfoScRsp" => {
                Some(Self::CmdGetFriendDevelopmentInfoScRsp)
            }
            "CmdGetPlayerDetailInfoCsReq" => Some(Self::CmdGetPlayerDetailInfoCsReq),
            "CmdGetPlayerDetailInfoScRsp" => Some(Self::CmdGetPlayerDetailInfoScRsp),
            "CmdSetForbidOtherApplyFriendCsReq" => {
                Some(Self::CmdSetForbidOtherApplyFriendCsReq)
            }
            "CmdTakeAssistRewardScRsp" => Some(Self::CmdTakeAssistRewardScRsp),
            "CmdDeleteBlacklistCsReq" => Some(Self::CmdDeleteBlacklistCsReq),
            "CmdGetFriendListInfoScRsp" => Some(Self::CmdGetFriendListInfoScRsp),
            "CmdSetAssistCsReq" => Some(Self::CmdSetAssistCsReq),
            "CmdSyncAddBlacklistScNotify" => Some(Self::CmdSyncAddBlacklistScNotify),
            "CmdAddBlacklistCsReq" => Some(Self::CmdAddBlacklistCsReq),
            "CmdGetAssistHistoryCsReq" => Some(Self::CmdGetAssistHistoryCsReq),
            "CmdGetFriendRecommendListInfoCsReq" => {
                Some(Self::CmdGetFriendRecommendListInfoCsReq)
            }
            "CmdSearchPlayerScRsp" => Some(Self::CmdSearchPlayerScRsp),
            "CmdGetPlatformPlayerInfoScRsp" => Some(Self::CmdGetPlatformPlayerInfoScRsp),
            "CmdSetFriendMarkCsReq" => Some(Self::CmdSetFriendMarkCsReq),
            "CmdGetFriendChallengeDetailCsReq" => {
                Some(Self::CmdGetFriendChallengeDetailCsReq)
            }
            "CmdGetFriendDevelopmentInfoCsReq" => {
                Some(Self::CmdGetFriendDevelopmentInfoCsReq)
            }
            "CmdReportPlayerScRsp" => Some(Self::CmdReportPlayerScRsp),
            "CmdGetFriendChallengeLineupCsReq" => {
                Some(Self::CmdGetFriendChallengeLineupCsReq)
            }
            "CmdDeleteFriendScRsp" => Some(Self::CmdDeleteFriendScRsp),
            "CmdDeleteBlacklistScRsp" => Some(Self::CmdDeleteBlacklistScRsp),
            "CmdGetFriendApplyListInfoScRsp" => {
                Some(Self::CmdGetFriendApplyListInfoScRsp)
            }
            "CmdGetFriendLoginInfoScRsp" => Some(Self::CmdGetFriendLoginInfoScRsp),
            "CmdGetFriendBattleRecordDetailCsReq" => {
                Some(Self::CmdGetFriendBattleRecordDetailCsReq)
            }
            "CmdSetAssistScRsp" => Some(Self::CmdSetAssistScRsp),
            "CmdCurAssistChangedNotify" => Some(Self::CmdCurAssistChangedNotify),
            "CmdGetCurAssistScRsp" => Some(Self::CmdGetCurAssistScRsp),
            "CmdSearchPlayerCsReq" => Some(Self::CmdSearchPlayerCsReq),
            "CmdGetFriendLoginInfoCsReq" => Some(Self::CmdGetFriendLoginInfoCsReq),
            "CmdTakeAssistRewardCsReq" => Some(Self::CmdTakeAssistRewardCsReq),
            "CmdGetFriendAssistListCsReq" => Some(Self::CmdGetFriendAssistListCsReq),
            "CmdGetFriendChallengeDetailScRsp" => {
                Some(Self::CmdGetFriendChallengeDetailScRsp)
            }
            "CmdNewAssistHistoryNotify" => Some(Self::CmdNewAssistHistoryNotify),
            "CmdGetPlatformPlayerInfoCsReq" => Some(Self::CmdGetPlatformPlayerInfoCsReq),
            "CmdGetFriendApplyListInfoCsReq" => {
                Some(Self::CmdGetFriendApplyListInfoCsReq)
            }
            "CmdGetCurAssistCsReq" => Some(Self::CmdGetCurAssistCsReq),
            "CmdSetFriendRemarkNameScRsp" => Some(Self::CmdSetFriendRemarkNameScRsp),
            "CmdHandleFriendScRsp" => Some(Self::CmdHandleFriendScRsp),
            "CmdGetFriendAssistListScRsp" => Some(Self::CmdGetFriendAssistListScRsp),
            "CmdGetAssistHistoryScRsp" => Some(Self::CmdGetAssistHistoryScRsp),
            "CmdGetFriendChallengeLineupScRsp" => {
                Some(Self::CmdGetFriendChallengeLineupScRsp)
            }
            "CmdGetAssistListCsReq" => Some(Self::CmdGetAssistListCsReq),
            "CmdReportPlayerCsReq" => Some(Self::CmdReportPlayerCsReq),
            "CmdSyncApplyFriendScNotify" => Some(Self::CmdSyncApplyFriendScNotify),
            "CmdAddBlacklistScRsp" => Some(Self::CmdAddBlacklistScRsp),
            "CmdGetFriendBattleRecordDetailScRsp" => {
                Some(Self::CmdGetFriendBattleRecordDetailScRsp)
            }
            "CmdSetFriendRemarkNameCsReq" => Some(Self::CmdSetFriendRemarkNameCsReq),
            "CmdHandleFriendCsReq" => Some(Self::CmdHandleFriendCsReq),
            "CmdSetFriendMarkScRsp" => Some(Self::CmdSetFriendMarkScRsp),
            "CmdSyncDeleteFriendScNotify" => Some(Self::CmdSyncDeleteFriendScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendOnlineStatus {
    Offline = 0,
    Online = 1,
}
impl FriendOnlineStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Offline => "FRIEND_ONLINE_STATUS_OFFLINE",
            Self::Online => "FRIEND_ONLINE_STATUS_ONLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_ONLINE_STATUS_OFFLINE" => Some(Self::Offline),
            "FRIEND_ONLINE_STATUS_ONLINE" => Some(Self::Online),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendApplySource {
    None = 0,
    Search = 1,
    Recommend = 2,
    Assist = 3,
    RecommendAssist = 4,
    PsnFriend = 5,
    AssistReward = 6,
}
impl FriendApplySource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "FRIEND_APPLY_SOURCE_NONE",
            Self::Search => "FRIEND_APPLY_SOURCE_SEARCH",
            Self::Recommend => "FRIEND_APPLY_SOURCE_RECOMMEND",
            Self::Assist => "FRIEND_APPLY_SOURCE_ASSIST",
            Self::RecommendAssist => "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST",
            Self::PsnFriend => "FRIEND_APPLY_SOURCE_PSN_FRIEND",
            Self::AssistReward => "FRIEND_APPLY_SOURCE_ASSIST_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_APPLY_SOURCE_NONE" => Some(Self::None),
            "FRIEND_APPLY_SOURCE_SEARCH" => Some(Self::Search),
            "FRIEND_APPLY_SOURCE_RECOMMEND" => Some(Self::Recommend),
            "FRIEND_APPLY_SOURCE_ASSIST" => Some(Self::Assist),
            "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST" => Some(Self::RecommendAssist),
            "FRIEND_APPLY_SOURCE_PSN_FRIEND" => Some(Self::PsnFriend),
            "FRIEND_APPLY_SOURCE_ASSIST_REWARD" => Some(Self::AssistReward),
            _ => None,
        }
    }
}
/// NLNNAAJLLEP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdGachaType {
    None = 0,
    CmdGetGachaInfoScRsp = 1920,
    CmdGetGachaCeilingScRsp = 1953,
    CmdExchangeGachaCeilingScRsp = 1937,
    CmdDoGachaCsReq = 1903,
    CmdExchangeGachaCeilingCsReq = 1934,
    CmdDoGachaScRsp = 1946,
    CmdGetGachaInfoCsReq = 1959,
    CmdGetGachaCeilingCsReq = 1939,
}
impl CmdGachaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdGachaTypeNone",
            Self::CmdGetGachaInfoScRsp => "CmdGetGachaInfoScRsp",
            Self::CmdGetGachaCeilingScRsp => "CmdGetGachaCeilingScRsp",
            Self::CmdExchangeGachaCeilingScRsp => "CmdExchangeGachaCeilingScRsp",
            Self::CmdDoGachaCsReq => "CmdDoGachaCsReq",
            Self::CmdExchangeGachaCeilingCsReq => "CmdExchangeGachaCeilingCsReq",
            Self::CmdDoGachaScRsp => "CmdDoGachaScRsp",
            Self::CmdGetGachaInfoCsReq => "CmdGetGachaInfoCsReq",
            Self::CmdGetGachaCeilingCsReq => "CmdGetGachaCeilingCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdGachaTypeNone" => Some(Self::None),
            "CmdGetGachaInfoScRsp" => Some(Self::CmdGetGachaInfoScRsp),
            "CmdGetGachaCeilingScRsp" => Some(Self::CmdGetGachaCeilingScRsp),
            "CmdExchangeGachaCeilingScRsp" => Some(Self::CmdExchangeGachaCeilingScRsp),
            "CmdDoGachaCsReq" => Some(Self::CmdDoGachaCsReq),
            "CmdExchangeGachaCeilingCsReq" => Some(Self::CmdExchangeGachaCeilingCsReq),
            "CmdDoGachaScRsp" => Some(Self::CmdDoGachaScRsp),
            "CmdGetGachaInfoCsReq" => Some(Self::CmdGetGachaInfoCsReq),
            "CmdGetGachaCeilingCsReq" => Some(Self::CmdGetGachaCeilingCsReq),
            _ => None,
        }
    }
}
/// DPGPNGMJNHD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeartdialType {
    None = 0,
    CmdChangeScriptEmotionCsReq = 6303,
    CmdChangeScriptEmotionScRsp = 6346,
    CmdGetHeartDialInfoCsReq = 6359,
    CmdFinishEmotionDialoguePerformanceScRsp = 6337,
    CmdHeartDialScriptChangeScNotify = 6380,
    CmdHeartDialTraceScriptCsReq = 6316,
    CmdSubmitEmotionItemCsReq = 6339,
    CmdSubmitEmotionItemScRsp = 6353,
    CmdHeartDialTraceScriptScRsp = 6347,
    CmdFinishEmotionDialoguePerformanceCsReq = 6334,
    CmdGetHeartDialInfoScRsp = 6320,
}
impl CmdHeartdialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeartdialTypeNone",
            Self::CmdChangeScriptEmotionCsReq => "CmdChangeScriptEmotionCsReq",
            Self::CmdChangeScriptEmotionScRsp => "CmdChangeScriptEmotionScRsp",
            Self::CmdGetHeartDialInfoCsReq => "CmdGetHeartDialInfoCsReq",
            Self::CmdFinishEmotionDialoguePerformanceScRsp => {
                "CmdFinishEmotionDialoguePerformanceScRsp"
            }
            Self::CmdHeartDialScriptChangeScNotify => "CmdHeartDialScriptChangeScNotify",
            Self::CmdHeartDialTraceScriptCsReq => "CmdHeartDialTraceScriptCsReq",
            Self::CmdSubmitEmotionItemCsReq => "CmdSubmitEmotionItemCsReq",
            Self::CmdSubmitEmotionItemScRsp => "CmdSubmitEmotionItemScRsp",
            Self::CmdHeartDialTraceScriptScRsp => "CmdHeartDialTraceScriptScRsp",
            Self::CmdFinishEmotionDialoguePerformanceCsReq => {
                "CmdFinishEmotionDialoguePerformanceCsReq"
            }
            Self::CmdGetHeartDialInfoScRsp => "CmdGetHeartDialInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeartdialTypeNone" => Some(Self::None),
            "CmdChangeScriptEmotionCsReq" => Some(Self::CmdChangeScriptEmotionCsReq),
            "CmdChangeScriptEmotionScRsp" => Some(Self::CmdChangeScriptEmotionScRsp),
            "CmdGetHeartDialInfoCsReq" => Some(Self::CmdGetHeartDialInfoCsReq),
            "CmdFinishEmotionDialoguePerformanceScRsp" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceScRsp)
            }
            "CmdHeartDialScriptChangeScNotify" => {
                Some(Self::CmdHeartDialScriptChangeScNotify)
            }
            "CmdHeartDialTraceScriptCsReq" => Some(Self::CmdHeartDialTraceScriptCsReq),
            "CmdSubmitEmotionItemCsReq" => Some(Self::CmdSubmitEmotionItemCsReq),
            "CmdSubmitEmotionItemScRsp" => Some(Self::CmdSubmitEmotionItemScRsp),
            "CmdHeartDialTraceScriptScRsp" => Some(Self::CmdHeartDialTraceScriptScRsp),
            "CmdFinishEmotionDialoguePerformanceCsReq" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceCsReq)
            }
            "CmdGetHeartDialInfoScRsp" => Some(Self::CmdGetHeartDialInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kcdhbdlnghj {
    HeartDialEmotionTypePeace = 0,
    HeartDialEmotionTypeAnger = 1,
    HeartDialEmotionTypeHappy = 2,
    HeartDialEmotionTypeSad = 3,
}
impl Kcdhbdlnghj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialEmotionTypePeace => "HEART_DIAL_EMOTION_TYPE_PEACE",
            Self::HeartDialEmotionTypeAnger => "HEART_DIAL_EMOTION_TYPE_ANGER",
            Self::HeartDialEmotionTypeHappy => "HEART_DIAL_EMOTION_TYPE_HAPPY",
            Self::HeartDialEmotionTypeSad => "HEART_DIAL_EMOTION_TYPE_SAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_EMOTION_TYPE_PEACE" => Some(Self::HeartDialEmotionTypePeace),
            "HEART_DIAL_EMOTION_TYPE_ANGER" => Some(Self::HeartDialEmotionTypeAnger),
            "HEART_DIAL_EMOTION_TYPE_HAPPY" => Some(Self::HeartDialEmotionTypeHappy),
            "HEART_DIAL_EMOTION_TYPE_SAD" => Some(Self::HeartDialEmotionTypeSad),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cponfeilmda {
    HeartDialStepTypeMissing = 0,
    HeartDialStepTypeFull = 1,
    HeartDialStepTypeLock = 2,
    HeartDialStepTypeUnlock = 3,
    HeartDialStepTypeNormal = 4,
    HeartDialStepTypeControl = 5,
}
impl Cponfeilmda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialStepTypeMissing => "HEART_DIAL_STEP_TYPE_MISSING",
            Self::HeartDialStepTypeFull => "HEART_DIAL_STEP_TYPE_FULL",
            Self::HeartDialStepTypeLock => "HEART_DIAL_STEP_TYPE_LOCK",
            Self::HeartDialStepTypeUnlock => "HEART_DIAL_STEP_TYPE_UNLOCK",
            Self::HeartDialStepTypeNormal => "HEART_DIAL_STEP_TYPE_NORMAL",
            Self::HeartDialStepTypeControl => "HEART_DIAL_STEP_TYPE_CONTROL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_STEP_TYPE_MISSING" => Some(Self::HeartDialStepTypeMissing),
            "HEART_DIAL_STEP_TYPE_FULL" => Some(Self::HeartDialStepTypeFull),
            "HEART_DIAL_STEP_TYPE_LOCK" => Some(Self::HeartDialStepTypeLock),
            "HEART_DIAL_STEP_TYPE_UNLOCK" => Some(Self::HeartDialStepTypeUnlock),
            "HEART_DIAL_STEP_TYPE_NORMAL" => Some(Self::HeartDialStepTypeNormal),
            "HEART_DIAL_STEP_TYPE_CONTROL" => Some(Self::HeartDialStepTypeControl),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dbekldhfdcg {
    HeartDialUnlockStatusLock = 0,
    HeartDialUnlockStatusUnlockSingle = 1,
    HeartDialUnlockStatusUnlockAll = 2,
}
impl Dbekldhfdcg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::HeartDialUnlockStatusLock => "HEART_DIAL_UNLOCK_STATUS_LOCK",
            Self::HeartDialUnlockStatusUnlockSingle => {
                "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE"
            }
            Self::HeartDialUnlockStatusUnlockAll => "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_UNLOCK_STATUS_LOCK" => Some(Self::HeartDialUnlockStatusLock),
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE" => {
                Some(Self::HeartDialUnlockStatusUnlockSingle)
            }
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL" => {
                Some(Self::HeartDialUnlockStatusUnlockAll)
            }
            _ => None,
        }
    }
}
/// LLGNGNIEIOM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdHeliobusType {
    None = 0,
    CmdHeliobusActivityDataCsReq = 5859,
    CmdHeliobusSnsLikeScRsp = 5837,
    CmdHeliobusSnsUpdateScNotify = 5847,
    CmdHeliobusChallengeUpdateScNotify = 5873,
    CmdHeliobusSelectSkillCsReq = 5890,
    CmdHeliobusUpgradeLevelCsReq = 5830,
    CmdHeliobusUpgradeLevelScRsp = 5875,
    CmdHeliobusSnsPostScRsp = 5853,
    CmdHeliobusStartRaidCsReq = 5833,
    CmdHeliobusEnterBattleScRsp = 5829,
    CmdHeliobusUnlockSkillScNotify = 5848,
    CmdHeliobusStartRaidScRsp = 5851,
    CmdHeliobusSnsCommentScRsp = 5816,
    CmdHeliobusInfoChangedScNotify = 5874,
    CmdHeliobusSnsLikeCsReq = 5834,
    CmdHeliobusActivityDataScRsp = 5820,
    CmdHeliobusSelectSkillScRsp = 5879,
    CmdHeliobusSnsPostCsReq = 5839,
    CmdHeliobusLineupUpdateScNotify = 5883,
    CmdHeliobusSnsReadCsReq = 5803,
    CmdHeliobusEnterBattleCsReq = 5825,
    CmdHeliobusSnsReadScRsp = 5846,
    CmdHeliobusSnsCommentCsReq = 5880,
}
impl CmdHeliobusType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdHeliobusTypeNone",
            Self::CmdHeliobusActivityDataCsReq => "CmdHeliobusActivityDataCsReq",
            Self::CmdHeliobusSnsLikeScRsp => "CmdHeliobusSnsLikeScRsp",
            Self::CmdHeliobusSnsUpdateScNotify => "CmdHeliobusSnsUpdateScNotify",
            Self::CmdHeliobusChallengeUpdateScNotify => {
                "CmdHeliobusChallengeUpdateScNotify"
            }
            Self::CmdHeliobusSelectSkillCsReq => "CmdHeliobusSelectSkillCsReq",
            Self::CmdHeliobusUpgradeLevelCsReq => "CmdHeliobusUpgradeLevelCsReq",
            Self::CmdHeliobusUpgradeLevelScRsp => "CmdHeliobusUpgradeLevelScRsp",
            Self::CmdHeliobusSnsPostScRsp => "CmdHeliobusSnsPostScRsp",
            Self::CmdHeliobusStartRaidCsReq => "CmdHeliobusStartRaidCsReq",
            Self::CmdHeliobusEnterBattleScRsp => "CmdHeliobusEnterBattleScRsp",
            Self::CmdHeliobusUnlockSkillScNotify => "CmdHeliobusUnlockSkillScNotify",
            Self::CmdHeliobusStartRaidScRsp => "CmdHeliobusStartRaidScRsp",
            Self::CmdHeliobusSnsCommentScRsp => "CmdHeliobusSnsCommentScRsp",
            Self::CmdHeliobusInfoChangedScNotify => "CmdHeliobusInfoChangedScNotify",
            Self::CmdHeliobusSnsLikeCsReq => "CmdHeliobusSnsLikeCsReq",
            Self::CmdHeliobusActivityDataScRsp => "CmdHeliobusActivityDataScRsp",
            Self::CmdHeliobusSelectSkillScRsp => "CmdHeliobusSelectSkillScRsp",
            Self::CmdHeliobusSnsPostCsReq => "CmdHeliobusSnsPostCsReq",
            Self::CmdHeliobusLineupUpdateScNotify => "CmdHeliobusLineupUpdateScNotify",
            Self::CmdHeliobusSnsReadCsReq => "CmdHeliobusSnsReadCsReq",
            Self::CmdHeliobusEnterBattleCsReq => "CmdHeliobusEnterBattleCsReq",
            Self::CmdHeliobusSnsReadScRsp => "CmdHeliobusSnsReadScRsp",
            Self::CmdHeliobusSnsCommentCsReq => "CmdHeliobusSnsCommentCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeliobusTypeNone" => Some(Self::None),
            "CmdHeliobusActivityDataCsReq" => Some(Self::CmdHeliobusActivityDataCsReq),
            "CmdHeliobusSnsLikeScRsp" => Some(Self::CmdHeliobusSnsLikeScRsp),
            "CmdHeliobusSnsUpdateScNotify" => Some(Self::CmdHeliobusSnsUpdateScNotify),
            "CmdHeliobusChallengeUpdateScNotify" => {
                Some(Self::CmdHeliobusChallengeUpdateScNotify)
            }
            "CmdHeliobusSelectSkillCsReq" => Some(Self::CmdHeliobusSelectSkillCsReq),
            "CmdHeliobusUpgradeLevelCsReq" => Some(Self::CmdHeliobusUpgradeLevelCsReq),
            "CmdHeliobusUpgradeLevelScRsp" => Some(Self::CmdHeliobusUpgradeLevelScRsp),
            "CmdHeliobusSnsPostScRsp" => Some(Self::CmdHeliobusSnsPostScRsp),
            "CmdHeliobusStartRaidCsReq" => Some(Self::CmdHeliobusStartRaidCsReq),
            "CmdHeliobusEnterBattleScRsp" => Some(Self::CmdHeliobusEnterBattleScRsp),
            "CmdHeliobusUnlockSkillScNotify" => {
                Some(Self::CmdHeliobusUnlockSkillScNotify)
            }
            "CmdHeliobusStartRaidScRsp" => Some(Self::CmdHeliobusStartRaidScRsp),
            "CmdHeliobusSnsCommentScRsp" => Some(Self::CmdHeliobusSnsCommentScRsp),
            "CmdHeliobusInfoChangedScNotify" => {
                Some(Self::CmdHeliobusInfoChangedScNotify)
            }
            "CmdHeliobusSnsLikeCsReq" => Some(Self::CmdHeliobusSnsLikeCsReq),
            "CmdHeliobusActivityDataScRsp" => Some(Self::CmdHeliobusActivityDataScRsp),
            "CmdHeliobusSelectSkillScRsp" => Some(Self::CmdHeliobusSelectSkillScRsp),
            "CmdHeliobusSnsPostCsReq" => Some(Self::CmdHeliobusSnsPostCsReq),
            "CmdHeliobusLineupUpdateScNotify" => {
                Some(Self::CmdHeliobusLineupUpdateScNotify)
            }
            "CmdHeliobusSnsReadCsReq" => Some(Self::CmdHeliobusSnsReadCsReq),
            "CmdHeliobusEnterBattleCsReq" => Some(Self::CmdHeliobusEnterBattleCsReq),
            "CmdHeliobusSnsReadScRsp" => Some(Self::CmdHeliobusSnsReadScRsp),
            "CmdHeliobusSnsCommentCsReq" => Some(Self::CmdHeliobusSnsCommentCsReq),
            _ => None,
        }
    }
}
/// LBCLEINDGGO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdItemType {
    None = 0,
    CmdExpUpEquipmentCsReq = 547,
    CmdAddRelicFilterPlanCsReq = 578,
    CmdRankUpEquipmentCsReq = 580,
    CmdSyncTurnFoodNotify = 591,
    CmdAddEquipmentScNotify = 599,
    CmdSetTurnFoodSwitchScRsp = 588,
    CmdPromoteEquipmentScRsp = 546,
    CmdGetRelicFilterPlanScRsp = 556,
    CmdMarkRelicFilterPlanCsReq = 596,
    CmdComposeSelectedRelicCsReq = 573,
    CmdGetRecyleTimeCsReq = 509,
    CmdDestroyItemCsReq = 510,
    CmdGetRelicFilterPlanCsReq = 566,
    CmdGetRecyleTimeScRsp = 593,
    CmdExchangeHcoinScRsp = 551,
    CmdUseItemScRsp = 537,
    CmdRelicFilterPlanClearNameScNotify = 571,
    CmdSellItemCsReq = 561,
    CmdDeleteRelicFilterPlanCsReq = 560,
    CmdAddRelicFilterPlanScRsp = 572,
    CmdRechargeSuccNotify = 529,
    CmdLockEquipmentScRsp = 553,
    CmdGetMarkItemListCsReq = 536,
    CmdGeneralVirtualItemDataNotify = 543,
    CmdMarkItemCsReq = 526,
    CmdMarkRelicFilterPlanScRsp = 531,
    CmdModifyRelicFilterPlanCsReq = 524,
    CmdComposeLimitNumUpdateNotify = 594,
    CmdGetBagCsReq = 559,
    CmdCancelMarkItemNotify = 577,
    CmdLockRelicScRsp = 519,
    CmdGetBagScRsp = 520,
    CmdDiscardRelicScRsp = 514,
    CmdDiscardRelicCsReq = 563,
    CmdComposeLimitNumCompleteNotify = 564,
    CmdRankUpEquipmentScRsp = 516,
    CmdSetTurnFoodSwitchCsReq = 504,
    CmdMarkItemScRsp = 513,
    CmdComposeItemScRsp = 575,
    CmdModifyRelicFilterPlanScRsp = 512,
    CmdDestroyItemScRsp = 570,
    CmdExpUpRelicScRsp = 590,
    CmdLockRelicCsReq = 579,
    CmdComposeItemCsReq = 530,
    CmdPromoteEquipmentCsReq = 503,
    CmdGetMarkItemListScRsp = 565,
    CmdUseItemCsReq = 534,
    CmdDeleteRelicFilterPlanScRsp = 532,
    CmdComposeSelectedRelicScRsp = 583,
    CmdExpUpRelicCsReq = 548,
    CmdExpUpEquipmentScRsp = 574,
    CmdLockEquipmentCsReq = 539,
    CmdSellItemScRsp = 525,
    CmdExchangeHcoinCsReq = 533,
}
impl CmdItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdItemTypeNone",
            Self::CmdExpUpEquipmentCsReq => "CmdExpUpEquipmentCsReq",
            Self::CmdAddRelicFilterPlanCsReq => "CmdAddRelicFilterPlanCsReq",
            Self::CmdRankUpEquipmentCsReq => "CmdRankUpEquipmentCsReq",
            Self::CmdSyncTurnFoodNotify => "CmdSyncTurnFoodNotify",
            Self::CmdAddEquipmentScNotify => "CmdAddEquipmentScNotify",
            Self::CmdSetTurnFoodSwitchScRsp => "CmdSetTurnFoodSwitchScRsp",
            Self::CmdPromoteEquipmentScRsp => "CmdPromoteEquipmentScRsp",
            Self::CmdGetRelicFilterPlanScRsp => "CmdGetRelicFilterPlanScRsp",
            Self::CmdMarkRelicFilterPlanCsReq => "CmdMarkRelicFilterPlanCsReq",
            Self::CmdComposeSelectedRelicCsReq => "CmdComposeSelectedRelicCsReq",
            Self::CmdGetRecyleTimeCsReq => "CmdGetRecyleTimeCsReq",
            Self::CmdDestroyItemCsReq => "CmdDestroyItemCsReq",
            Self::CmdGetRelicFilterPlanCsReq => "CmdGetRelicFilterPlanCsReq",
            Self::CmdGetRecyleTimeScRsp => "CmdGetRecyleTimeScRsp",
            Self::CmdExchangeHcoinScRsp => "CmdExchangeHcoinScRsp",
            Self::CmdUseItemScRsp => "CmdUseItemScRsp",
            Self::CmdRelicFilterPlanClearNameScNotify => {
                "CmdRelicFilterPlanClearNameScNotify"
            }
            Self::CmdSellItemCsReq => "CmdSellItemCsReq",
            Self::CmdDeleteRelicFilterPlanCsReq => "CmdDeleteRelicFilterPlanCsReq",
            Self::CmdAddRelicFilterPlanScRsp => "CmdAddRelicFilterPlanScRsp",
            Self::CmdRechargeSuccNotify => "CmdRechargeSuccNotify",
            Self::CmdLockEquipmentScRsp => "CmdLockEquipmentScRsp",
            Self::CmdGetMarkItemListCsReq => "CmdGetMarkItemListCsReq",
            Self::CmdGeneralVirtualItemDataNotify => "CmdGeneralVirtualItemDataNotify",
            Self::CmdMarkItemCsReq => "CmdMarkItemCsReq",
            Self::CmdMarkRelicFilterPlanScRsp => "CmdMarkRelicFilterPlanScRsp",
            Self::CmdModifyRelicFilterPlanCsReq => "CmdModifyRelicFilterPlanCsReq",
            Self::CmdComposeLimitNumUpdateNotify => "CmdComposeLimitNumUpdateNotify",
            Self::CmdGetBagCsReq => "CmdGetBagCsReq",
            Self::CmdCancelMarkItemNotify => "CmdCancelMarkItemNotify",
            Self::CmdLockRelicScRsp => "CmdLockRelicScRsp",
            Self::CmdGetBagScRsp => "CmdGetBagScRsp",
            Self::CmdDiscardRelicScRsp => "CmdDiscardRelicScRsp",
            Self::CmdDiscardRelicCsReq => "CmdDiscardRelicCsReq",
            Self::CmdComposeLimitNumCompleteNotify => "CmdComposeLimitNumCompleteNotify",
            Self::CmdRankUpEquipmentScRsp => "CmdRankUpEquipmentScRsp",
            Self::CmdSetTurnFoodSwitchCsReq => "CmdSetTurnFoodSwitchCsReq",
            Self::CmdMarkItemScRsp => "CmdMarkItemScRsp",
            Self::CmdComposeItemScRsp => "CmdComposeItemScRsp",
            Self::CmdModifyRelicFilterPlanScRsp => "CmdModifyRelicFilterPlanScRsp",
            Self::CmdDestroyItemScRsp => "CmdDestroyItemScRsp",
            Self::CmdExpUpRelicScRsp => "CmdExpUpRelicScRsp",
            Self::CmdLockRelicCsReq => "CmdLockRelicCsReq",
            Self::CmdComposeItemCsReq => "CmdComposeItemCsReq",
            Self::CmdPromoteEquipmentCsReq => "CmdPromoteEquipmentCsReq",
            Self::CmdGetMarkItemListScRsp => "CmdGetMarkItemListScRsp",
            Self::CmdUseItemCsReq => "CmdUseItemCsReq",
            Self::CmdDeleteRelicFilterPlanScRsp => "CmdDeleteRelicFilterPlanScRsp",
            Self::CmdComposeSelectedRelicScRsp => "CmdComposeSelectedRelicScRsp",
            Self::CmdExpUpRelicCsReq => "CmdExpUpRelicCsReq",
            Self::CmdExpUpEquipmentScRsp => "CmdExpUpEquipmentScRsp",
            Self::CmdLockEquipmentCsReq => "CmdLockEquipmentCsReq",
            Self::CmdSellItemScRsp => "CmdSellItemScRsp",
            Self::CmdExchangeHcoinCsReq => "CmdExchangeHcoinCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdItemTypeNone" => Some(Self::None),
            "CmdExpUpEquipmentCsReq" => Some(Self::CmdExpUpEquipmentCsReq),
            "CmdAddRelicFilterPlanCsReq" => Some(Self::CmdAddRelicFilterPlanCsReq),
            "CmdRankUpEquipmentCsReq" => Some(Self::CmdRankUpEquipmentCsReq),
            "CmdSyncTurnFoodNotify" => Some(Self::CmdSyncTurnFoodNotify),
            "CmdAddEquipmentScNotify" => Some(Self::CmdAddEquipmentScNotify),
            "CmdSetTurnFoodSwitchScRsp" => Some(Self::CmdSetTurnFoodSwitchScRsp),
            "CmdPromoteEquipmentScRsp" => Some(Self::CmdPromoteEquipmentScRsp),
            "CmdGetRelicFilterPlanScRsp" => Some(Self::CmdGetRelicFilterPlanScRsp),
            "CmdMarkRelicFilterPlanCsReq" => Some(Self::CmdMarkRelicFilterPlanCsReq),
            "CmdComposeSelectedRelicCsReq" => Some(Self::CmdComposeSelectedRelicCsReq),
            "CmdGetRecyleTimeCsReq" => Some(Self::CmdGetRecyleTimeCsReq),
            "CmdDestroyItemCsReq" => Some(Self::CmdDestroyItemCsReq),
            "CmdGetRelicFilterPlanCsReq" => Some(Self::CmdGetRelicFilterPlanCsReq),
            "CmdGetRecyleTimeScRsp" => Some(Self::CmdGetRecyleTimeScRsp),
            "CmdExchangeHcoinScRsp" => Some(Self::CmdExchangeHcoinScRsp),
            "CmdUseItemScRsp" => Some(Self::CmdUseItemScRsp),
            "CmdRelicFilterPlanClearNameScNotify" => {
                Some(Self::CmdRelicFilterPlanClearNameScNotify)
            }
            "CmdSellItemCsReq" => Some(Self::CmdSellItemCsReq),
            "CmdDeleteRelicFilterPlanCsReq" => Some(Self::CmdDeleteRelicFilterPlanCsReq),
            "CmdAddRelicFilterPlanScRsp" => Some(Self::CmdAddRelicFilterPlanScRsp),
            "CmdRechargeSuccNotify" => Some(Self::CmdRechargeSuccNotify),
            "CmdLockEquipmentScRsp" => Some(Self::CmdLockEquipmentScRsp),
            "CmdGetMarkItemListCsReq" => Some(Self::CmdGetMarkItemListCsReq),
            "CmdGeneralVirtualItemDataNotify" => {
                Some(Self::CmdGeneralVirtualItemDataNotify)
            }
            "CmdMarkItemCsReq" => Some(Self::CmdMarkItemCsReq),
            "CmdMarkRelicFilterPlanScRsp" => Some(Self::CmdMarkRelicFilterPlanScRsp),
            "CmdModifyRelicFilterPlanCsReq" => Some(Self::CmdModifyRelicFilterPlanCsReq),
            "CmdComposeLimitNumUpdateNotify" => {
                Some(Self::CmdComposeLimitNumUpdateNotify)
            }
            "CmdGetBagCsReq" => Some(Self::CmdGetBagCsReq),
            "CmdCancelMarkItemNotify" => Some(Self::CmdCancelMarkItemNotify),
            "CmdLockRelicScRsp" => Some(Self::CmdLockRelicScRsp),
            "CmdGetBagScRsp" => Some(Self::CmdGetBagScRsp),
            "CmdDiscardRelicScRsp" => Some(Self::CmdDiscardRelicScRsp),
            "CmdDiscardRelicCsReq" => Some(Self::CmdDiscardRelicCsReq),
            "CmdComposeLimitNumCompleteNotify" => {
                Some(Self::CmdComposeLimitNumCompleteNotify)
            }
            "CmdRankUpEquipmentScRsp" => Some(Self::CmdRankUpEquipmentScRsp),
            "CmdSetTurnFoodSwitchCsReq" => Some(Self::CmdSetTurnFoodSwitchCsReq),
            "CmdMarkItemScRsp" => Some(Self::CmdMarkItemScRsp),
            "CmdComposeItemScRsp" => Some(Self::CmdComposeItemScRsp),
            "CmdModifyRelicFilterPlanScRsp" => Some(Self::CmdModifyRelicFilterPlanScRsp),
            "CmdDestroyItemScRsp" => Some(Self::CmdDestroyItemScRsp),
            "CmdExpUpRelicScRsp" => Some(Self::CmdExpUpRelicScRsp),
            "CmdLockRelicCsReq" => Some(Self::CmdLockRelicCsReq),
            "CmdComposeItemCsReq" => Some(Self::CmdComposeItemCsReq),
            "CmdPromoteEquipmentCsReq" => Some(Self::CmdPromoteEquipmentCsReq),
            "CmdGetMarkItemListScRsp" => Some(Self::CmdGetMarkItemListScRsp),
            "CmdUseItemCsReq" => Some(Self::CmdUseItemCsReq),
            "CmdDeleteRelicFilterPlanScRsp" => Some(Self::CmdDeleteRelicFilterPlanScRsp),
            "CmdComposeSelectedRelicScRsp" => Some(Self::CmdComposeSelectedRelicScRsp),
            "CmdExpUpRelicCsReq" => Some(Self::CmdExpUpRelicCsReq),
            "CmdExpUpEquipmentScRsp" => Some(Self::CmdExpUpEquipmentScRsp),
            "CmdLockEquipmentCsReq" => Some(Self::CmdLockEquipmentCsReq),
            "CmdSellItemScRsp" => Some(Self::CmdSellItemScRsp),
            "CmdExchangeHcoinCsReq" => Some(Self::CmdExchangeHcoinCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TurnFoodSwitch {
    None = 0,
    Attack = 1,
    Define = 2,
}
impl TurnFoodSwitch {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "TURN_FOOD_SWITCH_NONE",
            Self::Attack => "TURN_FOOD_SWITCH_ATTACK",
            Self::Define => "TURN_FOOD_SWITCH_DEFINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TURN_FOOD_SWITCH_NONE" => Some(Self::None),
            "TURN_FOOD_SWITCH_ATTACK" => Some(Self::Attack),
            "TURN_FOOD_SWITCH_DEFINE" => Some(Self::Define),
            _ => None,
        }
    }
}
/// JCNLGGOFPHH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdJukeboxType {
    None = 0,
    CmdPlayBackGroundMusicCsReq = 3103,
    CmdTrialBackGroundMusicScRsp = 3137,
    CmdUnlockBackGroundMusicCsReq = 3139,
    CmdTrialBackGroundMusicCsReq = 3134,
    CmdGetJukeboxDataScRsp = 3120,
    CmdPlayBackGroundMusicScRsp = 3146,
    CmdGetJukeboxDataCsReq = 3159,
    CmdUnlockBackGroundMusicScRsp = 3153,
}
impl CmdJukeboxType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdJukeboxTypeNone",
            Self::CmdPlayBackGroundMusicCsReq => "CmdPlayBackGroundMusicCsReq",
            Self::CmdTrialBackGroundMusicScRsp => "CmdTrialBackGroundMusicScRsp",
            Self::CmdUnlockBackGroundMusicCsReq => "CmdUnlockBackGroundMusicCsReq",
            Self::CmdTrialBackGroundMusicCsReq => "CmdTrialBackGroundMusicCsReq",
            Self::CmdGetJukeboxDataScRsp => "CmdGetJukeboxDataScRsp",
            Self::CmdPlayBackGroundMusicScRsp => "CmdPlayBackGroundMusicScRsp",
            Self::CmdGetJukeboxDataCsReq => "CmdGetJukeboxDataCsReq",
            Self::CmdUnlockBackGroundMusicScRsp => "CmdUnlockBackGroundMusicScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdJukeboxTypeNone" => Some(Self::None),
            "CmdPlayBackGroundMusicCsReq" => Some(Self::CmdPlayBackGroundMusicCsReq),
            "CmdTrialBackGroundMusicScRsp" => Some(Self::CmdTrialBackGroundMusicScRsp),
            "CmdUnlockBackGroundMusicCsReq" => Some(Self::CmdUnlockBackGroundMusicCsReq),
            "CmdTrialBackGroundMusicCsReq" => Some(Self::CmdTrialBackGroundMusicCsReq),
            "CmdGetJukeboxDataScRsp" => Some(Self::CmdGetJukeboxDataScRsp),
            "CmdPlayBackGroundMusicScRsp" => Some(Self::CmdPlayBackGroundMusicScRsp),
            "CmdGetJukeboxDataCsReq" => Some(Self::CmdGetJukeboxDataCsReq),
            "CmdUnlockBackGroundMusicScRsp" => Some(Self::CmdUnlockBackGroundMusicScRsp),
            _ => None,
        }
    }
}
/// ODEDKOOCAOM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLineupType {
    None = 0,
    CmdReplaceLineupCsReq = 751,
    CmdSwitchLineupIndexScRsp = 779,
    CmdGetStageLineupCsReq = 759,
    CmdSwitchLineupIndexCsReq = 790,
    CmdSyncLineupNotify = 747,
    CmdQuitLineupScRsp = 737,
    CmdJoinLineupScRsp = 753,
    CmdGetAllLineupDataScRsp = 729,
    CmdGetAllLineupDataCsReq = 725,
    CmdJoinLineupCsReq = 739,
    CmdGetLineupAvatarDataScRsp = 730,
    CmdSwapLineupScRsp = 716,
    CmdChangeLineupLeaderScRsp = 748,
    CmdGetStageLineupScRsp = 720,
    CmdGetCurLineupDataCsReq = 703,
    CmdQuitLineupCsReq = 734,
    CmdGetCurLineupDataScRsp = 746,
    CmdReplaceLineupScRsp = 773,
    CmdVirtualLineupTrialAvatarChangeScNotify = 799,
    CmdSwapLineupCsReq = 780,
    CmdSetLineupNameCsReq = 719,
    CmdGetLineupAvatarDataCsReq = 774,
    CmdSetLineupNameScRsp = 761,
    CmdChangeLineupLeaderCsReq = 775,
    CmdExtraLineupDestroyNotify = 783,
    CmdVirtualLineupDestroyNotify = 733,
}
impl CmdLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLineupTypeNone",
            Self::CmdReplaceLineupCsReq => "CmdReplaceLineupCsReq",
            Self::CmdSwitchLineupIndexScRsp => "CmdSwitchLineupIndexScRsp",
            Self::CmdGetStageLineupCsReq => "CmdGetStageLineupCsReq",
            Self::CmdSwitchLineupIndexCsReq => "CmdSwitchLineupIndexCsReq",
            Self::CmdSyncLineupNotify => "CmdSyncLineupNotify",
            Self::CmdQuitLineupScRsp => "CmdQuitLineupScRsp",
            Self::CmdJoinLineupScRsp => "CmdJoinLineupScRsp",
            Self::CmdGetAllLineupDataScRsp => "CmdGetAllLineupDataScRsp",
            Self::CmdGetAllLineupDataCsReq => "CmdGetAllLineupDataCsReq",
            Self::CmdJoinLineupCsReq => "CmdJoinLineupCsReq",
            Self::CmdGetLineupAvatarDataScRsp => "CmdGetLineupAvatarDataScRsp",
            Self::CmdSwapLineupScRsp => "CmdSwapLineupScRsp",
            Self::CmdChangeLineupLeaderScRsp => "CmdChangeLineupLeaderScRsp",
            Self::CmdGetStageLineupScRsp => "CmdGetStageLineupScRsp",
            Self::CmdGetCurLineupDataCsReq => "CmdGetCurLineupDataCsReq",
            Self::CmdQuitLineupCsReq => "CmdQuitLineupCsReq",
            Self::CmdGetCurLineupDataScRsp => "CmdGetCurLineupDataScRsp",
            Self::CmdReplaceLineupScRsp => "CmdReplaceLineupScRsp",
            Self::CmdVirtualLineupTrialAvatarChangeScNotify => {
                "CmdVirtualLineupTrialAvatarChangeScNotify"
            }
            Self::CmdSwapLineupCsReq => "CmdSwapLineupCsReq",
            Self::CmdSetLineupNameCsReq => "CmdSetLineupNameCsReq",
            Self::CmdGetLineupAvatarDataCsReq => "CmdGetLineupAvatarDataCsReq",
            Self::CmdSetLineupNameScRsp => "CmdSetLineupNameScRsp",
            Self::CmdChangeLineupLeaderCsReq => "CmdChangeLineupLeaderCsReq",
            Self::CmdExtraLineupDestroyNotify => "CmdExtraLineupDestroyNotify",
            Self::CmdVirtualLineupDestroyNotify => "CmdVirtualLineupDestroyNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLineupTypeNone" => Some(Self::None),
            "CmdReplaceLineupCsReq" => Some(Self::CmdReplaceLineupCsReq),
            "CmdSwitchLineupIndexScRsp" => Some(Self::CmdSwitchLineupIndexScRsp),
            "CmdGetStageLineupCsReq" => Some(Self::CmdGetStageLineupCsReq),
            "CmdSwitchLineupIndexCsReq" => Some(Self::CmdSwitchLineupIndexCsReq),
            "CmdSyncLineupNotify" => Some(Self::CmdSyncLineupNotify),
            "CmdQuitLineupScRsp" => Some(Self::CmdQuitLineupScRsp),
            "CmdJoinLineupScRsp" => Some(Self::CmdJoinLineupScRsp),
            "CmdGetAllLineupDataScRsp" => Some(Self::CmdGetAllLineupDataScRsp),
            "CmdGetAllLineupDataCsReq" => Some(Self::CmdGetAllLineupDataCsReq),
            "CmdJoinLineupCsReq" => Some(Self::CmdJoinLineupCsReq),
            "CmdGetLineupAvatarDataScRsp" => Some(Self::CmdGetLineupAvatarDataScRsp),
            "CmdSwapLineupScRsp" => Some(Self::CmdSwapLineupScRsp),
            "CmdChangeLineupLeaderScRsp" => Some(Self::CmdChangeLineupLeaderScRsp),
            "CmdGetStageLineupScRsp" => Some(Self::CmdGetStageLineupScRsp),
            "CmdGetCurLineupDataCsReq" => Some(Self::CmdGetCurLineupDataCsReq),
            "CmdQuitLineupCsReq" => Some(Self::CmdQuitLineupCsReq),
            "CmdGetCurLineupDataScRsp" => Some(Self::CmdGetCurLineupDataScRsp),
            "CmdReplaceLineupScRsp" => Some(Self::CmdReplaceLineupScRsp),
            "CmdVirtualLineupTrialAvatarChangeScNotify" => {
                Some(Self::CmdVirtualLineupTrialAvatarChangeScNotify)
            }
            "CmdSwapLineupCsReq" => Some(Self::CmdSwapLineupCsReq),
            "CmdSetLineupNameCsReq" => Some(Self::CmdSetLineupNameCsReq),
            "CmdGetLineupAvatarDataCsReq" => Some(Self::CmdGetLineupAvatarDataCsReq),
            "CmdSetLineupNameScRsp" => Some(Self::CmdSetLineupNameScRsp),
            "CmdChangeLineupLeaderCsReq" => Some(Self::CmdChangeLineupLeaderCsReq),
            "CmdExtraLineupDestroyNotify" => Some(Self::CmdExtraLineupDestroyNotify),
            "CmdVirtualLineupDestroyNotify" => Some(Self::CmdVirtualLineupDestroyNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gdpaapohdbd {
    LineupTypeNone = 0,
    LineupTypePreset = 1,
    LineupTypeVirtual = 2,
    LineupTypeExtra = 3,
    LineupTypeStoryLine = 4,
}
impl Gdpaapohdbd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupTypeNone => "LINEUP_TYPE_NONE",
            Self::LineupTypePreset => "LINEUP_TYPE_PRESET",
            Self::LineupTypeVirtual => "LINEUP_TYPE_VIRTUAL",
            Self::LineupTypeExtra => "LINEUP_TYPE_EXTRA",
            Self::LineupTypeStoryLine => "LINEUP_TYPE_STORY_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_TYPE_NONE" => Some(Self::LineupTypeNone),
            "LINEUP_TYPE_PRESET" => Some(Self::LineupTypePreset),
            "LINEUP_TYPE_VIRTUAL" => Some(Self::LineupTypeVirtual),
            "LINEUP_TYPE_EXTRA" => Some(Self::LineupTypeExtra),
            "LINEUP_TYPE_STORY_LINE" => Some(Self::LineupTypeStoryLine),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExtraLineupType {
    LineupNone = 0,
    LineupChallenge = 1,
    LineupRogue = 2,
    LineupChallenge2 = 3,
    LineupChallenge3 = 4,
    LineupRogueChallenge = 5,
    LineupStageTrial = 6,
    LineupRogueTrial = 7,
    LineupActivity = 8,
    LineupBoxingClub = 9,
    LineupTreasureDungeon = 11,
    LineupChessRogue = 12,
    LineupHeliobus = 13,
    LineupTournRogue = 14,
    LineupRelicRogue = 15,
    LineupArcadeRogue = 16,
    LineupMagicRogue = 17,
}
impl ExtraLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LineupNone => "LINEUP_NONE",
            Self::LineupChallenge => "LINEUP_CHALLENGE",
            Self::LineupRogue => "LINEUP_ROGUE",
            Self::LineupChallenge2 => "LINEUP_CHALLENGE_2",
            Self::LineupChallenge3 => "LINEUP_CHALLENGE_3",
            Self::LineupRogueChallenge => "LINEUP_ROGUE_CHALLENGE",
            Self::LineupStageTrial => "LINEUP_STAGE_TRIAL",
            Self::LineupRogueTrial => "LINEUP_ROGUE_TRIAL",
            Self::LineupActivity => "LINEUP_ACTIVITY",
            Self::LineupBoxingClub => "LINEUP_BOXING_CLUB",
            Self::LineupTreasureDungeon => "LINEUP_TREASURE_DUNGEON",
            Self::LineupChessRogue => "LINEUP_CHESS_ROGUE",
            Self::LineupHeliobus => "LINEUP_HELIOBUS",
            Self::LineupTournRogue => "LINEUP_TOURN_ROGUE",
            Self::LineupRelicRogue => "LINEUP_RELIC_ROGUE",
            Self::LineupArcadeRogue => "LINEUP_ARCADE_ROGUE",
            Self::LineupMagicRogue => "LINEUP_MAGIC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_NONE" => Some(Self::LineupNone),
            "LINEUP_CHALLENGE" => Some(Self::LineupChallenge),
            "LINEUP_ROGUE" => Some(Self::LineupRogue),
            "LINEUP_CHALLENGE_2" => Some(Self::LineupChallenge2),
            "LINEUP_CHALLENGE_3" => Some(Self::LineupChallenge3),
            "LINEUP_ROGUE_CHALLENGE" => Some(Self::LineupRogueChallenge),
            "LINEUP_STAGE_TRIAL" => Some(Self::LineupStageTrial),
            "LINEUP_ROGUE_TRIAL" => Some(Self::LineupRogueTrial),
            "LINEUP_ACTIVITY" => Some(Self::LineupActivity),
            "LINEUP_BOXING_CLUB" => Some(Self::LineupBoxingClub),
            "LINEUP_TREASURE_DUNGEON" => Some(Self::LineupTreasureDungeon),
            "LINEUP_CHESS_ROGUE" => Some(Self::LineupChessRogue),
            "LINEUP_HELIOBUS" => Some(Self::LineupHeliobus),
            "LINEUP_TOURN_ROGUE" => Some(Self::LineupTournRogue),
            "LINEUP_RELIC_ROGUE" => Some(Self::LineupRelicRogue),
            "LINEUP_ARCADE_ROGUE" => Some(Self::LineupArcadeRogue),
            "LINEUP_MAGIC_ROGUE" => Some(Self::LineupMagicRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncReason {
    None = 0,
    MpAdd = 1,
    MpAddPropHit = 2,
    HpAdd = 3,
    HpAddPropHit = 4,
}
impl SyncReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SYNC_REASON_NONE",
            Self::MpAdd => "SYNC_REASON_MP_ADD",
            Self::MpAddPropHit => "SYNC_REASON_MP_ADD_PROP_HIT",
            Self::HpAdd => "SYNC_REASON_HP_ADD",
            Self::HpAddPropHit => "SYNC_REASON_HP_ADD_PROP_HIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYNC_REASON_NONE" => Some(Self::None),
            "SYNC_REASON_MP_ADD" => Some(Self::MpAdd),
            "SYNC_REASON_MP_ADD_PROP_HIT" => Some(Self::MpAddPropHit),
            "SYNC_REASON_HP_ADD" => Some(Self::HpAdd),
            "SYNC_REASON_HP_ADD_PROP_HIT" => Some(Self::HpAddPropHit),
            _ => None,
        }
    }
}
/// DNHPIPLIFOD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLobbyType {
    None = 0,
    CmdLobbyInviteScNotify = 7389,
    CmdLobbyInviteScRsp = 7357,
    CmdLobbyInviteCsReq = 7378,
    CmdLobbyGetInfoScRsp = 7394,
    CmdLobbyJoinCsReq = 7362,
    CmdLobbyKickOutCsReq = 7358,
    CmdLobbyJoinScRsp = 7374,
    CmdLobbyBeginCsReq = 7392,
    CmdLobbyModifyPlayerInfoCsReq = 7390,
    CmdLobbyQuitScRsp = 7399,
    CmdLobbyBeginScRsp = 7387,
    CmdLobbyGetInfoCsReq = 7383,
    CmdLobbyCreateCsReq = 7365,
    CmdLobbyKickOutScRsp = 7380,
    CmdLobbyModifyPlayerInfoScRsp = 7373,
    CmdLobbyQuitCsReq = 7384,
    CmdLobbySyncInfoScNotify = 7385,
    CmdLobbyCreateScRsp = 7366,
}
impl CmdLobbyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdLobbyTypeNone",
            Self::CmdLobbyInviteScNotify => "CmdLobbyInviteScNotify",
            Self::CmdLobbyInviteScRsp => "CmdLobbyInviteScRsp",
            Self::CmdLobbyInviteCsReq => "CmdLobbyInviteCsReq",
            Self::CmdLobbyGetInfoScRsp => "CmdLobbyGetInfoScRsp",
            Self::CmdLobbyJoinCsReq => "CmdLobbyJoinCsReq",
            Self::CmdLobbyKickOutCsReq => "CmdLobbyKickOutCsReq",
            Self::CmdLobbyJoinScRsp => "CmdLobbyJoinScRsp",
            Self::CmdLobbyBeginCsReq => "CmdLobbyBeginCsReq",
            Self::CmdLobbyModifyPlayerInfoCsReq => "CmdLobbyModifyPlayerInfoCsReq",
            Self::CmdLobbyQuitScRsp => "CmdLobbyQuitScRsp",
            Self::CmdLobbyBeginScRsp => "CmdLobbyBeginScRsp",
            Self::CmdLobbyGetInfoCsReq => "CmdLobbyGetInfoCsReq",
            Self::CmdLobbyCreateCsReq => "CmdLobbyCreateCsReq",
            Self::CmdLobbyKickOutScRsp => "CmdLobbyKickOutScRsp",
            Self::CmdLobbyModifyPlayerInfoScRsp => "CmdLobbyModifyPlayerInfoScRsp",
            Self::CmdLobbyQuitCsReq => "CmdLobbyQuitCsReq",
            Self::CmdLobbySyncInfoScNotify => "CmdLobbySyncInfoScNotify",
            Self::CmdLobbyCreateScRsp => "CmdLobbyCreateScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLobbyTypeNone" => Some(Self::None),
            "CmdLobbyInviteScNotify" => Some(Self::CmdLobbyInviteScNotify),
            "CmdLobbyInviteScRsp" => Some(Self::CmdLobbyInviteScRsp),
            "CmdLobbyInviteCsReq" => Some(Self::CmdLobbyInviteCsReq),
            "CmdLobbyGetInfoScRsp" => Some(Self::CmdLobbyGetInfoScRsp),
            "CmdLobbyJoinCsReq" => Some(Self::CmdLobbyJoinCsReq),
            "CmdLobbyKickOutCsReq" => Some(Self::CmdLobbyKickOutCsReq),
            "CmdLobbyJoinScRsp" => Some(Self::CmdLobbyJoinScRsp),
            "CmdLobbyBeginCsReq" => Some(Self::CmdLobbyBeginCsReq),
            "CmdLobbyModifyPlayerInfoCsReq" => Some(Self::CmdLobbyModifyPlayerInfoCsReq),
            "CmdLobbyQuitScRsp" => Some(Self::CmdLobbyQuitScRsp),
            "CmdLobbyBeginScRsp" => Some(Self::CmdLobbyBeginScRsp),
            "CmdLobbyGetInfoCsReq" => Some(Self::CmdLobbyGetInfoCsReq),
            "CmdLobbyCreateCsReq" => Some(Self::CmdLobbyCreateCsReq),
            "CmdLobbyKickOutScRsp" => Some(Self::CmdLobbyKickOutScRsp),
            "CmdLobbyModifyPlayerInfoScRsp" => Some(Self::CmdLobbyModifyPlayerInfoScRsp),
            "CmdLobbyQuitCsReq" => Some(Self::CmdLobbyQuitCsReq),
            "CmdLobbySyncInfoScNotify" => Some(Self::CmdLobbySyncInfoScNotify),
            "CmdLobbyCreateScRsp" => Some(Self::CmdLobbyCreateScRsp),
            _ => None,
        }
    }
}
/// PPEEOKDOMFJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMailType {
    None = 0,
    CmdNewMailScNotify = 880,
    CmdTakeMailAttachmentScRsp = 837,
    CmdMarkReadMailScRsp = 846,
    CmdDelMailCsReq = 839,
    CmdTakeMailAttachmentCsReq = 834,
    CmdGetMailScRsp = 820,
    CmdMarkReadMailCsReq = 803,
    CmdDelMailScRsp = 853,
    CmdGetMailCsReq = 859,
}
impl CmdMailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMailTypeNone",
            Self::CmdNewMailScNotify => "CmdNewMailScNotify",
            Self::CmdTakeMailAttachmentScRsp => "CmdTakeMailAttachmentScRsp",
            Self::CmdMarkReadMailScRsp => "CmdMarkReadMailScRsp",
            Self::CmdDelMailCsReq => "CmdDelMailCsReq",
            Self::CmdTakeMailAttachmentCsReq => "CmdTakeMailAttachmentCsReq",
            Self::CmdGetMailScRsp => "CmdGetMailScRsp",
            Self::CmdMarkReadMailCsReq => "CmdMarkReadMailCsReq",
            Self::CmdDelMailScRsp => "CmdDelMailScRsp",
            Self::CmdGetMailCsReq => "CmdGetMailCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMailTypeNone" => Some(Self::None),
            "CmdNewMailScNotify" => Some(Self::CmdNewMailScNotify),
            "CmdTakeMailAttachmentScRsp" => Some(Self::CmdTakeMailAttachmentScRsp),
            "CmdMarkReadMailScRsp" => Some(Self::CmdMarkReadMailScRsp),
            "CmdDelMailCsReq" => Some(Self::CmdDelMailCsReq),
            "CmdTakeMailAttachmentCsReq" => Some(Self::CmdTakeMailAttachmentCsReq),
            "CmdGetMailScRsp" => Some(Self::CmdGetMailScRsp),
            "CmdMarkReadMailCsReq" => Some(Self::CmdMarkReadMailCsReq),
            "CmdDelMailScRsp" => Some(Self::CmdDelMailScRsp),
            "CmdGetMailCsReq" => Some(Self::CmdGetMailCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MailType {
    Normal = 0,
    Star = 1,
}
impl MailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Normal => "MAIL_TYPE_NORMAL",
            Self::Star => "MAIL_TYPE_STAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIL_TYPE_NORMAL" => Some(Self::Normal),
            "MAIL_TYPE_STAR" => Some(Self::Star),
            _ => None,
        }
    }
}
/// IMAMBFPNGKE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMapRotationType {
    None = 0,
    CmdLeaveMapRotationRegionScNotify = 6848,
    CmdEnterMapRotationRegionCsReq = 6859,
    CmdResetMapRotationRegionCsReq = 6830,
    CmdRotateMapCsReq = 6834,
    CmdLeaveMapRotationRegionCsReq = 6880,
    CmdRemoveRotaterScRsp = 6861,
    CmdUpdateMapRotationDataScNotify = 6879,
    CmdDeployRotaterCsReq = 6839,
    CmdLeaveMapRotationRegionScRsp = 6816,
    CmdInteractChargerScRsp = 6846,
    CmdEnterMapRotationRegionScRsp = 6820,
    CmdDeployRotaterScRsp = 6853,
    CmdUpdateEnergyScNotify = 6890,
    CmdResetMapRotationRegionScRsp = 6875,
    CmdInteractChargerCsReq = 6803,
    CmdGetMapRotationDataCsReq = 6847,
    CmdGetMapRotationDataScRsp = 6874,
    CmdRemoveRotaterCsReq = 6819,
    CmdRotateMapScRsp = 6837,
    CmdUpdateRotaterScNotify = 6825,
}
impl CmdMapRotationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMapRotationTypeNone",
            Self::CmdLeaveMapRotationRegionScNotify => {
                "CmdLeaveMapRotationRegionScNotify"
            }
            Self::CmdEnterMapRotationRegionCsReq => "CmdEnterMapRotationRegionCsReq",
            Self::CmdResetMapRotationRegionCsReq => "CmdResetMapRotationRegionCsReq",
            Self::CmdRotateMapCsReq => "CmdRotateMapCsReq",
            Self::CmdLeaveMapRotationRegionCsReq => "CmdLeaveMapRotationRegionCsReq",
            Self::CmdRemoveRotaterScRsp => "CmdRemoveRotaterScRsp",
            Self::CmdUpdateMapRotationDataScNotify => "CmdUpdateMapRotationDataScNotify",
            Self::CmdDeployRotaterCsReq => "CmdDeployRotaterCsReq",
            Self::CmdLeaveMapRotationRegionScRsp => "CmdLeaveMapRotationRegionScRsp",
            Self::CmdInteractChargerScRsp => "CmdInteractChargerScRsp",
            Self::CmdEnterMapRotationRegionScRsp => "CmdEnterMapRotationRegionScRsp",
            Self::CmdDeployRotaterScRsp => "CmdDeployRotaterScRsp",
            Self::CmdUpdateEnergyScNotify => "CmdUpdateEnergyScNotify",
            Self::CmdResetMapRotationRegionScRsp => "CmdResetMapRotationRegionScRsp",
            Self::CmdInteractChargerCsReq => "CmdInteractChargerCsReq",
            Self::CmdGetMapRotationDataCsReq => "CmdGetMapRotationDataCsReq",
            Self::CmdGetMapRotationDataScRsp => "CmdGetMapRotationDataScRsp",
            Self::CmdRemoveRotaterCsReq => "CmdRemoveRotaterCsReq",
            Self::CmdRotateMapScRsp => "CmdRotateMapScRsp",
            Self::CmdUpdateRotaterScNotify => "CmdUpdateRotaterScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMapRotationTypeNone" => Some(Self::None),
            "CmdLeaveMapRotationRegionScNotify" => {
                Some(Self::CmdLeaveMapRotationRegionScNotify)
            }
            "CmdEnterMapRotationRegionCsReq" => {
                Some(Self::CmdEnterMapRotationRegionCsReq)
            }
            "CmdResetMapRotationRegionCsReq" => {
                Some(Self::CmdResetMapRotationRegionCsReq)
            }
            "CmdRotateMapCsReq" => Some(Self::CmdRotateMapCsReq),
            "CmdLeaveMapRotationRegionCsReq" => {
                Some(Self::CmdLeaveMapRotationRegionCsReq)
            }
            "CmdRemoveRotaterScRsp" => Some(Self::CmdRemoveRotaterScRsp),
            "CmdUpdateMapRotationDataScNotify" => {
                Some(Self::CmdUpdateMapRotationDataScNotify)
            }
            "CmdDeployRotaterCsReq" => Some(Self::CmdDeployRotaterCsReq),
            "CmdLeaveMapRotationRegionScRsp" => {
                Some(Self::CmdLeaveMapRotationRegionScRsp)
            }
            "CmdInteractChargerScRsp" => Some(Self::CmdInteractChargerScRsp),
            "CmdEnterMapRotationRegionScRsp" => {
                Some(Self::CmdEnterMapRotationRegionScRsp)
            }
            "CmdDeployRotaterScRsp" => Some(Self::CmdDeployRotaterScRsp),
            "CmdUpdateEnergyScNotify" => Some(Self::CmdUpdateEnergyScNotify),
            "CmdResetMapRotationRegionScRsp" => {
                Some(Self::CmdResetMapRotationRegionScRsp)
            }
            "CmdInteractChargerCsReq" => Some(Self::CmdInteractChargerCsReq),
            "CmdGetMapRotationDataCsReq" => Some(Self::CmdGetMapRotationDataCsReq),
            "CmdGetMapRotationDataScRsp" => Some(Self::CmdGetMapRotationDataScRsp),
            "CmdRemoveRotaterCsReq" => Some(Self::CmdRemoveRotaterCsReq),
            "CmdRotateMapScRsp" => Some(Self::CmdRotateMapScRsp),
            "CmdUpdateRotaterScNotify" => Some(Self::CmdUpdateRotaterScNotify),
            _ => None,
        }
    }
}
/// LPBJEIAJGDM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchType {
    None = 0,
    CmdGetCrossInfoScRsp = 7340,
    CmdGetCrossInfoCsReq = 7337,
    CmdCancelMatchScRsp = 7324,
    CmdMatchResultScNotify = 7342,
    CmdStartMatchScRsp = 7316,
    CmdStartMatchCsReq = 7315,
    CmdCancelMatchCsReq = 7312,
}
impl CmdMatchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchTypeNone",
            Self::CmdGetCrossInfoScRsp => "CmdGetCrossInfoScRsp",
            Self::CmdGetCrossInfoCsReq => "CmdGetCrossInfoCsReq",
            Self::CmdCancelMatchScRsp => "CmdCancelMatchScRsp",
            Self::CmdMatchResultScNotify => "CmdMatchResultScNotify",
            Self::CmdStartMatchScRsp => "CmdStartMatchScRsp",
            Self::CmdStartMatchCsReq => "CmdStartMatchCsReq",
            Self::CmdCancelMatchCsReq => "CmdCancelMatchCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchTypeNone" => Some(Self::None),
            "CmdGetCrossInfoScRsp" => Some(Self::CmdGetCrossInfoScRsp),
            "CmdGetCrossInfoCsReq" => Some(Self::CmdGetCrossInfoCsReq),
            "CmdCancelMatchScRsp" => Some(Self::CmdCancelMatchScRsp),
            "CmdMatchResultScNotify" => Some(Self::CmdMatchResultScNotify),
            "CmdStartMatchScRsp" => Some(Self::CmdStartMatchScRsp),
            "CmdStartMatchCsReq" => Some(Self::CmdStartMatchCsReq),
            "CmdCancelMatchCsReq" => Some(Self::CmdCancelMatchCsReq),
            _ => None,
        }
    }
}
/// CFOOEBDHLGN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMatchThreeModuleType {
    None = 0,
    CmdMatchThreeLevelEndCsReq = 7412,
    CmdMatchThreeSyncDataScNotify = 7442,
    CmdMatchThreeGetDataCsReq = 7415,
    CmdMatchThreeSetBirdPosScRsp = 7440,
    CmdMatchThreeGetDataScRsp = 7416,
    CmdMatchThreeSetBirdPosCsReq = 7437,
    CmdMatchThreeLevelEndScRsp = 7424,
}
impl CmdMatchThreeModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMatchThreeModuleTypeNone",
            Self::CmdMatchThreeLevelEndCsReq => "CmdMatchThreeLevelEndCsReq",
            Self::CmdMatchThreeSyncDataScNotify => "CmdMatchThreeSyncDataScNotify",
            Self::CmdMatchThreeGetDataCsReq => "CmdMatchThreeGetDataCsReq",
            Self::CmdMatchThreeSetBirdPosScRsp => "CmdMatchThreeSetBirdPosScRsp",
            Self::CmdMatchThreeGetDataScRsp => "CmdMatchThreeGetDataScRsp",
            Self::CmdMatchThreeSetBirdPosCsReq => "CmdMatchThreeSetBirdPosCsReq",
            Self::CmdMatchThreeLevelEndScRsp => "CmdMatchThreeLevelEndScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchThreeModuleTypeNone" => Some(Self::None),
            "CmdMatchThreeLevelEndCsReq" => Some(Self::CmdMatchThreeLevelEndCsReq),
            "CmdMatchThreeSyncDataScNotify" => Some(Self::CmdMatchThreeSyncDataScNotify),
            "CmdMatchThreeGetDataCsReq" => Some(Self::CmdMatchThreeGetDataCsReq),
            "CmdMatchThreeSetBirdPosScRsp" => Some(Self::CmdMatchThreeSetBirdPosScRsp),
            "CmdMatchThreeGetDataScRsp" => Some(Self::CmdMatchThreeGetDataScRsp),
            "CmdMatchThreeSetBirdPosCsReq" => Some(Self::CmdMatchThreeSetBirdPosCsReq),
            "CmdMatchThreeLevelEndScRsp" => Some(Self::CmdMatchThreeLevelEndScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fcidmcmibfd {
    MatchThreeStatisticsNone = 0,
    MatchThreeStatisticsFirst = 1,
    MatchThreeStatisticsSecond = 2,
    MatchThreeStatisticsThird = 3,
    MatchThreeStatisticsFruit = 4,
    MatchThreeStatisticsSkill = 5,
    MatchThreeStatisticsDefeat = 6,
    MatchThreeStatisticsBomb = 7,
    MatchThreeStatisticsDamage = 8,
    MatchThreeStatisticsEnergy = 9,
    MatchThreeStatisticsSwapBomb = 10,
}
impl Fcidmcmibfd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MatchThreeStatisticsNone => "MatchThreeStatistics_None",
            Self::MatchThreeStatisticsFirst => "MatchThreeStatistics_First",
            Self::MatchThreeStatisticsSecond => "MatchThreeStatistics_Second",
            Self::MatchThreeStatisticsThird => "MatchThreeStatistics_Third",
            Self::MatchThreeStatisticsFruit => "MatchThreeStatistics_Fruit",
            Self::MatchThreeStatisticsSkill => "MatchThreeStatistics_Skill",
            Self::MatchThreeStatisticsDefeat => "MatchThreeStatistics_Defeat",
            Self::MatchThreeStatisticsBomb => "MatchThreeStatistics_Bomb",
            Self::MatchThreeStatisticsDamage => "MatchThreeStatistics_Damage",
            Self::MatchThreeStatisticsEnergy => "MatchThreeStatistics_Energy",
            Self::MatchThreeStatisticsSwapBomb => "MatchThreeStatistics_SwapBomb",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchThreeStatistics_None" => Some(Self::MatchThreeStatisticsNone),
            "MatchThreeStatistics_First" => Some(Self::MatchThreeStatisticsFirst),
            "MatchThreeStatistics_Second" => Some(Self::MatchThreeStatisticsSecond),
            "MatchThreeStatistics_Third" => Some(Self::MatchThreeStatisticsThird),
            "MatchThreeStatistics_Fruit" => Some(Self::MatchThreeStatisticsFruit),
            "MatchThreeStatistics_Skill" => Some(Self::MatchThreeStatisticsSkill),
            "MatchThreeStatistics_Defeat" => Some(Self::MatchThreeStatisticsDefeat),
            "MatchThreeStatistics_Bomb" => Some(Self::MatchThreeStatisticsBomb),
            "MatchThreeStatistics_Damage" => Some(Self::MatchThreeStatisticsDamage),
            "MatchThreeStatistics_Energy" => Some(Self::MatchThreeStatisticsEnergy),
            "MatchThreeStatistics_SwapBomb" => Some(Self::MatchThreeStatisticsSwapBomb),
            _ => None,
        }
    }
}
/// PKKPHNMIPCP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMessageType {
    None = 0,
    CmdGetNpcMessageGroupScRsp = 2720,
    CmdFinishSectionIdScRsp = 2737,
    CmdFinishItemIdScRsp = 2753,
    CmdFinishPerformSectionIdCsReq = 2780,
    CmdGetNpcStatusCsReq = 2703,
    CmdFinishItemIdCsReq = 2739,
    CmdFinishSectionIdCsReq = 2734,
    CmdGetNpcMessageGroupCsReq = 2759,
    CmdFinishPerformSectionIdScRsp = 2716,
    CmdGetNpcStatusScRsp = 2746,
}
impl CmdMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMessageTypeNone",
            Self::CmdGetNpcMessageGroupScRsp => "CmdGetNpcMessageGroupScRsp",
            Self::CmdFinishSectionIdScRsp => "CmdFinishSectionIdScRsp",
            Self::CmdFinishItemIdScRsp => "CmdFinishItemIdScRsp",
            Self::CmdFinishPerformSectionIdCsReq => "CmdFinishPerformSectionIdCsReq",
            Self::CmdGetNpcStatusCsReq => "CmdGetNpcStatusCsReq",
            Self::CmdFinishItemIdCsReq => "CmdFinishItemIdCsReq",
            Self::CmdFinishSectionIdCsReq => "CmdFinishSectionIdCsReq",
            Self::CmdGetNpcMessageGroupCsReq => "CmdGetNpcMessageGroupCsReq",
            Self::CmdFinishPerformSectionIdScRsp => "CmdFinishPerformSectionIdScRsp",
            Self::CmdGetNpcStatusScRsp => "CmdGetNpcStatusScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMessageTypeNone" => Some(Self::None),
            "CmdGetNpcMessageGroupScRsp" => Some(Self::CmdGetNpcMessageGroupScRsp),
            "CmdFinishSectionIdScRsp" => Some(Self::CmdFinishSectionIdScRsp),
            "CmdFinishItemIdScRsp" => Some(Self::CmdFinishItemIdScRsp),
            "CmdFinishPerformSectionIdCsReq" => {
                Some(Self::CmdFinishPerformSectionIdCsReq)
            }
            "CmdGetNpcStatusCsReq" => Some(Self::CmdGetNpcStatusCsReq),
            "CmdFinishItemIdCsReq" => Some(Self::CmdFinishItemIdCsReq),
            "CmdFinishSectionIdCsReq" => Some(Self::CmdFinishSectionIdCsReq),
            "CmdGetNpcMessageGroupCsReq" => Some(Self::CmdGetNpcMessageGroupCsReq),
            "CmdFinishPerformSectionIdScRsp" => {
                Some(Self::CmdFinishPerformSectionIdScRsp)
            }
            "CmdGetNpcStatusScRsp" => Some(Self::CmdGetNpcStatusScRsp),
            _ => None,
        }
    }
}
/// FOGAINHPGLE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMiscModuleType {
    None = 0,
    CmdTakePictureCsReq = 4139,
    CmdTakePictureScRsp = 4153,
    CmdCancelCacheNotifyScRsp = 4116,
    CmdGetGunPlayDataCsReq = 4183,
    CmdUpdateGunPlayDataCsReq = 4109,
    CmdSecurityReportScRsp = 4174,
    CmdUpdateMovieRacingDataCsReq = 4151,
    CmdShareCsReq = 4159,
    CmdSubmitOrigamiItemScRsp = 4190,
    CmdDifficultyAdjustmentUpdateDataCsReq = 4110,
    CmdGetGunPlayDataScRsp = 4199,
    CmdUpdateMovieRacingDataScRsp = 4173,
    CmdSubmitOrigamiItemCsReq = 4148,
    CmdTriggerVoiceCsReq = 4130,
    CmdUpdateGunPlayDataScRsp = 4193,
    CmdGetShareDataCsReq = 4103,
    CmdCancelCacheNotifyCsReq = 4180,
    CmdShareScRsp = 4120,
    CmdGetShareDataScRsp = 4146,
    CmdDifficultyAdjustmentGetDataCsReq = 4164,
    CmdDifficultyAdjustmentGetDataScRsp = 4194,
    CmdGetMovieRacingDataScRsp = 4133,
    CmdGetMovieRacingDataCsReq = 4129,
    CmdTriggerVoiceScRsp = 4175,
    CmdDifficultyAdjustmentUpdateDataScRsp = 4170,
    CmdSecurityReportCsReq = 4147,
}
impl CmdMiscModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMiscModuleTypeNone",
            Self::CmdTakePictureCsReq => "CmdTakePictureCsReq",
            Self::CmdTakePictureScRsp => "CmdTakePictureScRsp",
            Self::CmdCancelCacheNotifyScRsp => "CmdCancelCacheNotifyScRsp",
            Self::CmdGetGunPlayDataCsReq => "CmdGetGunPlayDataCsReq",
            Self::CmdUpdateGunPlayDataCsReq => "CmdUpdateGunPlayDataCsReq",
            Self::CmdSecurityReportScRsp => "CmdSecurityReportScRsp",
            Self::CmdUpdateMovieRacingDataCsReq => "CmdUpdateMovieRacingDataCsReq",
            Self::CmdShareCsReq => "CmdShareCsReq",
            Self::CmdSubmitOrigamiItemScRsp => "CmdSubmitOrigamiItemScRsp",
            Self::CmdDifficultyAdjustmentUpdateDataCsReq => {
                "CmdDifficultyAdjustmentUpdateDataCsReq"
            }
            Self::CmdGetGunPlayDataScRsp => "CmdGetGunPlayDataScRsp",
            Self::CmdUpdateMovieRacingDataScRsp => "CmdUpdateMovieRacingDataScRsp",
            Self::CmdSubmitOrigamiItemCsReq => "CmdSubmitOrigamiItemCsReq",
            Self::CmdTriggerVoiceCsReq => "CmdTriggerVoiceCsReq",
            Self::CmdUpdateGunPlayDataScRsp => "CmdUpdateGunPlayDataScRsp",
            Self::CmdGetShareDataCsReq => "CmdGetShareDataCsReq",
            Self::CmdCancelCacheNotifyCsReq => "CmdCancelCacheNotifyCsReq",
            Self::CmdShareScRsp => "CmdShareScRsp",
            Self::CmdGetShareDataScRsp => "CmdGetShareDataScRsp",
            Self::CmdDifficultyAdjustmentGetDataCsReq => {
                "CmdDifficultyAdjustmentGetDataCsReq"
            }
            Self::CmdDifficultyAdjustmentGetDataScRsp => {
                "CmdDifficultyAdjustmentGetDataScRsp"
            }
            Self::CmdGetMovieRacingDataScRsp => "CmdGetMovieRacingDataScRsp",
            Self::CmdGetMovieRacingDataCsReq => "CmdGetMovieRacingDataCsReq",
            Self::CmdTriggerVoiceScRsp => "CmdTriggerVoiceScRsp",
            Self::CmdDifficultyAdjustmentUpdateDataScRsp => {
                "CmdDifficultyAdjustmentUpdateDataScRsp"
            }
            Self::CmdSecurityReportCsReq => "CmdSecurityReportCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMiscModuleTypeNone" => Some(Self::None),
            "CmdTakePictureCsReq" => Some(Self::CmdTakePictureCsReq),
            "CmdTakePictureScRsp" => Some(Self::CmdTakePictureScRsp),
            "CmdCancelCacheNotifyScRsp" => Some(Self::CmdCancelCacheNotifyScRsp),
            "CmdGetGunPlayDataCsReq" => Some(Self::CmdGetGunPlayDataCsReq),
            "CmdUpdateGunPlayDataCsReq" => Some(Self::CmdUpdateGunPlayDataCsReq),
            "CmdSecurityReportScRsp" => Some(Self::CmdSecurityReportScRsp),
            "CmdUpdateMovieRacingDataCsReq" => Some(Self::CmdUpdateMovieRacingDataCsReq),
            "CmdShareCsReq" => Some(Self::CmdShareCsReq),
            "CmdSubmitOrigamiItemScRsp" => Some(Self::CmdSubmitOrigamiItemScRsp),
            "CmdDifficultyAdjustmentUpdateDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataCsReq)
            }
            "CmdGetGunPlayDataScRsp" => Some(Self::CmdGetGunPlayDataScRsp),
            "CmdUpdateMovieRacingDataScRsp" => Some(Self::CmdUpdateMovieRacingDataScRsp),
            "CmdSubmitOrigamiItemCsReq" => Some(Self::CmdSubmitOrigamiItemCsReq),
            "CmdTriggerVoiceCsReq" => Some(Self::CmdTriggerVoiceCsReq),
            "CmdUpdateGunPlayDataScRsp" => Some(Self::CmdUpdateGunPlayDataScRsp),
            "CmdGetShareDataCsReq" => Some(Self::CmdGetShareDataCsReq),
            "CmdCancelCacheNotifyCsReq" => Some(Self::CmdCancelCacheNotifyCsReq),
            "CmdShareScRsp" => Some(Self::CmdShareScRsp),
            "CmdGetShareDataScRsp" => Some(Self::CmdGetShareDataScRsp),
            "CmdDifficultyAdjustmentGetDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentGetDataCsReq)
            }
            "CmdDifficultyAdjustmentGetDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentGetDataScRsp)
            }
            "CmdGetMovieRacingDataScRsp" => Some(Self::CmdGetMovieRacingDataScRsp),
            "CmdGetMovieRacingDataCsReq" => Some(Self::CmdGetMovieRacingDataCsReq),
            "CmdTriggerVoiceScRsp" => Some(Self::CmdTriggerVoiceScRsp),
            "CmdDifficultyAdjustmentUpdateDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataScRsp)
            }
            "CmdSecurityReportCsReq" => Some(Self::CmdSecurityReportCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gecdmpfblmf {
    CacheNotifyTypeNone = 0,
    CacheNotifyTypeRecycle = 1,
    CacheNotifyTypeRecharge = 2,
}
impl Gecdmpfblmf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::CacheNotifyTypeNone => "CACHE_NOTIFY_TYPE_NONE",
            Self::CacheNotifyTypeRecycle => "CACHE_NOTIFY_TYPE_RECYCLE",
            Self::CacheNotifyTypeRecharge => "CACHE_NOTIFY_TYPE_RECHARGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CACHE_NOTIFY_TYPE_NONE" => Some(Self::CacheNotifyTypeNone),
            "CACHE_NOTIFY_TYPE_RECYCLE" => Some(Self::CacheNotifyTypeRecycle),
            "CACHE_NOTIFY_TYPE_RECHARGE" => Some(Self::CacheNotifyTypeRecharge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bifnmmhlpmm {
    MovieRacingOverTake = 0,
    MovieRacingOverTakeEndless = 1,
    MovieRacingShooting = 2,
    MovieRacingShootingEndless = 3,
}
impl Bifnmmhlpmm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MovieRacingOverTake => "MOVIE_RACING_OVER_TAKE",
            Self::MovieRacingOverTakeEndless => "MOVIE_RACING_OVER_TAKE_ENDLESS",
            Self::MovieRacingShooting => "MOVIE_RACING_SHOOTING",
            Self::MovieRacingShootingEndless => "MOVIE_RACING_SHOOTING_ENDLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MOVIE_RACING_OVER_TAKE" => Some(Self::MovieRacingOverTake),
            "MOVIE_RACING_OVER_TAKE_ENDLESS" => Some(Self::MovieRacingOverTakeEndless),
            "MOVIE_RACING_SHOOTING" => Some(Self::MovieRacingShooting),
            "MOVIE_RACING_SHOOTING_ENDLESS" => Some(Self::MovieRacingShootingEndless),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aicolmmlejo {
    DifficultyAjustmentTypeDefault = 0,
    DifficultyAjustmentTypeEasy = 1,
}
impl Aicolmmlejo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentTypeDefault => "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT",
            Self::DifficultyAjustmentTypeEasy => "DIFFICULTY_AJUSTMENT_TYPE_EASY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT" => {
                Some(Self::DifficultyAjustmentTypeDefault)
            }
            "DIFFICULTY_AJUSTMENT_TYPE_EASY" => Some(Self::DifficultyAjustmentTypeEasy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lkobdhkhnbe {
    DifficultyAjustmentSourceNone = 0,
    DifficultyAjustmentSourceRaid = 1,
    DifficultyAjustmentSourceEvent = 2,
}
impl Lkobdhkhnbe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DifficultyAjustmentSourceNone => "DIFFICULTY_AJUSTMENT_SOURCE_NONE",
            Self::DifficultyAjustmentSourceRaid => "DIFFICULTY_AJUSTMENT_SOURCE_RAID",
            Self::DifficultyAjustmentSourceEvent => "DIFFICULTY_AJUSTMENT_SOURCE_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_SOURCE_NONE" => {
                Some(Self::DifficultyAjustmentSourceNone)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_RAID" => {
                Some(Self::DifficultyAjustmentSourceRaid)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_EVENT" => {
                Some(Self::DifficultyAjustmentSourceEvent)
            }
            _ => None,
        }
    }
}
/// HFDDOMMINLA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMissionType {
    None = 0,
    CmdGetMainMissionCustomValueCsReq = 1236,
    CmdGetMissionStatusScRsp = 1229,
    CmdGetMissionEventDataScRsp = 1290,
    CmdMissionGroupWarnScNotify = 1274,
    CmdSetMissionEventProgressScRsp = 1283,
    CmdFinishTalkMissionCsReq = 1203,
    CmdFinishTalkMissionScRsp = 1246,
    CmdAcceptMissionEventScRsp = 1261,
    CmdSyncTaskCsReq = 1253,
    CmdDailyTaskDataScNotify = 1237,
    CmdGetMissionStatusCsReq = 1225,
    CmdStartFinishSubMissionScNotify = 1264,
    CmdMissionRewardScNotify = 1239,
    CmdTeleportToMissionResetPointCsReq = 1209,
    CmdAcceptMissionEventCsReq = 1219,
    CmdTeleportToMissionResetPointScRsp = 1293,
    CmdInterruptMissionEventScRsp = 1251,
    CmdUpdateTrackMainMissionIdCsReq = 1277,
    CmdFinishCosumeItemMissionScRsp = 1275,
    CmdGetMissionEventDataCsReq = 1248,
    CmdMissionEventRewardScNotify = 1279,
    CmdSyncTaskScRsp = 1234,
    CmdSetMissionEventProgressCsReq = 1273,
    CmdAcceptMainMissionCsReq = 1210,
    CmdAcceptMainMissionScRsp = 1270,
    CmdUpdateTrackMainMissionIdScRsp = 1291,
    CmdStartFinishMainMissionScNotify = 1294,
    CmdSubMissionRewardScNotify = 1299,
    CmdGetMainMissionCustomValueScRsp = 1265,
    CmdMissionAcceptScNotify = 1226,
    CmdGetMissionDataScRsp = 1220,
    CmdFinishedMissionScNotify = 1204,
    CmdInterruptMissionEventCsReq = 1233,
    CmdGetMissionDataCsReq = 1259,
    CmdFinishCosumeItemMissionCsReq = 1230,
}
impl CmdMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMissionTypeNone",
            Self::CmdGetMainMissionCustomValueCsReq => {
                "CmdGetMainMissionCustomValueCsReq"
            }
            Self::CmdGetMissionStatusScRsp => "CmdGetMissionStatusScRsp",
            Self::CmdGetMissionEventDataScRsp => "CmdGetMissionEventDataScRsp",
            Self::CmdMissionGroupWarnScNotify => "CmdMissionGroupWarnScNotify",
            Self::CmdSetMissionEventProgressScRsp => "CmdSetMissionEventProgressScRsp",
            Self::CmdFinishTalkMissionCsReq => "CmdFinishTalkMissionCsReq",
            Self::CmdFinishTalkMissionScRsp => "CmdFinishTalkMissionScRsp",
            Self::CmdAcceptMissionEventScRsp => "CmdAcceptMissionEventScRsp",
            Self::CmdSyncTaskCsReq => "CmdSyncTaskCsReq",
            Self::CmdDailyTaskDataScNotify => "CmdDailyTaskDataScNotify",
            Self::CmdGetMissionStatusCsReq => "CmdGetMissionStatusCsReq",
            Self::CmdStartFinishSubMissionScNotify => "CmdStartFinishSubMissionScNotify",
            Self::CmdMissionRewardScNotify => "CmdMissionRewardScNotify",
            Self::CmdTeleportToMissionResetPointCsReq => {
                "CmdTeleportToMissionResetPointCsReq"
            }
            Self::CmdAcceptMissionEventCsReq => "CmdAcceptMissionEventCsReq",
            Self::CmdTeleportToMissionResetPointScRsp => {
                "CmdTeleportToMissionResetPointScRsp"
            }
            Self::CmdInterruptMissionEventScRsp => "CmdInterruptMissionEventScRsp",
            Self::CmdUpdateTrackMainMissionIdCsReq => "CmdUpdateTrackMainMissionIdCsReq",
            Self::CmdFinishCosumeItemMissionScRsp => "CmdFinishCosumeItemMissionScRsp",
            Self::CmdGetMissionEventDataCsReq => "CmdGetMissionEventDataCsReq",
            Self::CmdMissionEventRewardScNotify => "CmdMissionEventRewardScNotify",
            Self::CmdSyncTaskScRsp => "CmdSyncTaskScRsp",
            Self::CmdSetMissionEventProgressCsReq => "CmdSetMissionEventProgressCsReq",
            Self::CmdAcceptMainMissionCsReq => "CmdAcceptMainMissionCsReq",
            Self::CmdAcceptMainMissionScRsp => "CmdAcceptMainMissionScRsp",
            Self::CmdUpdateTrackMainMissionIdScRsp => "CmdUpdateTrackMainMissionIdScRsp",
            Self::CmdStartFinishMainMissionScNotify => {
                "CmdStartFinishMainMissionScNotify"
            }
            Self::CmdSubMissionRewardScNotify => "CmdSubMissionRewardScNotify",
            Self::CmdGetMainMissionCustomValueScRsp => {
                "CmdGetMainMissionCustomValueScRsp"
            }
            Self::CmdMissionAcceptScNotify => "CmdMissionAcceptScNotify",
            Self::CmdGetMissionDataScRsp => "CmdGetMissionDataScRsp",
            Self::CmdFinishedMissionScNotify => "CmdFinishedMissionScNotify",
            Self::CmdInterruptMissionEventCsReq => "CmdInterruptMissionEventCsReq",
            Self::CmdGetMissionDataCsReq => "CmdGetMissionDataCsReq",
            Self::CmdFinishCosumeItemMissionCsReq => "CmdFinishCosumeItemMissionCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMissionTypeNone" => Some(Self::None),
            "CmdGetMainMissionCustomValueCsReq" => {
                Some(Self::CmdGetMainMissionCustomValueCsReq)
            }
            "CmdGetMissionStatusScRsp" => Some(Self::CmdGetMissionStatusScRsp),
            "CmdGetMissionEventDataScRsp" => Some(Self::CmdGetMissionEventDataScRsp),
            "CmdMissionGroupWarnScNotify" => Some(Self::CmdMissionGroupWarnScNotify),
            "CmdSetMissionEventProgressScRsp" => {
                Some(Self::CmdSetMissionEventProgressScRsp)
            }
            "CmdFinishTalkMissionCsReq" => Some(Self::CmdFinishTalkMissionCsReq),
            "CmdFinishTalkMissionScRsp" => Some(Self::CmdFinishTalkMissionScRsp),
            "CmdAcceptMissionEventScRsp" => Some(Self::CmdAcceptMissionEventScRsp),
            "CmdSyncTaskCsReq" => Some(Self::CmdSyncTaskCsReq),
            "CmdDailyTaskDataScNotify" => Some(Self::CmdDailyTaskDataScNotify),
            "CmdGetMissionStatusCsReq" => Some(Self::CmdGetMissionStatusCsReq),
            "CmdStartFinishSubMissionScNotify" => {
                Some(Self::CmdStartFinishSubMissionScNotify)
            }
            "CmdMissionRewardScNotify" => Some(Self::CmdMissionRewardScNotify),
            "CmdTeleportToMissionResetPointCsReq" => {
                Some(Self::CmdTeleportToMissionResetPointCsReq)
            }
            "CmdAcceptMissionEventCsReq" => Some(Self::CmdAcceptMissionEventCsReq),
            "CmdTeleportToMissionResetPointScRsp" => {
                Some(Self::CmdTeleportToMissionResetPointScRsp)
            }
            "CmdInterruptMissionEventScRsp" => Some(Self::CmdInterruptMissionEventScRsp),
            "CmdUpdateTrackMainMissionIdCsReq" => {
                Some(Self::CmdUpdateTrackMainMissionIdCsReq)
            }
            "CmdFinishCosumeItemMissionScRsp" => {
                Some(Self::CmdFinishCosumeItemMissionScRsp)
            }
            "CmdGetMissionEventDataCsReq" => Some(Self::CmdGetMissionEventDataCsReq),
            "CmdMissionEventRewardScNotify" => Some(Self::CmdMissionEventRewardScNotify),
            "CmdSyncTaskScRsp" => Some(Self::CmdSyncTaskScRsp),
            "CmdSetMissionEventProgressCsReq" => {
                Some(Self::CmdSetMissionEventProgressCsReq)
            }
            "CmdAcceptMainMissionCsReq" => Some(Self::CmdAcceptMainMissionCsReq),
            "CmdAcceptMainMissionScRsp" => Some(Self::CmdAcceptMainMissionScRsp),
            "CmdUpdateTrackMainMissionIdScRsp" => {
                Some(Self::CmdUpdateTrackMainMissionIdScRsp)
            }
            "CmdStartFinishMainMissionScNotify" => {
                Some(Self::CmdStartFinishMainMissionScNotify)
            }
            "CmdSubMissionRewardScNotify" => Some(Self::CmdSubMissionRewardScNotify),
            "CmdGetMainMissionCustomValueScRsp" => {
                Some(Self::CmdGetMainMissionCustomValueScRsp)
            }
            "CmdMissionAcceptScNotify" => Some(Self::CmdMissionAcceptScNotify),
            "CmdGetMissionDataScRsp" => Some(Self::CmdGetMissionDataScRsp),
            "CmdFinishedMissionScNotify" => Some(Self::CmdFinishedMissionScNotify),
            "CmdInterruptMissionEventCsReq" => Some(Self::CmdInterruptMissionEventCsReq),
            "CmdGetMissionDataCsReq" => Some(Self::CmdGetMissionDataCsReq),
            "CmdFinishCosumeItemMissionCsReq" => {
                Some(Self::CmdFinishCosumeItemMissionCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ombkbbjghdf {
    MissionSyncRecordNone = 0,
    MissionSyncRecordMainMissionAccept = 1,
    MissionSyncRecordMainMissionStart = 2,
    MissionSyncRecordMainMissionFinish = 3,
    MissionSyncRecordMainMissionDelete = 4,
    MissionSyncRecordMissionAccept = 11,
    MissionSyncRecordMissionStart = 12,
    MissionSyncRecordMissionFinish = 13,
    MissionSyncRecordMissionDelete = 14,
    MissionSyncRecordMissionProgress = 15,
}
impl Ombkbbjghdf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MissionSyncRecordNone => "MISSION_SYNC_RECORD_NONE",
            Self::MissionSyncRecordMainMissionAccept => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT"
            }
            Self::MissionSyncRecordMainMissionStart => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_START"
            }
            Self::MissionSyncRecordMainMissionFinish => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH"
            }
            Self::MissionSyncRecordMainMissionDelete => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE"
            }
            Self::MissionSyncRecordMissionAccept => "MISSION_SYNC_RECORD_MISSION_ACCEPT",
            Self::MissionSyncRecordMissionStart => "MISSION_SYNC_RECORD_MISSION_START",
            Self::MissionSyncRecordMissionFinish => "MISSION_SYNC_RECORD_MISSION_FINISH",
            Self::MissionSyncRecordMissionDelete => "MISSION_SYNC_RECORD_MISSION_DELETE",
            Self::MissionSyncRecordMissionProgress => {
                "MISSION_SYNC_RECORD_MISSION_PROGRESS"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_SYNC_RECORD_NONE" => Some(Self::MissionSyncRecordNone),
            "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT" => {
                Some(Self::MissionSyncRecordMainMissionAccept)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_START" => {
                Some(Self::MissionSyncRecordMainMissionStart)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH" => {
                Some(Self::MissionSyncRecordMainMissionFinish)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE" => {
                Some(Self::MissionSyncRecordMainMissionDelete)
            }
            "MISSION_SYNC_RECORD_MISSION_ACCEPT" => {
                Some(Self::MissionSyncRecordMissionAccept)
            }
            "MISSION_SYNC_RECORD_MISSION_START" => {
                Some(Self::MissionSyncRecordMissionStart)
            }
            "MISSION_SYNC_RECORD_MISSION_FINISH" => {
                Some(Self::MissionSyncRecordMissionFinish)
            }
            "MISSION_SYNC_RECORD_MISSION_DELETE" => {
                Some(Self::MissionSyncRecordMissionDelete)
            }
            "MISSION_SYNC_RECORD_MISSION_PROGRESS" => {
                Some(Self::MissionSyncRecordMissionProgress)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dbccjeeldol {
    MainMissionSyncNone = 0,
    MainMissionSyncMcv = 1,
}
impl Dbccjeeldol {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MainMissionSyncNone => "MAIN_MISSION_SYNC_NONE",
            Self::MainMissionSyncMcv => "MAIN_MISSION_SYNC_MCV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIN_MISSION_SYNC_NONE" => Some(Self::MainMissionSyncNone),
            "MAIN_MISSION_SYNC_MCV" => Some(Self::MainMissionSyncMcv),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Maomnippcdg {
    TrackMainMissionUpdateNone = 0,
    TrackMainMissionUpdateAuto = 1,
    TrackMainMissionUpdateManual = 2,
    TrackMainMissionUpdateLoginReport = 3,
}
impl Maomnippcdg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrackMainMissionUpdateNone => "TRACK_MAIN_MISSION_UPDATE_NONE",
            Self::TrackMainMissionUpdateAuto => "TRACK_MAIN_MISSION_UPDATE_AUTO",
            Self::TrackMainMissionUpdateManual => "TRACK_MAIN_MISSION_UPDATE_MANUAL",
            Self::TrackMainMissionUpdateLoginReport => {
                "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRACK_MAIN_MISSION_UPDATE_NONE" => Some(Self::TrackMainMissionUpdateNone),
            "TRACK_MAIN_MISSION_UPDATE_AUTO" => Some(Self::TrackMainMissionUpdateAuto),
            "TRACK_MAIN_MISSION_UPDATE_MANUAL" => {
                Some(Self::TrackMainMissionUpdateManual)
            }
            "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT" => {
                Some(Self::TrackMainMissionUpdateLoginReport)
            }
            _ => None,
        }
    }
}
/// IBPADOKOCFL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMonopolyType {
    None = 0,
    CmdMonopolyScrachRaffleTicketScRsp = 7050,
    CmdMonopolyAcceptQuizCsReq = 7077,
    CmdMonopolyTakePhaseRewardCsReq = 7042,
    CmdDeleteSocialEventServerCacheCsReq = 7038,
    CmdMonopolyGetDailyInitItemScRsp = 7044,
    CmdDailyFirstEnterMonopolyActivityScRsp = 7075,
    CmdMonopolyGetDailyInitItemCsReq = 7087,
    CmdMonopolyGetRafflePoolInfoScRsp = 7098,
    CmdMonopolyLikeScRsp = 7060,
    CmdMonopolyScrachRaffleTicketCsReq = 7081,
    CmdMonopolyTakeRaffleTicketRewardScRsp = 7018,
    CmdMonopolyTakePhaseRewardScRsp = 7040,
    CmdMonopolyGiveUpCurContentCsReq = 7083,
    CmdMonopolyContentUpdateScNotify = 7064,
    CmdMonopolyConfirmRandomCsReq = 7061,
    CmdMonopolyCheatDiceCsReq = 7009,
    CmdGetMonopolyFriendRankingListScRsp = 7024,
    CmdGetSocialEventServerCacheScRsp = 7027,
    CmdMonopolyGetRaffleTicketScRsp = 7035,
    CmdMonopolyGuessBuyInformationCsReq = 7063,
    CmdGetMonopolyInfoScRsp = 7020,
    CmdMonopolyBuyGoodsScRsp = 7033,
    CmdMonopolyUpgradeAssetCsReq = 7051,
    CmdMonopolyRollDiceCsReq = 7053,
    CmdMonopolyGuessChooseScRsp = 7043,
    CmdMonopolyLikeScNotify = 7032,
    CmdGetMonopolyDailyReportScRsp = 7001,
    CmdGetMbtiReportScRsp = 7031,
    CmdMonopolyMoveCsReq = 7037,
    CmdMonopolyGameGachaScRsp = 7065,
    CmdGetMonopolyFriendRankingListCsReq = 7072,
    CmdMonopolyGameSettleScNotify = 7070,
    CmdMonopolyActionResultScNotify = 7003,
    CmdMonopolyTakeRaffleTicketRewardCsReq = 7007,
    CmdMonopolyConditionUpdateScNotify = 7011,
    CmdMonopolyGameRaiseRatioScRsp = 7010,
    CmdGetMbtiReportCsReq = 7096,
    CmdGetMonopolyInfoCsReq = 7059,
    CmdMonopolyRollRandomCsReq = 7048,
    CmdGetMonopolyDailyReportCsReq = 7076,
    CmdMonopolyGameBingoFlipCardScRsp = 7013,
    CmdMonopolyGuessChooseCsReq = 7088,
    CmdMonopolyGameGachaCsReq = 7036,
    CmdMonopolyUpgradeAssetScRsp = 7073,
    CmdMonopolyQuizDurationChangeScNotify = 7015,
    CmdMonopolyCheatDiceScRsp = 7093,
    CmdDailyFirstEnterMonopolyActivityCsReq = 7030,
    CmdMonopolyLikeCsReq = 7012,
    CmdMonopolyClickCellScRsp = 7058,
    CmdMonopolyReRollRandomScRsp = 7019,
    CmdMonopolyRollDiceScRsp = 7034,
    CmdMonopolyMoveScRsp = 7080,
    CmdMonopolySelectOptionScRsp = 7047,
    CmdMonopolySelectOptionCsReq = 7016,
    CmdMonopolyGiveUpCurContentScRsp = 7099,
    CmdMonopolySttUpdateScNotify = 7052,
    CmdMonopolyGuessDrawScNotify = 7023,
    CmdMonopolyGetRegionProgressCsReq = 7069,
    CmdMonopolyClickCellCsReq = 7041,
    CmdGetSocialEventServerCacheCsReq = 7084,
    CmdMonopolyAcceptQuizScRsp = 7091,
    CmdMonopolyConfirmRandomScRsp = 7025,
    CmdMonopolyBuyGoodsCsReq = 7029,
    CmdMonopolyClickMbtiReportScRsp = 7100,
    CmdGetMonopolyMbtiReportRewardScRsp = 7017,
    CmdMonopolyGameCreateScNotify = 7004,
    CmdMonopolyRollRandomScRsp = 7090,
    CmdMonopolyEventSelectFriendCsReq = 7071,
    CmdMonopolyClickMbtiReportCsReq = 7008,
    CmdMonopolySocialEventEffectScNotify = 7062,
    CmdMonopolyGetRafflePoolInfoCsReq = 7092,
    CmdMonopolyGuessBuyInformationScRsp = 7014,
    CmdDeleteSocialEventServerCacheScRsp = 7055,
    CmdMonopolyEventSelectFriendScRsp = 7082,
    CmdGetMonopolyMbtiReportRewardCsReq = 7057,
    CmdMonopolyReRollRandomCsReq = 7079,
    CmdMonopolyCellUpdateNotify = 7046,
    CmdMonopolyGetRegionProgressScRsp = 7068,
    CmdMonopolyEventLoadUpdateScNotify = 7067,
    CmdMonopolyGetRaffleTicketCsReq = 7022,
    CmdMonopolyDailySettleScNotify = 7078,
    CmdMonopolyGameRaiseRatioCsReq = 7094,
    CmdMonopolyGameBingoFlipCardCsReq = 7026,
}
impl CmdMonopolyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMonopolyTypeNone",
            Self::CmdMonopolyScrachRaffleTicketScRsp => {
                "CmdMonopolyScrachRaffleTicketScRsp"
            }
            Self::CmdMonopolyAcceptQuizCsReq => "CmdMonopolyAcceptQuizCsReq",
            Self::CmdMonopolyTakePhaseRewardCsReq => "CmdMonopolyTakePhaseRewardCsReq",
            Self::CmdDeleteSocialEventServerCacheCsReq => {
                "CmdDeleteSocialEventServerCacheCsReq"
            }
            Self::CmdMonopolyGetDailyInitItemScRsp => "CmdMonopolyGetDailyInitItemScRsp",
            Self::CmdDailyFirstEnterMonopolyActivityScRsp => {
                "CmdDailyFirstEnterMonopolyActivityScRsp"
            }
            Self::CmdMonopolyGetDailyInitItemCsReq => "CmdMonopolyGetDailyInitItemCsReq",
            Self::CmdMonopolyGetRafflePoolInfoScRsp => {
                "CmdMonopolyGetRafflePoolInfoScRsp"
            }
            Self::CmdMonopolyLikeScRsp => "CmdMonopolyLikeScRsp",
            Self::CmdMonopolyScrachRaffleTicketCsReq => {
                "CmdMonopolyScrachRaffleTicketCsReq"
            }
            Self::CmdMonopolyTakeRaffleTicketRewardScRsp => {
                "CmdMonopolyTakeRaffleTicketRewardScRsp"
            }
            Self::CmdMonopolyTakePhaseRewardScRsp => "CmdMonopolyTakePhaseRewardScRsp",
            Self::CmdMonopolyGiveUpCurContentCsReq => "CmdMonopolyGiveUpCurContentCsReq",
            Self::CmdMonopolyContentUpdateScNotify => "CmdMonopolyContentUpdateScNotify",
            Self::CmdMonopolyConfirmRandomCsReq => "CmdMonopolyConfirmRandomCsReq",
            Self::CmdMonopolyCheatDiceCsReq => "CmdMonopolyCheatDiceCsReq",
            Self::CmdGetMonopolyFriendRankingListScRsp => {
                "CmdGetMonopolyFriendRankingListScRsp"
            }
            Self::CmdGetSocialEventServerCacheScRsp => {
                "CmdGetSocialEventServerCacheScRsp"
            }
            Self::CmdMonopolyGetRaffleTicketScRsp => "CmdMonopolyGetRaffleTicketScRsp",
            Self::CmdMonopolyGuessBuyInformationCsReq => {
                "CmdMonopolyGuessBuyInformationCsReq"
            }
            Self::CmdGetMonopolyInfoScRsp => "CmdGetMonopolyInfoScRsp",
            Self::CmdMonopolyBuyGoodsScRsp => "CmdMonopolyBuyGoodsScRsp",
            Self::CmdMonopolyUpgradeAssetCsReq => "CmdMonopolyUpgradeAssetCsReq",
            Self::CmdMonopolyRollDiceCsReq => "CmdMonopolyRollDiceCsReq",
            Self::CmdMonopolyGuessChooseScRsp => "CmdMonopolyGuessChooseScRsp",
            Self::CmdMonopolyLikeScNotify => "CmdMonopolyLikeScNotify",
            Self::CmdGetMonopolyDailyReportScRsp => "CmdGetMonopolyDailyReportScRsp",
            Self::CmdGetMbtiReportScRsp => "CmdGetMbtiReportScRsp",
            Self::CmdMonopolyMoveCsReq => "CmdMonopolyMoveCsReq",
            Self::CmdMonopolyGameGachaScRsp => "CmdMonopolyGameGachaScRsp",
            Self::CmdGetMonopolyFriendRankingListCsReq => {
                "CmdGetMonopolyFriendRankingListCsReq"
            }
            Self::CmdMonopolyGameSettleScNotify => "CmdMonopolyGameSettleScNotify",
            Self::CmdMonopolyActionResultScNotify => "CmdMonopolyActionResultScNotify",
            Self::CmdMonopolyTakeRaffleTicketRewardCsReq => {
                "CmdMonopolyTakeRaffleTicketRewardCsReq"
            }
            Self::CmdMonopolyConditionUpdateScNotify => {
                "CmdMonopolyConditionUpdateScNotify"
            }
            Self::CmdMonopolyGameRaiseRatioScRsp => "CmdMonopolyGameRaiseRatioScRsp",
            Self::CmdGetMbtiReportCsReq => "CmdGetMbtiReportCsReq",
            Self::CmdGetMonopolyInfoCsReq => "CmdGetMonopolyInfoCsReq",
            Self::CmdMonopolyRollRandomCsReq => "CmdMonopolyRollRandomCsReq",
            Self::CmdGetMonopolyDailyReportCsReq => "CmdGetMonopolyDailyReportCsReq",
            Self::CmdMonopolyGameBingoFlipCardScRsp => {
                "CmdMonopolyGameBingoFlipCardScRsp"
            }
            Self::CmdMonopolyGuessChooseCsReq => "CmdMonopolyGuessChooseCsReq",
            Self::CmdMonopolyGameGachaCsReq => "CmdMonopolyGameGachaCsReq",
            Self::CmdMonopolyUpgradeAssetScRsp => "CmdMonopolyUpgradeAssetScRsp",
            Self::CmdMonopolyQuizDurationChangeScNotify => {
                "CmdMonopolyQuizDurationChangeScNotify"
            }
            Self::CmdMonopolyCheatDiceScRsp => "CmdMonopolyCheatDiceScRsp",
            Self::CmdDailyFirstEnterMonopolyActivityCsReq => {
                "CmdDailyFirstEnterMonopolyActivityCsReq"
            }
            Self::CmdMonopolyLikeCsReq => "CmdMonopolyLikeCsReq",
            Self::CmdMonopolyClickCellScRsp => "CmdMonopolyClickCellScRsp",
            Self::CmdMonopolyReRollRandomScRsp => "CmdMonopolyReRollRandomScRsp",
            Self::CmdMonopolyRollDiceScRsp => "CmdMonopolyRollDiceScRsp",
            Self::CmdMonopolyMoveScRsp => "CmdMonopolyMoveScRsp",
            Self::CmdMonopolySelectOptionScRsp => "CmdMonopolySelectOptionScRsp",
            Self::CmdMonopolySelectOptionCsReq => "CmdMonopolySelectOptionCsReq",
            Self::CmdMonopolyGiveUpCurContentScRsp => "CmdMonopolyGiveUpCurContentScRsp",
            Self::CmdMonopolySttUpdateScNotify => "CmdMonopolySttUpdateScNotify",
            Self::CmdMonopolyGuessDrawScNotify => "CmdMonopolyGuessDrawScNotify",
            Self::CmdMonopolyGetRegionProgressCsReq => {
                "CmdMonopolyGetRegionProgressCsReq"
            }
            Self::CmdMonopolyClickCellCsReq => "CmdMonopolyClickCellCsReq",
            Self::CmdGetSocialEventServerCacheCsReq => {
                "CmdGetSocialEventServerCacheCsReq"
            }
            Self::CmdMonopolyAcceptQuizScRsp => "CmdMonopolyAcceptQuizScRsp",
            Self::CmdMonopolyConfirmRandomScRsp => "CmdMonopolyConfirmRandomScRsp",
            Self::CmdMonopolyBuyGoodsCsReq => "CmdMonopolyBuyGoodsCsReq",
            Self::CmdMonopolyClickMbtiReportScRsp => "CmdMonopolyClickMbtiReportScRsp",
            Self::CmdGetMonopolyMbtiReportRewardScRsp => {
                "CmdGetMonopolyMbtiReportRewardScRsp"
            }
            Self::CmdMonopolyGameCreateScNotify => "CmdMonopolyGameCreateScNotify",
            Self::CmdMonopolyRollRandomScRsp => "CmdMonopolyRollRandomScRsp",
            Self::CmdMonopolyEventSelectFriendCsReq => {
                "CmdMonopolyEventSelectFriendCsReq"
            }
            Self::CmdMonopolyClickMbtiReportCsReq => "CmdMonopolyClickMbtiReportCsReq",
            Self::CmdMonopolySocialEventEffectScNotify => {
                "CmdMonopolySocialEventEffectScNotify"
            }
            Self::CmdMonopolyGetRafflePoolInfoCsReq => {
                "CmdMonopolyGetRafflePoolInfoCsReq"
            }
            Self::CmdMonopolyGuessBuyInformationScRsp => {
                "CmdMonopolyGuessBuyInformationScRsp"
            }
            Self::CmdDeleteSocialEventServerCacheScRsp => {
                "CmdDeleteSocialEventServerCacheScRsp"
            }
            Self::CmdMonopolyEventSelectFriendScRsp => {
                "CmdMonopolyEventSelectFriendScRsp"
            }
            Self::CmdGetMonopolyMbtiReportRewardCsReq => {
                "CmdGetMonopolyMbtiReportRewardCsReq"
            }
            Self::CmdMonopolyReRollRandomCsReq => "CmdMonopolyReRollRandomCsReq",
            Self::CmdMonopolyCellUpdateNotify => "CmdMonopolyCellUpdateNotify",
            Self::CmdMonopolyGetRegionProgressScRsp => {
                "CmdMonopolyGetRegionProgressScRsp"
            }
            Self::CmdMonopolyEventLoadUpdateScNotify => {
                "CmdMonopolyEventLoadUpdateScNotify"
            }
            Self::CmdMonopolyGetRaffleTicketCsReq => "CmdMonopolyGetRaffleTicketCsReq",
            Self::CmdMonopolyDailySettleScNotify => "CmdMonopolyDailySettleScNotify",
            Self::CmdMonopolyGameRaiseRatioCsReq => "CmdMonopolyGameRaiseRatioCsReq",
            Self::CmdMonopolyGameBingoFlipCardCsReq => {
                "CmdMonopolyGameBingoFlipCardCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMonopolyTypeNone" => Some(Self::None),
            "CmdMonopolyScrachRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyScrachRaffleTicketScRsp)
            }
            "CmdMonopolyAcceptQuizCsReq" => Some(Self::CmdMonopolyAcceptQuizCsReq),
            "CmdMonopolyTakePhaseRewardCsReq" => {
                Some(Self::CmdMonopolyTakePhaseRewardCsReq)
            }
            "CmdDeleteSocialEventServerCacheCsReq" => {
                Some(Self::CmdDeleteSocialEventServerCacheCsReq)
            }
            "CmdMonopolyGetDailyInitItemScRsp" => {
                Some(Self::CmdMonopolyGetDailyInitItemScRsp)
            }
            "CmdDailyFirstEnterMonopolyActivityScRsp" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityScRsp)
            }
            "CmdMonopolyGetDailyInitItemCsReq" => {
                Some(Self::CmdMonopolyGetDailyInitItemCsReq)
            }
            "CmdMonopolyGetRafflePoolInfoScRsp" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoScRsp)
            }
            "CmdMonopolyLikeScRsp" => Some(Self::CmdMonopolyLikeScRsp),
            "CmdMonopolyScrachRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyScrachRaffleTicketCsReq)
            }
            "CmdMonopolyTakeRaffleTicketRewardScRsp" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardScRsp)
            }
            "CmdMonopolyTakePhaseRewardScRsp" => {
                Some(Self::CmdMonopolyTakePhaseRewardScRsp)
            }
            "CmdMonopolyGiveUpCurContentCsReq" => {
                Some(Self::CmdMonopolyGiveUpCurContentCsReq)
            }
            "CmdMonopolyContentUpdateScNotify" => {
                Some(Self::CmdMonopolyContentUpdateScNotify)
            }
            "CmdMonopolyConfirmRandomCsReq" => Some(Self::CmdMonopolyConfirmRandomCsReq),
            "CmdMonopolyCheatDiceCsReq" => Some(Self::CmdMonopolyCheatDiceCsReq),
            "CmdGetMonopolyFriendRankingListScRsp" => {
                Some(Self::CmdGetMonopolyFriendRankingListScRsp)
            }
            "CmdGetSocialEventServerCacheScRsp" => {
                Some(Self::CmdGetSocialEventServerCacheScRsp)
            }
            "CmdMonopolyGetRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyGetRaffleTicketScRsp)
            }
            "CmdMonopolyGuessBuyInformationCsReq" => {
                Some(Self::CmdMonopolyGuessBuyInformationCsReq)
            }
            "CmdGetMonopolyInfoScRsp" => Some(Self::CmdGetMonopolyInfoScRsp),
            "CmdMonopolyBuyGoodsScRsp" => Some(Self::CmdMonopolyBuyGoodsScRsp),
            "CmdMonopolyUpgradeAssetCsReq" => Some(Self::CmdMonopolyUpgradeAssetCsReq),
            "CmdMonopolyRollDiceCsReq" => Some(Self::CmdMonopolyRollDiceCsReq),
            "CmdMonopolyGuessChooseScRsp" => Some(Self::CmdMonopolyGuessChooseScRsp),
            "CmdMonopolyLikeScNotify" => Some(Self::CmdMonopolyLikeScNotify),
            "CmdGetMonopolyDailyReportScRsp" => {
                Some(Self::CmdGetMonopolyDailyReportScRsp)
            }
            "CmdGetMbtiReportScRsp" => Some(Self::CmdGetMbtiReportScRsp),
            "CmdMonopolyMoveCsReq" => Some(Self::CmdMonopolyMoveCsReq),
            "CmdMonopolyGameGachaScRsp" => Some(Self::CmdMonopolyGameGachaScRsp),
            "CmdGetMonopolyFriendRankingListCsReq" => {
                Some(Self::CmdGetMonopolyFriendRankingListCsReq)
            }
            "CmdMonopolyGameSettleScNotify" => Some(Self::CmdMonopolyGameSettleScNotify),
            "CmdMonopolyActionResultScNotify" => {
                Some(Self::CmdMonopolyActionResultScNotify)
            }
            "CmdMonopolyTakeRaffleTicketRewardCsReq" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardCsReq)
            }
            "CmdMonopolyConditionUpdateScNotify" => {
                Some(Self::CmdMonopolyConditionUpdateScNotify)
            }
            "CmdMonopolyGameRaiseRatioScRsp" => {
                Some(Self::CmdMonopolyGameRaiseRatioScRsp)
            }
            "CmdGetMbtiReportCsReq" => Some(Self::CmdGetMbtiReportCsReq),
            "CmdGetMonopolyInfoCsReq" => Some(Self::CmdGetMonopolyInfoCsReq),
            "CmdMonopolyRollRandomCsReq" => Some(Self::CmdMonopolyRollRandomCsReq),
            "CmdGetMonopolyDailyReportCsReq" => {
                Some(Self::CmdGetMonopolyDailyReportCsReq)
            }
            "CmdMonopolyGameBingoFlipCardScRsp" => {
                Some(Self::CmdMonopolyGameBingoFlipCardScRsp)
            }
            "CmdMonopolyGuessChooseCsReq" => Some(Self::CmdMonopolyGuessChooseCsReq),
            "CmdMonopolyGameGachaCsReq" => Some(Self::CmdMonopolyGameGachaCsReq),
            "CmdMonopolyUpgradeAssetScRsp" => Some(Self::CmdMonopolyUpgradeAssetScRsp),
            "CmdMonopolyQuizDurationChangeScNotify" => {
                Some(Self::CmdMonopolyQuizDurationChangeScNotify)
            }
            "CmdMonopolyCheatDiceScRsp" => Some(Self::CmdMonopolyCheatDiceScRsp),
            "CmdDailyFirstEnterMonopolyActivityCsReq" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityCsReq)
            }
            "CmdMonopolyLikeCsReq" => Some(Self::CmdMonopolyLikeCsReq),
            "CmdMonopolyClickCellScRsp" => Some(Self::CmdMonopolyClickCellScRsp),
            "CmdMonopolyReRollRandomScRsp" => Some(Self::CmdMonopolyReRollRandomScRsp),
            "CmdMonopolyRollDiceScRsp" => Some(Self::CmdMonopolyRollDiceScRsp),
            "CmdMonopolyMoveScRsp" => Some(Self::CmdMonopolyMoveScRsp),
            "CmdMonopolySelectOptionScRsp" => Some(Self::CmdMonopolySelectOptionScRsp),
            "CmdMonopolySelectOptionCsReq" => Some(Self::CmdMonopolySelectOptionCsReq),
            "CmdMonopolyGiveUpCurContentScRsp" => {
                Some(Self::CmdMonopolyGiveUpCurContentScRsp)
            }
            "CmdMonopolySttUpdateScNotify" => Some(Self::CmdMonopolySttUpdateScNotify),
            "CmdMonopolyGuessDrawScNotify" => Some(Self::CmdMonopolyGuessDrawScNotify),
            "CmdMonopolyGetRegionProgressCsReq" => {
                Some(Self::CmdMonopolyGetRegionProgressCsReq)
            }
            "CmdMonopolyClickCellCsReq" => Some(Self::CmdMonopolyClickCellCsReq),
            "CmdGetSocialEventServerCacheCsReq" => {
                Some(Self::CmdGetSocialEventServerCacheCsReq)
            }
            "CmdMonopolyAcceptQuizScRsp" => Some(Self::CmdMonopolyAcceptQuizScRsp),
            "CmdMonopolyConfirmRandomScRsp" => Some(Self::CmdMonopolyConfirmRandomScRsp),
            "CmdMonopolyBuyGoodsCsReq" => Some(Self::CmdMonopolyBuyGoodsCsReq),
            "CmdMonopolyClickMbtiReportScRsp" => {
                Some(Self::CmdMonopolyClickMbtiReportScRsp)
            }
            "CmdGetMonopolyMbtiReportRewardScRsp" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardScRsp)
            }
            "CmdMonopolyGameCreateScNotify" => Some(Self::CmdMonopolyGameCreateScNotify),
            "CmdMonopolyRollRandomScRsp" => Some(Self::CmdMonopolyRollRandomScRsp),
            "CmdMonopolyEventSelectFriendCsReq" => {
                Some(Self::CmdMonopolyEventSelectFriendCsReq)
            }
            "CmdMonopolyClickMbtiReportCsReq" => {
                Some(Self::CmdMonopolyClickMbtiReportCsReq)
            }
            "CmdMonopolySocialEventEffectScNotify" => {
                Some(Self::CmdMonopolySocialEventEffectScNotify)
            }
            "CmdMonopolyGetRafflePoolInfoCsReq" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoCsReq)
            }
            "CmdMonopolyGuessBuyInformationScRsp" => {
                Some(Self::CmdMonopolyGuessBuyInformationScRsp)
            }
            "CmdDeleteSocialEventServerCacheScRsp" => {
                Some(Self::CmdDeleteSocialEventServerCacheScRsp)
            }
            "CmdMonopolyEventSelectFriendScRsp" => {
                Some(Self::CmdMonopolyEventSelectFriendScRsp)
            }
            "CmdGetMonopolyMbtiReportRewardCsReq" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardCsReq)
            }
            "CmdMonopolyReRollRandomCsReq" => Some(Self::CmdMonopolyReRollRandomCsReq),
            "CmdMonopolyCellUpdateNotify" => Some(Self::CmdMonopolyCellUpdateNotify),
            "CmdMonopolyGetRegionProgressScRsp" => {
                Some(Self::CmdMonopolyGetRegionProgressScRsp)
            }
            "CmdMonopolyEventLoadUpdateScNotify" => {
                Some(Self::CmdMonopolyEventLoadUpdateScNotify)
            }
            "CmdMonopolyGetRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyGetRaffleTicketCsReq)
            }
            "CmdMonopolyDailySettleScNotify" => {
                Some(Self::CmdMonopolyDailySettleScNotify)
            }
            "CmdMonopolyGameRaiseRatioCsReq" => {
                Some(Self::CmdMonopolyGameRaiseRatioCsReq)
            }
            "CmdMonopolyGameBingoFlipCardCsReq" => {
                Some(Self::CmdMonopolyGameBingoFlipCardCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Alaffglbomn {
    MonopolySocialEventStatusNone = 0,
    MonopolySocialEventStatusWaitingSelectFriend = 1,
}
impl Alaffglbomn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolySocialEventStatusNone => "MONOPOLY_SOCIAL_EVENT_STATUS_NONE",
            Self::MonopolySocialEventStatusWaitingSelectFriend => {
                "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_SOCIAL_EVENT_STATUS_NONE" => {
                Some(Self::MonopolySocialEventStatusNone)
            }
            "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND" => {
                Some(Self::MonopolySocialEventStatusWaitingSelectFriend)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bhejhnmaopf {
    MonopolyCellStateIdle = 0,
    MonopolyCellStateBarrier = 1,
    MonopolyCellStateGround = 2,
    MonopolyCellStateFinish = 3,
}
impl Bhejhnmaopf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyCellStateIdle => "MONOPOLY_CELL_STATE_IDLE",
            Self::MonopolyCellStateBarrier => "MONOPOLY_CELL_STATE_BARRIER",
            Self::MonopolyCellStateGround => "MONOPOLY_CELL_STATE_GROUND",
            Self::MonopolyCellStateFinish => "MONOPOLY_CELL_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_CELL_STATE_IDLE" => Some(Self::MonopolyCellStateIdle),
            "MONOPOLY_CELL_STATE_BARRIER" => Some(Self::MonopolyCellStateBarrier),
            "MONOPOLY_CELL_STATE_GROUND" => Some(Self::MonopolyCellStateGround),
            "MONOPOLY_CELL_STATE_FINISH" => Some(Self::MonopolyCellStateFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cabgohofgbm {
    MonopolyActionResultSourceTypeNone = 0,
    MonopolyActionResultSourceTypeEffect = 1,
    MonopolyActionResultSourceTypeAssetBonus = 2,
    MonopolyActionResultSourceTypeAssetTax = 3,
    MonopolyActionResultSourceTypeAssetUpgrade = 4,
    MonopolyActionResultSourceTypeGameSettle = 5,
    MonopolyActionResultSourceTypeBuyGoods = 6,
    MonopolyActionResultSourceTypeClick = 7,
    MonopolyActionResultSourceTypeSocialEvent = 8,
    MonopolyActionResultSourceTypeLike = 9,
    MonopolyActionResultSourceTypeQuizGameSettle = 10,
}
impl Cabgohofgbm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonopolyActionResultSourceTypeNone => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::MonopolyActionResultSourceTypeEffect => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT"
            }
            Self::MonopolyActionResultSourceTypeAssetBonus => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS"
            }
            Self::MonopolyActionResultSourceTypeAssetTax => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX"
            }
            Self::MonopolyActionResultSourceTypeAssetUpgrade => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE"
            }
            Self::MonopolyActionResultSourceTypeGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE"
            }
            Self::MonopolyActionResultSourceTypeBuyGoods => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS"
            }
            Self::MonopolyActionResultSourceTypeClick => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK"
            }
            Self::MonopolyActionResultSourceTypeSocialEvent => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT"
            }
            Self::MonopolyActionResultSourceTypeLike => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE"
            }
            Self::MonopolyActionResultSourceTypeQuizGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::MonopolyActionResultSourceTypeNone)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT" => {
                Some(Self::MonopolyActionResultSourceTypeEffect)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS" => {
                Some(Self::MonopolyActionResultSourceTypeAssetBonus)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX" => {
                Some(Self::MonopolyActionResultSourceTypeAssetTax)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE" => {
                Some(Self::MonopolyActionResultSourceTypeAssetUpgrade)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeGameSettle)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS" => {
                Some(Self::MonopolyActionResultSourceTypeBuyGoods)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK" => {
                Some(Self::MonopolyActionResultSourceTypeClick)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT" => {
                Some(Self::MonopolyActionResultSourceTypeSocialEvent)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE" => {
                Some(Self::MonopolyActionResultSourceTypeLike)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeQuizGameSettle)
            }
            _ => None,
        }
    }
}
/// JMEEHHIKLOI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultiplayerType {
    None = 0,
    CmdMultiplayerFightGameStartScNotify = 1034,
    CmdMultiplayerFightGameFinishScNotify = 1037,
    CmdMultiplayerFightGiveUpScRsp = 1053,
    CmdMultiplayerFightGameStateCsReq = 1059,
    CmdMultiplayerGetFightGateCsReq = 1003,
    CmdMultiplayerFightGiveUpCsReq = 1039,
    CmdMultiplayerFightGameStateScRsp = 1020,
    CmdMultiplayerGetFightGateScRsp = 1046,
    CmdMultiplayerMatch3FinishScNotify = 1080,
}
impl CmdMultiplayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultiplayerTypeNone",
            Self::CmdMultiplayerFightGameStartScNotify => {
                "CmdMultiplayerFightGameStartScNotify"
            }
            Self::CmdMultiplayerFightGameFinishScNotify => {
                "CmdMultiplayerFightGameFinishScNotify"
            }
            Self::CmdMultiplayerFightGiveUpScRsp => "CmdMultiplayerFightGiveUpScRsp",
            Self::CmdMultiplayerFightGameStateCsReq => {
                "CmdMultiplayerFightGameStateCsReq"
            }
            Self::CmdMultiplayerGetFightGateCsReq => "CmdMultiplayerGetFightGateCsReq",
            Self::CmdMultiplayerFightGiveUpCsReq => "CmdMultiplayerFightGiveUpCsReq",
            Self::CmdMultiplayerFightGameStateScRsp => {
                "CmdMultiplayerFightGameStateScRsp"
            }
            Self::CmdMultiplayerGetFightGateScRsp => "CmdMultiplayerGetFightGateScRsp",
            Self::CmdMultiplayerMatch3FinishScNotify => {
                "CmdMultiplayerMatch3FinishScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultiplayerTypeNone" => Some(Self::None),
            "CmdMultiplayerFightGameStartScNotify" => {
                Some(Self::CmdMultiplayerFightGameStartScNotify)
            }
            "CmdMultiplayerFightGameFinishScNotify" => {
                Some(Self::CmdMultiplayerFightGameFinishScNotify)
            }
            "CmdMultiplayerFightGiveUpScRsp" => {
                Some(Self::CmdMultiplayerFightGiveUpScRsp)
            }
            "CmdMultiplayerFightGameStateCsReq" => {
                Some(Self::CmdMultiplayerFightGameStateCsReq)
            }
            "CmdMultiplayerGetFightGateCsReq" => {
                Some(Self::CmdMultiplayerGetFightGateCsReq)
            }
            "CmdMultiplayerFightGiveUpCsReq" => {
                Some(Self::CmdMultiplayerFightGiveUpCsReq)
            }
            "CmdMultiplayerFightGameStateScRsp" => {
                Some(Self::CmdMultiplayerFightGameStateScRsp)
            }
            "CmdMultiplayerGetFightGateScRsp" => {
                Some(Self::CmdMultiplayerGetFightGateScRsp)
            }
            "CmdMultiplayerMatch3FinishScNotify" => {
                Some(Self::CmdMultiplayerMatch3FinishScNotify)
            }
            _ => None,
        }
    }
}
/// KOKCOJPOAPF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMultipleDropType {
    None = 0,
    CmdGetPlayerReturnMultiDropInfoScRsp = 4639,
    CmdGetPlayerReturnMultiDropInfoCsReq = 4646,
    CmdGetMultipleDropInfoCsReq = 4659,
    CmdMultipleDropInfoScNotify = 4603,
    CmdMultipleDropInfoNotify = 4653,
    CmdGetMultipleDropInfoScRsp = 4620,
}
impl CmdMultipleDropType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMultipleDropTypeNone",
            Self::CmdGetPlayerReturnMultiDropInfoScRsp => {
                "CmdGetPlayerReturnMultiDropInfoScRsp"
            }
            Self::CmdGetPlayerReturnMultiDropInfoCsReq => {
                "CmdGetPlayerReturnMultiDropInfoCsReq"
            }
            Self::CmdGetMultipleDropInfoCsReq => "CmdGetMultipleDropInfoCsReq",
            Self::CmdMultipleDropInfoScNotify => "CmdMultipleDropInfoScNotify",
            Self::CmdMultipleDropInfoNotify => "CmdMultipleDropInfoNotify",
            Self::CmdGetMultipleDropInfoScRsp => "CmdGetMultipleDropInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultipleDropTypeNone" => Some(Self::None),
            "CmdGetPlayerReturnMultiDropInfoScRsp" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoScRsp)
            }
            "CmdGetPlayerReturnMultiDropInfoCsReq" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoCsReq)
            }
            "CmdGetMultipleDropInfoCsReq" => Some(Self::CmdGetMultipleDropInfoCsReq),
            "CmdMultipleDropInfoScNotify" => Some(Self::CmdMultipleDropInfoScNotify),
            "CmdMultipleDropInfoNotify" => Some(Self::CmdMultipleDropInfoNotify),
            "CmdGetMultipleDropInfoScRsp" => Some(Self::CmdGetMultipleDropInfoScRsp),
            _ => None,
        }
    }
}
/// AALEALHIBEO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMuseumType {
    None = 0,
    CmdSetStuffToAreaCsReq = 4339,
    CmdGetStuffScNotify = 4380,
    CmdMuseumTargetMissionFinishNotify = 4399,
    CmdUpgradeAreaScRsp = 4375,
    CmdBuyNpcStuffCsReq = 4303,
    CmdUpgradeAreaCsReq = 4330,
    CmdMuseumTargetStartNotify = 4383,
    CmdMuseumTakeCollectRewardCsReq = 4393,
    CmdUpgradeAreaStatCsReq = 4348,
    CmdFinishCurTurnCsReq = 4347,
    CmdUpgradeAreaStatScRsp = 4390,
    CmdMuseumDispatchFinishedScNotify = 4373,
    CmdRemoveStuffFromAreaScRsp = 4337,
    CmdMuseumRandomEventQueryCsReq = 4325,
    CmdMuseumFundsChangedScNotify = 4319,
    CmdGetExhibitScNotify = 4316,
    CmdBuyNpcStuffScRsp = 4346,
    CmdMuseumRandomEventSelectCsReq = 4333,
    CmdMuseumRandomEventStartScNotify = 4361,
    CmdFinishCurTurnScRsp = 4374,
    CmdMuseumTakeCollectRewardScRsp = 4364,
    CmdRemoveStuffFromAreaCsReq = 4334,
    CmdGetMuseumInfoScRsp = 4320,
    CmdMuseumRandomEventQueryScRsp = 4329,
    CmdMuseumInfoChangedScNotify = 4379,
    CmdSetStuffToAreaScRsp = 4353,
    CmdGetMuseumInfoCsReq = 4359,
    CmdMuseumTargetRewardNotify = 4309,
    CmdMuseumRandomEventSelectScRsp = 4351,
}
impl CmdMuseumType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMuseumTypeNone",
            Self::CmdSetStuffToAreaCsReq => "CmdSetStuffToAreaCsReq",
            Self::CmdGetStuffScNotify => "CmdGetStuffScNotify",
            Self::CmdMuseumTargetMissionFinishNotify => {
                "CmdMuseumTargetMissionFinishNotify"
            }
            Self::CmdUpgradeAreaScRsp => "CmdUpgradeAreaScRsp",
            Self::CmdBuyNpcStuffCsReq => "CmdBuyNpcStuffCsReq",
            Self::CmdUpgradeAreaCsReq => "CmdUpgradeAreaCsReq",
            Self::CmdMuseumTargetStartNotify => "CmdMuseumTargetStartNotify",
            Self::CmdMuseumTakeCollectRewardCsReq => "CmdMuseumTakeCollectRewardCsReq",
            Self::CmdUpgradeAreaStatCsReq => "CmdUpgradeAreaStatCsReq",
            Self::CmdFinishCurTurnCsReq => "CmdFinishCurTurnCsReq",
            Self::CmdUpgradeAreaStatScRsp => "CmdUpgradeAreaStatScRsp",
            Self::CmdMuseumDispatchFinishedScNotify => {
                "CmdMuseumDispatchFinishedScNotify"
            }
            Self::CmdRemoveStuffFromAreaScRsp => "CmdRemoveStuffFromAreaScRsp",
            Self::CmdMuseumRandomEventQueryCsReq => "CmdMuseumRandomEventQueryCsReq",
            Self::CmdMuseumFundsChangedScNotify => "CmdMuseumFundsChangedScNotify",
            Self::CmdGetExhibitScNotify => "CmdGetExhibitScNotify",
            Self::CmdBuyNpcStuffScRsp => "CmdBuyNpcStuffScRsp",
            Self::CmdMuseumRandomEventSelectCsReq => "CmdMuseumRandomEventSelectCsReq",
            Self::CmdMuseumRandomEventStartScNotify => {
                "CmdMuseumRandomEventStartScNotify"
            }
            Self::CmdFinishCurTurnScRsp => "CmdFinishCurTurnScRsp",
            Self::CmdMuseumTakeCollectRewardScRsp => "CmdMuseumTakeCollectRewardScRsp",
            Self::CmdRemoveStuffFromAreaCsReq => "CmdRemoveStuffFromAreaCsReq",
            Self::CmdGetMuseumInfoScRsp => "CmdGetMuseumInfoScRsp",
            Self::CmdMuseumRandomEventQueryScRsp => "CmdMuseumRandomEventQueryScRsp",
            Self::CmdMuseumInfoChangedScNotify => "CmdMuseumInfoChangedScNotify",
            Self::CmdSetStuffToAreaScRsp => "CmdSetStuffToAreaScRsp",
            Self::CmdGetMuseumInfoCsReq => "CmdGetMuseumInfoCsReq",
            Self::CmdMuseumTargetRewardNotify => "CmdMuseumTargetRewardNotify",
            Self::CmdMuseumRandomEventSelectScRsp => "CmdMuseumRandomEventSelectScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMuseumTypeNone" => Some(Self::None),
            "CmdSetStuffToAreaCsReq" => Some(Self::CmdSetStuffToAreaCsReq),
            "CmdGetStuffScNotify" => Some(Self::CmdGetStuffScNotify),
            "CmdMuseumTargetMissionFinishNotify" => {
                Some(Self::CmdMuseumTargetMissionFinishNotify)
            }
            "CmdUpgradeAreaScRsp" => Some(Self::CmdUpgradeAreaScRsp),
            "CmdBuyNpcStuffCsReq" => Some(Self::CmdBuyNpcStuffCsReq),
            "CmdUpgradeAreaCsReq" => Some(Self::CmdUpgradeAreaCsReq),
            "CmdMuseumTargetStartNotify" => Some(Self::CmdMuseumTargetStartNotify),
            "CmdMuseumTakeCollectRewardCsReq" => {
                Some(Self::CmdMuseumTakeCollectRewardCsReq)
            }
            "CmdUpgradeAreaStatCsReq" => Some(Self::CmdUpgradeAreaStatCsReq),
            "CmdFinishCurTurnCsReq" => Some(Self::CmdFinishCurTurnCsReq),
            "CmdUpgradeAreaStatScRsp" => Some(Self::CmdUpgradeAreaStatScRsp),
            "CmdMuseumDispatchFinishedScNotify" => {
                Some(Self::CmdMuseumDispatchFinishedScNotify)
            }
            "CmdRemoveStuffFromAreaScRsp" => Some(Self::CmdRemoveStuffFromAreaScRsp),
            "CmdMuseumRandomEventQueryCsReq" => {
                Some(Self::CmdMuseumRandomEventQueryCsReq)
            }
            "CmdMuseumFundsChangedScNotify" => Some(Self::CmdMuseumFundsChangedScNotify),
            "CmdGetExhibitScNotify" => Some(Self::CmdGetExhibitScNotify),
            "CmdBuyNpcStuffScRsp" => Some(Self::CmdBuyNpcStuffScRsp),
            "CmdMuseumRandomEventSelectCsReq" => {
                Some(Self::CmdMuseumRandomEventSelectCsReq)
            }
            "CmdMuseumRandomEventStartScNotify" => {
                Some(Self::CmdMuseumRandomEventStartScNotify)
            }
            "CmdFinishCurTurnScRsp" => Some(Self::CmdFinishCurTurnScRsp),
            "CmdMuseumTakeCollectRewardScRsp" => {
                Some(Self::CmdMuseumTakeCollectRewardScRsp)
            }
            "CmdRemoveStuffFromAreaCsReq" => Some(Self::CmdRemoveStuffFromAreaCsReq),
            "CmdGetMuseumInfoScRsp" => Some(Self::CmdGetMuseumInfoScRsp),
            "CmdMuseumRandomEventQueryScRsp" => {
                Some(Self::CmdMuseumRandomEventQueryScRsp)
            }
            "CmdMuseumInfoChangedScNotify" => Some(Self::CmdMuseumInfoChangedScNotify),
            "CmdSetStuffToAreaScRsp" => Some(Self::CmdSetStuffToAreaScRsp),
            "CmdGetMuseumInfoCsReq" => Some(Self::CmdGetMuseumInfoCsReq),
            "CmdMuseumTargetRewardNotify" => Some(Self::CmdMuseumTargetRewardNotify),
            "CmdMuseumRandomEventSelectScRsp" => {
                Some(Self::CmdMuseumRandomEventSelectScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gbainemeked {
    MuseumRandomEventStateNone = 0,
    MuseumRandomEventStateStart = 1,
    MuseumRandomEventStateProcessing = 2,
    MuseumRandomEventStateFinish = 3,
}
impl Gbainemeked {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MuseumRandomEventStateNone => "MUSEUM_RANDOM_EVENT_STATE_NONE",
            Self::MuseumRandomEventStateStart => "MUSEUM_RANDOM_EVENT_STATE_START",
            Self::MuseumRandomEventStateProcessing => {
                "MUSEUM_RANDOM_EVENT_STATE_PROCESSING"
            }
            Self::MuseumRandomEventStateFinish => "MUSEUM_RANDOM_EVENT_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MUSEUM_RANDOM_EVENT_STATE_NONE" => Some(Self::MuseumRandomEventStateNone),
            "MUSEUM_RANDOM_EVENT_STATE_START" => Some(Self::MuseumRandomEventStateStart),
            "MUSEUM_RANDOM_EVENT_STATE_PROCESSING" => {
                Some(Self::MuseumRandomEventStateProcessing)
            }
            "MUSEUM_RANDOM_EVENT_STATE_FINISH" => {
                Some(Self::MuseumRandomEventStateFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pefbcgphgbg {
    WorkPosNone = 0,
    WorkPos1 = 1,
    WorkPos2 = 2,
    WorkPos3 = 3,
}
impl Pefbcgphgbg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WorkPosNone => "WORK_POS_NONE",
            Self::WorkPos1 => "WORK_POS_1",
            Self::WorkPos2 => "WORK_POS_2",
            Self::WorkPos3 => "WORK_POS_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORK_POS_NONE" => Some(Self::WorkPosNone),
            "WORK_POS_1" => Some(Self::WorkPos1),
            "WORK_POS_2" => Some(Self::WorkPos2),
            "WORK_POS_3" => Some(Self::WorkPos3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kefmjgdendi {
    StatTypeNone = 0,
    StatTypeArt = 1,
    StatTypeCulture = 2,
    StatTypePopular = 3,
}
impl Kefmjgdendi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatTypeNone => "STAT_TYPE_NONE",
            Self::StatTypeArt => "STAT_TYPE_ART",
            Self::StatTypeCulture => "STAT_TYPE_CULTURE",
            Self::StatTypePopular => "STAT_TYPE_POPULAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAT_TYPE_NONE" => Some(Self::StatTypeNone),
            "STAT_TYPE_ART" => Some(Self::StatTypeArt),
            "STAT_TYPE_CULTURE" => Some(Self::StatTypeCulture),
            "STAT_TYPE_POPULAR" => Some(Self::StatTypePopular),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nllhbghakih {
    Unknow = 0,
    MissionReward = 1,
    EventBuyStuff = 2,
    MarketBuyStuff = 3,
    QuestReward = 4,
    Initial = 5,
    PhaseFinishReward = 6,
}
impl Nllhbghakih {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknow => "UNKNOW",
            Self::MissionReward => "MISSION_REWARD",
            Self::EventBuyStuff => "EVENT_BUY_STUFF",
            Self::MarketBuyStuff => "MARKET_BUY_STUFF",
            Self::QuestReward => "QUEST_REWARD",
            Self::Initial => "INITIAL",
            Self::PhaseFinishReward => "PHASE_FINISH_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOW" => Some(Self::Unknow),
            "MISSION_REWARD" => Some(Self::MissionReward),
            "EVENT_BUY_STUFF" => Some(Self::EventBuyStuff),
            "MARKET_BUY_STUFF" => Some(Self::MarketBuyStuff),
            "QUEST_REWARD" => Some(Self::QuestReward),
            "INITIAL" => Some(Self::Initial),
            "PHASE_FINISH_REWARD" => Some(Self::PhaseFinishReward),
            _ => None,
        }
    }
}
/// CLJPOJELMAM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMusicRhythmType {
    None = 0,
    CmdMusicRhythmFinishLevelCsReq = 7587,
    CmdMusicRhythmSaveSongConfigDataScRsp = 7578,
    CmdMusicRhythmUnlockSongNotify = 7589,
    CmdMusicRhythmDataScRsp = 7574,
    CmdMusicRhythmSaveSongConfigDataCsReq = 7599,
    CmdMusicRhythmFinishLevelScRsp = 7575,
    CmdMusicRhythmStartLevelCsReq = 7582,
    CmdMusicRhythmUnlockTrackScNotify = 7579,
    CmdMusicRhythmDataCsReq = 7590,
    CmdMusicRhythmUnlockSongSfxScNotify = 7571,
    CmdMusicRhythmStartLevelScRsp = 7591,
    CmdMusicRhythmMaxDifficultyLevelsUnlockNotify = 7580,
}
impl CmdMusicRhythmType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdMusicRhythmTypeNone",
            Self::CmdMusicRhythmFinishLevelCsReq => "CmdMusicRhythmFinishLevelCsReq",
            Self::CmdMusicRhythmSaveSongConfigDataScRsp => {
                "CmdMusicRhythmSaveSongConfigDataScRsp"
            }
            Self::CmdMusicRhythmUnlockSongNotify => "CmdMusicRhythmUnlockSongNotify",
            Self::CmdMusicRhythmDataScRsp => "CmdMusicRhythmDataScRsp",
            Self::CmdMusicRhythmSaveSongConfigDataCsReq => {
                "CmdMusicRhythmSaveSongConfigDataCsReq"
            }
            Self::CmdMusicRhythmFinishLevelScRsp => "CmdMusicRhythmFinishLevelScRsp",
            Self::CmdMusicRhythmStartLevelCsReq => "CmdMusicRhythmStartLevelCsReq",
            Self::CmdMusicRhythmUnlockTrackScNotify => {
                "CmdMusicRhythmUnlockTrackScNotify"
            }
            Self::CmdMusicRhythmDataCsReq => "CmdMusicRhythmDataCsReq",
            Self::CmdMusicRhythmUnlockSongSfxScNotify => {
                "CmdMusicRhythmUnlockSongSfxScNotify"
            }
            Self::CmdMusicRhythmStartLevelScRsp => "CmdMusicRhythmStartLevelScRsp",
            Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify => {
                "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMusicRhythmTypeNone" => Some(Self::None),
            "CmdMusicRhythmFinishLevelCsReq" => {
                Some(Self::CmdMusicRhythmFinishLevelCsReq)
            }
            "CmdMusicRhythmSaveSongConfigDataScRsp" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataScRsp)
            }
            "CmdMusicRhythmUnlockSongNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongNotify)
            }
            "CmdMusicRhythmDataScRsp" => Some(Self::CmdMusicRhythmDataScRsp),
            "CmdMusicRhythmSaveSongConfigDataCsReq" => {
                Some(Self::CmdMusicRhythmSaveSongConfigDataCsReq)
            }
            "CmdMusicRhythmFinishLevelScRsp" => {
                Some(Self::CmdMusicRhythmFinishLevelScRsp)
            }
            "CmdMusicRhythmStartLevelCsReq" => Some(Self::CmdMusicRhythmStartLevelCsReq),
            "CmdMusicRhythmUnlockTrackScNotify" => {
                Some(Self::CmdMusicRhythmUnlockTrackScNotify)
            }
            "CmdMusicRhythmDataCsReq" => Some(Self::CmdMusicRhythmDataCsReq),
            "CmdMusicRhythmUnlockSongSfxScNotify" => {
                Some(Self::CmdMusicRhythmUnlockSongSfxScNotify)
            }
            "CmdMusicRhythmStartLevelScRsp" => Some(Self::CmdMusicRhythmStartLevelScRsp),
            "CmdMusicRhythmMaxDifficultyLevelsUnlockNotify" => {
                Some(Self::CmdMusicRhythmMaxDifficultyLevelsUnlockNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nmeindibhhi {
    StatusClose = 0,
    StatusOpen = 1,
}
impl Nmeindibhhi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusClose => "STATUS_CLOSE",
            Self::StatusOpen => "STATUS_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_CLOSE" => Some(Self::StatusClose),
            "STATUS_OPEN" => Some(Self::StatusOpen),
            _ => None,
        }
    }
}
/// OOFJNLGBEMO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdOfferingType {
    None = 0,
    CmdSubmitOfferingItemCsReq = 6935,
    CmdSubmitOfferingItemScRsp = 6930,
    CmdGetOfferingInfoScRsp = 6928,
    CmdOfferingInfoScNotify = 6924,
    CmdTakeOfferingRewardScRsp = 6923,
    CmdTakeOfferingRewardCsReq = 6932,
    CmdGetOfferingInfoCsReq = 6925,
}
impl CmdOfferingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdOfferingTypeNone",
            Self::CmdSubmitOfferingItemCsReq => "CmdSubmitOfferingItemCsReq",
            Self::CmdSubmitOfferingItemScRsp => "CmdSubmitOfferingItemScRsp",
            Self::CmdGetOfferingInfoScRsp => "CmdGetOfferingInfoScRsp",
            Self::CmdOfferingInfoScNotify => "CmdOfferingInfoScNotify",
            Self::CmdTakeOfferingRewardScRsp => "CmdTakeOfferingRewardScRsp",
            Self::CmdTakeOfferingRewardCsReq => "CmdTakeOfferingRewardCsReq",
            Self::CmdGetOfferingInfoCsReq => "CmdGetOfferingInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdOfferingTypeNone" => Some(Self::None),
            "CmdSubmitOfferingItemCsReq" => Some(Self::CmdSubmitOfferingItemCsReq),
            "CmdSubmitOfferingItemScRsp" => Some(Self::CmdSubmitOfferingItemScRsp),
            "CmdGetOfferingInfoScRsp" => Some(Self::CmdGetOfferingInfoScRsp),
            "CmdOfferingInfoScNotify" => Some(Self::CmdOfferingInfoScNotify),
            "CmdTakeOfferingRewardScRsp" => Some(Self::CmdTakeOfferingRewardScRsp),
            "CmdTakeOfferingRewardCsReq" => Some(Self::CmdTakeOfferingRewardCsReq),
            "CmdGetOfferingInfoCsReq" => Some(Self::CmdGetOfferingInfoCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ofnmfjiceop {
    OfferingStateNone = 0,
    OfferingStateLock = 1,
    OfferingStateOpen = 2,
}
impl Ofnmfjiceop {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::OfferingStateNone => "OFFERING_STATE_NONE",
            Self::OfferingStateLock => "OFFERING_STATE_LOCK",
            Self::OfferingStateOpen => "OFFERING_STATE_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFERING_STATE_NONE" => Some(Self::OfferingStateNone),
            "OFFERING_STATE_LOCK" => Some(Self::OfferingStateLock),
            "OFFERING_STATE_OPEN" => Some(Self::OfferingStateOpen),
            _ => None,
        }
    }
}
/// JCKEAHBFLOE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamMissionType {
    None = 0,
    CmdAcceptedPamMissionExpireCsReq = 4059,
    CmdAcceptedPamMissionExpireScRsp = 4020,
    CmdSyncAcceptedPamMissionNotify = 4003,
}
impl CmdPamMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamMissionTypeNone",
            Self::CmdAcceptedPamMissionExpireCsReq => "CmdAcceptedPamMissionExpireCsReq",
            Self::CmdAcceptedPamMissionExpireScRsp => "CmdAcceptedPamMissionExpireScRsp",
            Self::CmdSyncAcceptedPamMissionNotify => "CmdSyncAcceptedPamMissionNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamMissionTypeNone" => Some(Self::None),
            "CmdAcceptedPamMissionExpireCsReq" => {
                Some(Self::CmdAcceptedPamMissionExpireCsReq)
            }
            "CmdAcceptedPamMissionExpireScRsp" => {
                Some(Self::CmdAcceptedPamMissionExpireScRsp)
            }
            "CmdSyncAcceptedPamMissionNotify" => {
                Some(Self::CmdSyncAcceptedPamMissionNotify)
            }
            _ => None,
        }
    }
}
/// HBKAAONKDBK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPamSkinType {
    None = 0,
    CmdGetPamSkinDataCsReq = 8125,
    CmdSelectPamSkinScRsp = 8130,
    CmdSelectPamSkinCsReq = 8135,
    CmdGetPamSkinDataScRsp = 8128,
    CmdUnlockPamSkinScNotify = 8132,
}
impl CmdPamSkinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPamSkinTypeNone",
            Self::CmdGetPamSkinDataCsReq => "CmdGetPamSkinDataCsReq",
            Self::CmdSelectPamSkinScRsp => "CmdSelectPamSkinScRsp",
            Self::CmdSelectPamSkinCsReq => "CmdSelectPamSkinCsReq",
            Self::CmdGetPamSkinDataScRsp => "CmdGetPamSkinDataScRsp",
            Self::CmdUnlockPamSkinScNotify => "CmdUnlockPamSkinScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamSkinTypeNone" => Some(Self::None),
            "CmdGetPamSkinDataCsReq" => Some(Self::CmdGetPamSkinDataCsReq),
            "CmdSelectPamSkinScRsp" => Some(Self::CmdSelectPamSkinScRsp),
            "CmdSelectPamSkinCsReq" => Some(Self::CmdSelectPamSkinCsReq),
            "CmdGetPamSkinDataScRsp" => Some(Self::CmdGetPamSkinDataScRsp),
            "CmdUnlockPamSkinScNotify" => Some(Self::CmdUnlockPamSkinScNotify),
            _ => None,
        }
    }
}
/// IJFHFBLPKOC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPetType {
    None = 0,
    CmdRecallPetCsReq = 7642,
    CmdRecallPetScRsp = 7637,
    CmdSummonPetScRsp = 7624,
    CmdGetPetDataCsReq = 7615,
    CmdSummonPetCsReq = 7612,
    CmdGetPetDataScRsp = 7616,
    CmdCurPetChangedScNotify = 7640,
}
impl CmdPetType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPetTypeNone",
            Self::CmdRecallPetCsReq => "CmdRecallPetCsReq",
            Self::CmdRecallPetScRsp => "CmdRecallPetScRsp",
            Self::CmdSummonPetScRsp => "CmdSummonPetScRsp",
            Self::CmdGetPetDataCsReq => "CmdGetPetDataCsReq",
            Self::CmdSummonPetCsReq => "CmdSummonPetCsReq",
            Self::CmdGetPetDataScRsp => "CmdGetPetDataScRsp",
            Self::CmdCurPetChangedScNotify => "CmdCurPetChangedScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPetTypeNone" => Some(Self::None),
            "CmdRecallPetCsReq" => Some(Self::CmdRecallPetCsReq),
            "CmdRecallPetScRsp" => Some(Self::CmdRecallPetScRsp),
            "CmdSummonPetScRsp" => Some(Self::CmdSummonPetScRsp),
            "CmdGetPetDataCsReq" => Some(Self::CmdGetPetDataCsReq),
            "CmdSummonPetCsReq" => Some(Self::CmdSummonPetCsReq),
            "CmdGetPetDataScRsp" => Some(Self::CmdGetPetDataScRsp),
            "CmdCurPetChangedScNotify" => Some(Self::CmdCurPetChangedScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lccdnenejod {
    PetOperationTypeNone = 0,
    PetOperationTypeSummon = 1,
    PetOperationTypeRecall = 2,
}
impl Lccdnenejod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PetOperationTypeNone => "PET_OPERATION_TYPE_NONE",
            Self::PetOperationTypeSummon => "PET_OPERATION_TYPE_SUMMON",
            Self::PetOperationTypeRecall => "PET_OPERATION_TYPE_RECALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PET_OPERATION_TYPE_NONE" => Some(Self::PetOperationTypeNone),
            "PET_OPERATION_TYPE_SUMMON" => Some(Self::PetOperationTypeSummon),
            "PET_OPERATION_TYPE_RECALL" => Some(Self::PetOperationTypeRecall),
            _ => None,
        }
    }
}
/// FPKAHDAACMO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPhoneType {
    None = 0,
    CmdGetPhoneDataScRsp = 5120,
    CmdSelectChatBubbleCsReq = 5103,
    CmdGetPhoneDataCsReq = 5159,
    CmdSelectPhoneThemeScRsp = 5134,
    CmdSelectPhoneThemeCsReq = 5153,
    CmdSelectChatBubbleScRsp = 5146,
    CmdUnlockPhoneThemeScNotify = 5137,
    CmdUnlockChatBubbleScNotify = 5139,
}
impl CmdPhoneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPhoneTypeNone",
            Self::CmdGetPhoneDataScRsp => "CmdGetPhoneDataScRsp",
            Self::CmdSelectChatBubbleCsReq => "CmdSelectChatBubbleCsReq",
            Self::CmdGetPhoneDataCsReq => "CmdGetPhoneDataCsReq",
            Self::CmdSelectPhoneThemeScRsp => "CmdSelectPhoneThemeScRsp",
            Self::CmdSelectPhoneThemeCsReq => "CmdSelectPhoneThemeCsReq",
            Self::CmdSelectChatBubbleScRsp => "CmdSelectChatBubbleScRsp",
            Self::CmdUnlockPhoneThemeScNotify => "CmdUnlockPhoneThemeScNotify",
            Self::CmdUnlockChatBubbleScNotify => "CmdUnlockChatBubbleScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPhoneTypeNone" => Some(Self::None),
            "CmdGetPhoneDataScRsp" => Some(Self::CmdGetPhoneDataScRsp),
            "CmdSelectChatBubbleCsReq" => Some(Self::CmdSelectChatBubbleCsReq),
            "CmdGetPhoneDataCsReq" => Some(Self::CmdGetPhoneDataCsReq),
            "CmdSelectPhoneThemeScRsp" => Some(Self::CmdSelectPhoneThemeScRsp),
            "CmdSelectPhoneThemeCsReq" => Some(Self::CmdSelectPhoneThemeCsReq),
            "CmdSelectChatBubbleScRsp" => Some(Self::CmdSelectChatBubbleScRsp),
            "CmdUnlockPhoneThemeScNotify" => Some(Self::CmdUnlockPhoneThemeScNotify),
            "CmdUnlockChatBubbleScNotify" => Some(Self::CmdUnlockChatBubbleScNotify),
            _ => None,
        }
    }
}
/// LMKPDGGLJBB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerType {
    None = 0,
    CmdGetAuthkeyScRsp = 79,
    CmdGetLevelRewardCsReq = 73,
    CmdUnlockAvatarPathCsReq = 11,
    CmdPlayerLoginFinishScRsp = 6,
    CmdRetcodeNotify = 32,
    CmdGetLevelRewardTakenListScRsp = 51,
    CmdFeatureSwitchClosedScNotify = 82,
    CmdGetGameStateServiceConfigScRsp = 97,
    CmdGetLevelRewardScRsp = 83,
    CmdQueryProductInfoCsReq = 14,
    CmdGmTalkScRsp = 47,
    CmdGetVideoVersionKeyCsReq = 22,
    CmdSetNicknameScRsp = 29,
    CmdUpdatePlayerSettingCsReq = 92,
    CmdGetMultiPathAvatarInfoCsReq = 58,
    CmdAvatarPathChangedNotify = 44,
    CmdGetBasicInfoCsReq = 2,
    CmdPlayerGetTokenScRsp = 53,
    CmdPlayerLoginFinishCsReq = 55,
    CmdUpdatePsnSettingsInfoScRsp = 57,
    CmdGetGameStateServiceConfigCsReq = 5,
    CmdSetRedPointStatusScNotify = 7,
    CmdUpdatePsnSettingsInfoCsReq = 52,
    CmdClientObjUploadCsReq = 40,
    CmdDailyRefreshNotify = 56,
    CmdPlayerGetTokenCsReq = 39,
    CmdSetNicknameCsReq = 25,
    CmdGetMultiPathAvatarInfoScRsp = 87,
    CmdGmTalkCsReq = 16,
    CmdClientDownloadDataScNotify = 15,
    CmdReserveStaminaExchangeCsReq = 50,
    CmdPlayerLoginCsReq = 59,
    CmdExchangeStaminaCsReq = 75,
    CmdUpdatePlayerSettingScRsp = 98,
    CmdClientObjUploadScRsp = 67,
    CmdGetSecretKeyInfoCsReq = 27,
    CmdGetVideoVersionKeyScRsp = 35,
    CmdSetMultipleAvatarPathsCsReq = 100,
    CmdSetGenderScRsp = 4,
    CmdSetPlayerInfoCsReq = 88,
    CmdRegionStopScNotify = 19,
    CmdSetAvatarPathCsReq = 1,
    CmdPlayerLogoutScRsp = 46,
    CmdPlayerLoginScRsp = 20,
    CmdPlayerLogoutCsReq = 3,
    CmdPlayerKickOutScNotify = 80,
    CmdGetSecretKeyInfoScRsp = 38,
    CmdUnlockAvatarPathScRsp = 8,
    CmdPlayerHeartBeatCsReq = 96,
    CmdQueryProductInfoScRsp = 23,
    CmdSetAvatarPathScRsp = 41,
    CmdGetLevelRewardTakenListCsReq = 33,
    CmdReserveStaminaExchangeScRsp = 69,
    CmdAntiAddictScNotify = 61,
    CmdSetMultipleAvatarPathsScRsp = 95,
    CmdGmTalkScNotify = 37,
    CmdUpdateFeatureSwitchScNotify = 45,
    CmdGetAuthkeyCsReq = 90,
    CmdSetGameplayBirthdayScRsp = 72,
    CmdServerAnnounceNotify = 94,
    CmdGateServerScNotify = 71,
    CmdExchangeStaminaScRsp = 48,
    CmdClientObjDownloadDataScNotify = 42,
    CmdMonthCardRewardNotify = 60,
    CmdGetBasicInfoScRsp = 66,
    CmdSetGenderCsReq = 91,
    CmdSetLanguageCsReq = 93,
    CmdSetPlayerInfoScRsp = 43,
    CmdStaminaInfoScNotify = 68,
    CmdAceAntiCheaterCsReq = 24,
    CmdSetGameplayBirthdayCsReq = 78,
    CmdPlayerHeartBeatScRsp = 31,
    CmdAceAntiCheaterScRsp = 12,
    CmdSetLanguageScRsp = 64,
}
impl CmdPlayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerTypeNone",
            Self::CmdGetAuthkeyScRsp => "CmdGetAuthkeyScRsp",
            Self::CmdGetLevelRewardCsReq => "CmdGetLevelRewardCsReq",
            Self::CmdUnlockAvatarPathCsReq => "CmdUnlockAvatarPathCsReq",
            Self::CmdPlayerLoginFinishScRsp => "CmdPlayerLoginFinishScRsp",
            Self::CmdRetcodeNotify => "CmdRetcodeNotify",
            Self::CmdGetLevelRewardTakenListScRsp => "CmdGetLevelRewardTakenListScRsp",
            Self::CmdFeatureSwitchClosedScNotify => "CmdFeatureSwitchClosedScNotify",
            Self::CmdGetGameStateServiceConfigScRsp => {
                "CmdGetGameStateServiceConfigScRsp"
            }
            Self::CmdGetLevelRewardScRsp => "CmdGetLevelRewardScRsp",
            Self::CmdQueryProductInfoCsReq => "CmdQueryProductInfoCsReq",
            Self::CmdGmTalkScRsp => "CmdGmTalkScRsp",
            Self::CmdGetVideoVersionKeyCsReq => "CmdGetVideoVersionKeyCsReq",
            Self::CmdSetNicknameScRsp => "CmdSetNicknameScRsp",
            Self::CmdUpdatePlayerSettingCsReq => "CmdUpdatePlayerSettingCsReq",
            Self::CmdGetMultiPathAvatarInfoCsReq => "CmdGetMultiPathAvatarInfoCsReq",
            Self::CmdAvatarPathChangedNotify => "CmdAvatarPathChangedNotify",
            Self::CmdGetBasicInfoCsReq => "CmdGetBasicInfoCsReq",
            Self::CmdPlayerGetTokenScRsp => "CmdPlayerGetTokenScRsp",
            Self::CmdPlayerLoginFinishCsReq => "CmdPlayerLoginFinishCsReq",
            Self::CmdUpdatePsnSettingsInfoScRsp => "CmdUpdatePsnSettingsInfoScRsp",
            Self::CmdGetGameStateServiceConfigCsReq => {
                "CmdGetGameStateServiceConfigCsReq"
            }
            Self::CmdSetRedPointStatusScNotify => "CmdSetRedPointStatusScNotify",
            Self::CmdUpdatePsnSettingsInfoCsReq => "CmdUpdatePsnSettingsInfoCsReq",
            Self::CmdClientObjUploadCsReq => "CmdClientObjUploadCsReq",
            Self::CmdDailyRefreshNotify => "CmdDailyRefreshNotify",
            Self::CmdPlayerGetTokenCsReq => "CmdPlayerGetTokenCsReq",
            Self::CmdSetNicknameCsReq => "CmdSetNicknameCsReq",
            Self::CmdGetMultiPathAvatarInfoScRsp => "CmdGetMultiPathAvatarInfoScRsp",
            Self::CmdGmTalkCsReq => "CmdGmTalkCsReq",
            Self::CmdClientDownloadDataScNotify => "CmdClientDownloadDataScNotify",
            Self::CmdReserveStaminaExchangeCsReq => "CmdReserveStaminaExchangeCsReq",
            Self::CmdPlayerLoginCsReq => "CmdPlayerLoginCsReq",
            Self::CmdExchangeStaminaCsReq => "CmdExchangeStaminaCsReq",
            Self::CmdUpdatePlayerSettingScRsp => "CmdUpdatePlayerSettingScRsp",
            Self::CmdClientObjUploadScRsp => "CmdClientObjUploadScRsp",
            Self::CmdGetSecretKeyInfoCsReq => "CmdGetSecretKeyInfoCsReq",
            Self::CmdGetVideoVersionKeyScRsp => "CmdGetVideoVersionKeyScRsp",
            Self::CmdSetMultipleAvatarPathsCsReq => "CmdSetMultipleAvatarPathsCsReq",
            Self::CmdSetGenderScRsp => "CmdSetGenderScRsp",
            Self::CmdSetPlayerInfoCsReq => "CmdSetPlayerInfoCsReq",
            Self::CmdRegionStopScNotify => "CmdRegionStopScNotify",
            Self::CmdSetAvatarPathCsReq => "CmdSetAvatarPathCsReq",
            Self::CmdPlayerLogoutScRsp => "CmdPlayerLogoutScRsp",
            Self::CmdPlayerLoginScRsp => "CmdPlayerLoginScRsp",
            Self::CmdPlayerLogoutCsReq => "CmdPlayerLogoutCsReq",
            Self::CmdPlayerKickOutScNotify => "CmdPlayerKickOutScNotify",
            Self::CmdGetSecretKeyInfoScRsp => "CmdGetSecretKeyInfoScRsp",
            Self::CmdUnlockAvatarPathScRsp => "CmdUnlockAvatarPathScRsp",
            Self::CmdPlayerHeartBeatCsReq => "CmdPlayerHeartBeatCsReq",
            Self::CmdQueryProductInfoScRsp => "CmdQueryProductInfoScRsp",
            Self::CmdSetAvatarPathScRsp => "CmdSetAvatarPathScRsp",
            Self::CmdGetLevelRewardTakenListCsReq => "CmdGetLevelRewardTakenListCsReq",
            Self::CmdReserveStaminaExchangeScRsp => "CmdReserveStaminaExchangeScRsp",
            Self::CmdAntiAddictScNotify => "CmdAntiAddictScNotify",
            Self::CmdSetMultipleAvatarPathsScRsp => "CmdSetMultipleAvatarPathsScRsp",
            Self::CmdGmTalkScNotify => "CmdGmTalkScNotify",
            Self::CmdUpdateFeatureSwitchScNotify => "CmdUpdateFeatureSwitchScNotify",
            Self::CmdGetAuthkeyCsReq => "CmdGetAuthkeyCsReq",
            Self::CmdSetGameplayBirthdayScRsp => "CmdSetGameplayBirthdayScRsp",
            Self::CmdServerAnnounceNotify => "CmdServerAnnounceNotify",
            Self::CmdGateServerScNotify => "CmdGateServerScNotify",
            Self::CmdExchangeStaminaScRsp => "CmdExchangeStaminaScRsp",
            Self::CmdClientObjDownloadDataScNotify => "CmdClientObjDownloadDataScNotify",
            Self::CmdMonthCardRewardNotify => "CmdMonthCardRewardNotify",
            Self::CmdGetBasicInfoScRsp => "CmdGetBasicInfoScRsp",
            Self::CmdSetGenderCsReq => "CmdSetGenderCsReq",
            Self::CmdSetLanguageCsReq => "CmdSetLanguageCsReq",
            Self::CmdSetPlayerInfoScRsp => "CmdSetPlayerInfoScRsp",
            Self::CmdStaminaInfoScNotify => "CmdStaminaInfoScNotify",
            Self::CmdAceAntiCheaterCsReq => "CmdAceAntiCheaterCsReq",
            Self::CmdSetGameplayBirthdayCsReq => "CmdSetGameplayBirthdayCsReq",
            Self::CmdPlayerHeartBeatScRsp => "CmdPlayerHeartBeatScRsp",
            Self::CmdAceAntiCheaterScRsp => "CmdAceAntiCheaterScRsp",
            Self::CmdSetLanguageScRsp => "CmdSetLanguageScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerTypeNone" => Some(Self::None),
            "CmdGetAuthkeyScRsp" => Some(Self::CmdGetAuthkeyScRsp),
            "CmdGetLevelRewardCsReq" => Some(Self::CmdGetLevelRewardCsReq),
            "CmdUnlockAvatarPathCsReq" => Some(Self::CmdUnlockAvatarPathCsReq),
            "CmdPlayerLoginFinishScRsp" => Some(Self::CmdPlayerLoginFinishScRsp),
            "CmdRetcodeNotify" => Some(Self::CmdRetcodeNotify),
            "CmdGetLevelRewardTakenListScRsp" => {
                Some(Self::CmdGetLevelRewardTakenListScRsp)
            }
            "CmdFeatureSwitchClosedScNotify" => {
                Some(Self::CmdFeatureSwitchClosedScNotify)
            }
            "CmdGetGameStateServiceConfigScRsp" => {
                Some(Self::CmdGetGameStateServiceConfigScRsp)
            }
            "CmdGetLevelRewardScRsp" => Some(Self::CmdGetLevelRewardScRsp),
            "CmdQueryProductInfoCsReq" => Some(Self::CmdQueryProductInfoCsReq),
            "CmdGmTalkScRsp" => Some(Self::CmdGmTalkScRsp),
            "CmdGetVideoVersionKeyCsReq" => Some(Self::CmdGetVideoVersionKeyCsReq),
            "CmdSetNicknameScRsp" => Some(Self::CmdSetNicknameScRsp),
            "CmdUpdatePlayerSettingCsReq" => Some(Self::CmdUpdatePlayerSettingCsReq),
            "CmdGetMultiPathAvatarInfoCsReq" => {
                Some(Self::CmdGetMultiPathAvatarInfoCsReq)
            }
            "CmdAvatarPathChangedNotify" => Some(Self::CmdAvatarPathChangedNotify),
            "CmdGetBasicInfoCsReq" => Some(Self::CmdGetBasicInfoCsReq),
            "CmdPlayerGetTokenScRsp" => Some(Self::CmdPlayerGetTokenScRsp),
            "CmdPlayerLoginFinishCsReq" => Some(Self::CmdPlayerLoginFinishCsReq),
            "CmdUpdatePsnSettingsInfoScRsp" => Some(Self::CmdUpdatePsnSettingsInfoScRsp),
            "CmdGetGameStateServiceConfigCsReq" => {
                Some(Self::CmdGetGameStateServiceConfigCsReq)
            }
            "CmdSetRedPointStatusScNotify" => Some(Self::CmdSetRedPointStatusScNotify),
            "CmdUpdatePsnSettingsInfoCsReq" => Some(Self::CmdUpdatePsnSettingsInfoCsReq),
            "CmdClientObjUploadCsReq" => Some(Self::CmdClientObjUploadCsReq),
            "CmdDailyRefreshNotify" => Some(Self::CmdDailyRefreshNotify),
            "CmdPlayerGetTokenCsReq" => Some(Self::CmdPlayerGetTokenCsReq),
            "CmdSetNicknameCsReq" => Some(Self::CmdSetNicknameCsReq),
            "CmdGetMultiPathAvatarInfoScRsp" => {
                Some(Self::CmdGetMultiPathAvatarInfoScRsp)
            }
            "CmdGmTalkCsReq" => Some(Self::CmdGmTalkCsReq),
            "CmdClientDownloadDataScNotify" => Some(Self::CmdClientDownloadDataScNotify),
            "CmdReserveStaminaExchangeCsReq" => {
                Some(Self::CmdReserveStaminaExchangeCsReq)
            }
            "CmdPlayerLoginCsReq" => Some(Self::CmdPlayerLoginCsReq),
            "CmdExchangeStaminaCsReq" => Some(Self::CmdExchangeStaminaCsReq),
            "CmdUpdatePlayerSettingScRsp" => Some(Self::CmdUpdatePlayerSettingScRsp),
            "CmdClientObjUploadScRsp" => Some(Self::CmdClientObjUploadScRsp),
            "CmdGetSecretKeyInfoCsReq" => Some(Self::CmdGetSecretKeyInfoCsReq),
            "CmdGetVideoVersionKeyScRsp" => Some(Self::CmdGetVideoVersionKeyScRsp),
            "CmdSetMultipleAvatarPathsCsReq" => {
                Some(Self::CmdSetMultipleAvatarPathsCsReq)
            }
            "CmdSetGenderScRsp" => Some(Self::CmdSetGenderScRsp),
            "CmdSetPlayerInfoCsReq" => Some(Self::CmdSetPlayerInfoCsReq),
            "CmdRegionStopScNotify" => Some(Self::CmdRegionStopScNotify),
            "CmdSetAvatarPathCsReq" => Some(Self::CmdSetAvatarPathCsReq),
            "CmdPlayerLogoutScRsp" => Some(Self::CmdPlayerLogoutScRsp),
            "CmdPlayerLoginScRsp" => Some(Self::CmdPlayerLoginScRsp),
            "CmdPlayerLogoutCsReq" => Some(Self::CmdPlayerLogoutCsReq),
            "CmdPlayerKickOutScNotify" => Some(Self::CmdPlayerKickOutScNotify),
            "CmdGetSecretKeyInfoScRsp" => Some(Self::CmdGetSecretKeyInfoScRsp),
            "CmdUnlockAvatarPathScRsp" => Some(Self::CmdUnlockAvatarPathScRsp),
            "CmdPlayerHeartBeatCsReq" => Some(Self::CmdPlayerHeartBeatCsReq),
            "CmdQueryProductInfoScRsp" => Some(Self::CmdQueryProductInfoScRsp),
            "CmdSetAvatarPathScRsp" => Some(Self::CmdSetAvatarPathScRsp),
            "CmdGetLevelRewardTakenListCsReq" => {
                Some(Self::CmdGetLevelRewardTakenListCsReq)
            }
            "CmdReserveStaminaExchangeScRsp" => {
                Some(Self::CmdReserveStaminaExchangeScRsp)
            }
            "CmdAntiAddictScNotify" => Some(Self::CmdAntiAddictScNotify),
            "CmdSetMultipleAvatarPathsScRsp" => {
                Some(Self::CmdSetMultipleAvatarPathsScRsp)
            }
            "CmdGmTalkScNotify" => Some(Self::CmdGmTalkScNotify),
            "CmdUpdateFeatureSwitchScNotify" => {
                Some(Self::CmdUpdateFeatureSwitchScNotify)
            }
            "CmdGetAuthkeyCsReq" => Some(Self::CmdGetAuthkeyCsReq),
            "CmdSetGameplayBirthdayScRsp" => Some(Self::CmdSetGameplayBirthdayScRsp),
            "CmdServerAnnounceNotify" => Some(Self::CmdServerAnnounceNotify),
            "CmdGateServerScNotify" => Some(Self::CmdGateServerScNotify),
            "CmdExchangeStaminaScRsp" => Some(Self::CmdExchangeStaminaScRsp),
            "CmdClientObjDownloadDataScNotify" => {
                Some(Self::CmdClientObjDownloadDataScNotify)
            }
            "CmdMonthCardRewardNotify" => Some(Self::CmdMonthCardRewardNotify),
            "CmdGetBasicInfoScRsp" => Some(Self::CmdGetBasicInfoScRsp),
            "CmdSetGenderCsReq" => Some(Self::CmdSetGenderCsReq),
            "CmdSetLanguageCsReq" => Some(Self::CmdSetLanguageCsReq),
            "CmdSetPlayerInfoScRsp" => Some(Self::CmdSetPlayerInfoScRsp),
            "CmdStaminaInfoScNotify" => Some(Self::CmdStaminaInfoScNotify),
            "CmdAceAntiCheaterCsReq" => Some(Self::CmdAceAntiCheaterCsReq),
            "CmdSetGameplayBirthdayCsReq" => Some(Self::CmdSetGameplayBirthdayCsReq),
            "CmdPlayerHeartBeatScRsp" => Some(Self::CmdPlayerHeartBeatScRsp),
            "CmdAceAntiCheaterScRsp" => Some(Self::CmdAceAntiCheaterScRsp),
            "CmdSetLanguageScRsp" => Some(Self::CmdSetLanguageScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ekgebeepbln {
    AuthkeySignTypeNone = 0,
    AuthkeySignTypeDefault = 1,
    AuthkeySignTypeRsa = 2,
}
impl Ekgebeepbln {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AuthkeySignTypeNone => "AUTHKEY_SIGN_TYPE_NONE",
            Self::AuthkeySignTypeDefault => "AUTHKEY_SIGN_TYPE_DEFAULT",
            Self::AuthkeySignTypeRsa => "AUTHKEY_SIGN_TYPE_RSA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHKEY_SIGN_TYPE_NONE" => Some(Self::AuthkeySignTypeNone),
            "AUTHKEY_SIGN_TYPE_DEFAULT" => Some(Self::AuthkeySignTypeDefault),
            "AUTHKEY_SIGN_TYPE_RSA" => Some(Self::AuthkeySignTypeRsa),
            _ => None,
        }
    }
}
/// LHOKLEOHKHD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerBoardType {
    None = 0,
    CmdSetDisplayAvatarScRsp = 2853,
    CmdGetPlayerBoardDataScRsp = 2820,
    CmdUnlockHeadIconScNotify = 2880,
    CmdSetIsDisplayAvatarInfoScRsp = 2837,
    CmdSetHeadIconScRsp = 2846,
    CmdSetAssistAvatarCsReq = 2874,
    CmdSetAssistAvatarScRsp = 2830,
    CmdSetHeadIconCsReq = 2803,
    CmdSetSignatureScRsp = 2847,
    CmdSetSignatureCsReq = 2816,
    CmdSetDisplayAvatarCsReq = 2839,
    CmdGetPlayerBoardDataCsReq = 2859,
    CmdSetIsDisplayAvatarInfoCsReq = 2834,
}
impl CmdPlayerBoardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerBoardTypeNone",
            Self::CmdSetDisplayAvatarScRsp => "CmdSetDisplayAvatarScRsp",
            Self::CmdGetPlayerBoardDataScRsp => "CmdGetPlayerBoardDataScRsp",
            Self::CmdUnlockHeadIconScNotify => "CmdUnlockHeadIconScNotify",
            Self::CmdSetIsDisplayAvatarInfoScRsp => "CmdSetIsDisplayAvatarInfoScRsp",
            Self::CmdSetHeadIconScRsp => "CmdSetHeadIconScRsp",
            Self::CmdSetAssistAvatarCsReq => "CmdSetAssistAvatarCsReq",
            Self::CmdSetAssistAvatarScRsp => "CmdSetAssistAvatarScRsp",
            Self::CmdSetHeadIconCsReq => "CmdSetHeadIconCsReq",
            Self::CmdSetSignatureScRsp => "CmdSetSignatureScRsp",
            Self::CmdSetSignatureCsReq => "CmdSetSignatureCsReq",
            Self::CmdSetDisplayAvatarCsReq => "CmdSetDisplayAvatarCsReq",
            Self::CmdGetPlayerBoardDataCsReq => "CmdGetPlayerBoardDataCsReq",
            Self::CmdSetIsDisplayAvatarInfoCsReq => "CmdSetIsDisplayAvatarInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerBoardTypeNone" => Some(Self::None),
            "CmdSetDisplayAvatarScRsp" => Some(Self::CmdSetDisplayAvatarScRsp),
            "CmdGetPlayerBoardDataScRsp" => Some(Self::CmdGetPlayerBoardDataScRsp),
            "CmdUnlockHeadIconScNotify" => Some(Self::CmdUnlockHeadIconScNotify),
            "CmdSetIsDisplayAvatarInfoScRsp" => {
                Some(Self::CmdSetIsDisplayAvatarInfoScRsp)
            }
            "CmdSetHeadIconScRsp" => Some(Self::CmdSetHeadIconScRsp),
            "CmdSetAssistAvatarCsReq" => Some(Self::CmdSetAssistAvatarCsReq),
            "CmdSetAssistAvatarScRsp" => Some(Self::CmdSetAssistAvatarScRsp),
            "CmdSetHeadIconCsReq" => Some(Self::CmdSetHeadIconCsReq),
            "CmdSetSignatureScRsp" => Some(Self::CmdSetSignatureScRsp),
            "CmdSetSignatureCsReq" => Some(Self::CmdSetSignatureCsReq),
            "CmdSetDisplayAvatarCsReq" => Some(Self::CmdSetDisplayAvatarCsReq),
            "CmdGetPlayerBoardDataCsReq" => Some(Self::CmdGetPlayerBoardDataCsReq),
            "CmdSetIsDisplayAvatarInfoCsReq" => {
                Some(Self::CmdSetIsDisplayAvatarInfoCsReq)
            }
            _ => None,
        }
    }
}
/// MOMMJPHDPIB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerReturnType {
    None = 0,
    CmdPlayerReturnStartScNotify = 4559,
    CmdPlayerReturnTakePointRewardCsReq = 4539,
    CmdPlayerReturnTakePointRewardScRsp = 4553,
    CmdPlayerReturnSignScRsp = 4503,
    CmdPlayerReturnTakeRewardScRsp = 4537,
    CmdPlayerReturnSignCsReq = 4520,
    CmdPlayerReturnTakeRewardCsReq = 4534,
    CmdPlayerReturnInfoQueryScRsp = 4516,
    CmdPlayerReturnForceFinishScNotify = 4547,
    CmdPlayerReturnInfoQueryCsReq = 4580,
    CmdPlayerReturnPointChangeScNotify = 4546,
}
impl CmdPlayerReturnType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerReturnTypeNone",
            Self::CmdPlayerReturnStartScNotify => "CmdPlayerReturnStartScNotify",
            Self::CmdPlayerReturnTakePointRewardCsReq => {
                "CmdPlayerReturnTakePointRewardCsReq"
            }
            Self::CmdPlayerReturnTakePointRewardScRsp => {
                "CmdPlayerReturnTakePointRewardScRsp"
            }
            Self::CmdPlayerReturnSignScRsp => "CmdPlayerReturnSignScRsp",
            Self::CmdPlayerReturnTakeRewardScRsp => "CmdPlayerReturnTakeRewardScRsp",
            Self::CmdPlayerReturnSignCsReq => "CmdPlayerReturnSignCsReq",
            Self::CmdPlayerReturnTakeRewardCsReq => "CmdPlayerReturnTakeRewardCsReq",
            Self::CmdPlayerReturnInfoQueryScRsp => "CmdPlayerReturnInfoQueryScRsp",
            Self::CmdPlayerReturnForceFinishScNotify => {
                "CmdPlayerReturnForceFinishScNotify"
            }
            Self::CmdPlayerReturnInfoQueryCsReq => "CmdPlayerReturnInfoQueryCsReq",
            Self::CmdPlayerReturnPointChangeScNotify => {
                "CmdPlayerReturnPointChangeScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerReturnTypeNone" => Some(Self::None),
            "CmdPlayerReturnStartScNotify" => Some(Self::CmdPlayerReturnStartScNotify),
            "CmdPlayerReturnTakePointRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakePointRewardCsReq)
            }
            "CmdPlayerReturnTakePointRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakePointRewardScRsp)
            }
            "CmdPlayerReturnSignScRsp" => Some(Self::CmdPlayerReturnSignScRsp),
            "CmdPlayerReturnTakeRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakeRewardScRsp)
            }
            "CmdPlayerReturnSignCsReq" => Some(Self::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnTakeRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakeRewardCsReq)
            }
            "CmdPlayerReturnInfoQueryScRsp" => Some(Self::CmdPlayerReturnInfoQueryScRsp),
            "CmdPlayerReturnForceFinishScNotify" => {
                Some(Self::CmdPlayerReturnForceFinishScNotify)
            }
            "CmdPlayerReturnInfoQueryCsReq" => Some(Self::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnPointChangeScNotify" => {
                Some(Self::CmdPlayerReturnPointChangeScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ecjeanmgcdm {
    PlayerReturnNone = 0,
    PlayerReturnProcessing = 1,
    PlayerReturnFinish = 2,
}
impl Ecjeanmgcdm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PlayerReturnNone => "PLAYER_RETURN_NONE",
            Self::PlayerReturnProcessing => "PLAYER_RETURN_PROCESSING",
            Self::PlayerReturnFinish => "PLAYER_RETURN_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYER_RETURN_NONE" => Some(Self::PlayerReturnNone),
            "PLAYER_RETURN_PROCESSING" => Some(Self::PlayerReturnProcessing),
            "PLAYER_RETURN_FINISH" => Some(Self::PlayerReturnFinish),
            _ => None,
        }
    }
}
/// ADHLOFGPNAM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlotType {
    None = 0,
    CmdFinishPlotCsReq = 1159,
    CmdFinishPlotScRsp = 1120,
}
impl CmdPlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlotTypeNone",
            Self::CmdFinishPlotCsReq => "CmdFinishPlotCsReq",
            Self::CmdFinishPlotScRsp => "CmdFinishPlotScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlotTypeNone" => Some(Self::None),
            "CmdFinishPlotCsReq" => Some(Self::CmdFinishPlotCsReq),
            "CmdFinishPlotScRsp" => Some(Self::CmdFinishPlotScRsp),
            _ => None,
        }
    }
}
/// HJECHHFBEBC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPunkLordType {
    None = 0,
    CmdGetKilledPunkLordMonsterDataCsReq = 3273,
    CmdTakeKilledPunkLordMonsterScoreScRsp = 3294,
    CmdGetPunkLordBattleRecordScRsp = 3236,
    CmdTakePunkLordPointRewardScRsp = 3275,
    CmdGetPunkLordDataScRsp = 3279,
    CmdPunkLordMonsterInfoScNotify = 3248,
    CmdStartPunkLordRaidScRsp = 3246,
    CmdSummonPunkLordMonsterScRsp = 3237,
    CmdStartPunkLordRaidCsReq = 3203,
    CmdGetPunkLordBattleRecordCsReq = 3270,
    CmdGetKilledPunkLordMonsterDataScRsp = 3283,
    CmdGetPunkLordMonsterDataScRsp = 3220,
    CmdSummonPunkLordMonsterCsReq = 3234,
    CmdTakePunkLordPointRewardCsReq = 3230,
    CmdPunkLordMonsterKilledNotify = 3293,
    CmdSharePunkLordMonsterScRsp = 3253,
    CmdTakeKilledPunkLordMonsterScoreCsReq = 3264,
    CmdPunkLordRaidTimeOutScNotify = 3261,
    CmdPunkLordDataChangeNotify = 3210,
    CmdGetPunkLordMonsterDataCsReq = 3259,
    CmdGetPunkLordDataCsReq = 3290,
    CmdPunkLordBattleResultScNotify = 3251,
    CmdSharePunkLordMonsterCsReq = 3239,
}
impl CmdPunkLordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPunkLordTypeNone",
            Self::CmdGetKilledPunkLordMonsterDataCsReq => {
                "CmdGetKilledPunkLordMonsterDataCsReq"
            }
            Self::CmdTakeKilledPunkLordMonsterScoreScRsp => {
                "CmdTakeKilledPunkLordMonsterScoreScRsp"
            }
            Self::CmdGetPunkLordBattleRecordScRsp => "CmdGetPunkLordBattleRecordScRsp",
            Self::CmdTakePunkLordPointRewardScRsp => "CmdTakePunkLordPointRewardScRsp",
            Self::CmdGetPunkLordDataScRsp => "CmdGetPunkLordDataScRsp",
            Self::CmdPunkLordMonsterInfoScNotify => "CmdPunkLordMonsterInfoScNotify",
            Self::CmdStartPunkLordRaidScRsp => "CmdStartPunkLordRaidScRsp",
            Self::CmdSummonPunkLordMonsterScRsp => "CmdSummonPunkLordMonsterScRsp",
            Self::CmdStartPunkLordRaidCsReq => "CmdStartPunkLordRaidCsReq",
            Self::CmdGetPunkLordBattleRecordCsReq => "CmdGetPunkLordBattleRecordCsReq",
            Self::CmdGetKilledPunkLordMonsterDataScRsp => {
                "CmdGetKilledPunkLordMonsterDataScRsp"
            }
            Self::CmdGetPunkLordMonsterDataScRsp => "CmdGetPunkLordMonsterDataScRsp",
            Self::CmdSummonPunkLordMonsterCsReq => "CmdSummonPunkLordMonsterCsReq",
            Self::CmdTakePunkLordPointRewardCsReq => "CmdTakePunkLordPointRewardCsReq",
            Self::CmdPunkLordMonsterKilledNotify => "CmdPunkLordMonsterKilledNotify",
            Self::CmdSharePunkLordMonsterScRsp => "CmdSharePunkLordMonsterScRsp",
            Self::CmdTakeKilledPunkLordMonsterScoreCsReq => {
                "CmdTakeKilledPunkLordMonsterScoreCsReq"
            }
            Self::CmdPunkLordRaidTimeOutScNotify => "CmdPunkLordRaidTimeOutScNotify",
            Self::CmdPunkLordDataChangeNotify => "CmdPunkLordDataChangeNotify",
            Self::CmdGetPunkLordMonsterDataCsReq => "CmdGetPunkLordMonsterDataCsReq",
            Self::CmdGetPunkLordDataCsReq => "CmdGetPunkLordDataCsReq",
            Self::CmdPunkLordBattleResultScNotify => "CmdPunkLordBattleResultScNotify",
            Self::CmdSharePunkLordMonsterCsReq => "CmdSharePunkLordMonsterCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPunkLordTypeNone" => Some(Self::None),
            "CmdGetKilledPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataCsReq)
            }
            "CmdTakeKilledPunkLordMonsterScoreScRsp" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreScRsp)
            }
            "CmdGetPunkLordBattleRecordScRsp" => {
                Some(Self::CmdGetPunkLordBattleRecordScRsp)
            }
            "CmdTakePunkLordPointRewardScRsp" => {
                Some(Self::CmdTakePunkLordPointRewardScRsp)
            }
            "CmdGetPunkLordDataScRsp" => Some(Self::CmdGetPunkLordDataScRsp),
            "CmdPunkLordMonsterInfoScNotify" => {
                Some(Self::CmdPunkLordMonsterInfoScNotify)
            }
            "CmdStartPunkLordRaidScRsp" => Some(Self::CmdStartPunkLordRaidScRsp),
            "CmdSummonPunkLordMonsterScRsp" => Some(Self::CmdSummonPunkLordMonsterScRsp),
            "CmdStartPunkLordRaidCsReq" => Some(Self::CmdStartPunkLordRaidCsReq),
            "CmdGetPunkLordBattleRecordCsReq" => {
                Some(Self::CmdGetPunkLordBattleRecordCsReq)
            }
            "CmdGetKilledPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataScRsp)
            }
            "CmdGetPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetPunkLordMonsterDataScRsp)
            }
            "CmdSummonPunkLordMonsterCsReq" => Some(Self::CmdSummonPunkLordMonsterCsReq),
            "CmdTakePunkLordPointRewardCsReq" => {
                Some(Self::CmdTakePunkLordPointRewardCsReq)
            }
            "CmdPunkLordMonsterKilledNotify" => {
                Some(Self::CmdPunkLordMonsterKilledNotify)
            }
            "CmdSharePunkLordMonsterScRsp" => Some(Self::CmdSharePunkLordMonsterScRsp),
            "CmdTakeKilledPunkLordMonsterScoreCsReq" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreCsReq)
            }
            "CmdPunkLordRaidTimeOutScNotify" => {
                Some(Self::CmdPunkLordRaidTimeOutScNotify)
            }
            "CmdPunkLordDataChangeNotify" => Some(Self::CmdPunkLordDataChangeNotify),
            "CmdGetPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetPunkLordMonsterDataCsReq)
            }
            "CmdGetPunkLordDataCsReq" => Some(Self::CmdGetPunkLordDataCsReq),
            "CmdPunkLordBattleResultScNotify" => {
                Some(Self::CmdPunkLordBattleResultScNotify)
            }
            "CmdSharePunkLordMonsterCsReq" => Some(Self::CmdSharePunkLordMonsterCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jmpphgicidm {
    PunkLordOperationNone = 0,
    PunkLordOperationRefresh = 1,
    PunkLordOperationShare = 2,
    PunkLordOperationStartRaid = 3,
    PunkLordOperationGetBattleRecord = 4,
}
impl Jmpphgicidm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PunkLordOperationNone => "PUNK_LORD_OPERATION_NONE",
            Self::PunkLordOperationRefresh => "PUNK_LORD_OPERATION_REFRESH",
            Self::PunkLordOperationShare => "PUNK_LORD_OPERATION_SHARE",
            Self::PunkLordOperationStartRaid => "PUNK_LORD_OPERATION_START_RAID",
            Self::PunkLordOperationGetBattleRecord => {
                "PUNK_LORD_OPERATION_GET_BATTLE_RECORD"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_OPERATION_NONE" => Some(Self::PunkLordOperationNone),
            "PUNK_LORD_OPERATION_REFRESH" => Some(Self::PunkLordOperationRefresh),
            "PUNK_LORD_OPERATION_SHARE" => Some(Self::PunkLordOperationShare),
            "PUNK_LORD_OPERATION_START_RAID" => Some(Self::PunkLordOperationStartRaid),
            "PUNK_LORD_OPERATION_GET_BATTLE_RECORD" => {
                Some(Self::PunkLordOperationGetBattleRecord)
            }
            _ => None,
        }
    }
}
/// MMDBNKCPABM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdQuestType {
    None = 0,
    CmdGetQuestRecordCsReq = 934,
    CmdTakeQuestRewardScRsp = 946,
    CmdBatchGetQuestDataScRsp = 990,
    CmdQuestRecordScNotify = 980,
    CmdTakeQuestOptionalRewardCsReq = 974,
    CmdBatchGetQuestDataCsReq = 948,
    CmdGetQuestRecordScRsp = 937,
    CmdGetQuestDataScRsp = 920,
    CmdFinishQuestScRsp = 947,
    CmdGetQuestDataCsReq = 959,
    CmdFinishQuestCsReq = 916,
    CmdTakeQuestOptionalRewardScRsp = 930,
    CmdTakeQuestRewardCsReq = 903,
}
impl CmdQuestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdQuestTypeNone",
            Self::CmdGetQuestRecordCsReq => "CmdGetQuestRecordCsReq",
            Self::CmdTakeQuestRewardScRsp => "CmdTakeQuestRewardScRsp",
            Self::CmdBatchGetQuestDataScRsp => "CmdBatchGetQuestDataScRsp",
            Self::CmdQuestRecordScNotify => "CmdQuestRecordScNotify",
            Self::CmdTakeQuestOptionalRewardCsReq => "CmdTakeQuestOptionalRewardCsReq",
            Self::CmdBatchGetQuestDataCsReq => "CmdBatchGetQuestDataCsReq",
            Self::CmdGetQuestRecordScRsp => "CmdGetQuestRecordScRsp",
            Self::CmdGetQuestDataScRsp => "CmdGetQuestDataScRsp",
            Self::CmdFinishQuestScRsp => "CmdFinishQuestScRsp",
            Self::CmdGetQuestDataCsReq => "CmdGetQuestDataCsReq",
            Self::CmdFinishQuestCsReq => "CmdFinishQuestCsReq",
            Self::CmdTakeQuestOptionalRewardScRsp => "CmdTakeQuestOptionalRewardScRsp",
            Self::CmdTakeQuestRewardCsReq => "CmdTakeQuestRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdQuestTypeNone" => Some(Self::None),
            "CmdGetQuestRecordCsReq" => Some(Self::CmdGetQuestRecordCsReq),
            "CmdTakeQuestRewardScRsp" => Some(Self::CmdTakeQuestRewardScRsp),
            "CmdBatchGetQuestDataScRsp" => Some(Self::CmdBatchGetQuestDataScRsp),
            "CmdQuestRecordScNotify" => Some(Self::CmdQuestRecordScNotify),
            "CmdTakeQuestOptionalRewardCsReq" => {
                Some(Self::CmdTakeQuestOptionalRewardCsReq)
            }
            "CmdBatchGetQuestDataCsReq" => Some(Self::CmdBatchGetQuestDataCsReq),
            "CmdGetQuestRecordScRsp" => Some(Self::CmdGetQuestRecordScRsp),
            "CmdGetQuestDataScRsp" => Some(Self::CmdGetQuestDataScRsp),
            "CmdFinishQuestScRsp" => Some(Self::CmdFinishQuestScRsp),
            "CmdGetQuestDataCsReq" => Some(Self::CmdGetQuestDataCsReq),
            "CmdFinishQuestCsReq" => Some(Self::CmdFinishQuestCsReq),
            "CmdTakeQuestOptionalRewardScRsp" => {
                Some(Self::CmdTakeQuestOptionalRewardScRsp)
            }
            "CmdTakeQuestRewardCsReq" => Some(Self::CmdTakeQuestRewardCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QuestStatus {
    QuestNone = 0,
    QuestDoing = 1,
    QuestFinish = 2,
    QuestClose = 3,
    QuestDelete = 4,
}
impl QuestStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::QuestNone => "QUEST_NONE",
            Self::QuestDoing => "QUEST_DOING",
            Self::QuestFinish => "QUEST_FINISH",
            Self::QuestClose => "QUEST_CLOSE",
            Self::QuestDelete => "QUEST_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUEST_NONE" => Some(Self::QuestNone),
            "QUEST_DOING" => Some(Self::QuestDoing),
            "QUEST_FINISH" => Some(Self::QuestFinish),
            "QUEST_CLOSE" => Some(Self::QuestClose),
            "QUEST_DELETE" => Some(Self::QuestDelete),
            _ => None,
        }
    }
}
/// BAHPBOMLALN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidType {
    None = 0,
    CmdTakeChallengeRaidRewardScRsp = 2280,
    CmdDelSaveRaidScNotify = 2261,
    CmdLeaveRaidCsReq = 2203,
    CmdGetAllSaveRaidCsReq = 2279,
    CmdStartRaidScRsp = 2220,
    CmdRaidInfoNotify = 2239,
    CmdGetSaveRaidCsReq = 2248,
    CmdSetClientRaidTargetCountScRsp = 2275,
    CmdRaidKickByServerScNotify = 2225,
    CmdGetAllSaveRaidScRsp = 2219,
    CmdGetRaidInfoScRsp = 2274,
    CmdGetSaveRaidScRsp = 2290,
    CmdLeaveRaidScRsp = 2246,
    CmdSetClientRaidTargetCountCsReq = 2230,
    CmdGetRaidInfoCsReq = 2247,
    CmdChallengeRaidNotify = 2216,
    CmdGetChallengeRaidInfoScRsp = 2234,
    CmdTakeChallengeRaidRewardCsReq = 2237,
    CmdGetChallengeRaidInfoCsReq = 2253,
    CmdStartRaidCsReq = 2259,
}
impl CmdRaidType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidTypeNone",
            Self::CmdTakeChallengeRaidRewardScRsp => "CmdTakeChallengeRaidRewardScRsp",
            Self::CmdDelSaveRaidScNotify => "CmdDelSaveRaidScNotify",
            Self::CmdLeaveRaidCsReq => "CmdLeaveRaidCsReq",
            Self::CmdGetAllSaveRaidCsReq => "CmdGetAllSaveRaidCsReq",
            Self::CmdStartRaidScRsp => "CmdStartRaidScRsp",
            Self::CmdRaidInfoNotify => "CmdRaidInfoNotify",
            Self::CmdGetSaveRaidCsReq => "CmdGetSaveRaidCsReq",
            Self::CmdSetClientRaidTargetCountScRsp => "CmdSetClientRaidTargetCountScRsp",
            Self::CmdRaidKickByServerScNotify => "CmdRaidKickByServerScNotify",
            Self::CmdGetAllSaveRaidScRsp => "CmdGetAllSaveRaidScRsp",
            Self::CmdGetRaidInfoScRsp => "CmdGetRaidInfoScRsp",
            Self::CmdGetSaveRaidScRsp => "CmdGetSaveRaidScRsp",
            Self::CmdLeaveRaidScRsp => "CmdLeaveRaidScRsp",
            Self::CmdSetClientRaidTargetCountCsReq => "CmdSetClientRaidTargetCountCsReq",
            Self::CmdGetRaidInfoCsReq => "CmdGetRaidInfoCsReq",
            Self::CmdChallengeRaidNotify => "CmdChallengeRaidNotify",
            Self::CmdGetChallengeRaidInfoScRsp => "CmdGetChallengeRaidInfoScRsp",
            Self::CmdTakeChallengeRaidRewardCsReq => "CmdTakeChallengeRaidRewardCsReq",
            Self::CmdGetChallengeRaidInfoCsReq => "CmdGetChallengeRaidInfoCsReq",
            Self::CmdStartRaidCsReq => "CmdStartRaidCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidTypeNone" => Some(Self::None),
            "CmdTakeChallengeRaidRewardScRsp" => {
                Some(Self::CmdTakeChallengeRaidRewardScRsp)
            }
            "CmdDelSaveRaidScNotify" => Some(Self::CmdDelSaveRaidScNotify),
            "CmdLeaveRaidCsReq" => Some(Self::CmdLeaveRaidCsReq),
            "CmdGetAllSaveRaidCsReq" => Some(Self::CmdGetAllSaveRaidCsReq),
            "CmdStartRaidScRsp" => Some(Self::CmdStartRaidScRsp),
            "CmdRaidInfoNotify" => Some(Self::CmdRaidInfoNotify),
            "CmdGetSaveRaidCsReq" => Some(Self::CmdGetSaveRaidCsReq),
            "CmdSetClientRaidTargetCountScRsp" => {
                Some(Self::CmdSetClientRaidTargetCountScRsp)
            }
            "CmdRaidKickByServerScNotify" => Some(Self::CmdRaidKickByServerScNotify),
            "CmdGetAllSaveRaidScRsp" => Some(Self::CmdGetAllSaveRaidScRsp),
            "CmdGetRaidInfoScRsp" => Some(Self::CmdGetRaidInfoScRsp),
            "CmdGetSaveRaidScRsp" => Some(Self::CmdGetSaveRaidScRsp),
            "CmdLeaveRaidScRsp" => Some(Self::CmdLeaveRaidScRsp),
            "CmdSetClientRaidTargetCountCsReq" => {
                Some(Self::CmdSetClientRaidTargetCountCsReq)
            }
            "CmdGetRaidInfoCsReq" => Some(Self::CmdGetRaidInfoCsReq),
            "CmdChallengeRaidNotify" => Some(Self::CmdChallengeRaidNotify),
            "CmdGetChallengeRaidInfoScRsp" => Some(Self::CmdGetChallengeRaidInfoScRsp),
            "CmdTakeChallengeRaidRewardCsReq" => {
                Some(Self::CmdTakeChallengeRaidRewardCsReq)
            }
            "CmdGetChallengeRaidInfoCsReq" => Some(Self::CmdGetChallengeRaidInfoCsReq),
            "CmdStartRaidCsReq" => Some(Self::CmdStartRaidCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hiaolbakjap {
    RaidStatusNone = 0,
    RaidStatusDoing = 1,
    RaidStatusFinish = 2,
    RaidStatusFailed = 3,
}
impl Hiaolbakjap {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidStatusNone => "RAID_STATUS_NONE",
            Self::RaidStatusDoing => "RAID_STATUS_DOING",
            Self::RaidStatusFinish => "RAID_STATUS_FINISH",
            Self::RaidStatusFailed => "RAID_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_STATUS_NONE" => Some(Self::RaidStatusNone),
            "RAID_STATUS_DOING" => Some(Self::RaidStatusDoing),
            "RAID_STATUS_FINISH" => Some(Self::RaidStatusFinish),
            "RAID_STATUS_FAILED" => Some(Self::RaidStatusFailed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hlacngehmjm {
    RaidTargetStatusNone = 0,
    RaidTargetStatusDoing = 1,
    RaidTargetStatusFinish = 2,
}
impl Hlacngehmjm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidTargetStatusNone => "RAID_TARGET_STATUS_NONE",
            Self::RaidTargetStatusDoing => "RAID_TARGET_STATUS_DOING",
            Self::RaidTargetStatusFinish => "RAID_TARGET_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_TARGET_STATUS_NONE" => Some(Self::RaidTargetStatusNone),
            "RAID_TARGET_STATUS_DOING" => Some(Self::RaidTargetStatusDoing),
            "RAID_TARGET_STATUS_FINISH" => Some(Self::RaidTargetStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojlofjkjbol {
    RaidKickReasonNone = 0,
    RaidKickReasonActivityScheduleFinish = 1,
}
impl Ojlofjkjbol {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RaidKickReasonNone => "RAID_KICK_REASON_NONE",
            Self::RaidKickReasonActivityScheduleFinish => {
                "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_KICK_REASON_NONE" => Some(Self::RaidKickReasonNone),
            "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH" => {
                Some(Self::RaidKickReasonActivityScheduleFinish)
            }
            _ => None,
        }
    }
}
/// NPDEILJPHLL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidCollectionType {
    None = 0,
    CmdRaidCollectionEnterNextRaidScRsp = 6952,
    CmdRaidCollectionDataCsReq = 6945,
    CmdRaidCollectionDataScNotify = 6955,
    CmdRaidCollectionDataScRsp = 6948,
    CmdRaidCollectionEnterNextRaidCsReq = 6950,
}
impl CmdRaidCollectionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRaidCollectionTypeNone",
            Self::CmdRaidCollectionEnterNextRaidScRsp => {
                "CmdRaidCollectionEnterNextRaidScRsp"
            }
            Self::CmdRaidCollectionDataCsReq => "CmdRaidCollectionDataCsReq",
            Self::CmdRaidCollectionDataScNotify => "CmdRaidCollectionDataScNotify",
            Self::CmdRaidCollectionDataScRsp => "CmdRaidCollectionDataScRsp",
            Self::CmdRaidCollectionEnterNextRaidCsReq => {
                "CmdRaidCollectionEnterNextRaidCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidCollectionTypeNone" => Some(Self::None),
            "CmdRaidCollectionEnterNextRaidScRsp" => {
                Some(Self::CmdRaidCollectionEnterNextRaidScRsp)
            }
            "CmdRaidCollectionDataCsReq" => Some(Self::CmdRaidCollectionDataCsReq),
            "CmdRaidCollectionDataScNotify" => Some(Self::CmdRaidCollectionDataScNotify),
            "CmdRaidCollectionDataScRsp" => Some(Self::CmdRaidCollectionDataScRsp),
            "CmdRaidCollectionEnterNextRaidCsReq" => {
                Some(Self::CmdRaidCollectionEnterNextRaidCsReq)
            }
            _ => None,
        }
    }
}
/// ELEGMHHIBIB
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRecommendType {
    None = 0,
    CmdRelicAvatarRecommendScRsp = 2424,
    CmdRelicRecommendCsReq = 2415,
    CmdGetChallengeRecommendLineupListCsReq = 2442,
    CmdGetChallengeRecommendLineupListScRsp = 2437,
    CmdRelicRecommendScRsp = 2416,
    CmdRelicAvatarRecommendCsReq = 2412,
}
impl CmdRecommendType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CMD_RECOMMEND_TYPE_NONE",
            Self::CmdRelicAvatarRecommendScRsp => "CmdRelicAvatarRecommendScRsp",
            Self::CmdRelicRecommendCsReq => "CmdRelicRecommendCsReq",
            Self::CmdGetChallengeRecommendLineupListCsReq => {
                "CmdGetChallengeRecommendLineupListCsReq"
            }
            Self::CmdGetChallengeRecommendLineupListScRsp => {
                "CmdGetChallengeRecommendLineupListScRsp"
            }
            Self::CmdRelicRecommendScRsp => "CmdRelicRecommendScRsp",
            Self::CmdRelicAvatarRecommendCsReq => "CmdRelicAvatarRecommendCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CMD_RECOMMEND_TYPE_NONE" => Some(Self::None),
            "CmdRelicAvatarRecommendScRsp" => Some(Self::CmdRelicAvatarRecommendScRsp),
            "CmdRelicRecommendCsReq" => Some(Self::CmdRelicRecommendCsReq),
            "CmdGetChallengeRecommendLineupListCsReq" => {
                Some(Self::CmdGetChallengeRecommendLineupListCsReq)
            }
            "CmdGetChallengeRecommendLineupListScRsp" => {
                Some(Self::CmdGetChallengeRecommendLineupListScRsp)
            }
            "CmdRelicRecommendScRsp" => Some(Self::CmdRelicRecommendScRsp),
            "CmdRelicAvatarRecommendCsReq" => Some(Self::CmdRelicAvatarRecommendCsReq),
            _ => None,
        }
    }
}
/// HPPPNLJICMP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRedDotType {
    None = 0,
    CmdUpdateRedDotDataScRsp = 5946,
    CmdGetAllRedDotDataScRsp = 5920,
    CmdGetSingleRedDotParamGroupCsReq = 5939,
    CmdGetSingleRedDotParamGroupScRsp = 5953,
    CmdGetAllRedDotDataCsReq = 5959,
    CmdUpdateRedDotDataCsReq = 5903,
}
impl CmdRedDotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRedDotTypeNone",
            Self::CmdUpdateRedDotDataScRsp => "CmdUpdateRedDotDataScRsp",
            Self::CmdGetAllRedDotDataScRsp => "CmdGetAllRedDotDataScRsp",
            Self::CmdGetSingleRedDotParamGroupCsReq => {
                "CmdGetSingleRedDotParamGroupCsReq"
            }
            Self::CmdGetSingleRedDotParamGroupScRsp => {
                "CmdGetSingleRedDotParamGroupScRsp"
            }
            Self::CmdGetAllRedDotDataCsReq => "CmdGetAllRedDotDataCsReq",
            Self::CmdUpdateRedDotDataCsReq => "CmdUpdateRedDotDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRedDotTypeNone" => Some(Self::None),
            "CmdUpdateRedDotDataScRsp" => Some(Self::CmdUpdateRedDotDataScRsp),
            "CmdGetAllRedDotDataScRsp" => Some(Self::CmdGetAllRedDotDataScRsp),
            "CmdGetSingleRedDotParamGroupCsReq" => {
                Some(Self::CmdGetSingleRedDotParamGroupCsReq)
            }
            "CmdGetSingleRedDotParamGroupScRsp" => {
                Some(Self::CmdGetSingleRedDotParamGroupScRsp)
            }
            "CmdGetAllRedDotDataCsReq" => Some(Self::CmdGetAllRedDotDataCsReq),
            "CmdUpdateRedDotDataCsReq" => Some(Self::CmdUpdateRedDotDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Miheagbcomo {
    UpdateReddotNone = 0,
    UpdateReddotAdd = 1,
    UpdateReddotReplace = 2,
}
impl Miheagbcomo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UpdateReddotNone => "UPDATE_REDDOT_NONE",
            Self::UpdateReddotAdd => "UPDATE_REDDOT_ADD",
            Self::UpdateReddotReplace => "UPDATE_REDDOT_REPLACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UPDATE_REDDOT_NONE" => Some(Self::UpdateReddotNone),
            "UPDATE_REDDOT_ADD" => Some(Self::UpdateReddotAdd),
            "UPDATE_REDDOT_REPLACE" => Some(Self::UpdateReddotReplace),
            _ => None,
        }
    }
}
/// PPHIFJEDHGA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdReplayType {
    None = 0,
    CmdGetReplayTokenCsReq = 3559,
    CmdGetReplayTokenScRsp = 3520,
    CmdGetPlayerReplayInfoScRsp = 3546,
    CmdGetPlayerReplayInfoCsReq = 3503,
}
impl CmdReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdReplayTypeNone",
            Self::CmdGetReplayTokenCsReq => "CmdGetReplayTokenCsReq",
            Self::CmdGetReplayTokenScRsp => "CmdGetReplayTokenScRsp",
            Self::CmdGetPlayerReplayInfoScRsp => "CmdGetPlayerReplayInfoScRsp",
            Self::CmdGetPlayerReplayInfoCsReq => "CmdGetPlayerReplayInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdReplayTypeNone" => Some(Self::None),
            "CmdGetReplayTokenCsReq" => Some(Self::CmdGetReplayTokenCsReq),
            "CmdGetReplayTokenScRsp" => Some(Self::CmdGetReplayTokenScRsp),
            "CmdGetPlayerReplayInfoScRsp" => Some(Self::CmdGetPlayerReplayInfoScRsp),
            "CmdGetPlayerReplayInfoCsReq" => Some(Self::CmdGetPlayerReplayInfoCsReq),
            _ => None,
        }
    }
}
/// BPDLNNALLME
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRndOptionType {
    None = 0,
    CmdDailyFirstMeetPamScRsp = 3446,
    CmdGetRndOptionScRsp = 3420,
    CmdGetRndOptionCsReq = 3459,
    CmdDailyFirstMeetPamCsReq = 3403,
}
impl CmdRndOptionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRndOptionTypeNone",
            Self::CmdDailyFirstMeetPamScRsp => "CmdDailyFirstMeetPamScRsp",
            Self::CmdGetRndOptionScRsp => "CmdGetRndOptionScRsp",
            Self::CmdGetRndOptionCsReq => "CmdGetRndOptionCsReq",
            Self::CmdDailyFirstMeetPamCsReq => "CmdDailyFirstMeetPamCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRndOptionTypeNone" => Some(Self::None),
            "CmdDailyFirstMeetPamScRsp" => Some(Self::CmdDailyFirstMeetPamScRsp),
            "CmdGetRndOptionScRsp" => Some(Self::CmdGetRndOptionScRsp),
            "CmdGetRndOptionCsReq" => Some(Self::CmdGetRndOptionCsReq),
            "CmdDailyFirstMeetPamCsReq" => Some(Self::CmdDailyFirstMeetPamCsReq),
            _ => None,
        }
    }
}
/// CIJHIFPILNC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueType {
    None = 0,
    CmdExchangeRogueRewardKeyScRsp = 1831,
    CmdGetRogueBuffEnhanceInfoCsReq = 1851,
    CmdQuitRogueScRsp = 1836,
    CmdEnhanceRogueBuffCsReq = 1883,
    CmdOpenRogueChestScRsp = 1832,
    CmdSyncRogueGetItemScNotify = 1818,
    CmdLeaveRogueCsReq = 1834,
    CmdEnableRogueTalentScRsp = 1895,
    CmdSyncRogueFinishScNotify = 1848,
    CmdSyncRogueSeasonFinishScNotify = 1813,
    CmdExchangeRogueRewardKeyCsReq = 1896,
    CmdTakeRogueScoreRewardScRsp = 1833,
    CmdSyncRogueRewardInfoScNotify = 1889,
    CmdGetRogueAeonInfoScRsp = 1858,
    CmdSyncRogueMapRoomScNotify = 1814,
    CmdSyncRogueExploreWinScNotify = 1826,
    CmdOpenRogueChestCsReq = 1860,
    CmdGetRogueTalentInfoScRsp = 1808,
    CmdPickRogueAvatarCsReq = 1890,
    CmdFinishAeonDialogueGroupCsReq = 1887,
    CmdEnterRogueMapRoomCsReq = 1804,
    CmdGetRogueScoreRewardInfoScRsp = 1840,
    CmdLeaveRogueScRsp = 1837,
    CmdEnterRogueMapRoomScRsp = 1888,
    CmdPickRogueAvatarScRsp = 1879,
    CmdGetRogueAeonInfoCsReq = 1841,
    CmdStartRogueScRsp = 1846,
    CmdSyncRogueAeonScNotify = 1835,
    CmdReviveRogueAvatarCsReq = 1861,
    CmdGetRogueInfoCsReq = 1859,
    CmdSyncRogueVirtualItemInfoScNotify = 1886,
    CmdGetRogueInfoScRsp = 1820,
    CmdQuitRogueCsReq = 1870,
    CmdSyncRogueStatusScNotify = 1821,
    CmdGetRogueInitialScoreCsReq = 1843,
    CmdEnableRogueTalentCsReq = 1900,
    CmdGetRogueBuffEnhanceInfoScRsp = 1873,
    CmdFinishAeonDialogueGroupScRsp = 1844,
    CmdEnhanceRogueBuffScRsp = 1899,
    CmdGetRogueScoreRewardInfoCsReq = 1842,
    CmdSyncRogueAreaUnlockScNotify = 1807,
    CmdReviveRogueAvatarScRsp = 1825,
    CmdStartRogueCsReq = 1803,
    CmdTakeRogueScoreRewardCsReq = 1829,
    CmdGetRogueTalentInfoCsReq = 1811,
    CmdSyncRoguePickAvatarInfoScNotify = 1828,
    CmdTakeRogueAeonLevelRewardScRsp = 1850,
    CmdSyncRogueReviveInfoScNotify = 1810,
    CmdTakeRogueAeonLevelRewardCsReq = 1881,
    CmdSyncRogueAeonLevelUpRewardScNotify = 1898,
    CmdEnterRogueScRsp = 1853,
    CmdGetRogueInitialScoreScRsp = 1863,
    CmdEnterRogueCsReq = 1839,
}
impl CmdRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTypeNone",
            Self::CmdExchangeRogueRewardKeyScRsp => "CmdExchangeRogueRewardKeyScRsp",
            Self::CmdGetRogueBuffEnhanceInfoCsReq => "CmdGetRogueBuffEnhanceInfoCsReq",
            Self::CmdQuitRogueScRsp => "CmdQuitRogueScRsp",
            Self::CmdEnhanceRogueBuffCsReq => "CmdEnhanceRogueBuffCsReq",
            Self::CmdOpenRogueChestScRsp => "CmdOpenRogueChestScRsp",
            Self::CmdSyncRogueGetItemScNotify => "CmdSyncRogueGetItemScNotify",
            Self::CmdLeaveRogueCsReq => "CmdLeaveRogueCsReq",
            Self::CmdEnableRogueTalentScRsp => "CmdEnableRogueTalentScRsp",
            Self::CmdSyncRogueFinishScNotify => "CmdSyncRogueFinishScNotify",
            Self::CmdSyncRogueSeasonFinishScNotify => "CmdSyncRogueSeasonFinishScNotify",
            Self::CmdExchangeRogueRewardKeyCsReq => "CmdExchangeRogueRewardKeyCsReq",
            Self::CmdTakeRogueScoreRewardScRsp => "CmdTakeRogueScoreRewardScRsp",
            Self::CmdSyncRogueRewardInfoScNotify => "CmdSyncRogueRewardInfoScNotify",
            Self::CmdGetRogueAeonInfoScRsp => "CmdGetRogueAeonInfoScRsp",
            Self::CmdSyncRogueMapRoomScNotify => "CmdSyncRogueMapRoomScNotify",
            Self::CmdSyncRogueExploreWinScNotify => "CmdSyncRogueExploreWinScNotify",
            Self::CmdOpenRogueChestCsReq => "CmdOpenRogueChestCsReq",
            Self::CmdGetRogueTalentInfoScRsp => "CmdGetRogueTalentInfoScRsp",
            Self::CmdPickRogueAvatarCsReq => "CmdPickRogueAvatarCsReq",
            Self::CmdFinishAeonDialogueGroupCsReq => "CmdFinishAeonDialogueGroupCsReq",
            Self::CmdEnterRogueMapRoomCsReq => "CmdEnterRogueMapRoomCsReq",
            Self::CmdGetRogueScoreRewardInfoScRsp => "CmdGetRogueScoreRewardInfoScRsp",
            Self::CmdLeaveRogueScRsp => "CmdLeaveRogueScRsp",
            Self::CmdEnterRogueMapRoomScRsp => "CmdEnterRogueMapRoomScRsp",
            Self::CmdPickRogueAvatarScRsp => "CmdPickRogueAvatarScRsp",
            Self::CmdGetRogueAeonInfoCsReq => "CmdGetRogueAeonInfoCsReq",
            Self::CmdStartRogueScRsp => "CmdStartRogueScRsp",
            Self::CmdSyncRogueAeonScNotify => "CmdSyncRogueAeonScNotify",
            Self::CmdReviveRogueAvatarCsReq => "CmdReviveRogueAvatarCsReq",
            Self::CmdGetRogueInfoCsReq => "CmdGetRogueInfoCsReq",
            Self::CmdSyncRogueVirtualItemInfoScNotify => {
                "CmdSyncRogueVirtualItemInfoScNotify"
            }
            Self::CmdGetRogueInfoScRsp => "CmdGetRogueInfoScRsp",
            Self::CmdQuitRogueCsReq => "CmdQuitRogueCsReq",
            Self::CmdSyncRogueStatusScNotify => "CmdSyncRogueStatusScNotify",
            Self::CmdGetRogueInitialScoreCsReq => "CmdGetRogueInitialScoreCsReq",
            Self::CmdEnableRogueTalentCsReq => "CmdEnableRogueTalentCsReq",
            Self::CmdGetRogueBuffEnhanceInfoScRsp => "CmdGetRogueBuffEnhanceInfoScRsp",
            Self::CmdFinishAeonDialogueGroupScRsp => "CmdFinishAeonDialogueGroupScRsp",
            Self::CmdEnhanceRogueBuffScRsp => "CmdEnhanceRogueBuffScRsp",
            Self::CmdGetRogueScoreRewardInfoCsReq => "CmdGetRogueScoreRewardInfoCsReq",
            Self::CmdSyncRogueAreaUnlockScNotify => "CmdSyncRogueAreaUnlockScNotify",
            Self::CmdReviveRogueAvatarScRsp => "CmdReviveRogueAvatarScRsp",
            Self::CmdStartRogueCsReq => "CmdStartRogueCsReq",
            Self::CmdTakeRogueScoreRewardCsReq => "CmdTakeRogueScoreRewardCsReq",
            Self::CmdGetRogueTalentInfoCsReq => "CmdGetRogueTalentInfoCsReq",
            Self::CmdSyncRoguePickAvatarInfoScNotify => {
                "CmdSyncRoguePickAvatarInfoScNotify"
            }
            Self::CmdTakeRogueAeonLevelRewardScRsp => "CmdTakeRogueAeonLevelRewardScRsp",
            Self::CmdSyncRogueReviveInfoScNotify => "CmdSyncRogueReviveInfoScNotify",
            Self::CmdTakeRogueAeonLevelRewardCsReq => "CmdTakeRogueAeonLevelRewardCsReq",
            Self::CmdSyncRogueAeonLevelUpRewardScNotify => {
                "CmdSyncRogueAeonLevelUpRewardScNotify"
            }
            Self::CmdEnterRogueScRsp => "CmdEnterRogueScRsp",
            Self::CmdGetRogueInitialScoreScRsp => "CmdGetRogueInitialScoreScRsp",
            Self::CmdEnterRogueCsReq => "CmdEnterRogueCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTypeNone" => Some(Self::None),
            "CmdExchangeRogueRewardKeyScRsp" => {
                Some(Self::CmdExchangeRogueRewardKeyScRsp)
            }
            "CmdGetRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoCsReq)
            }
            "CmdQuitRogueScRsp" => Some(Self::CmdQuitRogueScRsp),
            "CmdEnhanceRogueBuffCsReq" => Some(Self::CmdEnhanceRogueBuffCsReq),
            "CmdOpenRogueChestScRsp" => Some(Self::CmdOpenRogueChestScRsp),
            "CmdSyncRogueGetItemScNotify" => Some(Self::CmdSyncRogueGetItemScNotify),
            "CmdLeaveRogueCsReq" => Some(Self::CmdLeaveRogueCsReq),
            "CmdEnableRogueTalentScRsp" => Some(Self::CmdEnableRogueTalentScRsp),
            "CmdSyncRogueFinishScNotify" => Some(Self::CmdSyncRogueFinishScNotify),
            "CmdSyncRogueSeasonFinishScNotify" => {
                Some(Self::CmdSyncRogueSeasonFinishScNotify)
            }
            "CmdExchangeRogueRewardKeyCsReq" => {
                Some(Self::CmdExchangeRogueRewardKeyCsReq)
            }
            "CmdTakeRogueScoreRewardScRsp" => Some(Self::CmdTakeRogueScoreRewardScRsp),
            "CmdSyncRogueRewardInfoScNotify" => {
                Some(Self::CmdSyncRogueRewardInfoScNotify)
            }
            "CmdGetRogueAeonInfoScRsp" => Some(Self::CmdGetRogueAeonInfoScRsp),
            "CmdSyncRogueMapRoomScNotify" => Some(Self::CmdSyncRogueMapRoomScNotify),
            "CmdSyncRogueExploreWinScNotify" => {
                Some(Self::CmdSyncRogueExploreWinScNotify)
            }
            "CmdOpenRogueChestCsReq" => Some(Self::CmdOpenRogueChestCsReq),
            "CmdGetRogueTalentInfoScRsp" => Some(Self::CmdGetRogueTalentInfoScRsp),
            "CmdPickRogueAvatarCsReq" => Some(Self::CmdPickRogueAvatarCsReq),
            "CmdFinishAeonDialogueGroupCsReq" => {
                Some(Self::CmdFinishAeonDialogueGroupCsReq)
            }
            "CmdEnterRogueMapRoomCsReq" => Some(Self::CmdEnterRogueMapRoomCsReq),
            "CmdGetRogueScoreRewardInfoScRsp" => {
                Some(Self::CmdGetRogueScoreRewardInfoScRsp)
            }
            "CmdLeaveRogueScRsp" => Some(Self::CmdLeaveRogueScRsp),
            "CmdEnterRogueMapRoomScRsp" => Some(Self::CmdEnterRogueMapRoomScRsp),
            "CmdPickRogueAvatarScRsp" => Some(Self::CmdPickRogueAvatarScRsp),
            "CmdGetRogueAeonInfoCsReq" => Some(Self::CmdGetRogueAeonInfoCsReq),
            "CmdStartRogueScRsp" => Some(Self::CmdStartRogueScRsp),
            "CmdSyncRogueAeonScNotify" => Some(Self::CmdSyncRogueAeonScNotify),
            "CmdReviveRogueAvatarCsReq" => Some(Self::CmdReviveRogueAvatarCsReq),
            "CmdGetRogueInfoCsReq" => Some(Self::CmdGetRogueInfoCsReq),
            "CmdSyncRogueVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueVirtualItemInfoScNotify)
            }
            "CmdGetRogueInfoScRsp" => Some(Self::CmdGetRogueInfoScRsp),
            "CmdQuitRogueCsReq" => Some(Self::CmdQuitRogueCsReq),
            "CmdSyncRogueStatusScNotify" => Some(Self::CmdSyncRogueStatusScNotify),
            "CmdGetRogueInitialScoreCsReq" => Some(Self::CmdGetRogueInitialScoreCsReq),
            "CmdEnableRogueTalentCsReq" => Some(Self::CmdEnableRogueTalentCsReq),
            "CmdGetRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoScRsp)
            }
            "CmdFinishAeonDialogueGroupScRsp" => {
                Some(Self::CmdFinishAeonDialogueGroupScRsp)
            }
            "CmdEnhanceRogueBuffScRsp" => Some(Self::CmdEnhanceRogueBuffScRsp),
            "CmdGetRogueScoreRewardInfoCsReq" => {
                Some(Self::CmdGetRogueScoreRewardInfoCsReq)
            }
            "CmdSyncRogueAreaUnlockScNotify" => {
                Some(Self::CmdSyncRogueAreaUnlockScNotify)
            }
            "CmdReviveRogueAvatarScRsp" => Some(Self::CmdReviveRogueAvatarScRsp),
            "CmdStartRogueCsReq" => Some(Self::CmdStartRogueCsReq),
            "CmdTakeRogueScoreRewardCsReq" => Some(Self::CmdTakeRogueScoreRewardCsReq),
            "CmdGetRogueTalentInfoCsReq" => Some(Self::CmdGetRogueTalentInfoCsReq),
            "CmdSyncRoguePickAvatarInfoScNotify" => {
                Some(Self::CmdSyncRoguePickAvatarInfoScNotify)
            }
            "CmdTakeRogueAeonLevelRewardScRsp" => {
                Some(Self::CmdTakeRogueAeonLevelRewardScRsp)
            }
            "CmdSyncRogueReviveInfoScNotify" => {
                Some(Self::CmdSyncRogueReviveInfoScNotify)
            }
            "CmdTakeRogueAeonLevelRewardCsReq" => {
                Some(Self::CmdTakeRogueAeonLevelRewardCsReq)
            }
            "CmdSyncRogueAeonLevelUpRewardScNotify" => {
                Some(Self::CmdSyncRogueAeonLevelUpRewardScNotify)
            }
            "CmdEnterRogueScRsp" => Some(Self::CmdEnterRogueScRsp),
            "CmdGetRogueInitialScoreScRsp" => Some(Self::CmdGetRogueInitialScoreScRsp),
            "CmdEnterRogueCsReq" => Some(Self::CmdEnterRogueCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueStatus {
    None = 0,
    Doing = 1,
    Pending = 2,
    Endless = 3,
    Finish = 4,
}
impl RogueStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ROGUE_STATUS_NONE",
            Self::Doing => "ROGUE_STATUS_DOING",
            Self::Pending => "ROGUE_STATUS_PENDING",
            Self::Endless => "ROGUE_STATUS_ENDLESS",
            Self::Finish => "ROGUE_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_STATUS_NONE" => Some(Self::None),
            "ROGUE_STATUS_DOING" => Some(Self::Doing),
            "ROGUE_STATUS_PENDING" => Some(Self::Pending),
            "ROGUE_STATUS_ENDLESS" => Some(Self::Endless),
            "ROGUE_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueRoomStatus {
    None = 0,
    Lock = 1,
    Unlock = 2,
    Play = 3,
    Finish = 4,
}
impl RogueRoomStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ROGUE_ROOM_STATUS_NONE",
            Self::Lock => "ROGUE_ROOM_STATUS_LOCK",
            Self::Unlock => "ROGUE_ROOM_STATUS_UNLOCK",
            Self::Play => "ROGUE_ROOM_STATUS_PLAY",
            Self::Finish => "ROGUE_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ROOM_STATUS_NONE" => Some(Self::None),
            "ROGUE_ROOM_STATUS_LOCK" => Some(Self::Lock),
            "ROGUE_ROOM_STATUS_UNLOCK" => Some(Self::Unlock),
            "ROGUE_ROOM_STATUS_PLAY" => Some(Self::Play),
            "ROGUE_ROOM_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueAreaStatus {
    Lock = 0,
    Unlock = 1,
    FirstPass = 2,
    Close = 3,
}
impl RogueAreaStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Lock => "ROGUE_AREA_STATUS_LOCK",
            Self::Unlock => "ROGUE_AREA_STATUS_UNLOCK",
            Self::FirstPass => "ROGUE_AREA_STATUS_FIRST_PASS",
            Self::Close => "ROGUE_AREA_STATUS_CLOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_AREA_STATUS_LOCK" => Some(Self::Lock),
            "ROGUE_AREA_STATUS_UNLOCK" => Some(Self::Unlock),
            "ROGUE_AREA_STATUS_FIRST_PASS" => Some(Self::FirstPass),
            "ROGUE_AREA_STATUS_CLOSE" => Some(Self::Close),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueBuffSource {
    TypeNone = 0,
    TypeSelect = 1,
    TypeEnhance = 2,
    TypeMiracle = 3,
    TypeDialogue = 4,
    TypeBonus = 5,
    TypeMazeSkill = 6,
    TypeShop = 7,
    TypeLevelMechanism = 8,
    TypeEndlessLevelStart = 9,
}
impl RogueBuffSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TypeNone => "ROGUE_BUFF_SOURCE_TYPE_NONE",
            Self::TypeSelect => "ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Self::TypeEnhance => "ROGUE_BUFF_SOURCE_TYPE_ENHANCE",
            Self::TypeMiracle => "ROGUE_BUFF_SOURCE_TYPE_MIRACLE",
            Self::TypeDialogue => "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE",
            Self::TypeBonus => "ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Self::TypeMazeSkill => "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL",
            Self::TypeShop => "ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Self::TypeLevelMechanism => "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM",
            Self::TypeEndlessLevelStart => "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BUFF_SOURCE_TYPE_NONE" => Some(Self::TypeNone),
            "ROGUE_BUFF_SOURCE_TYPE_SELECT" => Some(Self::TypeSelect),
            "ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => Some(Self::TypeEnhance),
            "ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => Some(Self::TypeMiracle),
            "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => Some(Self::TypeDialogue),
            "ROGUE_BUFF_SOURCE_TYPE_BONUS" => Some(Self::TypeBonus),
            "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => Some(Self::TypeMazeSkill),
            "ROGUE_BUFF_SOURCE_TYPE_SHOP" => Some(Self::TypeShop),
            "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => Some(Self::TypeLevelMechanism),
            "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::TypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Akgkdajhgji {
    RogueMiracleSourceTypeNone = 0,
    RogueMiracleSourceTypeSelect = 1,
    RogueMiracleSourceTypeDialogue = 2,
    RogueMiracleSourceTypeBonus = 3,
    RogueMiracleSourceTypeUse = 4,
    RogueMiracleSourceTypeReset = 5,
    RogueMiracleSourceTypeReplace = 6,
    RogueMiracleSourceTypeTrade = 7,
    RogueMiracleSourceTypeGet = 8,
    RogueMiracleSourceTypeShop = 9,
    RogueMiracleSourceTypeMazeSkill = 10,
    RogueMiracleSourceTypeLevelMechanism = 11,
    RogueMiracleSourceTypeEndlessLevelStart = 12,
}
impl Akgkdajhgji {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMiracleSourceTypeNone => "ROGUE_MIRACLE_SOURCE_TYPE_NONE",
            Self::RogueMiracleSourceTypeSelect => "ROGUE_MIRACLE_SOURCE_TYPE_SELECT",
            Self::RogueMiracleSourceTypeDialogue => "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE",
            Self::RogueMiracleSourceTypeBonus => "ROGUE_MIRACLE_SOURCE_TYPE_BONUS",
            Self::RogueMiracleSourceTypeUse => "ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Self::RogueMiracleSourceTypeReset => "ROGUE_MIRACLE_SOURCE_TYPE_RESET",
            Self::RogueMiracleSourceTypeReplace => "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE",
            Self::RogueMiracleSourceTypeTrade => "ROGUE_MIRACLE_SOURCE_TYPE_TRADE",
            Self::RogueMiracleSourceTypeGet => "ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Self::RogueMiracleSourceTypeShop => "ROGUE_MIRACLE_SOURCE_TYPE_SHOP",
            Self::RogueMiracleSourceTypeMazeSkill => {
                "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueMiracleSourceTypeLevelMechanism => {
                "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueMiracleSourceTypeEndlessLevelStart => {
                "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MIRACLE_SOURCE_TYPE_NONE" => Some(Self::RogueMiracleSourceTypeNone),
            "ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueMiracleSourceTypeSelect)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueMiracleSourceTypeDialogue)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => Some(Self::RogueMiracleSourceTypeBonus),
            "ROGUE_MIRACLE_SOURCE_TYPE_USE" => Some(Self::RogueMiracleSourceTypeUse),
            "ROGUE_MIRACLE_SOURCE_TYPE_RESET" => Some(Self::RogueMiracleSourceTypeReset),
            "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::RogueMiracleSourceTypeReplace)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => Some(Self::RogueMiracleSourceTypeTrade),
            "ROGUE_MIRACLE_SOURCE_TYPE_GET" => Some(Self::RogueMiracleSourceTypeGet),
            "ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => Some(Self::RogueMiracleSourceTypeShop),
            "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueMiracleSourceTypeMazeSkill)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueMiracleSourceTypeLevelMechanism)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueMiracleSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oampghnigki {
    RogueDialogueResultSucc = 0,
    RogueDialogueResultFail = 1,
}
impl Oampghnigki {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueDialogueResultSucc => "ROGUE_DIALOGUE_RESULT_SUCC",
            Self::RogueDialogueResultFail => "ROGUE_DIALOGUE_RESULT_FAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DIALOGUE_RESULT_SUCC" => Some(Self::RogueDialogueResultSucc),
            "ROGUE_DIALOGUE_RESULT_FAIL" => Some(Self::RogueDialogueResultFail),
            _ => None,
        }
    }
}
/// OAPHACNGDCN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueArcadeType {
    None = 0,
    CmdRogueArcadeRestartCsReq = 7692,
    CmdRogueArcadeStartScRsp = 7666,
    CmdRogueArcadeLeaveCsReq = 7662,
    CmdRogueArcadeRestartScRsp = 7687,
    CmdRogueArcadeGetInfoCsReq = 7690,
    CmdRogueArcadeStartCsReq = 7665,
    CmdRogueArcadeGetInfoScRsp = 7673,
    CmdRogueArcadeLeaveScRsp = 7674,
}
impl CmdRogueArcadeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueArcadeTypeNone",
            Self::CmdRogueArcadeRestartCsReq => "CmdRogueArcadeRestartCsReq",
            Self::CmdRogueArcadeStartScRsp => "CmdRogueArcadeStartScRsp",
            Self::CmdRogueArcadeLeaveCsReq => "CmdRogueArcadeLeaveCsReq",
            Self::CmdRogueArcadeRestartScRsp => "CmdRogueArcadeRestartScRsp",
            Self::CmdRogueArcadeGetInfoCsReq => "CmdRogueArcadeGetInfoCsReq",
            Self::CmdRogueArcadeStartCsReq => "CmdRogueArcadeStartCsReq",
            Self::CmdRogueArcadeGetInfoScRsp => "CmdRogueArcadeGetInfoScRsp",
            Self::CmdRogueArcadeLeaveScRsp => "CmdRogueArcadeLeaveScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueArcadeTypeNone" => Some(Self::None),
            "CmdRogueArcadeRestartCsReq" => Some(Self::CmdRogueArcadeRestartCsReq),
            "CmdRogueArcadeStartScRsp" => Some(Self::CmdRogueArcadeStartScRsp),
            "CmdRogueArcadeLeaveCsReq" => Some(Self::CmdRogueArcadeLeaveCsReq),
            "CmdRogueArcadeRestartScRsp" => Some(Self::CmdRogueArcadeRestartScRsp),
            "CmdRogueArcadeGetInfoCsReq" => Some(Self::CmdRogueArcadeGetInfoCsReq),
            "CmdRogueArcadeStartCsReq" => Some(Self::CmdRogueArcadeStartCsReq),
            "CmdRogueArcadeGetInfoScRsp" => Some(Self::CmdRogueArcadeGetInfoScRsp),
            "CmdRogueArcadeLeaveScRsp" => Some(Self::CmdRogueArcadeLeaveScRsp),
            _ => None,
        }
    }
}
/// HDCCBKMLHFD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueCommonType {
    None = 0,
    CmdRogueNpcDisappearCsReq = 5674,
    CmdGetEnhanceCommonRogueBuffInfoScRsp = 5633,
    CmdRogueDoGambleScRsp = 5658,
    CmdSelectRogueCommonDialogueOptionCsReq = 5682,
    CmdBuyRogueShopBuffCsReq = 5616,
    CmdPrepareRogueAdventureRoomCsReq = 5620,
    CmdRogueWorkbenchSelectFuncScRsp = 5644,
    CmdHandleRogueCommonPendingActionCsReq = 5624,
    CmdGetRogueCommonDialogueDataCsReq = 5631,
    CmdSetRogueExhibitionCsReq = 5642,
    CmdGetEnhanceCommonRogueBuffInfoCsReq = 5629,
    CmdBuyRogueShopMiracleScRsp = 5680,
    CmdTakeRogueEventHandbookRewardCsReq = 5663,
    CmdCommonRogueQueryScRsp = 5632,
    CmdSyncRogueCommonDialogueOptionFinishScNotify = 5655,
    CmdGetRogueAdventureRoomInfoScRsp = 5648,
    CmdPrepareRogueAdventureRoomScRsp = 5603,
    CmdGetRogueCollectionCsReq = 5681,
    CmdUpdateRogueAdventureRoomScoreCsReq = 5645,
    CmdGetRogueShopBuffInfoCsReq = 5653,
    CmdSyncRogueCommonPendingActionScNotify = 5615,
    CmdFinishRogueCommonDialogueCsReq = 5684,
    CmdRogueWorkbenchGetInfoCsReq = 5622,
    CmdTakeRogueEventHandbookRewardScRsp = 5614,
    CmdRogueWorkbenchHandleFuncCsReq = 5607,
    CmdRogueWorkbenchSelectFuncCsReq = 5687,
    CmdEnhanceCommonRogueBuffScRsp = 5673,
    CmdSetRogueCollectionCsReq = 5669,
    CmdSyncRogueHandbookDataUpdateScNotify = 5604,
    CmdExchangeRogueBuffWithMiracleCsReq = 5661,
    CmdGetRogueExhibitionCsReq = 5692,
    CmdSetRogueCollectionScRsp = 5668,
    CmdEnhanceCommonRogueBuffCsReq = 5651,
    CmdStopRogueAdventureRoomScRsp = 5699,
    CmdRogueWorkbenchGetInfoScRsp = 5635,
    CmdStopRogueAdventureRoomCsReq = 5683,
    CmdGetRogueAdventureRoomInfoCsReq = 5675,
    CmdFinishRogueCommonDialogueScRsp = 5627,
    CmdGetRogueShopBuffInfoScRsp = 5634,
    CmdBuyRogueShopBuffScRsp = 5647,
    CmdBuyRogueShopMiracleCsReq = 5637,
    CmdSyncRogueCommonVirtualItemInfoScNotify = 5666,
    CmdGetRogueCommonDialogueDataScRsp = 5671,
    CmdGetRogueHandbookDataScRsp = 5691,
    CmdRogueNpcDisappearScRsp = 5630,
    CmdHandleRogueCommonPendingActionScRsp = 5612,
    CmdSyncRogueAdventureRoomInfoScNotify = 5659,
    CmdExchangeRogueBuffWithMiracleScRsp = 5625,
    CmdSyncRogueCommonDialogueDataScNotify = 5638,
    CmdCommonRogueUpdateScNotify = 5696,
    CmdRogueDebugMessageScNotify = 5611,
    CmdCommonRogueQueryCsReq = 5660,
    CmdSetRogueExhibitionScRsp = 5640,
    CmdRogueWorkbenchHandleFuncScRsp = 5618,
    CmdSyncRogueCommonActionResultScNotify = 5623,
    CmdSelectRogueCommonDialogueOptionScRsp = 5662,
    CmdRogueGetGambleInfoCsReq = 5676,
    CmdRogueGetGambleInfoScRsp = 5601,
    CmdGetRogueExhibitionScRsp = 5698,
    CmdUpdateRogueAdventureRoomScoreScRsp = 5602,
    CmdTakeRogueMiracleHandbookRewardScRsp = 5643,
    CmdTakeRogueMiracleHandbookRewardCsReq = 5688,
    CmdCommonRogueComponentUpdateScNotify = 5606,
    CmdGetRogueCollectionScRsp = 5650,
    CmdGetRogueShopMiracleInfoScRsp = 5639,
    CmdRogueDoGambleCsReq = 5641,
    CmdGetRogueShopMiracleInfoCsReq = 5646,
    CmdGetRogueHandbookDataCsReq = 5677,
}
impl CmdRogueCommonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueCommonTypeNone",
            Self::CmdRogueNpcDisappearCsReq => "CmdRogueNpcDisappearCsReq",
            Self::CmdGetEnhanceCommonRogueBuffInfoScRsp => {
                "CmdGetEnhanceCommonRogueBuffInfoScRsp"
            }
            Self::CmdRogueDoGambleScRsp => "CmdRogueDoGambleScRsp",
            Self::CmdSelectRogueCommonDialogueOptionCsReq => {
                "CmdSelectRogueCommonDialogueOptionCsReq"
            }
            Self::CmdBuyRogueShopBuffCsReq => "CmdBuyRogueShopBuffCsReq",
            Self::CmdPrepareRogueAdventureRoomCsReq => {
                "CmdPrepareRogueAdventureRoomCsReq"
            }
            Self::CmdRogueWorkbenchSelectFuncScRsp => "CmdRogueWorkbenchSelectFuncScRsp",
            Self::CmdHandleRogueCommonPendingActionCsReq => {
                "CmdHandleRogueCommonPendingActionCsReq"
            }
            Self::CmdGetRogueCommonDialogueDataCsReq => {
                "CmdGetRogueCommonDialogueDataCsReq"
            }
            Self::CmdSetRogueExhibitionCsReq => "CmdSetRogueExhibitionCsReq",
            Self::CmdGetEnhanceCommonRogueBuffInfoCsReq => {
                "CmdGetEnhanceCommonRogueBuffInfoCsReq"
            }
            Self::CmdBuyRogueShopMiracleScRsp => "CmdBuyRogueShopMiracleScRsp",
            Self::CmdTakeRogueEventHandbookRewardCsReq => {
                "CmdTakeRogueEventHandbookRewardCsReq"
            }
            Self::CmdCommonRogueQueryScRsp => "CmdCommonRogueQueryScRsp",
            Self::CmdSyncRogueCommonDialogueOptionFinishScNotify => {
                "CmdSyncRogueCommonDialogueOptionFinishScNotify"
            }
            Self::CmdGetRogueAdventureRoomInfoScRsp => {
                "CmdGetRogueAdventureRoomInfoScRsp"
            }
            Self::CmdPrepareRogueAdventureRoomScRsp => {
                "CmdPrepareRogueAdventureRoomScRsp"
            }
            Self::CmdGetRogueCollectionCsReq => "CmdGetRogueCollectionCsReq",
            Self::CmdUpdateRogueAdventureRoomScoreCsReq => {
                "CmdUpdateRogueAdventureRoomScoreCsReq"
            }
            Self::CmdGetRogueShopBuffInfoCsReq => "CmdGetRogueShopBuffInfoCsReq",
            Self::CmdSyncRogueCommonPendingActionScNotify => {
                "CmdSyncRogueCommonPendingActionScNotify"
            }
            Self::CmdFinishRogueCommonDialogueCsReq => {
                "CmdFinishRogueCommonDialogueCsReq"
            }
            Self::CmdRogueWorkbenchGetInfoCsReq => "CmdRogueWorkbenchGetInfoCsReq",
            Self::CmdTakeRogueEventHandbookRewardScRsp => {
                "CmdTakeRogueEventHandbookRewardScRsp"
            }
            Self::CmdRogueWorkbenchHandleFuncCsReq => "CmdRogueWorkbenchHandleFuncCsReq",
            Self::CmdRogueWorkbenchSelectFuncCsReq => "CmdRogueWorkbenchSelectFuncCsReq",
            Self::CmdEnhanceCommonRogueBuffScRsp => "CmdEnhanceCommonRogueBuffScRsp",
            Self::CmdSetRogueCollectionCsReq => "CmdSetRogueCollectionCsReq",
            Self::CmdSyncRogueHandbookDataUpdateScNotify => {
                "CmdSyncRogueHandbookDataUpdateScNotify"
            }
            Self::CmdExchangeRogueBuffWithMiracleCsReq => {
                "CmdExchangeRogueBuffWithMiracleCsReq"
            }
            Self::CmdGetRogueExhibitionCsReq => "CmdGetRogueExhibitionCsReq",
            Self::CmdSetRogueCollectionScRsp => "CmdSetRogueCollectionScRsp",
            Self::CmdEnhanceCommonRogueBuffCsReq => "CmdEnhanceCommonRogueBuffCsReq",
            Self::CmdStopRogueAdventureRoomScRsp => "CmdStopRogueAdventureRoomScRsp",
            Self::CmdRogueWorkbenchGetInfoScRsp => "CmdRogueWorkbenchGetInfoScRsp",
            Self::CmdStopRogueAdventureRoomCsReq => "CmdStopRogueAdventureRoomCsReq",
            Self::CmdGetRogueAdventureRoomInfoCsReq => {
                "CmdGetRogueAdventureRoomInfoCsReq"
            }
            Self::CmdFinishRogueCommonDialogueScRsp => {
                "CmdFinishRogueCommonDialogueScRsp"
            }
            Self::CmdGetRogueShopBuffInfoScRsp => "CmdGetRogueShopBuffInfoScRsp",
            Self::CmdBuyRogueShopBuffScRsp => "CmdBuyRogueShopBuffScRsp",
            Self::CmdBuyRogueShopMiracleCsReq => "CmdBuyRogueShopMiracleCsReq",
            Self::CmdSyncRogueCommonVirtualItemInfoScNotify => {
                "CmdSyncRogueCommonVirtualItemInfoScNotify"
            }
            Self::CmdGetRogueCommonDialogueDataScRsp => {
                "CmdGetRogueCommonDialogueDataScRsp"
            }
            Self::CmdGetRogueHandbookDataScRsp => "CmdGetRogueHandbookDataScRsp",
            Self::CmdRogueNpcDisappearScRsp => "CmdRogueNpcDisappearScRsp",
            Self::CmdHandleRogueCommonPendingActionScRsp => {
                "CmdHandleRogueCommonPendingActionScRsp"
            }
            Self::CmdSyncRogueAdventureRoomInfoScNotify => {
                "CmdSyncRogueAdventureRoomInfoScNotify"
            }
            Self::CmdExchangeRogueBuffWithMiracleScRsp => {
                "CmdExchangeRogueBuffWithMiracleScRsp"
            }
            Self::CmdSyncRogueCommonDialogueDataScNotify => {
                "CmdSyncRogueCommonDialogueDataScNotify"
            }
            Self::CmdCommonRogueUpdateScNotify => "CmdCommonRogueUpdateScNotify",
            Self::CmdRogueDebugMessageScNotify => "CmdRogueDebugMessageScNotify",
            Self::CmdCommonRogueQueryCsReq => "CmdCommonRogueQueryCsReq",
            Self::CmdSetRogueExhibitionScRsp => "CmdSetRogueExhibitionScRsp",
            Self::CmdRogueWorkbenchHandleFuncScRsp => "CmdRogueWorkbenchHandleFuncScRsp",
            Self::CmdSyncRogueCommonActionResultScNotify => {
                "CmdSyncRogueCommonActionResultScNotify"
            }
            Self::CmdSelectRogueCommonDialogueOptionScRsp => {
                "CmdSelectRogueCommonDialogueOptionScRsp"
            }
            Self::CmdRogueGetGambleInfoCsReq => "CmdRogueGetGambleInfoCsReq",
            Self::CmdRogueGetGambleInfoScRsp => "CmdRogueGetGambleInfoScRsp",
            Self::CmdGetRogueExhibitionScRsp => "CmdGetRogueExhibitionScRsp",
            Self::CmdUpdateRogueAdventureRoomScoreScRsp => {
                "CmdUpdateRogueAdventureRoomScoreScRsp"
            }
            Self::CmdTakeRogueMiracleHandbookRewardScRsp => {
                "CmdTakeRogueMiracleHandbookRewardScRsp"
            }
            Self::CmdTakeRogueMiracleHandbookRewardCsReq => {
                "CmdTakeRogueMiracleHandbookRewardCsReq"
            }
            Self::CmdCommonRogueComponentUpdateScNotify => {
                "CmdCommonRogueComponentUpdateScNotify"
            }
            Self::CmdGetRogueCollectionScRsp => "CmdGetRogueCollectionScRsp",
            Self::CmdGetRogueShopMiracleInfoScRsp => "CmdGetRogueShopMiracleInfoScRsp",
            Self::CmdRogueDoGambleCsReq => "CmdRogueDoGambleCsReq",
            Self::CmdGetRogueShopMiracleInfoCsReq => "CmdGetRogueShopMiracleInfoCsReq",
            Self::CmdGetRogueHandbookDataCsReq => "CmdGetRogueHandbookDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueCommonTypeNone" => Some(Self::None),
            "CmdRogueNpcDisappearCsReq" => Some(Self::CmdRogueNpcDisappearCsReq),
            "CmdGetEnhanceCommonRogueBuffInfoScRsp" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoScRsp)
            }
            "CmdRogueDoGambleScRsp" => Some(Self::CmdRogueDoGambleScRsp),
            "CmdSelectRogueCommonDialogueOptionCsReq" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionCsReq)
            }
            "CmdBuyRogueShopBuffCsReq" => Some(Self::CmdBuyRogueShopBuffCsReq),
            "CmdPrepareRogueAdventureRoomCsReq" => {
                Some(Self::CmdPrepareRogueAdventureRoomCsReq)
            }
            "CmdRogueWorkbenchSelectFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchSelectFuncScRsp)
            }
            "CmdHandleRogueCommonPendingActionCsReq" => {
                Some(Self::CmdHandleRogueCommonPendingActionCsReq)
            }
            "CmdGetRogueCommonDialogueDataCsReq" => {
                Some(Self::CmdGetRogueCommonDialogueDataCsReq)
            }
            "CmdSetRogueExhibitionCsReq" => Some(Self::CmdSetRogueExhibitionCsReq),
            "CmdGetEnhanceCommonRogueBuffInfoCsReq" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoCsReq)
            }
            "CmdBuyRogueShopMiracleScRsp" => Some(Self::CmdBuyRogueShopMiracleScRsp),
            "CmdTakeRogueEventHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueEventHandbookRewardCsReq)
            }
            "CmdCommonRogueQueryScRsp" => Some(Self::CmdCommonRogueQueryScRsp),
            "CmdSyncRogueCommonDialogueOptionFinishScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueOptionFinishScNotify)
            }
            "CmdGetRogueAdventureRoomInfoScRsp" => {
                Some(Self::CmdGetRogueAdventureRoomInfoScRsp)
            }
            "CmdPrepareRogueAdventureRoomScRsp" => {
                Some(Self::CmdPrepareRogueAdventureRoomScRsp)
            }
            "CmdGetRogueCollectionCsReq" => Some(Self::CmdGetRogueCollectionCsReq),
            "CmdUpdateRogueAdventureRoomScoreCsReq" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreCsReq)
            }
            "CmdGetRogueShopBuffInfoCsReq" => Some(Self::CmdGetRogueShopBuffInfoCsReq),
            "CmdSyncRogueCommonPendingActionScNotify" => {
                Some(Self::CmdSyncRogueCommonPendingActionScNotify)
            }
            "CmdFinishRogueCommonDialogueCsReq" => {
                Some(Self::CmdFinishRogueCommonDialogueCsReq)
            }
            "CmdRogueWorkbenchGetInfoCsReq" => Some(Self::CmdRogueWorkbenchGetInfoCsReq),
            "CmdTakeRogueEventHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueEventHandbookRewardScRsp)
            }
            "CmdRogueWorkbenchHandleFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchHandleFuncCsReq)
            }
            "CmdRogueWorkbenchSelectFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchSelectFuncCsReq)
            }
            "CmdEnhanceCommonRogueBuffScRsp" => {
                Some(Self::CmdEnhanceCommonRogueBuffScRsp)
            }
            "CmdSetRogueCollectionCsReq" => Some(Self::CmdSetRogueCollectionCsReq),
            "CmdSyncRogueHandbookDataUpdateScNotify" => {
                Some(Self::CmdSyncRogueHandbookDataUpdateScNotify)
            }
            "CmdExchangeRogueBuffWithMiracleCsReq" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleCsReq)
            }
            "CmdGetRogueExhibitionCsReq" => Some(Self::CmdGetRogueExhibitionCsReq),
            "CmdSetRogueCollectionScRsp" => Some(Self::CmdSetRogueCollectionScRsp),
            "CmdEnhanceCommonRogueBuffCsReq" => {
                Some(Self::CmdEnhanceCommonRogueBuffCsReq)
            }
            "CmdStopRogueAdventureRoomScRsp" => {
                Some(Self::CmdStopRogueAdventureRoomScRsp)
            }
            "CmdRogueWorkbenchGetInfoScRsp" => Some(Self::CmdRogueWorkbenchGetInfoScRsp),
            "CmdStopRogueAdventureRoomCsReq" => {
                Some(Self::CmdStopRogueAdventureRoomCsReq)
            }
            "CmdGetRogueAdventureRoomInfoCsReq" => {
                Some(Self::CmdGetRogueAdventureRoomInfoCsReq)
            }
            "CmdFinishRogueCommonDialogueScRsp" => {
                Some(Self::CmdFinishRogueCommonDialogueScRsp)
            }
            "CmdGetRogueShopBuffInfoScRsp" => Some(Self::CmdGetRogueShopBuffInfoScRsp),
            "CmdBuyRogueShopBuffScRsp" => Some(Self::CmdBuyRogueShopBuffScRsp),
            "CmdBuyRogueShopMiracleCsReq" => Some(Self::CmdBuyRogueShopMiracleCsReq),
            "CmdSyncRogueCommonVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueCommonVirtualItemInfoScNotify)
            }
            "CmdGetRogueCommonDialogueDataScRsp" => {
                Some(Self::CmdGetRogueCommonDialogueDataScRsp)
            }
            "CmdGetRogueHandbookDataScRsp" => Some(Self::CmdGetRogueHandbookDataScRsp),
            "CmdRogueNpcDisappearScRsp" => Some(Self::CmdRogueNpcDisappearScRsp),
            "CmdHandleRogueCommonPendingActionScRsp" => {
                Some(Self::CmdHandleRogueCommonPendingActionScRsp)
            }
            "CmdSyncRogueAdventureRoomInfoScNotify" => {
                Some(Self::CmdSyncRogueAdventureRoomInfoScNotify)
            }
            "CmdExchangeRogueBuffWithMiracleScRsp" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleScRsp)
            }
            "CmdSyncRogueCommonDialogueDataScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueDataScNotify)
            }
            "CmdCommonRogueUpdateScNotify" => Some(Self::CmdCommonRogueUpdateScNotify),
            "CmdRogueDebugMessageScNotify" => Some(Self::CmdRogueDebugMessageScNotify),
            "CmdCommonRogueQueryCsReq" => Some(Self::CmdCommonRogueQueryCsReq),
            "CmdSetRogueExhibitionScRsp" => Some(Self::CmdSetRogueExhibitionScRsp),
            "CmdRogueWorkbenchHandleFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchHandleFuncScRsp)
            }
            "CmdSyncRogueCommonActionResultScNotify" => {
                Some(Self::CmdSyncRogueCommonActionResultScNotify)
            }
            "CmdSelectRogueCommonDialogueOptionScRsp" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionScRsp)
            }
            "CmdRogueGetGambleInfoCsReq" => Some(Self::CmdRogueGetGambleInfoCsReq),
            "CmdRogueGetGambleInfoScRsp" => Some(Self::CmdRogueGetGambleInfoScRsp),
            "CmdGetRogueExhibitionScRsp" => Some(Self::CmdGetRogueExhibitionScRsp),
            "CmdUpdateRogueAdventureRoomScoreScRsp" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreScRsp)
            }
            "CmdTakeRogueMiracleHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardScRsp)
            }
            "CmdTakeRogueMiracleHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardCsReq)
            }
            "CmdCommonRogueComponentUpdateScNotify" => {
                Some(Self::CmdCommonRogueComponentUpdateScNotify)
            }
            "CmdGetRogueCollectionScRsp" => Some(Self::CmdGetRogueCollectionScRsp),
            "CmdGetRogueShopMiracleInfoScRsp" => {
                Some(Self::CmdGetRogueShopMiracleInfoScRsp)
            }
            "CmdRogueDoGambleCsReq" => Some(Self::CmdRogueDoGambleCsReq),
            "CmdGetRogueShopMiracleInfoCsReq" => {
                Some(Self::CmdGetRogueShopMiracleInfoCsReq)
            }
            "CmdGetRogueHandbookDataCsReq" => Some(Self::CmdGetRogueHandbookDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ggoenppffgd {
    RogueAdventureRoomStatusNone = 0,
    RogueAdventureRoomStatusPrepare = 1,
    RogueAdventureRoomStatusStarted = 2,
    RogueAdventureRoomStatusStopped = 3,
}
impl Ggoenppffgd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueAdventureRoomStatusNone => "ROGUE_ADVENTURE_ROOM_STATUS_NONE",
            Self::RogueAdventureRoomStatusPrepare => {
                "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE"
            }
            Self::RogueAdventureRoomStatusStarted => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STARTED"
            }
            Self::RogueAdventureRoomStatusStopped => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ADVENTURE_ROOM_STATUS_NONE" => {
                Some(Self::RogueAdventureRoomStatusNone)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE" => {
                Some(Self::RogueAdventureRoomStatusPrepare)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STARTED" => {
                Some(Self::RogueAdventureRoomStatusStarted)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED" => {
                Some(Self::RogueAdventureRoomStatusStopped)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ndligjbgiob {
    RogueCommonBuffSelectSourceTypeNone = 0,
    RogueCommonBuffSelectSourceTypeDiceRoll = 1,
    RogueCommonBuffSelectSourceTypeAeon = 2,
    RogueCommonBuffSelectSourceTypeBoardEvent = 3,
    RogueCommonBuffSelectSourceTypeLevelMechanism = 4,
}
impl Ndligjbgiob {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffSelectSourceTypeNone => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonBuffSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonBuffSelectSourceTypeAeon => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonBuffSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonBuffSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonBuffSelectSourceTypeNone)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonBuffSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonBuffSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonBuffSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonBuffSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hkljajfhcpe {
    RogueUnlockFunctionTypeMiracle = 0,
    RogueUnlockFunctionTypeShowHint = 1,
    RogueUnlockFunctionTypeCosmosBanAeon = 2,
    RogueUnlockFuntionTypeExhibition = 3,
    RogueUnlockFuntionTypeCollection = 4,
}
impl Hkljajfhcpe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueUnlockFunctionTypeMiracle => "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE",
            Self::RogueUnlockFunctionTypeShowHint => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT"
            }
            Self::RogueUnlockFunctionTypeCosmosBanAeon => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON"
            }
            Self::RogueUnlockFuntionTypeExhibition => {
                "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION"
            }
            Self::RogueUnlockFuntionTypeCollection => {
                "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE" => {
                Some(Self::RogueUnlockFunctionTypeMiracle)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT" => {
                Some(Self::RogueUnlockFunctionTypeShowHint)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON" => {
                Some(Self::RogueUnlockFunctionTypeCosmosBanAeon)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION" => {
                Some(Self::RogueUnlockFuntionTypeExhibition)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION" => {
                Some(Self::RogueUnlockFuntionTypeCollection)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cppojiaadfi {
    RogueCommonMiracleSelectSourceTypeNone = 0,
    RogueCommonMiracleSelectSourceTypeDiceRoll = 1,
    RogueCommonMiracleSelectSourceTypeAeon = 2,
    RogueCommonMiracleSelectSourceTypeBoardEvent = 3,
    RogueCommonMiracleSelectSourceTypeLevelMechanism = 4,
}
impl Cppojiaadfi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleSelectSourceTypeNone => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonMiracleSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Self::RogueCommonMiracleSelectSourceTypeAeon => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonMiracleSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonMiracleSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bdibnljdhjf {
    RogueCommonBuffDisplayTypeNone = 0,
    RogueCommonBuffDisplayTypeAdd = 1,
    RogueCommonBuffDisplayTypeRemove = 2,
}
impl Bdibnljdhjf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonBuffDisplayTypeNone => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE",
            Self::RogueCommonBuffDisplayTypeAdd => "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD",
            Self::RogueCommonBuffDisplayTypeRemove => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonBuffDisplayTypeNone)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonBuffDisplayTypeAdd)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonBuffDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oejphhencfi {
    RogueCommonMiracleDisplayTypeNone = 0,
    RogueCommonMiracleDisplayTypeAdd = 1,
    RogueCommonMiracleDisplayTypeRemove = 2,
    RogueCommonMiracleDisplayTypeRepair = 3,
}
impl Oejphhencfi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonMiracleDisplayTypeNone => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonMiracleDisplayTypeAdd => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD"
            }
            Self::RogueCommonMiracleDisplayTypeRemove => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE"
            }
            Self::RogueCommonMiracleDisplayTypeRepair => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleDisplayTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonMiracleDisplayTypeAdd)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonMiracleDisplayTypeRemove)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR" => {
                Some(Self::RogueCommonMiracleDisplayTypeRepair)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ljnefjncman {
    RogueCommonItemDisplayTypeNone = 0,
    RogueCommonItemDisplayTypeAdd = 1,
    RogueCommonItemDisplayTypeRemove = 2,
}
impl Ljnefjncman {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonItemDisplayTypeNone => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE",
            Self::RogueCommonItemDisplayTypeAdd => "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD",
            Self::RogueCommonItemDisplayTypeRemove => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonItemDisplayTypeNone)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonItemDisplayTypeAdd)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonItemDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nfihmnfegko {
    RogueCommonActionResultDisplayTypeNone = 0,
    RogueCommonActionResultDisplayTypeSingle = 1,
    RogueCommonActionResultDisplayTypeMulti = 2,
}
impl Nfihmnfegko {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultDisplayTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE"
            }
            Self::RogueCommonActionResultDisplayTypeSingle => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE"
            }
            Self::RogueCommonActionResultDisplayTypeMulti => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultDisplayTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE" => {
                Some(Self::RogueCommonActionResultDisplayTypeSingle)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI" => {
                Some(Self::RogueCommonActionResultDisplayTypeMulti)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Heackdpiaek {
    RogueCommonActionResultSourceTypeNone = 0,
    RogueCommonActionResultSourceTypeSelect = 1,
    RogueCommonActionResultSourceTypeEnhance = 2,
    RogueCommonActionResultSourceTypeMiracle = 3,
    RogueCommonActionResultSourceTypeDialogue = 4,
    RogueCommonActionResultSourceTypeBonus = 5,
    RogueCommonActionResultSourceTypeShop = 6,
    RogueCommonActionResultSourceTypeDice = 7,
    RogueCommonActionResultSourceTypeAeon = 8,
    RogueCommonActionResultSourceTypeBoardEvent = 9,
    RogueCommonActionResultSourceTypeMazeSkill = 10,
    RogueCommonActionResultSourceTypeLevelMechanism = 11,
    RogueCommonActionResultSourceTypeBuff = 12,
    RogueCommonActionResultSourceTypeReforge = 13,
    RogueCommonActionResultSourceTypeMagicUnitCompose = 14,
    RogueCommonActionResultSourceTypeMagicUnitReforge = 15,
}
impl Heackdpiaek {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCommonActionResultSourceTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Self::RogueCommonActionResultSourceTypeSelect => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT"
            }
            Self::RogueCommonActionResultSourceTypeEnhance => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE"
            }
            Self::RogueCommonActionResultSourceTypeMiracle => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE"
            }
            Self::RogueCommonActionResultSourceTypeDialogue => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE"
            }
            Self::RogueCommonActionResultSourceTypeBonus => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS"
            }
            Self::RogueCommonActionResultSourceTypeShop => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP"
            }
            Self::RogueCommonActionResultSourceTypeDice => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE"
            }
            Self::RogueCommonActionResultSourceTypeAeon => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON"
            }
            Self::RogueCommonActionResultSourceTypeBoardEvent => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT"
            }
            Self::RogueCommonActionResultSourceTypeMazeSkill => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL"
            }
            Self::RogueCommonActionResultSourceTypeLevelMechanism => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Self::RogueCommonActionResultSourceTypeBuff => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF"
            }
            Self::RogueCommonActionResultSourceTypeReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitCompose => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE"
            }
            Self::RogueCommonActionResultSourceTypeMagicUnitReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultSourceTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueCommonActionResultSourceTypeSelect)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE" => {
                Some(Self::RogueCommonActionResultSourceTypeEnhance)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE" => {
                Some(Self::RogueCommonActionResultSourceTypeMiracle)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueCommonActionResultSourceTypeDialogue)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS" => {
                Some(Self::RogueCommonActionResultSourceTypeBonus)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP" => {
                Some(Self::RogueCommonActionResultSourceTypeShop)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE" => {
                Some(Self::RogueCommonActionResultSourceTypeDice)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonActionResultSourceTypeAeon)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonActionResultSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueCommonActionResultSourceTypeMazeSkill)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonActionResultSourceTypeLevelMechanism)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF" => {
                Some(Self::RogueCommonActionResultSourceTypeBuff)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeReforge)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_COMPOSE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitCompose)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAGIC_UNIT_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeMagicUnitReforge)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jdgnphoeblj {
    RogueTalentStatusLock = 0,
    RogueTalentStatusUnlock = 1,
    RogueTalentStatusEnable = 2,
}
impl Jdgnphoeblj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTalentStatusLock => "ROGUE_TALENT_STATUS_LOCK",
            Self::RogueTalentStatusUnlock => "ROGUE_TALENT_STATUS_UNLOCK",
            Self::RogueTalentStatusEnable => "ROGUE_TALENT_STATUS_ENABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TALENT_STATUS_LOCK" => Some(Self::RogueTalentStatusLock),
            "ROGUE_TALENT_STATUS_UNLOCK" => Some(Self::RogueTalentStatusUnlock),
            "ROGUE_TALENT_STATUS_ENABLE" => Some(Self::RogueTalentStatusEnable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dmejolhflhp {
    RogueCollectionOperateNone = 0,
    RogueCollectionOperateSet = 1,
    RogueCollectionOperateUnset = 2,
}
impl Dmejolhflhp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionOperateNone => "ROGUE_COLLECTION_OPERATE_NONE",
            Self::RogueCollectionOperateSet => "ROGUE_COLLECTION_OPERATE_SET",
            Self::RogueCollectionOperateUnset => "ROGUE_COLLECTION_OPERATE_UNSET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_OPERATE_NONE" => Some(Self::RogueCollectionOperateNone),
            "ROGUE_COLLECTION_OPERATE_SET" => Some(Self::RogueCollectionOperateSet),
            "ROGUE_COLLECTION_OPERATE_UNSET" => Some(Self::RogueCollectionOperateUnset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Epmedgjkjob {
    RogueBoothNone = 0,
    RogueBoothEmpty = 1,
    RogueBoothDisplay = 2,
}
impl Epmedgjkjob {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueBoothNone => "ROGUE_BOOTH_NONE",
            Self::RogueBoothEmpty => "ROGUE_BOOTH_EMPTY",
            Self::RogueBoothDisplay => "ROGUE_BOOTH_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BOOTH_NONE" => Some(Self::RogueBoothNone),
            "ROGUE_BOOTH_EMPTY" => Some(Self::RogueBoothEmpty),
            "ROGUE_BOOTH_DISPLAY" => Some(Self::RogueBoothDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eoomgaahhmn {
    RogueCollectionNone = 0,
    RogueCollectionUnlocked = 1,
    RogueCollectionDisplay = 2,
}
impl Eoomgaahhmn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueCollectionNone => "ROGUE_COLLECTION_NONE",
            Self::RogueCollectionUnlocked => "ROGUE_COLLECTION_UNLOCKED",
            Self::RogueCollectionDisplay => "ROGUE_COLLECTION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_NONE" => Some(Self::RogueCollectionNone),
            "ROGUE_COLLECTION_UNLOCKED" => Some(Self::RogueCollectionUnlocked),
            "ROGUE_COLLECTION_DISPLAY" => Some(Self::RogueCollectionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lnbpmlpgkng {
    RogueExhibitionNone = 0,
    RogueExhibitionUnlocked = 1,
    RogueExhibitionDisplay = 2,
}
impl Lnbpmlpgkng {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueExhibitionNone => "ROGUE_EXHIBITION_NONE",
            Self::RogueExhibitionUnlocked => "ROGUE_EXHIBITION_UNLOCKED",
            Self::RogueExhibitionDisplay => "ROGUE_EXHIBITION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_EXHIBITION_NONE" => Some(Self::RogueExhibitionNone),
            "ROGUE_EXHIBITION_UNLOCKED" => Some(Self::RogueExhibitionUnlocked),
            "ROGUE_EXHIBITION_DISPLAY" => Some(Self::RogueExhibitionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hkkeaigehnp {
    RogueDebugMessageTypeNone = 0,
    RogueDebugMessageTypeDebug = 1,
    RogueDebugMessageTypeInfo = 2,
    RogueDebugMessageTypeWarn = 3,
    RogueDebugMessageTypeError = 4,
}
impl Hkkeaigehnp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueDebugMessageTypeNone => "ROGUE_DEBUG_MESSAGE_TYPE_NONE",
            Self::RogueDebugMessageTypeDebug => "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG",
            Self::RogueDebugMessageTypeInfo => "ROGUE_DEBUG_MESSAGE_TYPE_INFO",
            Self::RogueDebugMessageTypeWarn => "ROGUE_DEBUG_MESSAGE_TYPE_WARN",
            Self::RogueDebugMessageTypeError => "ROGUE_DEBUG_MESSAGE_TYPE_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DEBUG_MESSAGE_TYPE_NONE" => Some(Self::RogueDebugMessageTypeNone),
            "ROGUE_DEBUG_MESSAGE_TYPE_DEBUG" => Some(Self::RogueDebugMessageTypeDebug),
            "ROGUE_DEBUG_MESSAGE_TYPE_INFO" => Some(Self::RogueDebugMessageTypeInfo),
            "ROGUE_DEBUG_MESSAGE_TYPE_WARN" => Some(Self::RogueDebugMessageTypeWarn),
            "ROGUE_DEBUG_MESSAGE_TYPE_ERROR" => Some(Self::RogueDebugMessageTypeError),
            _ => None,
        }
    }
}
/// DACMIBEKOFC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueEndless {
    None = 0,
    CmdTakeRogueEndlessActivityPointRewardCsReq = 6002,
    CmdEnterRogueEndlessActivityStageCsReq = 6009,
    ActivityBattleEndScNotify = 6001,
    CmdEnterRogueEndlessActivityStageScRsp = 6008,
    CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6007,
    CmdGetRogueEndlessActivityDataScRsp = 6005,
    CmdGetRogueEndlessActivityDataCsReq = 6006,
    CmdTakeRogueEndlessActivityPointRewardScRsp = 6010,
    CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6003,
}
impl CmdRogueEndless {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueEndlessNone",
            Self::CmdTakeRogueEndlessActivityPointRewardCsReq => {
                "CmdTakeRogueEndlessActivityPointRewardCsReq"
            }
            Self::CmdEnterRogueEndlessActivityStageCsReq => {
                "CmdEnterRogueEndlessActivityStageCsReq"
            }
            Self::ActivityBattleEndScNotify => "CmdRogueEndlessActivityBattleEndScNotify",
            Self::CmdEnterRogueEndlessActivityStageScRsp => {
                "CmdEnterRogueEndlessActivityStageScRsp"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq => {
                "CmdTakeRogueEndlessActivityAllBonusRewardCsReq"
            }
            Self::CmdGetRogueEndlessActivityDataScRsp => {
                "CmdGetRogueEndlessActivityDataScRsp"
            }
            Self::CmdGetRogueEndlessActivityDataCsReq => {
                "CmdGetRogueEndlessActivityDataCsReq"
            }
            Self::CmdTakeRogueEndlessActivityPointRewardScRsp => {
                "CmdTakeRogueEndlessActivityPointRewardScRsp"
            }
            Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp => {
                "CmdTakeRogueEndlessActivityAllBonusRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueEndlessNone" => Some(Self::None),
            "CmdTakeRogueEndlessActivityPointRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardCsReq)
            }
            "CmdEnterRogueEndlessActivityStageCsReq" => {
                Some(Self::CmdEnterRogueEndlessActivityStageCsReq)
            }
            "CmdRogueEndlessActivityBattleEndScNotify" => {
                Some(Self::ActivityBattleEndScNotify)
            }
            "CmdEnterRogueEndlessActivityStageScRsp" => {
                Some(Self::CmdEnterRogueEndlessActivityStageScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq)
            }
            "CmdGetRogueEndlessActivityDataScRsp" => {
                Some(Self::CmdGetRogueEndlessActivityDataScRsp)
            }
            "CmdGetRogueEndlessActivityDataCsReq" => {
                Some(Self::CmdGetRogueEndlessActivityDataCsReq)
            }
            "CmdTakeRogueEndlessActivityPointRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp)
            }
            _ => None,
        }
    }
}
/// HIJDPPEAOGO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueMagic {
    None = 0,
    UnitComposeCsReq = 7764,
    EnterRoomScRsp = 7716,
    GetTalentInfoScRsp = 7765,
    GetMiscRealTimeDataCsReq = 7704,
    EnterLayerCsReq = 7747,
    AutoDressInUnitCsReq = 7743,
    EnableTalentScRsp = 7713,
    EnterLayerScRsp = 7774,
    SettleScRsp = 7737,
    LeaveScRsp = 7753,
    SettleCsReq = 7734,
    EnableTalentCsReq = 7726,
    ReviveAvatarCsReq = 7725,
    AreaUpdateScNotify = 7775,
    UnitReforgeCsReq = 7710,
    ScepterTakeOffUnitScRsp = 7793,
    BattleFailSettleInfoScNotify = 7719,
    LevelInfoUpdateScNotify = 7730,
    SetAutoDressInMagicUnitScRsp = 7791,
    AutoDressInUnitScRsp = 7763,
    QueryCsReq = 7733,
    UnitReforgeScRsp = 7770,
    StoryInfoUpdateScNotify = 7714,
    ScepterDressInUnitScRsp = 7799,
    UnitComposeScRsp = 7794,
    ReviveAvatarScRsp = 7729,
    EnterRoomCsReq = 7780,
    GetTalentInfoCsReq = 7736,
    StartScRsp = 7720,
    ScepterDressInUnitCsReq = 7783,
    QueryScRsp = 7751,
    SetAutoDressInMagicUnitCsReq = 7777,
    LeaveCsReq = 7739,
    StartCsReq = 7759,
    ReviveCostUpdateScNotify = 7761,
    GetMiscRealTimeDataScRsp = 7788,
    ScepterTakeOffUnitCsReq = 7709,
    EnterScRsp = 7746,
    AutoDressInMagicUnitChangeScNotify = 7723,
    EnterCsReq = 7703,
}
impl CmdRogueMagic {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueMagicNone",
            Self::UnitComposeCsReq => "CmdRogueMagicUnitComposeCsReq",
            Self::EnterRoomScRsp => "CmdRogueMagicEnterRoomScRsp",
            Self::GetTalentInfoScRsp => "CmdRogueMagicGetTalentInfoScRsp",
            Self::GetMiscRealTimeDataCsReq => "CmdRogueMagicGetMiscRealTimeDataCsReq",
            Self::EnterLayerCsReq => "CmdRogueMagicEnterLayerCsReq",
            Self::AutoDressInUnitCsReq => "CmdRogueMagicAutoDressInUnitCsReq",
            Self::EnableTalentScRsp => "CmdRogueMagicEnableTalentScRsp",
            Self::EnterLayerScRsp => "CmdRogueMagicEnterLayerScRsp",
            Self::SettleScRsp => "CmdRogueMagicSettleScRsp",
            Self::LeaveScRsp => "CmdRogueMagicLeaveScRsp",
            Self::SettleCsReq => "CmdRogueMagicSettleCsReq",
            Self::EnableTalentCsReq => "CmdRogueMagicEnableTalentCsReq",
            Self::ReviveAvatarCsReq => "CmdRogueMagicReviveAvatarCsReq",
            Self::AreaUpdateScNotify => "CmdRogueMagicAreaUpdateScNotify",
            Self::UnitReforgeCsReq => "CmdRogueMagicUnitReforgeCsReq",
            Self::ScepterTakeOffUnitScRsp => "CmdRogueMagicScepterTakeOffUnitScRsp",
            Self::BattleFailSettleInfoScNotify => {
                "CmdRogueMagicBattleFailSettleInfoScNotify"
            }
            Self::LevelInfoUpdateScNotify => "CmdRogueMagicLevelInfoUpdateScNotify",
            Self::SetAutoDressInMagicUnitScRsp => {
                "CmdRogueMagicSetAutoDressInMagicUnitScRsp"
            }
            Self::AutoDressInUnitScRsp => "CmdRogueMagicAutoDressInUnitScRsp",
            Self::QueryCsReq => "CmdRogueMagicQueryCsReq",
            Self::UnitReforgeScRsp => "CmdRogueMagicUnitReforgeScRsp",
            Self::StoryInfoUpdateScNotify => "CmdRogueMagicStoryInfoUpdateScNotify",
            Self::ScepterDressInUnitScRsp => "CmdRogueMagicScepterDressInUnitScRsp",
            Self::UnitComposeScRsp => "CmdRogueMagicUnitComposeScRsp",
            Self::ReviveAvatarScRsp => "CmdRogueMagicReviveAvatarScRsp",
            Self::EnterRoomCsReq => "CmdRogueMagicEnterRoomCsReq",
            Self::GetTalentInfoCsReq => "CmdRogueMagicGetTalentInfoCsReq",
            Self::StartScRsp => "CmdRogueMagicStartScRsp",
            Self::ScepterDressInUnitCsReq => "CmdRogueMagicScepterDressInUnitCsReq",
            Self::QueryScRsp => "CmdRogueMagicQueryScRsp",
            Self::SetAutoDressInMagicUnitCsReq => {
                "CmdRogueMagicSetAutoDressInMagicUnitCsReq"
            }
            Self::LeaveCsReq => "CmdRogueMagicLeaveCsReq",
            Self::StartCsReq => "CmdRogueMagicStartCsReq",
            Self::ReviveCostUpdateScNotify => "CmdRogueMagicReviveCostUpdateScNotify",
            Self::GetMiscRealTimeDataScRsp => "CmdRogueMagicGetMiscRealTimeDataScRsp",
            Self::ScepterTakeOffUnitCsReq => "CmdRogueMagicScepterTakeOffUnitCsReq",
            Self::EnterScRsp => "CmdRogueMagicEnterScRsp",
            Self::AutoDressInMagicUnitChangeScNotify => {
                "CmdRogueMagicAutoDressInMagicUnitChangeScNotify"
            }
            Self::EnterCsReq => "CmdRogueMagicEnterCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueMagicNone" => Some(Self::None),
            "CmdRogueMagicUnitComposeCsReq" => Some(Self::UnitComposeCsReq),
            "CmdRogueMagicEnterRoomScRsp" => Some(Self::EnterRoomScRsp),
            "CmdRogueMagicGetTalentInfoScRsp" => Some(Self::GetTalentInfoScRsp),
            "CmdRogueMagicGetMiscRealTimeDataCsReq" => {
                Some(Self::GetMiscRealTimeDataCsReq)
            }
            "CmdRogueMagicEnterLayerCsReq" => Some(Self::EnterLayerCsReq),
            "CmdRogueMagicAutoDressInUnitCsReq" => Some(Self::AutoDressInUnitCsReq),
            "CmdRogueMagicEnableTalentScRsp" => Some(Self::EnableTalentScRsp),
            "CmdRogueMagicEnterLayerScRsp" => Some(Self::EnterLayerScRsp),
            "CmdRogueMagicSettleScRsp" => Some(Self::SettleScRsp),
            "CmdRogueMagicLeaveScRsp" => Some(Self::LeaveScRsp),
            "CmdRogueMagicSettleCsReq" => Some(Self::SettleCsReq),
            "CmdRogueMagicEnableTalentCsReq" => Some(Self::EnableTalentCsReq),
            "CmdRogueMagicReviveAvatarCsReq" => Some(Self::ReviveAvatarCsReq),
            "CmdRogueMagicAreaUpdateScNotify" => Some(Self::AreaUpdateScNotify),
            "CmdRogueMagicUnitReforgeCsReq" => Some(Self::UnitReforgeCsReq),
            "CmdRogueMagicScepterTakeOffUnitScRsp" => Some(Self::ScepterTakeOffUnitScRsp),
            "CmdRogueMagicBattleFailSettleInfoScNotify" => {
                Some(Self::BattleFailSettleInfoScNotify)
            }
            "CmdRogueMagicLevelInfoUpdateScNotify" => Some(Self::LevelInfoUpdateScNotify),
            "CmdRogueMagicSetAutoDressInMagicUnitScRsp" => {
                Some(Self::SetAutoDressInMagicUnitScRsp)
            }
            "CmdRogueMagicAutoDressInUnitScRsp" => Some(Self::AutoDressInUnitScRsp),
            "CmdRogueMagicQueryCsReq" => Some(Self::QueryCsReq),
            "CmdRogueMagicUnitReforgeScRsp" => Some(Self::UnitReforgeScRsp),
            "CmdRogueMagicStoryInfoUpdateScNotify" => Some(Self::StoryInfoUpdateScNotify),
            "CmdRogueMagicScepterDressInUnitScRsp" => Some(Self::ScepterDressInUnitScRsp),
            "CmdRogueMagicUnitComposeScRsp" => Some(Self::UnitComposeScRsp),
            "CmdRogueMagicReviveAvatarScRsp" => Some(Self::ReviveAvatarScRsp),
            "CmdRogueMagicEnterRoomCsReq" => Some(Self::EnterRoomCsReq),
            "CmdRogueMagicGetTalentInfoCsReq" => Some(Self::GetTalentInfoCsReq),
            "CmdRogueMagicStartScRsp" => Some(Self::StartScRsp),
            "CmdRogueMagicScepterDressInUnitCsReq" => Some(Self::ScepterDressInUnitCsReq),
            "CmdRogueMagicQueryScRsp" => Some(Self::QueryScRsp),
            "CmdRogueMagicSetAutoDressInMagicUnitCsReq" => {
                Some(Self::SetAutoDressInMagicUnitCsReq)
            }
            "CmdRogueMagicLeaveCsReq" => Some(Self::LeaveCsReq),
            "CmdRogueMagicStartCsReq" => Some(Self::StartCsReq),
            "CmdRogueMagicReviveCostUpdateScNotify" => {
                Some(Self::ReviveCostUpdateScNotify)
            }
            "CmdRogueMagicGetMiscRealTimeDataScRsp" => {
                Some(Self::GetMiscRealTimeDataScRsp)
            }
            "CmdRogueMagicScepterTakeOffUnitCsReq" => Some(Self::ScepterTakeOffUnitCsReq),
            "CmdRogueMagicEnterScRsp" => Some(Self::EnterScRsp),
            "CmdRogueMagicAutoDressInMagicUnitChangeScNotify" => {
                Some(Self::AutoDressInMagicUnitChangeScNotify)
            }
            "CmdRogueMagicEnterCsReq" => Some(Self::EnterCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ekcjfffffdo {
    RogueMagicLevelStatusNone = 0,
    RogueMagicLevelStatusProcessing = 1,
    RogueMagicLevelStatusFinished = 2,
    RogueMagicLevelStatusSettled = 3,
}
impl Ekcjfffffdo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLevelStatusNone => "ROGUE_MAGIC_LEVEL_STATUS_NONE",
            Self::RogueMagicLevelStatusProcessing => {
                "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueMagicLevelStatusFinished => "ROGUE_MAGIC_LEVEL_STATUS_FINISHED",
            Self::RogueMagicLevelStatusSettled => "ROGUE_MAGIC_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LEVEL_STATUS_NONE" => Some(Self::RogueMagicLevelStatusNone),
            "ROGUE_MAGIC_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLevelStatusProcessing)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueMagicLevelStatusFinished)
            }
            "ROGUE_MAGIC_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueMagicLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nbccncbkadp {
    RogueMagicLayerStatusNone = 0,
    RogueMagicLayerStatusProcessing = 1,
    RogueMagicLayerStatusFinish = 2,
}
impl Nbccncbkadp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicLayerStatusNone => "ROGUE_MAGIC_LAYER_STATUS_NONE",
            Self::RogueMagicLayerStatusProcessing => {
                "ROGUE_MAGIC_LAYER_STATUS_PROCESSING"
            }
            Self::RogueMagicLayerStatusFinish => "ROGUE_MAGIC_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_LAYER_STATUS_NONE" => Some(Self::RogueMagicLayerStatusNone),
            "ROGUE_MAGIC_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueMagicLayerStatusProcessing)
            }
            "ROGUE_MAGIC_LAYER_STATUS_FINISH" => Some(Self::RogueMagicLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fccfgoinnhb {
    RogueMagicRoomStatusNone = 0,
    RogueMagicRoomStatusInited = 1,
    RogueMagicRoomStatusProcessing = 2,
    RogueMagicRoomStatusFinish = 3,
}
impl Fccfgoinnhb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicRoomStatusNone => "ROGUE_MAGIC_ROOM_STATUS_NONE",
            Self::RogueMagicRoomStatusInited => "ROGUE_MAGIC_ROOM_STATUS_INITED",
            Self::RogueMagicRoomStatusProcessing => "ROGUE_MAGIC_ROOM_STATUS_PROCESSING",
            Self::RogueMagicRoomStatusFinish => "ROGUE_MAGIC_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_ROOM_STATUS_NONE" => Some(Self::RogueMagicRoomStatusNone),
            "ROGUE_MAGIC_ROOM_STATUS_INITED" => Some(Self::RogueMagicRoomStatusInited),
            "ROGUE_MAGIC_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueMagicRoomStatusProcessing)
            }
            "ROGUE_MAGIC_ROOM_STATUS_FINISH" => Some(Self::RogueMagicRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bcboidlmkko {
    RogueMagicSettleReasonNone = 0,
    RogueMagicSettleReasonWin = 1,
    RogueMagicSettleReasonFail = 2,
    RogueMagicSettleReasonInterrupt = 3,
}
impl Bcboidlmkko {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueMagicSettleReasonNone => "ROGUE_MAGIC_SETTLE_REASON_NONE",
            Self::RogueMagicSettleReasonWin => "ROGUE_MAGIC_SETTLE_REASON_WIN",
            Self::RogueMagicSettleReasonFail => "ROGUE_MAGIC_SETTLE_REASON_FAIL",
            Self::RogueMagicSettleReasonInterrupt => {
                "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MAGIC_SETTLE_REASON_NONE" => Some(Self::RogueMagicSettleReasonNone),
            "ROGUE_MAGIC_SETTLE_REASON_WIN" => Some(Self::RogueMagicSettleReasonWin),
            "ROGUE_MAGIC_SETTLE_REASON_FAIL" => Some(Self::RogueMagicSettleReasonFail),
            "ROGUE_MAGIC_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueMagicSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
/// FEJNFINFKJC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueModifierType {
    None = 0,
    CmdRogueModifierSelectCellScRsp = 5339,
    CmdRogueModifierUpdateNotify = 5337,
    CmdRogueModifierSelectCellCsReq = 5346,
    CmdRogueModifierStageStartNotify = 5316,
    CmdRogueModifierAddNotify = 5303,
    CmdRogueModifierDelNotify = 5380,
}
impl CmdRogueModifierType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueModifierTypeNone",
            Self::CmdRogueModifierSelectCellScRsp => "CmdRogueModifierSelectCellScRsp",
            Self::CmdRogueModifierUpdateNotify => "CmdRogueModifierUpdateNotify",
            Self::CmdRogueModifierSelectCellCsReq => "CmdRogueModifierSelectCellCsReq",
            Self::CmdRogueModifierStageStartNotify => "CmdRogueModifierStageStartNotify",
            Self::CmdRogueModifierAddNotify => "CmdRogueModifierAddNotify",
            Self::CmdRogueModifierDelNotify => "CmdRogueModifierDelNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueModifierTypeNone" => Some(Self::None),
            "CmdRogueModifierSelectCellScRsp" => {
                Some(Self::CmdRogueModifierSelectCellScRsp)
            }
            "CmdRogueModifierUpdateNotify" => Some(Self::CmdRogueModifierUpdateNotify),
            "CmdRogueModifierSelectCellCsReq" => {
                Some(Self::CmdRogueModifierSelectCellCsReq)
            }
            "CmdRogueModifierStageStartNotify" => {
                Some(Self::CmdRogueModifierStageStartNotify)
            }
            "CmdRogueModifierAddNotify" => Some(Self::CmdRogueModifierAddNotify),
            "CmdRogueModifierDelNotify" => Some(Self::CmdRogueModifierDelNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bkfplkgjofi {
    RogueModifierSourceNone = 0,
    RogueModifierSourceDiceRoll = 1,
    RogueModifierSourceAeon = 2,
    RogueModifierSourceBoardEvent = 3,
    RogueModifierSourceDialogEvent = 4,
    RogueModifierSourceMiracle = 5,
    RogueModifierSourceCellMark = 6,
    RogueModifierSourceAeonTalent = 7,
    RogueModifierSourceBossDecay = 8,
    RogueModifierSourceDiceBranch = 9,
}
impl Bkfplkgjofi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierSourceNone => "ROGUE_MODIFIER_SOURCE_NONE",
            Self::RogueModifierSourceDiceRoll => "ROGUE_MODIFIER_SOURCE_DICE_ROLL",
            Self::RogueModifierSourceAeon => "ROGUE_MODIFIER_SOURCE_AEON",
            Self::RogueModifierSourceBoardEvent => "ROGUE_MODIFIER_SOURCE_BOARD_EVENT",
            Self::RogueModifierSourceDialogEvent => "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT",
            Self::RogueModifierSourceMiracle => "ROGUE_MODIFIER_SOURCE_MIRACLE",
            Self::RogueModifierSourceCellMark => "ROGUE_MODIFIER_SOURCE_CELL_MARK",
            Self::RogueModifierSourceAeonTalent => "ROGUE_MODIFIER_SOURCE_AEON_TALENT",
            Self::RogueModifierSourceBossDecay => "ROGUE_MODIFIER_SOURCE_BOSS_DECAY",
            Self::RogueModifierSourceDiceBranch => "ROGUE_MODIFIER_SOURCE_DICE_BRANCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_SOURCE_NONE" => Some(Self::RogueModifierSourceNone),
            "ROGUE_MODIFIER_SOURCE_DICE_ROLL" => Some(Self::RogueModifierSourceDiceRoll),
            "ROGUE_MODIFIER_SOURCE_AEON" => Some(Self::RogueModifierSourceAeon),
            "ROGUE_MODIFIER_SOURCE_BOARD_EVENT" => {
                Some(Self::RogueModifierSourceBoardEvent)
            }
            "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT" => {
                Some(Self::RogueModifierSourceDialogEvent)
            }
            "ROGUE_MODIFIER_SOURCE_MIRACLE" => Some(Self::RogueModifierSourceMiracle),
            "ROGUE_MODIFIER_SOURCE_CELL_MARK" => Some(Self::RogueModifierSourceCellMark),
            "ROGUE_MODIFIER_SOURCE_AEON_TALENT" => {
                Some(Self::RogueModifierSourceAeonTalent)
            }
            "ROGUE_MODIFIER_SOURCE_BOSS_DECAY" => {
                Some(Self::RogueModifierSourceBossDecay)
            }
            "ROGUE_MODIFIER_SOURCE_DICE_BRANCH" => {
                Some(Self::RogueModifierSourceDiceBranch)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Acpbbeincel {
    RogueModifierContentDefinite = 0,
    RogueModifierContentRandom = 1,
}
impl Acpbbeincel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueModifierContentDefinite => "ROGUE_MODIFIER_CONTENT_DEFINITE",
            Self::RogueModifierContentRandom => "ROGUE_MODIFIER_CONTENT_RANDOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_CONTENT_DEFINITE" => Some(Self::RogueModifierContentDefinite),
            "ROGUE_MODIFIER_CONTENT_RANDOM" => Some(Self::RogueModifierContentRandom),
            _ => None,
        }
    }
}
/// FPBFFKIECHF
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueTournType {
    None = 0,
    CmdRogueTournDeleteArchiveScRsp = 6058,
    CmdRogueTournGetArchiveRepositoryCsReq = 6079,
    CmdRogueTournReviveCostUpdateScNotify = 6037,
    CmdRogueTournGetAllArchiveScRsp = 6019,
    CmdRogueTournGetMiscRealTimeDataScRsp = 6076,
    CmdRogueTournLeaveRogueCocoonSceneScRsp = 6047,
    CmdRogueTournResetPermanentTalentScRsp = 6087,
    CmdRogueTournEnterScRsp = 6066,
    CmdRogueTournEnablePermanentTalentScRsp = 6094,
    CmdRogueTournEnterRoomScRsp = 6044,
    CmdRogueTournGetSettleInfoScRsp = 6022,
    CmdRogueTournTakeExpRewardCsReq = 6063,
    CmdRogueTournDeleteArchiveCsReq = 6023,
    CmdRogueTournReviveAvatarCsReq = 6100,
    CmdRogueTournStartCsReq = 6081,
    CmdRogueTournGetSettleInfoCsReq = 6034,
    CmdRogueTournReEnterRogueCocoonStageCsReq = 6024,
    CmdRogueTournEnterLayerScRsp = 6053,
    CmdRogueTournQueryScRsp = 6029,
    CmdRogueTournEnablePermanentTalentCsReq = 6043,
    CmdRogueTournLeaveRogueCocoonSceneCsReq = 6069,
    CmdRogueTournLevelInfoUpdateScNotify = 6083,
    CmdRogueTournReviveAvatarScRsp = 6035,
    CmdRogueTournGetPermanentTalentInfoCsReq = 6036,
    CmdRogueTournEnterRogueCocoonSceneCsReq = 6056,
    CmdRogueTournGetPermanentTalentInfoScRsp = 6085,
    CmdRogueTournReEnterRogueCocoonStageScRsp = 6033,
    CmdRogueTournQueryCsReq = 6055,
    CmdRogueTournConfirmSettleScRsp = 6042,
    CmdRogueTournLeaveScRsp = 6078,
    CmdRogueTournSettleScRsp = 6040,
    CmdRogueTournResetPermanentTalentCsReq = 6075,
    CmdRogueTournClearArchiveNameScNotify = 6086,
    CmdRogueTournDifficultyCompNotify = 6025,
    CmdRogueTournAreaUpdateScNotify = 6039,
    CmdRogueTournRenameArchiveScRsp = 6061,
    CmdRogueTournExpNotify = 6032,
    CmdRogueTournGetArchiveRepositoryScRsp = 6072,
    CmdRogueTournHandBookNotify = 6012,
    CmdRogueTournRenameArchiveCsReq = 6017,
    CmdRogueTournTakeExpRewardScRsp = 6057,
    CmdRogueTournBattleFailSettleInfoScNotify = 6048,
    CmdRogueTournConfirmSettleCsReq = 6082,
    CmdRogueTournLeaveCsReq = 6016,
    CmdRogueTournWeekChallengeUpdateScNotify = 6088,
    CmdRogueTournGetAllArchiveCsReq = 6020,
    CmdRogueTournEnterLayerCsReq = 6049,
    CmdRogueTournEnterRoomCsReq = 6030,
    CmdRogueTournSettleCsReq = 6046,
    CmdRogueTournEnterRogueCocoonSceneScRsp = 6071,
    CmdRogueTournGetMiscRealTimeDataCsReq = 6041,
    CmdRogueTournGetCurRogueCocoonInfoScRsp = 6073,
    CmdRogueTournEnterCsReq = 6026,
    CmdRogueTournGetCurRogueCocoonInfoCsReq = 6045,
    CmdRogueTournStartScRsp = 6080,
}
impl CmdRogueTournType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRogueTournTypeNone",
            Self::CmdRogueTournDeleteArchiveScRsp => "CmdRogueTournDeleteArchiveScRsp",
            Self::CmdRogueTournGetArchiveRepositoryCsReq => {
                "CmdRogueTournGetArchiveRepositoryCsReq"
            }
            Self::CmdRogueTournReviveCostUpdateScNotify => {
                "CmdRogueTournReviveCostUpdateScNotify"
            }
            Self::CmdRogueTournGetAllArchiveScRsp => "CmdRogueTournGetAllArchiveScRsp",
            Self::CmdRogueTournGetMiscRealTimeDataScRsp => {
                "CmdRogueTournGetMiscRealTimeDataScRsp"
            }
            Self::CmdRogueTournLeaveRogueCocoonSceneScRsp => {
                "CmdRogueTournLeaveRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournResetPermanentTalentScRsp => {
                "CmdRogueTournResetPermanentTalentScRsp"
            }
            Self::CmdRogueTournEnterScRsp => "CmdRogueTournEnterScRsp",
            Self::CmdRogueTournEnablePermanentTalentScRsp => {
                "CmdRogueTournEnablePermanentTalentScRsp"
            }
            Self::CmdRogueTournEnterRoomScRsp => "CmdRogueTournEnterRoomScRsp",
            Self::CmdRogueTournGetSettleInfoScRsp => "CmdRogueTournGetSettleInfoScRsp",
            Self::CmdRogueTournTakeExpRewardCsReq => "CmdRogueTournTakeExpRewardCsReq",
            Self::CmdRogueTournDeleteArchiveCsReq => "CmdRogueTournDeleteArchiveCsReq",
            Self::CmdRogueTournReviveAvatarCsReq => "CmdRogueTournReviveAvatarCsReq",
            Self::CmdRogueTournStartCsReq => "CmdRogueTournStartCsReq",
            Self::CmdRogueTournGetSettleInfoCsReq => "CmdRogueTournGetSettleInfoCsReq",
            Self::CmdRogueTournReEnterRogueCocoonStageCsReq => {
                "CmdRogueTournReEnterRogueCocoonStageCsReq"
            }
            Self::CmdRogueTournEnterLayerScRsp => "CmdRogueTournEnterLayerScRsp",
            Self::CmdRogueTournQueryScRsp => "CmdRogueTournQueryScRsp",
            Self::CmdRogueTournEnablePermanentTalentCsReq => {
                "CmdRogueTournEnablePermanentTalentCsReq"
            }
            Self::CmdRogueTournLeaveRogueCocoonSceneCsReq => {
                "CmdRogueTournLeaveRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournLevelInfoUpdateScNotify => {
                "CmdRogueTournLevelInfoUpdateScNotify"
            }
            Self::CmdRogueTournReviveAvatarScRsp => "CmdRogueTournReviveAvatarScRsp",
            Self::CmdRogueTournGetPermanentTalentInfoCsReq => {
                "CmdRogueTournGetPermanentTalentInfoCsReq"
            }
            Self::CmdRogueTournEnterRogueCocoonSceneCsReq => {
                "CmdRogueTournEnterRogueCocoonSceneCsReq"
            }
            Self::CmdRogueTournGetPermanentTalentInfoScRsp => {
                "CmdRogueTournGetPermanentTalentInfoScRsp"
            }
            Self::CmdRogueTournReEnterRogueCocoonStageScRsp => {
                "CmdRogueTournReEnterRogueCocoonStageScRsp"
            }
            Self::CmdRogueTournQueryCsReq => "CmdRogueTournQueryCsReq",
            Self::CmdRogueTournConfirmSettleScRsp => "CmdRogueTournConfirmSettleScRsp",
            Self::CmdRogueTournLeaveScRsp => "CmdRogueTournLeaveScRsp",
            Self::CmdRogueTournSettleScRsp => "CmdRogueTournSettleScRsp",
            Self::CmdRogueTournResetPermanentTalentCsReq => {
                "CmdRogueTournResetPermanentTalentCsReq"
            }
            Self::CmdRogueTournClearArchiveNameScNotify => {
                "CmdRogueTournClearArchiveNameScNotify"
            }
            Self::CmdRogueTournDifficultyCompNotify => {
                "CmdRogueTournDifficultyCompNotify"
            }
            Self::CmdRogueTournAreaUpdateScNotify => "CmdRogueTournAreaUpdateScNotify",
            Self::CmdRogueTournRenameArchiveScRsp => "CmdRogueTournRenameArchiveScRsp",
            Self::CmdRogueTournExpNotify => "CmdRogueTournExpNotify",
            Self::CmdRogueTournGetArchiveRepositoryScRsp => {
                "CmdRogueTournGetArchiveRepositoryScRsp"
            }
            Self::CmdRogueTournHandBookNotify => "CmdRogueTournHandBookNotify",
            Self::CmdRogueTournRenameArchiveCsReq => "CmdRogueTournRenameArchiveCsReq",
            Self::CmdRogueTournTakeExpRewardScRsp => "CmdRogueTournTakeExpRewardScRsp",
            Self::CmdRogueTournBattleFailSettleInfoScNotify => {
                "CmdRogueTournBattleFailSettleInfoScNotify"
            }
            Self::CmdRogueTournConfirmSettleCsReq => "CmdRogueTournConfirmSettleCsReq",
            Self::CmdRogueTournLeaveCsReq => "CmdRogueTournLeaveCsReq",
            Self::CmdRogueTournWeekChallengeUpdateScNotify => {
                "CmdRogueTournWeekChallengeUpdateScNotify"
            }
            Self::CmdRogueTournGetAllArchiveCsReq => "CmdRogueTournGetAllArchiveCsReq",
            Self::CmdRogueTournEnterLayerCsReq => "CmdRogueTournEnterLayerCsReq",
            Self::CmdRogueTournEnterRoomCsReq => "CmdRogueTournEnterRoomCsReq",
            Self::CmdRogueTournSettleCsReq => "CmdRogueTournSettleCsReq",
            Self::CmdRogueTournEnterRogueCocoonSceneScRsp => {
                "CmdRogueTournEnterRogueCocoonSceneScRsp"
            }
            Self::CmdRogueTournGetMiscRealTimeDataCsReq => {
                "CmdRogueTournGetMiscRealTimeDataCsReq"
            }
            Self::CmdRogueTournGetCurRogueCocoonInfoScRsp => {
                "CmdRogueTournGetCurRogueCocoonInfoScRsp"
            }
            Self::CmdRogueTournEnterCsReq => "CmdRogueTournEnterCsReq",
            Self::CmdRogueTournGetCurRogueCocoonInfoCsReq => {
                "CmdRogueTournGetCurRogueCocoonInfoCsReq"
            }
            Self::CmdRogueTournStartScRsp => "CmdRogueTournStartScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTournTypeNone" => Some(Self::None),
            "CmdRogueTournDeleteArchiveScRsp" => {
                Some(Self::CmdRogueTournDeleteArchiveScRsp)
            }
            "CmdRogueTournGetArchiveRepositoryCsReq" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryCsReq)
            }
            "CmdRogueTournReviveCostUpdateScNotify" => {
                Some(Self::CmdRogueTournReviveCostUpdateScNotify)
            }
            "CmdRogueTournGetAllArchiveScRsp" => {
                Some(Self::CmdRogueTournGetAllArchiveScRsp)
            }
            "CmdRogueTournGetMiscRealTimeDataScRsp" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataScRsp)
            }
            "CmdRogueTournLeaveRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneScRsp)
            }
            "CmdRogueTournResetPermanentTalentScRsp" => {
                Some(Self::CmdRogueTournResetPermanentTalentScRsp)
            }
            "CmdRogueTournEnterScRsp" => Some(Self::CmdRogueTournEnterScRsp),
            "CmdRogueTournEnablePermanentTalentScRsp" => {
                Some(Self::CmdRogueTournEnablePermanentTalentScRsp)
            }
            "CmdRogueTournEnterRoomScRsp" => Some(Self::CmdRogueTournEnterRoomScRsp),
            "CmdRogueTournGetSettleInfoScRsp" => {
                Some(Self::CmdRogueTournGetSettleInfoScRsp)
            }
            "CmdRogueTournTakeExpRewardCsReq" => {
                Some(Self::CmdRogueTournTakeExpRewardCsReq)
            }
            "CmdRogueTournDeleteArchiveCsReq" => {
                Some(Self::CmdRogueTournDeleteArchiveCsReq)
            }
            "CmdRogueTournReviveAvatarCsReq" => {
                Some(Self::CmdRogueTournReviveAvatarCsReq)
            }
            "CmdRogueTournStartCsReq" => Some(Self::CmdRogueTournStartCsReq),
            "CmdRogueTournGetSettleInfoCsReq" => {
                Some(Self::CmdRogueTournGetSettleInfoCsReq)
            }
            "CmdRogueTournReEnterRogueCocoonStageCsReq" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageCsReq)
            }
            "CmdRogueTournEnterLayerScRsp" => Some(Self::CmdRogueTournEnterLayerScRsp),
            "CmdRogueTournQueryScRsp" => Some(Self::CmdRogueTournQueryScRsp),
            "CmdRogueTournEnablePermanentTalentCsReq" => {
                Some(Self::CmdRogueTournEnablePermanentTalentCsReq)
            }
            "CmdRogueTournLeaveRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneCsReq)
            }
            "CmdRogueTournLevelInfoUpdateScNotify" => {
                Some(Self::CmdRogueTournLevelInfoUpdateScNotify)
            }
            "CmdRogueTournReviveAvatarScRsp" => {
                Some(Self::CmdRogueTournReviveAvatarScRsp)
            }
            "CmdRogueTournGetPermanentTalentInfoCsReq" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoCsReq)
            }
            "CmdRogueTournEnterRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneCsReq)
            }
            "CmdRogueTournGetPermanentTalentInfoScRsp" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoScRsp)
            }
            "CmdRogueTournReEnterRogueCocoonStageScRsp" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageScRsp)
            }
            "CmdRogueTournQueryCsReq" => Some(Self::CmdRogueTournQueryCsReq),
            "CmdRogueTournConfirmSettleScRsp" => {
                Some(Self::CmdRogueTournConfirmSettleScRsp)
            }
            "CmdRogueTournLeaveScRsp" => Some(Self::CmdRogueTournLeaveScRsp),
            "CmdRogueTournSettleScRsp" => Some(Self::CmdRogueTournSettleScRsp),
            "CmdRogueTournResetPermanentTalentCsReq" => {
                Some(Self::CmdRogueTournResetPermanentTalentCsReq)
            }
            "CmdRogueTournClearArchiveNameScNotify" => {
                Some(Self::CmdRogueTournClearArchiveNameScNotify)
            }
            "CmdRogueTournDifficultyCompNotify" => {
                Some(Self::CmdRogueTournDifficultyCompNotify)
            }
            "CmdRogueTournAreaUpdateScNotify" => {
                Some(Self::CmdRogueTournAreaUpdateScNotify)
            }
            "CmdRogueTournRenameArchiveScRsp" => {
                Some(Self::CmdRogueTournRenameArchiveScRsp)
            }
            "CmdRogueTournExpNotify" => Some(Self::CmdRogueTournExpNotify),
            "CmdRogueTournGetArchiveRepositoryScRsp" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryScRsp)
            }
            "CmdRogueTournHandBookNotify" => Some(Self::CmdRogueTournHandBookNotify),
            "CmdRogueTournRenameArchiveCsReq" => {
                Some(Self::CmdRogueTournRenameArchiveCsReq)
            }
            "CmdRogueTournTakeExpRewardScRsp" => {
                Some(Self::CmdRogueTournTakeExpRewardScRsp)
            }
            "CmdRogueTournBattleFailSettleInfoScNotify" => {
                Some(Self::CmdRogueTournBattleFailSettleInfoScNotify)
            }
            "CmdRogueTournConfirmSettleCsReq" => {
                Some(Self::CmdRogueTournConfirmSettleCsReq)
            }
            "CmdRogueTournLeaveCsReq" => Some(Self::CmdRogueTournLeaveCsReq),
            "CmdRogueTournWeekChallengeUpdateScNotify" => {
                Some(Self::CmdRogueTournWeekChallengeUpdateScNotify)
            }
            "CmdRogueTournGetAllArchiveCsReq" => {
                Some(Self::CmdRogueTournGetAllArchiveCsReq)
            }
            "CmdRogueTournEnterLayerCsReq" => Some(Self::CmdRogueTournEnterLayerCsReq),
            "CmdRogueTournEnterRoomCsReq" => Some(Self::CmdRogueTournEnterRoomCsReq),
            "CmdRogueTournSettleCsReq" => Some(Self::CmdRogueTournSettleCsReq),
            "CmdRogueTournEnterRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneScRsp)
            }
            "CmdRogueTournGetMiscRealTimeDataCsReq" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataCsReq)
            }
            "CmdRogueTournGetCurRogueCocoonInfoScRsp" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoScRsp)
            }
            "CmdRogueTournEnterCsReq" => Some(Self::CmdRogueTournEnterCsReq),
            "CmdRogueTournGetCurRogueCocoonInfoCsReq" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoCsReq)
            }
            "CmdRogueTournStartScRsp" => Some(Self::CmdRogueTournStartScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mkmeagcccmo {
    RogueTournLevelStatusNone = 0,
    RogueTournLevelStatusProcessing = 1,
    RogueTournLevelStatusFinished = 2,
    RogueTournLevelStatusSettled = 3,
}
impl Mkmeagcccmo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLevelStatusNone => "ROGUE_TOURN_LEVEL_STATUS_NONE",
            Self::RogueTournLevelStatusProcessing => {
                "ROGUE_TOURN_LEVEL_STATUS_PROCESSING"
            }
            Self::RogueTournLevelStatusFinished => "ROGUE_TOURN_LEVEL_STATUS_FINISHED",
            Self::RogueTournLevelStatusSettled => "ROGUE_TOURN_LEVEL_STATUS_SETTLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LEVEL_STATUS_NONE" => Some(Self::RogueTournLevelStatusNone),
            "ROGUE_TOURN_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueTournLevelStatusProcessing)
            }
            "ROGUE_TOURN_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueTournLevelStatusFinished)
            }
            "ROGUE_TOURN_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueTournLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Naedmbkpmdp {
    RogueTournLayerStatusNone = 0,
    RogueTournLayerStatusProcessing = 1,
    RogueTournLayerStatusFinish = 2,
}
impl Naedmbkpmdp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournLayerStatusNone => "ROGUE_TOURN_LAYER_STATUS_NONE",
            Self::RogueTournLayerStatusProcessing => {
                "ROGUE_TOURN_LAYER_STATUS_PROCESSING"
            }
            Self::RogueTournLayerStatusFinish => "ROGUE_TOURN_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LAYER_STATUS_NONE" => Some(Self::RogueTournLayerStatusNone),
            "ROGUE_TOURN_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueTournLayerStatusProcessing)
            }
            "ROGUE_TOURN_LAYER_STATUS_FINISH" => Some(Self::RogueTournLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dflndoiodng {
    RogueTournRoomStatusNone = 0,
    RogueTournRoomStatusInited = 1,
    RogueTournRoomStatusProcessing = 2,
    RogueTournRoomStatusFinish = 3,
}
impl Dflndoiodng {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournRoomStatusNone => "ROGUE_TOURN_ROOM_STATUS_NONE",
            Self::RogueTournRoomStatusInited => "ROGUE_TOURN_ROOM_STATUS_INITED",
            Self::RogueTournRoomStatusProcessing => "ROGUE_TOURN_ROOM_STATUS_PROCESSING",
            Self::RogueTournRoomStatusFinish => "ROGUE_TOURN_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_ROOM_STATUS_NONE" => Some(Self::RogueTournRoomStatusNone),
            "ROGUE_TOURN_ROOM_STATUS_INITED" => Some(Self::RogueTournRoomStatusInited),
            "ROGUE_TOURN_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueTournRoomStatusProcessing)
            }
            "ROGUE_TOURN_ROOM_STATUS_FINISH" => Some(Self::RogueTournRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Adhodbdkoej {
    RogueTournSettleReasonNone = 0,
    RogueTournSettleReasonWin = 1,
    RogueTournSettleReasonFail = 2,
    RogueTournSettleReasonInterrupt = 3,
}
impl Adhodbdkoej {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournSettleReasonNone => "ROGUE_TOURN_SETTLE_REASON_NONE",
            Self::RogueTournSettleReasonWin => "ROGUE_TOURN_SETTLE_REASON_WIN",
            Self::RogueTournSettleReasonFail => "ROGUE_TOURN_SETTLE_REASON_FAIL",
            Self::RogueTournSettleReasonInterrupt => {
                "ROGUE_TOURN_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_SETTLE_REASON_NONE" => Some(Self::RogueTournSettleReasonNone),
            "ROGUE_TOURN_SETTLE_REASON_WIN" => Some(Self::RogueTournSettleReasonWin),
            "ROGUE_TOURN_SETTLE_REASON_FAIL" => Some(Self::RogueTournSettleReasonFail),
            "ROGUE_TOURN_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueTournSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jdhnhbbcgpk {
    RogueTournHandbookNone = 0,
    RogueTournHandbookSimpleMiracle = 1,
    RogueTournHandbookHexMiracle = 2,
    RogueTournHandbookBuff = 3,
    RogueTournHandbookEvent = 4,
    RogueTournHandbookFormula = 5,
}
impl Jdhnhbbcgpk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::RogueTournHandbookNone => "ROGUE_TOURN_HANDBOOK_NONE",
            Self::RogueTournHandbookSimpleMiracle => {
                "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE"
            }
            Self::RogueTournHandbookHexMiracle => "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE",
            Self::RogueTournHandbookBuff => "ROGUE_TOURN_HANDBOOK_BUFF",
            Self::RogueTournHandbookEvent => "ROGUE_TOURN_HANDBOOK_EVENT",
            Self::RogueTournHandbookFormula => "ROGUE_TOURN_HANDBOOK_FORMULA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_HANDBOOK_NONE" => Some(Self::RogueTournHandbookNone),
            "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE" => {
                Some(Self::RogueTournHandbookSimpleMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE" => {
                Some(Self::RogueTournHandbookHexMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_BUFF" => Some(Self::RogueTournHandbookBuff),
            "ROGUE_TOURN_HANDBOOK_EVENT" => Some(Self::RogueTournHandbookEvent),
            "ROGUE_TOURN_HANDBOOK_FORMULA" => Some(Self::RogueTournHandbookFormula),
            _ => None,
        }
    }
}
/// GHOCBGCNFDH
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRollShopType {
    None = 0,
    CmdDoGachaInRollShopScRsp = 6910,
    CmdTakeRollShopRewardCsReq = 6912,
    CmdGetRollShopInfoScRsp = 6908,
    CmdDoGachaInRollShopCsReq = 6915,
    CmdTakeRollShopRewardScRsp = 6903,
    CmdGetRollShopInfoCsReq = 6905,
}
impl CmdRollShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdRollShopTypeNone",
            Self::CmdDoGachaInRollShopScRsp => "CmdDoGachaInRollShopScRsp",
            Self::CmdTakeRollShopRewardCsReq => "CmdTakeRollShopRewardCsReq",
            Self::CmdGetRollShopInfoScRsp => "CmdGetRollShopInfoScRsp",
            Self::CmdDoGachaInRollShopCsReq => "CmdDoGachaInRollShopCsReq",
            Self::CmdTakeRollShopRewardScRsp => "CmdTakeRollShopRewardScRsp",
            Self::CmdGetRollShopInfoCsReq => "CmdGetRollShopInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRollShopTypeNone" => Some(Self::None),
            "CmdDoGachaInRollShopScRsp" => Some(Self::CmdDoGachaInRollShopScRsp),
            "CmdTakeRollShopRewardCsReq" => Some(Self::CmdTakeRollShopRewardCsReq),
            "CmdGetRollShopInfoScRsp" => Some(Self::CmdGetRollShopInfoScRsp),
            "CmdDoGachaInRollShopCsReq" => Some(Self::CmdDoGachaInRollShopCsReq),
            "CmdTakeRollShopRewardScRsp" => Some(Self::CmdTakeRollShopRewardScRsp),
            "CmdGetRollShopInfoCsReq" => Some(Self::CmdGetRollShopInfoCsReq),
            _ => None,
        }
    }
}
/// OMNGEEGEHEK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSceneType {
    None = 0,
    CmdEnterSceneCsReq = 1406,
    CmdSpringRecoverCsReq = 1472,
    CmdSpringRefreshCsReq = 1419,
    CmdSceneCastSkillCostMpScRsp = 1448,
    CmdSetClientPausedCsReq = 1488,
    CmdSpringRecoverSingleAvatarScRsp = 1432,
    CmdSpringRecoverSingleAvatarCsReq = 1460,
    CmdRecoverAllLineupScRsp = 1465,
    CmdEnterSectionScRsp = 1493,
    CmdSceneCastSkillCsReq = 1439,
    CmdEnterSectionCsReq = 1409,
    CmdSetClientPausedScRsp = 1443,
    CmdGetCurSceneInfoScRsp = 1437,
    CmdSetGroupCustomSaveDataScRsp = 1471,
    CmdUpdateFloorSavedValueNotify = 1498,
    CmdGetSceneMapInfoScRsp = 1481,
    CmdSceneReviveAfterRebattleScRsp = 1499,
    CmdGameplayCounterRecoverCsReq = 1457,
    CmdSpringRefreshScRsp = 1461,
    CmdReturnLastTownCsReq = 1429,
    CmdSavePointsInfoNotify = 1426,
    CmdUpdateMechanismBarScNotify = 1496,
    CmdEnterSceneByServerScNotify = 1435,
    CmdRefreshTriggerByClientCsReq = 1411,
    CmdDeleteSummonUnitCsReq = 1495,
    CmdGameplayCounterUpdateScNotify = 1467,
    CmdSetCurInteractEntityCsReq = 1410,
    CmdActivateFarmElementCsReq = 1415,
    CmdSceneCastSkillCostMpCsReq = 1475,
    CmdSetSpringRecoverConfigScRsp = 1478,
    CmdRecoverAllLineupCsReq = 1436,
    CmdStartTimedCocoonStageScRsp = 1454,
    CmdSceneEnterStageCsReq = 1451,
    CmdReturnLastTownScRsp = 1433,
    CmdGetEnteredSceneScRsp = 1487,
    CmdInteractPropCsReq = 1403,
    CmdSceneUpdatePositionVersionNotify = 1474,
    CmdUpdateGroupPropertyScRsp = 1485,
    CmdReEnterLastElementStageScRsp = 1427,
    CmdGetSpringRecoverDataScRsp = 1466,
    CmdRefreshTriggerByClientScRsp = 1408,
    CmdGetSceneMapInfoCsReq = 1418,
    CmdSceneCastSkillMpUpdateScNotify = 1490,
    CmdDeactivateFarmElementCsReq = 1414,
    CmdDeactivateFarmElementScRsp = 1423,
    CmdGetSpringRecoverDataCsReq = 1402,
    CmdStartCocoonStageScRsp = 1477,
    CmdUpdateGroupPropertyCsReq = 1428,
    CmdSetGroupCustomSaveDataCsReq = 1431,
    CmdGetEnteredSceneCsReq = 1458,
    CmdSceneEntityTeleportCsReq = 1438,
    CmdStartTimedCocoonStageCsReq = 1449,
    CmdSceneEnterStageScRsp = 1473,
    CmdGroupStateChangeScRsp = 1401,
    CmdSceneEntityMoveScNotify = 1447,
    CmdSetSpringRecoverConfigCsReq = 1456,
    CmdSyncServerSceneChangeNotify = 1450,
    CmdSyncEntityBuffChangeListScNotify = 1430,
    CmdGroupStateChangeCsReq = 1476,
    CmdSceneReviveAfterRebattleCsReq = 1483,
    CmdUnlockedAreaMapScNotify = 1497,
    CmdInteractPropScRsp = 1446,
    CmdSetCurInteractEntityScRsp = 1470,
    CmdGameplayCounterCountDownScRsp = 1440,
    CmdSceneEntityTeleportScRsp = 1455,
    CmdStartTimedFarmElementScRsp = 1421,
    CmdReEnterLastElementStageCsReq = 1484,
    CmdGetUnlockTeleportScRsp = 1468,
    CmdGetCurSceneInfoCsReq = 1434,
    CmdStartTimedFarmElementCsReq = 1486,
    CmdActivateFarmElementScRsp = 1445,
    CmdGetUnlockTeleportCsReq = 1469,
    CmdUnlockTeleportNotify = 1489,
    CmdDeleteSummonUnitScRsp = 1405,
    CmdSceneGroupRefreshScNotify = 1452,
    CmdGroupStateChangeScNotify = 1441,
    CmdSceneEntityMoveCsReq = 1459,
    CmdRefreshTriggerByClientScNotify = 1500,
    CmdGameplayCounterRecoverScRsp = 1417,
    CmdEnteredSceneChangeScNotify = 1444,
    CmdEntityBindPropCsReq = 1491,
    CmdStartCocoonStageCsReq = 1413,
    CmdSceneEntityMoveScRsp = 1420,
    CmdSceneCastSkillScRsp = 1453,
    CmdEnterSceneScRsp = 1422,
    CmdSpringRecoverScRsp = 1424,
    CmdEntityBindPropScRsp = 1404,
    CmdScenePlaneEventScNotify = 1407,
    CmdGameplayCounterCountDownCsReq = 1442,
    CmdLastSpringRefreshTimeNotify = 1425,
    CmdHealPoolInfoNotify = 1412,
}
impl CmdSceneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSceneTypeNone",
            Self::CmdEnterSceneCsReq => "CmdEnterSceneCsReq",
            Self::CmdSpringRecoverCsReq => "CmdSpringRecoverCsReq",
            Self::CmdSpringRefreshCsReq => "CmdSpringRefreshCsReq",
            Self::CmdSceneCastSkillCostMpScRsp => "CmdSceneCastSkillCostMpScRsp",
            Self::CmdSetClientPausedCsReq => "CmdSetClientPausedCsReq",
            Self::CmdSpringRecoverSingleAvatarScRsp => {
                "CmdSpringRecoverSingleAvatarScRsp"
            }
            Self::CmdSpringRecoverSingleAvatarCsReq => {
                "CmdSpringRecoverSingleAvatarCsReq"
            }
            Self::CmdRecoverAllLineupScRsp => "CmdRecoverAllLineupScRsp",
            Self::CmdEnterSectionScRsp => "CmdEnterSectionScRsp",
            Self::CmdSceneCastSkillCsReq => "CmdSceneCastSkillCsReq",
            Self::CmdEnterSectionCsReq => "CmdEnterSectionCsReq",
            Self::CmdSetClientPausedScRsp => "CmdSetClientPausedScRsp",
            Self::CmdGetCurSceneInfoScRsp => "CmdGetCurSceneInfoScRsp",
            Self::CmdSetGroupCustomSaveDataScRsp => "CmdSetGroupCustomSaveDataScRsp",
            Self::CmdUpdateFloorSavedValueNotify => "CmdUpdateFloorSavedValueNotify",
            Self::CmdGetSceneMapInfoScRsp => "CmdGetSceneMapInfoScRsp",
            Self::CmdSceneReviveAfterRebattleScRsp => "CmdSceneReviveAfterRebattleScRsp",
            Self::CmdGameplayCounterRecoverCsReq => "CmdGameplayCounterRecoverCsReq",
            Self::CmdSpringRefreshScRsp => "CmdSpringRefreshScRsp",
            Self::CmdReturnLastTownCsReq => "CmdReturnLastTownCsReq",
            Self::CmdSavePointsInfoNotify => "CmdSavePointsInfoNotify",
            Self::CmdUpdateMechanismBarScNotify => "CmdUpdateMechanismBarScNotify",
            Self::CmdEnterSceneByServerScNotify => "CmdEnterSceneByServerScNotify",
            Self::CmdRefreshTriggerByClientCsReq => "CmdRefreshTriggerByClientCsReq",
            Self::CmdDeleteSummonUnitCsReq => "CmdDeleteSummonUnitCsReq",
            Self::CmdGameplayCounterUpdateScNotify => "CmdGameplayCounterUpdateScNotify",
            Self::CmdSetCurInteractEntityCsReq => "CmdSetCurInteractEntityCsReq",
            Self::CmdActivateFarmElementCsReq => "CmdActivateFarmElementCsReq",
            Self::CmdSceneCastSkillCostMpCsReq => "CmdSceneCastSkillCostMpCsReq",
            Self::CmdSetSpringRecoverConfigScRsp => "CmdSetSpringRecoverConfigScRsp",
            Self::CmdRecoverAllLineupCsReq => "CmdRecoverAllLineupCsReq",
            Self::CmdStartTimedCocoonStageScRsp => "CmdStartTimedCocoonStageScRsp",
            Self::CmdSceneEnterStageCsReq => "CmdSceneEnterStageCsReq",
            Self::CmdReturnLastTownScRsp => "CmdReturnLastTownScRsp",
            Self::CmdGetEnteredSceneScRsp => "CmdGetEnteredSceneScRsp",
            Self::CmdInteractPropCsReq => "CmdInteractPropCsReq",
            Self::CmdSceneUpdatePositionVersionNotify => {
                "CmdSceneUpdatePositionVersionNotify"
            }
            Self::CmdUpdateGroupPropertyScRsp => "CmdUpdateGroupPropertyScRsp",
            Self::CmdReEnterLastElementStageScRsp => "CmdReEnterLastElementStageScRsp",
            Self::CmdGetSpringRecoverDataScRsp => "CmdGetSpringRecoverDataScRsp",
            Self::CmdRefreshTriggerByClientScRsp => "CmdRefreshTriggerByClientScRsp",
            Self::CmdGetSceneMapInfoCsReq => "CmdGetSceneMapInfoCsReq",
            Self::CmdSceneCastSkillMpUpdateScNotify => {
                "CmdSceneCastSkillMpUpdateScNotify"
            }
            Self::CmdDeactivateFarmElementCsReq => "CmdDeactivateFarmElementCsReq",
            Self::CmdDeactivateFarmElementScRsp => "CmdDeactivateFarmElementScRsp",
            Self::CmdGetSpringRecoverDataCsReq => "CmdGetSpringRecoverDataCsReq",
            Self::CmdStartCocoonStageScRsp => "CmdStartCocoonStageScRsp",
            Self::CmdUpdateGroupPropertyCsReq => "CmdUpdateGroupPropertyCsReq",
            Self::CmdSetGroupCustomSaveDataCsReq => "CmdSetGroupCustomSaveDataCsReq",
            Self::CmdGetEnteredSceneCsReq => "CmdGetEnteredSceneCsReq",
            Self::CmdSceneEntityTeleportCsReq => "CmdSceneEntityTeleportCsReq",
            Self::CmdStartTimedCocoonStageCsReq => "CmdStartTimedCocoonStageCsReq",
            Self::CmdSceneEnterStageScRsp => "CmdSceneEnterStageScRsp",
            Self::CmdGroupStateChangeScRsp => "CmdGroupStateChangeScRsp",
            Self::CmdSceneEntityMoveScNotify => "CmdSceneEntityMoveScNotify",
            Self::CmdSetSpringRecoverConfigCsReq => "CmdSetSpringRecoverConfigCsReq",
            Self::CmdSyncServerSceneChangeNotify => "CmdSyncServerSceneChangeNotify",
            Self::CmdSyncEntityBuffChangeListScNotify => {
                "CmdSyncEntityBuffChangeListScNotify"
            }
            Self::CmdGroupStateChangeCsReq => "CmdGroupStateChangeCsReq",
            Self::CmdSceneReviveAfterRebattleCsReq => "CmdSceneReviveAfterRebattleCsReq",
            Self::CmdUnlockedAreaMapScNotify => "CmdUnlockedAreaMapScNotify",
            Self::CmdInteractPropScRsp => "CmdInteractPropScRsp",
            Self::CmdSetCurInteractEntityScRsp => "CmdSetCurInteractEntityScRsp",
            Self::CmdGameplayCounterCountDownScRsp => "CmdGameplayCounterCountDownScRsp",
            Self::CmdSceneEntityTeleportScRsp => "CmdSceneEntityTeleportScRsp",
            Self::CmdStartTimedFarmElementScRsp => "CmdStartTimedFarmElementScRsp",
            Self::CmdReEnterLastElementStageCsReq => "CmdReEnterLastElementStageCsReq",
            Self::CmdGetUnlockTeleportScRsp => "CmdGetUnlockTeleportScRsp",
            Self::CmdGetCurSceneInfoCsReq => "CmdGetCurSceneInfoCsReq",
            Self::CmdStartTimedFarmElementCsReq => "CmdStartTimedFarmElementCsReq",
            Self::CmdActivateFarmElementScRsp => "CmdActivateFarmElementScRsp",
            Self::CmdGetUnlockTeleportCsReq => "CmdGetUnlockTeleportCsReq",
            Self::CmdUnlockTeleportNotify => "CmdUnlockTeleportNotify",
            Self::CmdDeleteSummonUnitScRsp => "CmdDeleteSummonUnitScRsp",
            Self::CmdSceneGroupRefreshScNotify => "CmdSceneGroupRefreshScNotify",
            Self::CmdGroupStateChangeScNotify => "CmdGroupStateChangeScNotify",
            Self::CmdSceneEntityMoveCsReq => "CmdSceneEntityMoveCsReq",
            Self::CmdRefreshTriggerByClientScNotify => {
                "CmdRefreshTriggerByClientScNotify"
            }
            Self::CmdGameplayCounterRecoverScRsp => "CmdGameplayCounterRecoverScRsp",
            Self::CmdEnteredSceneChangeScNotify => "CmdEnteredSceneChangeScNotify",
            Self::CmdEntityBindPropCsReq => "CmdEntityBindPropCsReq",
            Self::CmdStartCocoonStageCsReq => "CmdStartCocoonStageCsReq",
            Self::CmdSceneEntityMoveScRsp => "CmdSceneEntityMoveScRsp",
            Self::CmdSceneCastSkillScRsp => "CmdSceneCastSkillScRsp",
            Self::CmdEnterSceneScRsp => "CmdEnterSceneScRsp",
            Self::CmdSpringRecoverScRsp => "CmdSpringRecoverScRsp",
            Self::CmdEntityBindPropScRsp => "CmdEntityBindPropScRsp",
            Self::CmdScenePlaneEventScNotify => "CmdScenePlaneEventScNotify",
            Self::CmdGameplayCounterCountDownCsReq => "CmdGameplayCounterCountDownCsReq",
            Self::CmdLastSpringRefreshTimeNotify => "CmdLastSpringRefreshTimeNotify",
            Self::CmdHealPoolInfoNotify => "CmdHealPoolInfoNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSceneTypeNone" => Some(Self::None),
            "CmdEnterSceneCsReq" => Some(Self::CmdEnterSceneCsReq),
            "CmdSpringRecoverCsReq" => Some(Self::CmdSpringRecoverCsReq),
            "CmdSpringRefreshCsReq" => Some(Self::CmdSpringRefreshCsReq),
            "CmdSceneCastSkillCostMpScRsp" => Some(Self::CmdSceneCastSkillCostMpScRsp),
            "CmdSetClientPausedCsReq" => Some(Self::CmdSetClientPausedCsReq),
            "CmdSpringRecoverSingleAvatarScRsp" => {
                Some(Self::CmdSpringRecoverSingleAvatarScRsp)
            }
            "CmdSpringRecoverSingleAvatarCsReq" => {
                Some(Self::CmdSpringRecoverSingleAvatarCsReq)
            }
            "CmdRecoverAllLineupScRsp" => Some(Self::CmdRecoverAllLineupScRsp),
            "CmdEnterSectionScRsp" => Some(Self::CmdEnterSectionScRsp),
            "CmdSceneCastSkillCsReq" => Some(Self::CmdSceneCastSkillCsReq),
            "CmdEnterSectionCsReq" => Some(Self::CmdEnterSectionCsReq),
            "CmdSetClientPausedScRsp" => Some(Self::CmdSetClientPausedScRsp),
            "CmdGetCurSceneInfoScRsp" => Some(Self::CmdGetCurSceneInfoScRsp),
            "CmdSetGroupCustomSaveDataScRsp" => {
                Some(Self::CmdSetGroupCustomSaveDataScRsp)
            }
            "CmdUpdateFloorSavedValueNotify" => {
                Some(Self::CmdUpdateFloorSavedValueNotify)
            }
            "CmdGetSceneMapInfoScRsp" => Some(Self::CmdGetSceneMapInfoScRsp),
            "CmdSceneReviveAfterRebattleScRsp" => {
                Some(Self::CmdSceneReviveAfterRebattleScRsp)
            }
            "CmdGameplayCounterRecoverCsReq" => {
                Some(Self::CmdGameplayCounterRecoverCsReq)
            }
            "CmdSpringRefreshScRsp" => Some(Self::CmdSpringRefreshScRsp),
            "CmdReturnLastTownCsReq" => Some(Self::CmdReturnLastTownCsReq),
            "CmdSavePointsInfoNotify" => Some(Self::CmdSavePointsInfoNotify),
            "CmdUpdateMechanismBarScNotify" => Some(Self::CmdUpdateMechanismBarScNotify),
            "CmdEnterSceneByServerScNotify" => Some(Self::CmdEnterSceneByServerScNotify),
            "CmdRefreshTriggerByClientCsReq" => {
                Some(Self::CmdRefreshTriggerByClientCsReq)
            }
            "CmdDeleteSummonUnitCsReq" => Some(Self::CmdDeleteSummonUnitCsReq),
            "CmdGameplayCounterUpdateScNotify" => {
                Some(Self::CmdGameplayCounterUpdateScNotify)
            }
            "CmdSetCurInteractEntityCsReq" => Some(Self::CmdSetCurInteractEntityCsReq),
            "CmdActivateFarmElementCsReq" => Some(Self::CmdActivateFarmElementCsReq),
            "CmdSceneCastSkillCostMpCsReq" => Some(Self::CmdSceneCastSkillCostMpCsReq),
            "CmdSetSpringRecoverConfigScRsp" => {
                Some(Self::CmdSetSpringRecoverConfigScRsp)
            }
            "CmdRecoverAllLineupCsReq" => Some(Self::CmdRecoverAllLineupCsReq),
            "CmdStartTimedCocoonStageScRsp" => Some(Self::CmdStartTimedCocoonStageScRsp),
            "CmdSceneEnterStageCsReq" => Some(Self::CmdSceneEnterStageCsReq),
            "CmdReturnLastTownScRsp" => Some(Self::CmdReturnLastTownScRsp),
            "CmdGetEnteredSceneScRsp" => Some(Self::CmdGetEnteredSceneScRsp),
            "CmdInteractPropCsReq" => Some(Self::CmdInteractPropCsReq),
            "CmdSceneUpdatePositionVersionNotify" => {
                Some(Self::CmdSceneUpdatePositionVersionNotify)
            }
            "CmdUpdateGroupPropertyScRsp" => Some(Self::CmdUpdateGroupPropertyScRsp),
            "CmdReEnterLastElementStageScRsp" => {
                Some(Self::CmdReEnterLastElementStageScRsp)
            }
            "CmdGetSpringRecoverDataScRsp" => Some(Self::CmdGetSpringRecoverDataScRsp),
            "CmdRefreshTriggerByClientScRsp" => {
                Some(Self::CmdRefreshTriggerByClientScRsp)
            }
            "CmdGetSceneMapInfoCsReq" => Some(Self::CmdGetSceneMapInfoCsReq),
            "CmdSceneCastSkillMpUpdateScNotify" => {
                Some(Self::CmdSceneCastSkillMpUpdateScNotify)
            }
            "CmdDeactivateFarmElementCsReq" => Some(Self::CmdDeactivateFarmElementCsReq),
            "CmdDeactivateFarmElementScRsp" => Some(Self::CmdDeactivateFarmElementScRsp),
            "CmdGetSpringRecoverDataCsReq" => Some(Self::CmdGetSpringRecoverDataCsReq),
            "CmdStartCocoonStageScRsp" => Some(Self::CmdStartCocoonStageScRsp),
            "CmdUpdateGroupPropertyCsReq" => Some(Self::CmdUpdateGroupPropertyCsReq),
            "CmdSetGroupCustomSaveDataCsReq" => {
                Some(Self::CmdSetGroupCustomSaveDataCsReq)
            }
            "CmdGetEnteredSceneCsReq" => Some(Self::CmdGetEnteredSceneCsReq),
            "CmdSceneEntityTeleportCsReq" => Some(Self::CmdSceneEntityTeleportCsReq),
            "CmdStartTimedCocoonStageCsReq" => Some(Self::CmdStartTimedCocoonStageCsReq),
            "CmdSceneEnterStageScRsp" => Some(Self::CmdSceneEnterStageScRsp),
            "CmdGroupStateChangeScRsp" => Some(Self::CmdGroupStateChangeScRsp),
            "CmdSceneEntityMoveScNotify" => Some(Self::CmdSceneEntityMoveScNotify),
            "CmdSetSpringRecoverConfigCsReq" => {
                Some(Self::CmdSetSpringRecoverConfigCsReq)
            }
            "CmdSyncServerSceneChangeNotify" => {
                Some(Self::CmdSyncServerSceneChangeNotify)
            }
            "CmdSyncEntityBuffChangeListScNotify" => {
                Some(Self::CmdSyncEntityBuffChangeListScNotify)
            }
            "CmdGroupStateChangeCsReq" => Some(Self::CmdGroupStateChangeCsReq),
            "CmdSceneReviveAfterRebattleCsReq" => {
                Some(Self::CmdSceneReviveAfterRebattleCsReq)
            }
            "CmdUnlockedAreaMapScNotify" => Some(Self::CmdUnlockedAreaMapScNotify),
            "CmdInteractPropScRsp" => Some(Self::CmdInteractPropScRsp),
            "CmdSetCurInteractEntityScRsp" => Some(Self::CmdSetCurInteractEntityScRsp),
            "CmdGameplayCounterCountDownScRsp" => {
                Some(Self::CmdGameplayCounterCountDownScRsp)
            }
            "CmdSceneEntityTeleportScRsp" => Some(Self::CmdSceneEntityTeleportScRsp),
            "CmdStartTimedFarmElementScRsp" => Some(Self::CmdStartTimedFarmElementScRsp),
            "CmdReEnterLastElementStageCsReq" => {
                Some(Self::CmdReEnterLastElementStageCsReq)
            }
            "CmdGetUnlockTeleportScRsp" => Some(Self::CmdGetUnlockTeleportScRsp),
            "CmdGetCurSceneInfoCsReq" => Some(Self::CmdGetCurSceneInfoCsReq),
            "CmdStartTimedFarmElementCsReq" => Some(Self::CmdStartTimedFarmElementCsReq),
            "CmdActivateFarmElementScRsp" => Some(Self::CmdActivateFarmElementScRsp),
            "CmdGetUnlockTeleportCsReq" => Some(Self::CmdGetUnlockTeleportCsReq),
            "CmdUnlockTeleportNotify" => Some(Self::CmdUnlockTeleportNotify),
            "CmdDeleteSummonUnitScRsp" => Some(Self::CmdDeleteSummonUnitScRsp),
            "CmdSceneGroupRefreshScNotify" => Some(Self::CmdSceneGroupRefreshScNotify),
            "CmdGroupStateChangeScNotify" => Some(Self::CmdGroupStateChangeScNotify),
            "CmdSceneEntityMoveCsReq" => Some(Self::CmdSceneEntityMoveCsReq),
            "CmdRefreshTriggerByClientScNotify" => {
                Some(Self::CmdRefreshTriggerByClientScNotify)
            }
            "CmdGameplayCounterRecoverScRsp" => {
                Some(Self::CmdGameplayCounterRecoverScRsp)
            }
            "CmdEnteredSceneChangeScNotify" => Some(Self::CmdEnteredSceneChangeScNotify),
            "CmdEntityBindPropCsReq" => Some(Self::CmdEntityBindPropCsReq),
            "CmdStartCocoonStageCsReq" => Some(Self::CmdStartCocoonStageCsReq),
            "CmdSceneEntityMoveScRsp" => Some(Self::CmdSceneEntityMoveScRsp),
            "CmdSceneCastSkillScRsp" => Some(Self::CmdSceneCastSkillScRsp),
            "CmdEnterSceneScRsp" => Some(Self::CmdEnterSceneScRsp),
            "CmdSpringRecoverScRsp" => Some(Self::CmdSpringRecoverScRsp),
            "CmdEntityBindPropScRsp" => Some(Self::CmdEntityBindPropScRsp),
            "CmdScenePlaneEventScNotify" => Some(Self::CmdScenePlaneEventScNotify),
            "CmdGameplayCounterCountDownCsReq" => {
                Some(Self::CmdGameplayCounterCountDownCsReq)
            }
            "CmdLastSpringRefreshTimeNotify" => {
                Some(Self::CmdLastSpringRefreshTimeNotify)
            }
            "CmdHealPoolInfoNotify" => Some(Self::CmdHealPoolInfoNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneCastSkill {
    None = 0,
    ProjectileHit = 1,
    ProjectileLifetimeFinish = 2,
}
impl SceneCastSkill {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SCENE_CAST_SKILL_NONE",
            Self::ProjectileHit => "SCENE_CAST_SKILL_PROJECTILE_HIT",
            Self::ProjectileLifetimeFinish => {
                "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_CAST_SKILL_NONE" => Some(Self::None),
            "SCENE_CAST_SKILL_PROJECTILE_HIT" => Some(Self::ProjectileHit),
            "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH" => {
                Some(Self::ProjectileLifetimeFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cgmkfpiodbo {
    MonsterBattleTypeNone = 0,
    MonsterBattleTypeTriggerBattle = 1,
    MonsterBattleTypeDirectDieSimulateBattle = 2,
    MonsterBattleTypeDirectDieSkipBattle = 3,
    MonsterBattleTypeNoBattle = 4,
}
impl Cgmkfpiodbo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::MonsterBattleTypeNone => "MONSTER_BATTLE_TYPE_NONE",
            Self::MonsterBattleTypeTriggerBattle => "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE",
            Self::MonsterBattleTypeDirectDieSimulateBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE"
            }
            Self::MonsterBattleTypeDirectDieSkipBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE"
            }
            Self::MonsterBattleTypeNoBattle => "MONSTER_BATTLE_TYPE_NO_BATTLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONSTER_BATTLE_TYPE_NONE" => Some(Self::MonsterBattleTypeNone),
            "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE" => {
                Some(Self::MonsterBattleTypeTriggerBattle)
            }
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE" => {
                Some(Self::MonsterBattleTypeDirectDieSimulateBattle)
            }
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE" => {
                Some(Self::MonsterBattleTypeDirectDieSkipBattle)
            }
            "MONSTER_BATTLE_TYPE_NO_BATTLE" => Some(Self::MonsterBattleTypeNoBattle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneEntityBuffChangeType {
    Default = 0,
    AddMazebuff = 1,
    AddAdvModifier = 2,
}
impl SceneEntityBuffChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT",
            Self::AddMazebuff => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF",
            Self::AddAdvModifier => "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT" => Some(Self::Default),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF" => Some(Self::AddMazebuff),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER" => {
                Some(Self::AddAdvModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterSceneReason {
    None = 0,
    ChallengeTimeout = 1,
    RogueTimeout = 2,
    ChangeStoryline = 3,
    DimensionMerge = 4,
}
impl EnterSceneReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "ENTER_SCENE_REASON_NONE",
            Self::ChallengeTimeout => "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT",
            Self::RogueTimeout => "ENTER_SCENE_REASON_ROGUE_TIMEOUT",
            Self::ChangeStoryline => "ENTER_SCENE_REASON_CHANGE_STORYLINE",
            Self::DimensionMerge => "ENTER_SCENE_REASON_DIMENSION_MERGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTER_SCENE_REASON_NONE" => Some(Self::None),
            "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT" => Some(Self::ChallengeTimeout),
            "ENTER_SCENE_REASON_ROGUE_TIMEOUT" => Some(Self::RogueTimeout),
            "ENTER_SCENE_REASON_CHANGE_STORYLINE" => Some(Self::ChangeStoryline),
            "ENTER_SCENE_REASON_DIMENSION_MERGE" => Some(Self::DimensionMerge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MapInfoChestType {
    None = 0,
    Normal = 101,
    Challenge = 102,
    Puzzle = 104,
}
impl MapInfoChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MAP_INFO_CHEST_TYPE_NONE",
            Self::Normal => "MAP_INFO_CHEST_TYPE_NORMAL",
            Self::Challenge => "MAP_INFO_CHEST_TYPE_CHALLENGE",
            Self::Puzzle => "MAP_INFO_CHEST_TYPE_PUZZLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAP_INFO_CHEST_TYPE_NONE" => Some(Self::None),
            "MAP_INFO_CHEST_TYPE_NORMAL" => Some(Self::Normal),
            "MAP_INFO_CHEST_TYPE_CHALLENGE" => Some(Self::Challenge),
            "MAP_INFO_CHEST_TYPE_PUZZLE" => Some(Self::Puzzle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ffbmlflalll {
    GameplayCounterUpdateReasonNone = 0,
    GameplayCounterUpdateReasonActivate = 1,
    GameplayCounterUpdateReasonDeactivate = 2,
    GameplayCounterUpdateReasonChange = 3,
}
impl Ffbmlflalll {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::GameplayCounterUpdateReasonNone => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_NONE"
            }
            Self::GameplayCounterUpdateReasonActivate => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE"
            }
            Self::GameplayCounterUpdateReasonDeactivate => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE"
            }
            Self::GameplayCounterUpdateReasonChange => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_UPDATE_REASON_NONE" => {
                Some(Self::GameplayCounterUpdateReasonNone)
            }
            "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE" => {
                Some(Self::GameplayCounterUpdateReasonActivate)
            }
            "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE" => {
                Some(Self::GameplayCounterUpdateReasonDeactivate)
            }
            "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE" => {
                Some(Self::GameplayCounterUpdateReasonChange)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneGroupRefreshType {
    None = 0,
    Loaded = 1,
    Unload = 2,
}
impl SceneGroupRefreshType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "SCENE_GROUP_REFRESH_TYPE_NONE",
            Self::Loaded => "SCENE_GROUP_REFRESH_TYPE_LOADED",
            Self::Unload => "SCENE_GROUP_REFRESH_TYPE_UNLOAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_GROUP_REFRESH_TYPE_NONE" => Some(Self::None),
            "SCENE_GROUP_REFRESH_TYPE_LOADED" => Some(Self::Loaded),
            "SCENE_GROUP_REFRESH_TYPE_UNLOAD" => Some(Self::Unload),
            _ => None,
        }
    }
}
/// ILMOEMOLGOJ
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdServerPrefsType {
    None = 0,
    CmdGetAllServerPrefsDataCsReq = 6159,
    CmdUpdateServerPrefsDataCsReq = 6139,
    CmdGetServerPrefsDataCsReq = 6103,
    CmdGetAllServerPrefsDataScRsp = 6120,
    CmdGetServerPrefsDataScRsp = 6146,
    CmdUpdateServerPrefsDataScRsp = 6153,
}
impl CmdServerPrefsType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdServerPrefsTypeNone",
            Self::CmdGetAllServerPrefsDataCsReq => "CmdGetAllServerPrefsDataCsReq",
            Self::CmdUpdateServerPrefsDataCsReq => "CmdUpdateServerPrefsDataCsReq",
            Self::CmdGetServerPrefsDataCsReq => "CmdGetServerPrefsDataCsReq",
            Self::CmdGetAllServerPrefsDataScRsp => "CmdGetAllServerPrefsDataScRsp",
            Self::CmdGetServerPrefsDataScRsp => "CmdGetServerPrefsDataScRsp",
            Self::CmdUpdateServerPrefsDataScRsp => "CmdUpdateServerPrefsDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdServerPrefsTypeNone" => Some(Self::None),
            "CmdGetAllServerPrefsDataCsReq" => Some(Self::CmdGetAllServerPrefsDataCsReq),
            "CmdUpdateServerPrefsDataCsReq" => Some(Self::CmdUpdateServerPrefsDataCsReq),
            "CmdGetServerPrefsDataCsReq" => Some(Self::CmdGetServerPrefsDataCsReq),
            "CmdGetAllServerPrefsDataScRsp" => Some(Self::CmdGetAllServerPrefsDataScRsp),
            "CmdGetServerPrefsDataScRsp" => Some(Self::CmdGetServerPrefsDataScRsp),
            "CmdUpdateServerPrefsDataScRsp" => Some(Self::CmdUpdateServerPrefsDataScRsp),
            _ => None,
        }
    }
}
/// FNPAEDOEGHL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdShopType {
    None = 0,
    CmdBuyGoodsCsReq = 1503,
    CmdTakeCityShopRewardCsReq = 1539,
    CmdGetShopListCsReq = 1559,
    CmdTakeCityShopRewardScRsp = 1553,
    CmdCityShopInfoScNotify = 1534,
    CmdBuyGoodsScRsp = 1546,
    CmdGetShopListScRsp = 1520,
}
impl CmdShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdShopTypeNone",
            Self::CmdBuyGoodsCsReq => "CmdBuyGoodsCsReq",
            Self::CmdTakeCityShopRewardCsReq => "CmdTakeCityShopRewardCsReq",
            Self::CmdGetShopListCsReq => "CmdGetShopListCsReq",
            Self::CmdTakeCityShopRewardScRsp => "CmdTakeCityShopRewardScRsp",
            Self::CmdCityShopInfoScNotify => "CmdCityShopInfoScNotify",
            Self::CmdBuyGoodsScRsp => "CmdBuyGoodsScRsp",
            Self::CmdGetShopListScRsp => "CmdGetShopListScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdShopTypeNone" => Some(Self::None),
            "CmdBuyGoodsCsReq" => Some(Self::CmdBuyGoodsCsReq),
            "CmdTakeCityShopRewardCsReq" => Some(Self::CmdTakeCityShopRewardCsReq),
            "CmdGetShopListCsReq" => Some(Self::CmdGetShopListCsReq),
            "CmdTakeCityShopRewardScRsp" => Some(Self::CmdTakeCityShopRewardScRsp),
            "CmdCityShopInfoScNotify" => Some(Self::CmdCityShopInfoScNotify),
            "CmdBuyGoodsScRsp" => Some(Self::CmdBuyGoodsScRsp),
            "CmdGetShopListScRsp" => Some(Self::CmdGetShopListScRsp),
            _ => None,
        }
    }
}
/// AKGCHKEKBCO
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSpaceZooType {
    None = 0,
    CmdSpaceZooDataScRsp = 6720,
    CmdSpaceZooExchangeItemScRsp = 6730,
    CmdSpaceZooOpCatteryScRsp = 6737,
    CmdSpaceZooCatUpdateNotify = 6747,
    CmdSpaceZooMutateCsReq = 6739,
    CmdSpaceZooDeleteCatCsReq = 6780,
    CmdSpaceZooMutateScRsp = 6753,
    CmdSpaceZooDataCsReq = 6759,
    CmdSpaceZooBornCsReq = 6703,
    CmdSpaceZooDeleteCatScRsp = 6716,
    CmdSpaceZooOpCatteryCsReq = 6734,
    CmdSpaceZooTakeCsReq = 6775,
    CmdSpaceZooExchangeItemCsReq = 6774,
    CmdSpaceZooBornScRsp = 6746,
    CmdSpaceZooTakeScRsp = 6748,
}
impl CmdSpaceZooType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSpaceZooTypeNone",
            Self::CmdSpaceZooDataScRsp => "CmdSpaceZooDataScRsp",
            Self::CmdSpaceZooExchangeItemScRsp => "CmdSpaceZooExchangeItemScRsp",
            Self::CmdSpaceZooOpCatteryScRsp => "CmdSpaceZooOpCatteryScRsp",
            Self::CmdSpaceZooCatUpdateNotify => "CmdSpaceZooCatUpdateNotify",
            Self::CmdSpaceZooMutateCsReq => "CmdSpaceZooMutateCsReq",
            Self::CmdSpaceZooDeleteCatCsReq => "CmdSpaceZooDeleteCatCsReq",
            Self::CmdSpaceZooMutateScRsp => "CmdSpaceZooMutateScRsp",
            Self::CmdSpaceZooDataCsReq => "CmdSpaceZooDataCsReq",
            Self::CmdSpaceZooBornCsReq => "CmdSpaceZooBornCsReq",
            Self::CmdSpaceZooDeleteCatScRsp => "CmdSpaceZooDeleteCatScRsp",
            Self::CmdSpaceZooOpCatteryCsReq => "CmdSpaceZooOpCatteryCsReq",
            Self::CmdSpaceZooTakeCsReq => "CmdSpaceZooTakeCsReq",
            Self::CmdSpaceZooExchangeItemCsReq => "CmdSpaceZooExchangeItemCsReq",
            Self::CmdSpaceZooBornScRsp => "CmdSpaceZooBornScRsp",
            Self::CmdSpaceZooTakeScRsp => "CmdSpaceZooTakeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSpaceZooTypeNone" => Some(Self::None),
            "CmdSpaceZooDataScRsp" => Some(Self::CmdSpaceZooDataScRsp),
            "CmdSpaceZooExchangeItemScRsp" => Some(Self::CmdSpaceZooExchangeItemScRsp),
            "CmdSpaceZooOpCatteryScRsp" => Some(Self::CmdSpaceZooOpCatteryScRsp),
            "CmdSpaceZooCatUpdateNotify" => Some(Self::CmdSpaceZooCatUpdateNotify),
            "CmdSpaceZooMutateCsReq" => Some(Self::CmdSpaceZooMutateCsReq),
            "CmdSpaceZooDeleteCatCsReq" => Some(Self::CmdSpaceZooDeleteCatCsReq),
            "CmdSpaceZooMutateScRsp" => Some(Self::CmdSpaceZooMutateScRsp),
            "CmdSpaceZooDataCsReq" => Some(Self::CmdSpaceZooDataCsReq),
            "CmdSpaceZooBornCsReq" => Some(Self::CmdSpaceZooBornCsReq),
            "CmdSpaceZooDeleteCatScRsp" => Some(Self::CmdSpaceZooDeleteCatScRsp),
            "CmdSpaceZooOpCatteryCsReq" => Some(Self::CmdSpaceZooOpCatteryCsReq),
            "CmdSpaceZooTakeCsReq" => Some(Self::CmdSpaceZooTakeCsReq),
            "CmdSpaceZooExchangeItemCsReq" => Some(Self::CmdSpaceZooExchangeItemCsReq),
            "CmdSpaceZooBornScRsp" => Some(Self::CmdSpaceZooBornScRsp),
            "CmdSpaceZooTakeScRsp" => Some(Self::CmdSpaceZooTakeScRsp),
            _ => None,
        }
    }
}
/// FHDMAIBFLIG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStarFightType {
    None = 0,
    CmdStarFightDataChangeNotify = 7161,
    CmdGetStarFightDataScRsp = 7165,
    CmdGetStarFightDataCsReq = 7166,
    CmdStartStarFightLevelScRsp = 7168,
    CmdStartStarFightLevelCsReq = 7169,
}
impl CmdStarFightType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStarFightTypeNone",
            Self::CmdStarFightDataChangeNotify => "CmdStarFightDataChangeNotify",
            Self::CmdGetStarFightDataScRsp => "CmdGetStarFightDataScRsp",
            Self::CmdGetStarFightDataCsReq => "CmdGetStarFightDataCsReq",
            Self::CmdStartStarFightLevelScRsp => "CmdStartStarFightLevelScRsp",
            Self::CmdStartStarFightLevelCsReq => "CmdStartStarFightLevelCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStarFightTypeNone" => Some(Self::None),
            "CmdStarFightDataChangeNotify" => Some(Self::CmdStarFightDataChangeNotify),
            "CmdGetStarFightDataScRsp" => Some(Self::CmdGetStarFightDataScRsp),
            "CmdGetStarFightDataCsReq" => Some(Self::CmdGetStarFightDataCsReq),
            "CmdStartStarFightLevelScRsp" => Some(Self::CmdStartStarFightLevelScRsp),
            "CmdStartStarFightLevelCsReq" => Some(Self::CmdStartStarFightLevelCsReq),
            _ => None,
        }
    }
}
/// DHNNJHLNMMN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStoryLineType {
    None = 0,
    CmdGetStoryLineInfoCsReq = 6259,
    CmdStoryLineInfoScNotify = 6203,
    CmdGetStoryLineInfoScRsp = 6220,
    CmdChangeStoryLineFinishScNotify = 6253,
    CmdStoryLineTrialAvatarChangeScNotify = 6234,
}
impl CmdStoryLineType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStoryLineTypeNone",
            Self::CmdGetStoryLineInfoCsReq => "CmdGetStoryLineInfoCsReq",
            Self::CmdStoryLineInfoScNotify => "CmdStoryLineInfoScNotify",
            Self::CmdGetStoryLineInfoScRsp => "CmdGetStoryLineInfoScRsp",
            Self::CmdChangeStoryLineFinishScNotify => "CmdChangeStoryLineFinishScNotify",
            Self::CmdStoryLineTrialAvatarChangeScNotify => {
                "CmdStoryLineTrialAvatarChangeScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStoryLineTypeNone" => Some(Self::None),
            "CmdGetStoryLineInfoCsReq" => Some(Self::CmdGetStoryLineInfoCsReq),
            "CmdStoryLineInfoScNotify" => Some(Self::CmdStoryLineInfoScNotify),
            "CmdGetStoryLineInfoScRsp" => Some(Self::CmdGetStoryLineInfoScRsp),
            "CmdChangeStoryLineFinishScNotify" => {
                Some(Self::CmdChangeStoryLineFinishScNotify)
            }
            "CmdStoryLineTrialAvatarChangeScNotify" => {
                Some(Self::CmdStoryLineTrialAvatarChangeScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Phfijampdgi {
    ChangeStoryLineActionNone = 0,
    ChangeStoryLineActionFinishAction = 1,
    ChangeStoryLineActionClient = 2,
    ChangeStoryLineActionCustomOp = 3,
}
impl Phfijampdgi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ChangeStoryLineActionNone => "ChangeStoryLineAction_None",
            Self::ChangeStoryLineActionFinishAction => {
                "ChangeStoryLineAction_FinishAction"
            }
            Self::ChangeStoryLineActionClient => "ChangeStoryLineAction_Client",
            Self::ChangeStoryLineActionCustomOp => "ChangeStoryLineAction_CustomOP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ChangeStoryLineAction_None" => Some(Self::ChangeStoryLineActionNone),
            "ChangeStoryLineAction_FinishAction" => {
                Some(Self::ChangeStoryLineActionFinishAction)
            }
            "ChangeStoryLineAction_Client" => Some(Self::ChangeStoryLineActionClient),
            "ChangeStoryLineAction_CustomOP" => Some(Self::ChangeStoryLineActionCustomOp),
            _ => None,
        }
    }
}
/// GNJJFFKDJEP
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdStrongChallengeActivityType {
    None = 0,
    CmdEnterStrongChallengeActivityStageScRsp = 6646,
    CmdEnterStrongChallengeActivityStageCsReq = 6603,
    CmdGetStrongChallengeActivityDataCsReq = 6659,
    CmdStrongChallengeActivityBattleEndScNotify = 6639,
    CmdGetStrongChallengeActivityDataScRsp = 6620,
}
impl CmdStrongChallengeActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdStrongChallengeActivityTypeNone",
            Self::CmdEnterStrongChallengeActivityStageScRsp => {
                "CmdEnterStrongChallengeActivityStageScRsp"
            }
            Self::CmdEnterStrongChallengeActivityStageCsReq => {
                "CmdEnterStrongChallengeActivityStageCsReq"
            }
            Self::CmdGetStrongChallengeActivityDataCsReq => {
                "CmdGetStrongChallengeActivityDataCsReq"
            }
            Self::CmdStrongChallengeActivityBattleEndScNotify => {
                "CmdStrongChallengeActivityBattleEndScNotify"
            }
            Self::CmdGetStrongChallengeActivityDataScRsp => {
                "CmdGetStrongChallengeActivityDataScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStrongChallengeActivityTypeNone" => Some(Self::None),
            "CmdEnterStrongChallengeActivityStageScRsp" => {
                Some(Self::CmdEnterStrongChallengeActivityStageScRsp)
            }
            "CmdEnterStrongChallengeActivityStageCsReq" => {
                Some(Self::CmdEnterStrongChallengeActivityStageCsReq)
            }
            "CmdGetStrongChallengeActivityDataCsReq" => {
                Some(Self::CmdGetStrongChallengeActivityDataCsReq)
            }
            "CmdStrongChallengeActivityBattleEndScNotify" => {
                Some(Self::CmdStrongChallengeActivityBattleEndScNotify)
            }
            "CmdGetStrongChallengeActivityDataScRsp" => {
                Some(Self::CmdGetStrongChallengeActivityDataScRsp)
            }
            _ => None,
        }
    }
}
/// KHIBKOHKOPG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSummonActivityType {
    None = 0,
    CmdGetSummonActivityDataScRsp = 7565,
    CmdEnterSummonActivityStageCsReq = 7569,
    CmdSummonActivityBattleEndScNotify = 7561,
    CmdEnterSummonActivityStageScRsp = 7568,
    CmdGetSummonActivityDataCsReq = 7566,
}
impl CmdSummonActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSummonActivityTypeNone",
            Self::CmdGetSummonActivityDataScRsp => "CmdGetSummonActivityDataScRsp",
            Self::CmdEnterSummonActivityStageCsReq => "CmdEnterSummonActivityStageCsReq",
            Self::CmdSummonActivityBattleEndScNotify => {
                "CmdSummonActivityBattleEndScNotify"
            }
            Self::CmdEnterSummonActivityStageScRsp => "CmdEnterSummonActivityStageScRsp",
            Self::CmdGetSummonActivityDataCsReq => "CmdGetSummonActivityDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSummonActivityTypeNone" => Some(Self::None),
            "CmdGetSummonActivityDataScRsp" => Some(Self::CmdGetSummonActivityDataScRsp),
            "CmdEnterSummonActivityStageCsReq" => {
                Some(Self::CmdEnterSummonActivityStageCsReq)
            }
            "CmdSummonActivityBattleEndScNotify" => {
                Some(Self::CmdSummonActivityBattleEndScNotify)
            }
            "CmdEnterSummonActivityStageScRsp" => {
                Some(Self::CmdEnterSummonActivityStageScRsp)
            }
            "CmdGetSummonActivityDataCsReq" => Some(Self::CmdGetSummonActivityDataCsReq),
            _ => None,
        }
    }
}
/// LIFEIABBGDD
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSwordTrainingType {
    None = 0,
    CmdSwordTrainingExamResultConfirmScRsp = 7488,
    CmdSwordTrainingDialogueSelectOptionCsReq = 7473,
    CmdSwordTrainingStoryConfirmScRsp = 7481,
    CmdSwordTrainingLearnSkillCsReq = 7489,
    CmdSwordTrainingRestoreGameCsReq = 7459,
    CmdSwordTrainingDailyPhaseConfirmCsReq = 7487,
    CmdSwordTrainingRestoreGameScRsp = 7451,
    CmdSwordTrainingLearnSkillScRsp = 7483,
    CmdGetSwordTrainingDataCsReq = 7466,
    CmdSwordTrainingTurnActionScRsp = 7492,
    CmdSwordTrainingStoryBattleCsReq = 7454,
    CmdSwordTrainingSetSkillTraceCsReq = 7500,
    CmdSwordTrainingMarkEndingViewedScRsp = 7464,
    CmdSwordTrainingGameSettleScNotify = 7476,
    CmdSwordTrainingSelectEndingScRsp = 7491,
    CmdGetSwordTrainingDataScRsp = 7462,
    CmdSwordTrainingGameSyncChangeScNotify = 7465,
    CmdSwordTrainingTurnActionCsReq = 7474,
    CmdEnterSwordTrainingExamScRsp = 7499,
    CmdSwordTrainingResumeGameCsReq = 7453,
    CmdSwordTrainingStoryBattleScRsp = 7498,
    CmdSwordTrainingSetSkillTraceScRsp = 7461,
    CmdSwordTrainingGiveUpGameCsReq = 7468,
    CmdSwordTrainingSelectEndingCsReq = 7467,
    CmdEnterSwordTrainingExamCsReq = 7484,
    CmdSwordTrainingStartGameCsReq = 7494,
    CmdSwordTrainingMarkEndingViewedCsReq = 7495,
    CmdSwordTrainingGiveUpGameScRsp = 7482,
    CmdSwordTrainingUnlockSyncScNotify = 7452,
    CmdSwordTrainingActionTurnSettleScNotify = 7471,
    CmdSwordTrainingExamResultConfirmCsReq = 7479,
    CmdSwordTrainingDailyPhaseConfirmScRsp = 7490,
    CmdSwordTrainingStoryConfirmCsReq = 7455,
    CmdSwordTrainingStartGameScRsp = 7470,
    CmdSwordTrainingResumeGameScRsp = 7497,
    CmdSwordTrainingDialogueSelectOptionScRsp = 7458,
}
impl CmdSwordTrainingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdSwordTrainingTypeNone",
            Self::CmdSwordTrainingExamResultConfirmScRsp => {
                "CmdSwordTrainingExamResultConfirmScRsp"
            }
            Self::CmdSwordTrainingDialogueSelectOptionCsReq => {
                "CmdSwordTrainingDialogueSelectOptionCsReq"
            }
            Self::CmdSwordTrainingStoryConfirmScRsp => {
                "CmdSwordTrainingStoryConfirmScRsp"
            }
            Self::CmdSwordTrainingLearnSkillCsReq => "CmdSwordTrainingLearnSkillCsReq",
            Self::CmdSwordTrainingRestoreGameCsReq => "CmdSwordTrainingRestoreGameCsReq",
            Self::CmdSwordTrainingDailyPhaseConfirmCsReq => {
                "CmdSwordTrainingDailyPhaseConfirmCsReq"
            }
            Self::CmdSwordTrainingRestoreGameScRsp => "CmdSwordTrainingRestoreGameScRsp",
            Self::CmdSwordTrainingLearnSkillScRsp => "CmdSwordTrainingLearnSkillScRsp",
            Self::CmdGetSwordTrainingDataCsReq => "CmdGetSwordTrainingDataCsReq",
            Self::CmdSwordTrainingTurnActionScRsp => "CmdSwordTrainingTurnActionScRsp",
            Self::CmdSwordTrainingStoryBattleCsReq => "CmdSwordTrainingStoryBattleCsReq",
            Self::CmdSwordTrainingSetSkillTraceCsReq => {
                "CmdSwordTrainingSetSkillTraceCsReq"
            }
            Self::CmdSwordTrainingMarkEndingViewedScRsp => {
                "CmdSwordTrainingMarkEndingViewedScRsp"
            }
            Self::CmdSwordTrainingGameSettleScNotify => {
                "CmdSwordTrainingGameSettleScNotify"
            }
            Self::CmdSwordTrainingSelectEndingScRsp => {
                "CmdSwordTrainingSelectEndingScRsp"
            }
            Self::CmdGetSwordTrainingDataScRsp => "CmdGetSwordTrainingDataScRsp",
            Self::CmdSwordTrainingGameSyncChangeScNotify => {
                "CmdSwordTrainingGameSyncChangeScNotify"
            }
            Self::CmdSwordTrainingTurnActionCsReq => "CmdSwordTrainingTurnActionCsReq",
            Self::CmdEnterSwordTrainingExamScRsp => "CmdEnterSwordTrainingExamScRsp",
            Self::CmdSwordTrainingResumeGameCsReq => "CmdSwordTrainingResumeGameCsReq",
            Self::CmdSwordTrainingStoryBattleScRsp => "CmdSwordTrainingStoryBattleScRsp",
            Self::CmdSwordTrainingSetSkillTraceScRsp => {
                "CmdSwordTrainingSetSkillTraceScRsp"
            }
            Self::CmdSwordTrainingGiveUpGameCsReq => "CmdSwordTrainingGiveUpGameCsReq",
            Self::CmdSwordTrainingSelectEndingCsReq => {
                "CmdSwordTrainingSelectEndingCsReq"
            }
            Self::CmdEnterSwordTrainingExamCsReq => "CmdEnterSwordTrainingExamCsReq",
            Self::CmdSwordTrainingStartGameCsReq => "CmdSwordTrainingStartGameCsReq",
            Self::CmdSwordTrainingMarkEndingViewedCsReq => {
                "CmdSwordTrainingMarkEndingViewedCsReq"
            }
            Self::CmdSwordTrainingGiveUpGameScRsp => "CmdSwordTrainingGiveUpGameScRsp",
            Self::CmdSwordTrainingUnlockSyncScNotify => {
                "CmdSwordTrainingUnlockSyncScNotify"
            }
            Self::CmdSwordTrainingActionTurnSettleScNotify => {
                "CmdSwordTrainingActionTurnSettleScNotify"
            }
            Self::CmdSwordTrainingExamResultConfirmCsReq => {
                "CmdSwordTrainingExamResultConfirmCsReq"
            }
            Self::CmdSwordTrainingDailyPhaseConfirmScRsp => {
                "CmdSwordTrainingDailyPhaseConfirmScRsp"
            }
            Self::CmdSwordTrainingStoryConfirmCsReq => {
                "CmdSwordTrainingStoryConfirmCsReq"
            }
            Self::CmdSwordTrainingStartGameScRsp => "CmdSwordTrainingStartGameScRsp",
            Self::CmdSwordTrainingResumeGameScRsp => "CmdSwordTrainingResumeGameScRsp",
            Self::CmdSwordTrainingDialogueSelectOptionScRsp => {
                "CmdSwordTrainingDialogueSelectOptionScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwordTrainingTypeNone" => Some(Self::None),
            "CmdSwordTrainingExamResultConfirmScRsp" => {
                Some(Self::CmdSwordTrainingExamResultConfirmScRsp)
            }
            "CmdSwordTrainingDialogueSelectOptionCsReq" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionCsReq)
            }
            "CmdSwordTrainingStoryConfirmScRsp" => {
                Some(Self::CmdSwordTrainingStoryConfirmScRsp)
            }
            "CmdSwordTrainingLearnSkillCsReq" => {
                Some(Self::CmdSwordTrainingLearnSkillCsReq)
            }
            "CmdSwordTrainingRestoreGameCsReq" => {
                Some(Self::CmdSwordTrainingRestoreGameCsReq)
            }
            "CmdSwordTrainingDailyPhaseConfirmCsReq" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmCsReq)
            }
            "CmdSwordTrainingRestoreGameScRsp" => {
                Some(Self::CmdSwordTrainingRestoreGameScRsp)
            }
            "CmdSwordTrainingLearnSkillScRsp" => {
                Some(Self::CmdSwordTrainingLearnSkillScRsp)
            }
            "CmdGetSwordTrainingDataCsReq" => Some(Self::CmdGetSwordTrainingDataCsReq),
            "CmdSwordTrainingTurnActionScRsp" => {
                Some(Self::CmdSwordTrainingTurnActionScRsp)
            }
            "CmdSwordTrainingStoryBattleCsReq" => {
                Some(Self::CmdSwordTrainingStoryBattleCsReq)
            }
            "CmdSwordTrainingSetSkillTraceCsReq" => {
                Some(Self::CmdSwordTrainingSetSkillTraceCsReq)
            }
            "CmdSwordTrainingMarkEndingViewedScRsp" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedScRsp)
            }
            "CmdSwordTrainingGameSettleScNotify" => {
                Some(Self::CmdSwordTrainingGameSettleScNotify)
            }
            "CmdSwordTrainingSelectEndingScRsp" => {
                Some(Self::CmdSwordTrainingSelectEndingScRsp)
            }
            "CmdGetSwordTrainingDataScRsp" => Some(Self::CmdGetSwordTrainingDataScRsp),
            "CmdSwordTrainingGameSyncChangeScNotify" => {
                Some(Self::CmdSwordTrainingGameSyncChangeScNotify)
            }
            "CmdSwordTrainingTurnActionCsReq" => {
                Some(Self::CmdSwordTrainingTurnActionCsReq)
            }
            "CmdEnterSwordTrainingExamScRsp" => {
                Some(Self::CmdEnterSwordTrainingExamScRsp)
            }
            "CmdSwordTrainingResumeGameCsReq" => {
                Some(Self::CmdSwordTrainingResumeGameCsReq)
            }
            "CmdSwordTrainingStoryBattleScRsp" => {
                Some(Self::CmdSwordTrainingStoryBattleScRsp)
            }
            "CmdSwordTrainingSetSkillTraceScRsp" => {
                Some(Self::CmdSwordTrainingSetSkillTraceScRsp)
            }
            "CmdSwordTrainingGiveUpGameCsReq" => {
                Some(Self::CmdSwordTrainingGiveUpGameCsReq)
            }
            "CmdSwordTrainingSelectEndingCsReq" => {
                Some(Self::CmdSwordTrainingSelectEndingCsReq)
            }
            "CmdEnterSwordTrainingExamCsReq" => {
                Some(Self::CmdEnterSwordTrainingExamCsReq)
            }
            "CmdSwordTrainingStartGameCsReq" => {
                Some(Self::CmdSwordTrainingStartGameCsReq)
            }
            "CmdSwordTrainingMarkEndingViewedCsReq" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedCsReq)
            }
            "CmdSwordTrainingGiveUpGameScRsp" => {
                Some(Self::CmdSwordTrainingGiveUpGameScRsp)
            }
            "CmdSwordTrainingUnlockSyncScNotify" => {
                Some(Self::CmdSwordTrainingUnlockSyncScNotify)
            }
            "CmdSwordTrainingActionTurnSettleScNotify" => {
                Some(Self::CmdSwordTrainingActionTurnSettleScNotify)
            }
            "CmdSwordTrainingExamResultConfirmCsReq" => {
                Some(Self::CmdSwordTrainingExamResultConfirmCsReq)
            }
            "CmdSwordTrainingDailyPhaseConfirmScRsp" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmScRsp)
            }
            "CmdSwordTrainingStoryConfirmCsReq" => {
                Some(Self::CmdSwordTrainingStoryConfirmCsReq)
            }
            "CmdSwordTrainingStartGameScRsp" => {
                Some(Self::CmdSwordTrainingStartGameScRsp)
            }
            "CmdSwordTrainingResumeGameScRsp" => {
                Some(Self::CmdSwordTrainingResumeGameScRsp)
            }
            "CmdSwordTrainingDialogueSelectOptionScRsp" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lakjklkiiao {
    SwordTrainGameSourceTypeNone = 0,
    SwordTrainGameSourceTypeTurnSettle = 1,
    SwordTrainGameSourceTypeStatusUpgrade = 2,
    SwordTrainGameSourceTypeAction = 3,
    SwordTrainGameSourceTypeActionHint = 4,
    SwordTrainGameSourceTypeStory = 5,
    SwordTrainGameSourceTypeExamBonus = 6,
    SwordTrainGameSourceTypeDialogue = 7,
}
impl Lakjklkiiao {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainGameSourceTypeNone => "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE",
            Self::SwordTrainGameSourceTypeTurnSettle => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE"
            }
            Self::SwordTrainGameSourceTypeStatusUpgrade => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE"
            }
            Self::SwordTrainGameSourceTypeAction => "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION",
            Self::SwordTrainGameSourceTypeActionHint => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT"
            }
            Self::SwordTrainGameSourceTypeStory => "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY",
            Self::SwordTrainGameSourceTypeExamBonus => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS"
            }
            Self::SwordTrainGameSourceTypeDialogue => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE" => {
                Some(Self::SwordTrainGameSourceTypeNone)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE" => {
                Some(Self::SwordTrainGameSourceTypeTurnSettle)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE" => {
                Some(Self::SwordTrainGameSourceTypeStatusUpgrade)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION" => {
                Some(Self::SwordTrainGameSourceTypeAction)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT" => {
                Some(Self::SwordTrainGameSourceTypeActionHint)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY" => {
                Some(Self::SwordTrainGameSourceTypeStory)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS" => {
                Some(Self::SwordTrainGameSourceTypeExamBonus)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::SwordTrainGameSourceTypeDialogue)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Chdecelmagi {
    SwordTrainingDailyPhaseTypeNone = 0,
    SwordTrainingDailyPhaseTypeMorning = 1,
    SwordTrainingDailyPhaseTypeNoon = 2,
    SwordTrainingDailyPhaseTypeAfternoon = 3,
    SwordTrainingDailyPhaseTypeEvening = 4,
}
impl Chdecelmagi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingDailyPhaseTypeNone => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE"
            }
            Self::SwordTrainingDailyPhaseTypeMorning => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING"
            }
            Self::SwordTrainingDailyPhaseTypeNoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON"
            }
            Self::SwordTrainingDailyPhaseTypeAfternoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON"
            }
            Self::SwordTrainingDailyPhaseTypeEvening => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE" => {
                Some(Self::SwordTrainingDailyPhaseTypeNone)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING" => {
                Some(Self::SwordTrainingDailyPhaseTypeMorning)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeNoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeAfternoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING" => {
                Some(Self::SwordTrainingDailyPhaseTypeEvening)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Clilplkgfdm {
    SwordTrainingStatusTypeNone = 0,
    SwordTrainingStatusTypePower = 1,
    SwordTrainingStatusTypeAgility = 2,
    SwordTrainingStatusTypeToughness = 3,
    SwordTrainingStatusTypePerception = 4,
    SwordTrainingStatusTypeMax = 5,
}
impl Clilplkgfdm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingStatusTypeNone => "SWORD_TRAINING_STATUS_TYPE_NONE",
            Self::SwordTrainingStatusTypePower => "SWORD_TRAINING_STATUS_TYPE_POWER",
            Self::SwordTrainingStatusTypeAgility => "SWORD_TRAINING_STATUS_TYPE_AGILITY",
            Self::SwordTrainingStatusTypeToughness => {
                "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS"
            }
            Self::SwordTrainingStatusTypePerception => {
                "SWORD_TRAINING_STATUS_TYPE_PERCEPTION"
            }
            Self::SwordTrainingStatusTypeMax => "_SWORD_TRAINING_STATUS_TYPE_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_STATUS_TYPE_NONE" => Some(Self::SwordTrainingStatusTypeNone),
            "SWORD_TRAINING_STATUS_TYPE_POWER" => {
                Some(Self::SwordTrainingStatusTypePower)
            }
            "SWORD_TRAINING_STATUS_TYPE_AGILITY" => {
                Some(Self::SwordTrainingStatusTypeAgility)
            }
            "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS" => {
                Some(Self::SwordTrainingStatusTypeToughness)
            }
            "SWORD_TRAINING_STATUS_TYPE_PERCEPTION" => {
                Some(Self::SwordTrainingStatusTypePerception)
            }
            "_SWORD_TRAINING_STATUS_TYPE_MAX" => Some(Self::SwordTrainingStatusTypeMax),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojgdbabmnmh {
    SwordTrainingGameSettleNone = 0,
    SwordTrainingGameSettleFinish = 1,
    SwordTrainingGameSettleGiveUp = 2,
    SwordTrainingGameSettleBattleFailed = 3,
    SwordTrainingGameSettleForce = 4,
    SwordTrainingGameSettleByRestore = 5,
}
impl Ojgdbabmnmh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SwordTrainingGameSettleNone => "SWORD_TRAINING_GAME_SETTLE_NONE",
            Self::SwordTrainingGameSettleFinish => "SWORD_TRAINING_GAME_SETTLE_FINISH",
            Self::SwordTrainingGameSettleGiveUp => "SWORD_TRAINING_GAME_SETTLE_GIVE_UP",
            Self::SwordTrainingGameSettleBattleFailed => {
                "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED"
            }
            Self::SwordTrainingGameSettleForce => "SWORD_TRAINING_GAME_SETTLE_FORCE",
            Self::SwordTrainingGameSettleByRestore => {
                "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_GAME_SETTLE_NONE" => Some(Self::SwordTrainingGameSettleNone),
            "SWORD_TRAINING_GAME_SETTLE_FINISH" => {
                Some(Self::SwordTrainingGameSettleFinish)
            }
            "SWORD_TRAINING_GAME_SETTLE_GIVE_UP" => {
                Some(Self::SwordTrainingGameSettleGiveUp)
            }
            "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED" => {
                Some(Self::SwordTrainingGameSettleBattleFailed)
            }
            "SWORD_TRAINING_GAME_SETTLE_FORCE" => {
                Some(Self::SwordTrainingGameSettleForce)
            }
            "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE" => {
                Some(Self::SwordTrainingGameSettleByRestore)
            }
            _ => None,
        }
    }
}
/// CKBCMDAEOMN
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerSync {
    None = 0,
    ScNotify = 659,
}
impl CmdPlayerSync {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdPlayerSyncNone",
            Self::ScNotify => "CmdPlayerSyncScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerSyncNone" => Some(Self::None),
            "CmdPlayerSyncScNotify" => Some(Self::ScNotify),
            _ => None,
        }
    }
}
/// IPLNMGOIEEI
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTalkRewardType {
    None = 0,
    CmdFinishFirstTalkByPerformanceNpcCsReq = 2130,
    CmdFinishFirstTalkNpcCsReq = 2134,
    CmdGetFirstTalkNpcCsReq = 2139,
    CmdGetNpcTakenRewardCsReq = 2159,
    CmdSelectInclinationTextScRsp = 2116,
    CmdFinishFirstTalkNpcScRsp = 2137,
    CmdTakeTalkRewardCsReq = 2103,
    CmdSelectInclinationTextCsReq = 2180,
    CmdGetFirstTalkByPerformanceNpcScRsp = 2174,
    CmdGetFirstTalkByPerformanceNpcCsReq = 2147,
    CmdGetNpcTakenRewardScRsp = 2120,
    CmdGetFirstTalkNpcScRsp = 2153,
    CmdFinishFirstTalkByPerformanceNpcScRsp = 2175,
    CmdTakeTalkRewardScRsp = 2146,
}
impl CmdTalkRewardType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTalkRewardTypeNone",
            Self::CmdFinishFirstTalkByPerformanceNpcCsReq => {
                "CmdFinishFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdFinishFirstTalkNpcCsReq => "CmdFinishFirstTalkNpcCsReq",
            Self::CmdGetFirstTalkNpcCsReq => "CmdGetFirstTalkNpcCsReq",
            Self::CmdGetNpcTakenRewardCsReq => "CmdGetNpcTakenRewardCsReq",
            Self::CmdSelectInclinationTextScRsp => "CmdSelectInclinationTextScRsp",
            Self::CmdFinishFirstTalkNpcScRsp => "CmdFinishFirstTalkNpcScRsp",
            Self::CmdTakeTalkRewardCsReq => "CmdTakeTalkRewardCsReq",
            Self::CmdSelectInclinationTextCsReq => "CmdSelectInclinationTextCsReq",
            Self::CmdGetFirstTalkByPerformanceNpcScRsp => {
                "CmdGetFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdGetFirstTalkByPerformanceNpcCsReq => {
                "CmdGetFirstTalkByPerformanceNpcCsReq"
            }
            Self::CmdGetNpcTakenRewardScRsp => "CmdGetNpcTakenRewardScRsp",
            Self::CmdGetFirstTalkNpcScRsp => "CmdGetFirstTalkNpcScRsp",
            Self::CmdFinishFirstTalkByPerformanceNpcScRsp => {
                "CmdFinishFirstTalkByPerformanceNpcScRsp"
            }
            Self::CmdTakeTalkRewardScRsp => "CmdTakeTalkRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTalkRewardTypeNone" => Some(Self::None),
            "CmdFinishFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcCsReq)
            }
            "CmdFinishFirstTalkNpcCsReq" => Some(Self::CmdFinishFirstTalkNpcCsReq),
            "CmdGetFirstTalkNpcCsReq" => Some(Self::CmdGetFirstTalkNpcCsReq),
            "CmdGetNpcTakenRewardCsReq" => Some(Self::CmdGetNpcTakenRewardCsReq),
            "CmdSelectInclinationTextScRsp" => Some(Self::CmdSelectInclinationTextScRsp),
            "CmdFinishFirstTalkNpcScRsp" => Some(Self::CmdFinishFirstTalkNpcScRsp),
            "CmdTakeTalkRewardCsReq" => Some(Self::CmdTakeTalkRewardCsReq),
            "CmdSelectInclinationTextCsReq" => Some(Self::CmdSelectInclinationTextCsReq),
            "CmdGetFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcScRsp)
            }
            "CmdGetFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcCsReq)
            }
            "CmdGetNpcTakenRewardScRsp" => Some(Self::CmdGetNpcTakenRewardScRsp),
            "CmdGetFirstTalkNpcScRsp" => Some(Self::CmdGetFirstTalkNpcScRsp),
            "CmdFinishFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcScRsp)
            }
            "CmdTakeTalkRewardScRsp" => Some(Self::CmdTakeTalkRewardScRsp),
            _ => None,
        }
    }
}
/// PLIMLICLAKA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTelevisionActivityType {
    None = 0,
    CmdGetTelevisionActivityDataCsReq = 6965,
    CmdEnterTelevisionActivityStageCsReq = 6970,
    CmdGetTelevisionActivityDataScRsp = 6968,
    CmdTelevisionActivityBattleEndScNotify = 6963,
    CmdEnterTelevisionActivityStageScRsp = 6972,
    CmdTelevisionActivityDataChangeScNotify = 6975,
}
impl CmdTelevisionActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTelevisionActivityTypeNone",
            Self::CmdGetTelevisionActivityDataCsReq => {
                "CmdGetTelevisionActivityDataCsReq"
            }
            Self::CmdEnterTelevisionActivityStageCsReq => {
                "CmdEnterTelevisionActivityStageCsReq"
            }
            Self::CmdGetTelevisionActivityDataScRsp => {
                "CmdGetTelevisionActivityDataScRsp"
            }
            Self::CmdTelevisionActivityBattleEndScNotify => {
                "CmdTelevisionActivityBattleEndScNotify"
            }
            Self::CmdEnterTelevisionActivityStageScRsp => {
                "CmdEnterTelevisionActivityStageScRsp"
            }
            Self::CmdTelevisionActivityDataChangeScNotify => {
                "CmdTelevisionActivityDataChangeScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTelevisionActivityTypeNone" => Some(Self::None),
            "CmdGetTelevisionActivityDataCsReq" => {
                Some(Self::CmdGetTelevisionActivityDataCsReq)
            }
            "CmdEnterTelevisionActivityStageCsReq" => {
                Some(Self::CmdEnterTelevisionActivityStageCsReq)
            }
            "CmdGetTelevisionActivityDataScRsp" => {
                Some(Self::CmdGetTelevisionActivityDataScRsp)
            }
            "CmdTelevisionActivityBattleEndScNotify" => {
                Some(Self::CmdTelevisionActivityBattleEndScNotify)
            }
            "CmdEnterTelevisionActivityStageScRsp" => {
                Some(Self::CmdEnterTelevisionActivityStageScRsp)
            }
            "CmdTelevisionActivityDataChangeScNotify" => {
                Some(Self::CmdTelevisionActivityDataChangeScNotify)
            }
            _ => None,
        }
    }
}
/// MONMPDIJPFM
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTextJoinType {
    None = 0,
    CmdTextJoinBatchSaveCsReq = 3839,
    CmdTextJoinBatchSaveScRsp = 3853,
    CmdTextJoinQueryCsReq = 3803,
    CmdTextJoinSaveScRsp = 3820,
    CmdTextJoinSaveCsReq = 3859,
    CmdTextJoinQueryScRsp = 3846,
}
impl CmdTextJoinType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTextJoinTypeNone",
            Self::CmdTextJoinBatchSaveCsReq => "CmdTextJoinBatchSaveCsReq",
            Self::CmdTextJoinBatchSaveScRsp => "CmdTextJoinBatchSaveScRsp",
            Self::CmdTextJoinQueryCsReq => "CmdTextJoinQueryCsReq",
            Self::CmdTextJoinSaveScRsp => "CmdTextJoinSaveScRsp",
            Self::CmdTextJoinSaveCsReq => "CmdTextJoinSaveCsReq",
            Self::CmdTextJoinQueryScRsp => "CmdTextJoinQueryScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTextJoinTypeNone" => Some(Self::None),
            "CmdTextJoinBatchSaveCsReq" => Some(Self::CmdTextJoinBatchSaveCsReq),
            "CmdTextJoinBatchSaveScRsp" => Some(Self::CmdTextJoinBatchSaveScRsp),
            "CmdTextJoinQueryCsReq" => Some(Self::CmdTextJoinQueryCsReq),
            "CmdTextJoinSaveScRsp" => Some(Self::CmdTextJoinSaveScRsp),
            "CmdTextJoinSaveCsReq" => Some(Self::CmdTextJoinSaveCsReq),
            "CmdTextJoinQueryScRsp" => Some(Self::CmdTextJoinQueryScRsp),
            _ => None,
        }
    }
}
/// OHOAGKFLOEE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrackPhotoActivityType {
    None = 0,
    CmdSettleTrackPhotoStageCsReq = 7559,
    CmdStartTrackPhotoStageScRsp = 7552,
    CmdSettleTrackPhotoStageScRsp = 7558,
    CmdQuitTrackPhotoStageScRsp = 7557,
    CmdQuitTrackPhotoStageCsReq = 7560,
    CmdGetTrackPhotoActivityDataCsReq = 7556,
    CmdGetTrackPhotoActivityDataScRsp = 7555,
    CmdStartTrackPhotoStageCsReq = 7551,
}
impl CmdTrackPhotoActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrackPhotoActivityTypeNone",
            Self::CmdSettleTrackPhotoStageCsReq => "CmdSettleTrackPhotoStageCsReq",
            Self::CmdStartTrackPhotoStageScRsp => "CmdStartTrackPhotoStageScRsp",
            Self::CmdSettleTrackPhotoStageScRsp => "CmdSettleTrackPhotoStageScRsp",
            Self::CmdQuitTrackPhotoStageScRsp => "CmdQuitTrackPhotoStageScRsp",
            Self::CmdQuitTrackPhotoStageCsReq => "CmdQuitTrackPhotoStageCsReq",
            Self::CmdGetTrackPhotoActivityDataCsReq => {
                "CmdGetTrackPhotoActivityDataCsReq"
            }
            Self::CmdGetTrackPhotoActivityDataScRsp => {
                "CmdGetTrackPhotoActivityDataScRsp"
            }
            Self::CmdStartTrackPhotoStageCsReq => "CmdStartTrackPhotoStageCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrackPhotoActivityTypeNone" => Some(Self::None),
            "CmdSettleTrackPhotoStageCsReq" => Some(Self::CmdSettleTrackPhotoStageCsReq),
            "CmdStartTrackPhotoStageScRsp" => Some(Self::CmdStartTrackPhotoStageScRsp),
            "CmdSettleTrackPhotoStageScRsp" => Some(Self::CmdSettleTrackPhotoStageScRsp),
            "CmdQuitTrackPhotoStageScRsp" => Some(Self::CmdQuitTrackPhotoStageScRsp),
            "CmdQuitTrackPhotoStageCsReq" => Some(Self::CmdQuitTrackPhotoStageCsReq),
            "CmdGetTrackPhotoActivityDataCsReq" => {
                Some(Self::CmdGetTrackPhotoActivityDataCsReq)
            }
            "CmdGetTrackPhotoActivityDataScRsp" => {
                Some(Self::CmdGetTrackPhotoActivityDataScRsp)
            }
            "CmdStartTrackPhotoStageCsReq" => Some(Self::CmdStartTrackPhotoStageCsReq),
            _ => None,
        }
    }
}
/// JPMIJMHGBNC
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainPartyType {
    None = 0,
    CmdTrainPartyBuildDiyCsReq = 8048,
    CmdTrainPartyMoveScNotify = 8039,
    CmdTrainPartyBuildStartStepCsReq = 8030,
    CmdTrainPartyGamePlaySettleNotify = 8064,
    CmdTrainPartyEnterScRsp = 8025,
    CmdTrainPartyBuildStartStepScRsp = 8075,
    CmdTrainPartyBuildingUpdateNotify = 8079,
    CmdTrainPartyGamePlayStartCsReq = 8009,
    CmdTrainPartyGamePlayStartScRsp = 8093,
    CmdTrainPartyBuildDiyScRsp = 8090,
    CmdTrainPartyGetDataCsReq = 8059,
    CmdTrainPartySyncUpdateScNotify = 8080,
    CmdTrainPartyTakeBuildLevelAwardCsReq = 8036,
    CmdTrainPartyLeaveCsReq = 8029,
    CmdTrainPartyHandlePendingActionScRsp = 8074,
    CmdTrainPartyLeaveScRsp = 8033,
    CmdTrainPartyAddBuildDynamicBuffCsReq = 8026,
    CmdTrainPartyEnterCsReq = 8061,
    CmdTrainPartyUnlockBuildAreaScRsp = 8099,
    CmdTrainPartyUseCardScRsp = 8046,
    CmdTrainPartyUseCardCsReq = 8003,
    CmdTrainPartyHandlePendingActionCsReq = 8047,
    CmdTrainPartyTakeBuildLevelAwardScRsp = 8065,
    CmdTrainPartyAddBuildDynamicBuffScRsp = 8013,
    CmdTrainPartyUnlockBuildAreaCsReq = 8083,
    CmdTrainPartyUpdatePosEnvCsReq = 8010,
    CmdTrainPartyUpdatePosEnvScRsp = 8070,
    CmdTrainPartyGetDataScRsp = 8020,
    CmdTrainPartySettleNotify = 8034,
}
impl CmdTrainPartyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainPartyTypeNone",
            Self::CmdTrainPartyBuildDiyCsReq => "CmdTrainPartyBuildDiyCsReq",
            Self::CmdTrainPartyMoveScNotify => "CmdTrainPartyMoveScNotify",
            Self::CmdTrainPartyBuildStartStepCsReq => "CmdTrainPartyBuildStartStepCsReq",
            Self::CmdTrainPartyGamePlaySettleNotify => {
                "CmdTrainPartyGamePlaySettleNotify"
            }
            Self::CmdTrainPartyEnterScRsp => "CmdTrainPartyEnterScRsp",
            Self::CmdTrainPartyBuildStartStepScRsp => "CmdTrainPartyBuildStartStepScRsp",
            Self::CmdTrainPartyBuildingUpdateNotify => {
                "CmdTrainPartyBuildingUpdateNotify"
            }
            Self::CmdTrainPartyGamePlayStartCsReq => "CmdTrainPartyGamePlayStartCsReq",
            Self::CmdTrainPartyGamePlayStartScRsp => "CmdTrainPartyGamePlayStartScRsp",
            Self::CmdTrainPartyBuildDiyScRsp => "CmdTrainPartyBuildDiyScRsp",
            Self::CmdTrainPartyGetDataCsReq => "CmdTrainPartyGetDataCsReq",
            Self::CmdTrainPartySyncUpdateScNotify => "CmdTrainPartySyncUpdateScNotify",
            Self::CmdTrainPartyTakeBuildLevelAwardCsReq => {
                "CmdTrainPartyTakeBuildLevelAwardCsReq"
            }
            Self::CmdTrainPartyLeaveCsReq => "CmdTrainPartyLeaveCsReq",
            Self::CmdTrainPartyHandlePendingActionScRsp => {
                "CmdTrainPartyHandlePendingActionScRsp"
            }
            Self::CmdTrainPartyLeaveScRsp => "CmdTrainPartyLeaveScRsp",
            Self::CmdTrainPartyAddBuildDynamicBuffCsReq => {
                "CmdTrainPartyAddBuildDynamicBuffCsReq"
            }
            Self::CmdTrainPartyEnterCsReq => "CmdTrainPartyEnterCsReq",
            Self::CmdTrainPartyUnlockBuildAreaScRsp => {
                "CmdTrainPartyUnlockBuildAreaScRsp"
            }
            Self::CmdTrainPartyUseCardScRsp => "CmdTrainPartyUseCardScRsp",
            Self::CmdTrainPartyUseCardCsReq => "CmdTrainPartyUseCardCsReq",
            Self::CmdTrainPartyHandlePendingActionCsReq => {
                "CmdTrainPartyHandlePendingActionCsReq"
            }
            Self::CmdTrainPartyTakeBuildLevelAwardScRsp => {
                "CmdTrainPartyTakeBuildLevelAwardScRsp"
            }
            Self::CmdTrainPartyAddBuildDynamicBuffScRsp => {
                "CmdTrainPartyAddBuildDynamicBuffScRsp"
            }
            Self::CmdTrainPartyUnlockBuildAreaCsReq => {
                "CmdTrainPartyUnlockBuildAreaCsReq"
            }
            Self::CmdTrainPartyUpdatePosEnvCsReq => "CmdTrainPartyUpdatePosEnvCsReq",
            Self::CmdTrainPartyUpdatePosEnvScRsp => "CmdTrainPartyUpdatePosEnvScRsp",
            Self::CmdTrainPartyGetDataScRsp => "CmdTrainPartyGetDataScRsp",
            Self::CmdTrainPartySettleNotify => "CmdTrainPartySettleNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainPartyTypeNone" => Some(Self::None),
            "CmdTrainPartyBuildDiyCsReq" => Some(Self::CmdTrainPartyBuildDiyCsReq),
            "CmdTrainPartyMoveScNotify" => Some(Self::CmdTrainPartyMoveScNotify),
            "CmdTrainPartyBuildStartStepCsReq" => {
                Some(Self::CmdTrainPartyBuildStartStepCsReq)
            }
            "CmdTrainPartyGamePlaySettleNotify" => {
                Some(Self::CmdTrainPartyGamePlaySettleNotify)
            }
            "CmdTrainPartyEnterScRsp" => Some(Self::CmdTrainPartyEnterScRsp),
            "CmdTrainPartyBuildStartStepScRsp" => {
                Some(Self::CmdTrainPartyBuildStartStepScRsp)
            }
            "CmdTrainPartyBuildingUpdateNotify" => {
                Some(Self::CmdTrainPartyBuildingUpdateNotify)
            }
            "CmdTrainPartyGamePlayStartCsReq" => {
                Some(Self::CmdTrainPartyGamePlayStartCsReq)
            }
            "CmdTrainPartyGamePlayStartScRsp" => {
                Some(Self::CmdTrainPartyGamePlayStartScRsp)
            }
            "CmdTrainPartyBuildDiyScRsp" => Some(Self::CmdTrainPartyBuildDiyScRsp),
            "CmdTrainPartyGetDataCsReq" => Some(Self::CmdTrainPartyGetDataCsReq),
            "CmdTrainPartySyncUpdateScNotify" => {
                Some(Self::CmdTrainPartySyncUpdateScNotify)
            }
            "CmdTrainPartyTakeBuildLevelAwardCsReq" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardCsReq)
            }
            "CmdTrainPartyLeaveCsReq" => Some(Self::CmdTrainPartyLeaveCsReq),
            "CmdTrainPartyHandlePendingActionScRsp" => {
                Some(Self::CmdTrainPartyHandlePendingActionScRsp)
            }
            "CmdTrainPartyLeaveScRsp" => Some(Self::CmdTrainPartyLeaveScRsp),
            "CmdTrainPartyAddBuildDynamicBuffCsReq" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffCsReq)
            }
            "CmdTrainPartyEnterCsReq" => Some(Self::CmdTrainPartyEnterCsReq),
            "CmdTrainPartyUnlockBuildAreaScRsp" => {
                Some(Self::CmdTrainPartyUnlockBuildAreaScRsp)
            }
            "CmdTrainPartyUseCardScRsp" => Some(Self::CmdTrainPartyUseCardScRsp),
            "CmdTrainPartyUseCardCsReq" => Some(Self::CmdTrainPartyUseCardCsReq),
            "CmdTrainPartyHandlePendingActionCsReq" => {
                Some(Self::CmdTrainPartyHandlePendingActionCsReq)
            }
            "CmdTrainPartyTakeBuildLevelAwardScRsp" => {
                Some(Self::CmdTrainPartyTakeBuildLevelAwardScRsp)
            }
            "CmdTrainPartyAddBuildDynamicBuffScRsp" => {
                Some(Self::CmdTrainPartyAddBuildDynamicBuffScRsp)
            }
            "CmdTrainPartyUnlockBuildAreaCsReq" => {
                Some(Self::CmdTrainPartyUnlockBuildAreaCsReq)
            }
            "CmdTrainPartyUpdatePosEnvCsReq" => {
                Some(Self::CmdTrainPartyUpdatePosEnvCsReq)
            }
            "CmdTrainPartyUpdatePosEnvScRsp" => {
                Some(Self::CmdTrainPartyUpdatePosEnvScRsp)
            }
            "CmdTrainPartyGetDataScRsp" => Some(Self::CmdTrainPartyGetDataScRsp),
            "CmdTrainPartySettleNotify" => Some(Self::CmdTrainPartySettleNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Afgefpehkke {
    BuildGoalStepNone = 0,
    BuildGoalStepIdle = 1,
    BuildGoalStepStart = 2,
    BuildGoalStepFinish = 3,
}
impl Afgefpehkke {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BuildGoalStepNone => "BuildGoalStepNone",
            Self::BuildGoalStepIdle => "BuildGoalStepIdle",
            Self::BuildGoalStepStart => "BuildGoalStepStart",
            Self::BuildGoalStepFinish => "BuildGoalStepFinish",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BuildGoalStepNone" => Some(Self::BuildGoalStepNone),
            "BuildGoalStepIdle" => Some(Self::BuildGoalStepIdle),
            "BuildGoalStepStart" => Some(Self::BuildGoalStepStart),
            "BuildGoalStepFinish" => Some(Self::BuildGoalStepFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hnhgkghjlgp {
    KTrainPartySrcNone = 0,
    KTrainPartySrcCard = 1,
    KTrainPartySrcGrid = 2,
    KTrainPartySrcPam = 3,
    KTrainPartySrcPassenger = 4,
    KTrainPartySrcBuilding = 5,
}
impl Hnhgkghjlgp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KTrainPartySrcNone => "kTrainPartySrcNone",
            Self::KTrainPartySrcCard => "kTrainPartySrcCard",
            Self::KTrainPartySrcGrid => "kTrainPartySrcGrid",
            Self::KTrainPartySrcPam => "kTrainPartySrcPam",
            Self::KTrainPartySrcPassenger => "kTrainPartySrcPassenger",
            Self::KTrainPartySrcBuilding => "kTrainPartySrcBuilding",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kTrainPartySrcNone" => Some(Self::KTrainPartySrcNone),
            "kTrainPartySrcCard" => Some(Self::KTrainPartySrcCard),
            "kTrainPartySrcGrid" => Some(Self::KTrainPartySrcGrid),
            "kTrainPartySrcPam" => Some(Self::KTrainPartySrcPam),
            "kTrainPartySrcPassenger" => Some(Self::KTrainPartySrcPassenger),
            "kTrainPartySrcBuilding" => Some(Self::KTrainPartySrcBuilding),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ejlfeabggid {
    KDialogueEventNone = 0,
    KGamePlayStartDialogueEvent = 1,
    KGridDialogueEvent = 2,
    KAfterMeetingDialogueEvent = 3,
}
impl Ejlfeabggid {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KDialogueEventNone => "kDialogueEventNone",
            Self::KGamePlayStartDialogueEvent => "kGamePlayStartDialogueEvent",
            Self::KGridDialogueEvent => "kGridDialogueEvent",
            Self::KAfterMeetingDialogueEvent => "kAfterMeetingDialogueEvent",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kDialogueEventNone" => Some(Self::KDialogueEventNone),
            "kGamePlayStartDialogueEvent" => Some(Self::KGamePlayStartDialogueEvent),
            "kGridDialogueEvent" => Some(Self::KGridDialogueEvent),
            "kAfterMeetingDialogueEvent" => Some(Self::KAfterMeetingDialogueEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ahhbighekmi {
    KMtSkillNone = 0,
    KMtSkillModifyBase = 1,
    KMtSkillModifyRatio = 2,
    KMtSkillMultiplyRatio = 3,
    KMtSkillSelfDestroy = 4,
}
impl Ahhbighekmi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::KMtSkillNone => "kMtSkillNone",
            Self::KMtSkillModifyBase => "kMtSkillModifyBase",
            Self::KMtSkillModifyRatio => "kMtSkillModifyRatio",
            Self::KMtSkillMultiplyRatio => "kMtSkillMultiplyRatio",
            Self::KMtSkillSelfDestroy => "kMtSkillSelfDestroy",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "kMtSkillNone" => Some(Self::KMtSkillNone),
            "kMtSkillModifyBase" => Some(Self::KMtSkillModifyBase),
            "kMtSkillModifyRatio" => Some(Self::KMtSkillModifyRatio),
            "kMtSkillMultiplyRatio" => Some(Self::KMtSkillMultiplyRatio),
            "kMtSkillSelfDestroy" => Some(Self::KMtSkillSelfDestroy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hocjjlocehn {
    TrainPartyMtCategoryNone = 0,
    TrainPartyMtCategoryS = 1,
    TrainPartyMtCategoryA = 2,
    TrainPartyMtCategoryB = 3,
    TrainPartyMtCategoryC = 4,
    TrainPartyMtCategoryD = 5,
    TrainPartyMtCategoryE = 6,
    TrainPartyMtCategoryF = 7,
    TrainPartyMtCategoryG = 8,
}
impl Hocjjlocehn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainPartyMtCategoryNone => "TRAIN_PARTY_MT_CATEGORY_NONE",
            Self::TrainPartyMtCategoryS => "TRAIN_PARTY_MT_CATEGORY_S",
            Self::TrainPartyMtCategoryA => "TRAIN_PARTY_MT_CATEGORY_A",
            Self::TrainPartyMtCategoryB => "TRAIN_PARTY_MT_CATEGORY_B",
            Self::TrainPartyMtCategoryC => "TRAIN_PARTY_MT_CATEGORY_C",
            Self::TrainPartyMtCategoryD => "TRAIN_PARTY_MT_CATEGORY_D",
            Self::TrainPartyMtCategoryE => "TRAIN_PARTY_MT_CATEGORY_E",
            Self::TrainPartyMtCategoryF => "TRAIN_PARTY_MT_CATEGORY_F",
            Self::TrainPartyMtCategoryG => "TRAIN_PARTY_MT_CATEGORY_G",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_PARTY_MT_CATEGORY_NONE" => Some(Self::TrainPartyMtCategoryNone),
            "TRAIN_PARTY_MT_CATEGORY_S" => Some(Self::TrainPartyMtCategoryS),
            "TRAIN_PARTY_MT_CATEGORY_A" => Some(Self::TrainPartyMtCategoryA),
            "TRAIN_PARTY_MT_CATEGORY_B" => Some(Self::TrainPartyMtCategoryB),
            "TRAIN_PARTY_MT_CATEGORY_C" => Some(Self::TrainPartyMtCategoryC),
            "TRAIN_PARTY_MT_CATEGORY_D" => Some(Self::TrainPartyMtCategoryD),
            "TRAIN_PARTY_MT_CATEGORY_E" => Some(Self::TrainPartyMtCategoryE),
            "TRAIN_PARTY_MT_CATEGORY_F" => Some(Self::TrainPartyMtCategoryF),
            "TRAIN_PARTY_MT_CATEGORY_G" => Some(Self::TrainPartyMtCategoryG),
            _ => None,
        }
    }
}
/// PAPMFLAILKA
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTrainVisitorType {
    None = 0,
    CmdShowNewSupplementVisitorScRsp = 3774,
    CmdTrainVisitorBehaviorFinishScRsp = 3720,
    CmdGetTrainVisitorRegisterCsReq = 3734,
    CmdTrainVisitorBehaviorFinishCsReq = 3759,
    CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3780,
    CmdGetTrainVisitorRegisterScRsp = 3737,
    CmdTrainVisitorRewardSendNotify = 3753,
    CmdTrainRefreshTimeNotify = 3739,
    CmdGetTrainVisitorBehaviorScRsp = 3746,
    CmdGetTrainVisitorBehaviorCsReq = 3703,
    CmdShowNewSupplementVisitorCsReq = 3747,
    CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3716,
}
impl CmdTrainVisitorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTrainVisitorTypeNone",
            Self::CmdShowNewSupplementVisitorScRsp => "CmdShowNewSupplementVisitorScRsp",
            Self::CmdTrainVisitorBehaviorFinishScRsp => {
                "CmdTrainVisitorBehaviorFinishScRsp"
            }
            Self::CmdGetTrainVisitorRegisterCsReq => "CmdGetTrainVisitorRegisterCsReq",
            Self::CmdTrainVisitorBehaviorFinishCsReq => {
                "CmdTrainVisitorBehaviorFinishCsReq"
            }
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq"
            }
            Self::CmdGetTrainVisitorRegisterScRsp => "CmdGetTrainVisitorRegisterScRsp",
            Self::CmdTrainVisitorRewardSendNotify => "CmdTrainVisitorRewardSendNotify",
            Self::CmdTrainRefreshTimeNotify => "CmdTrainRefreshTimeNotify",
            Self::CmdGetTrainVisitorBehaviorScRsp => "CmdGetTrainVisitorBehaviorScRsp",
            Self::CmdGetTrainVisitorBehaviorCsReq => "CmdGetTrainVisitorBehaviorCsReq",
            Self::CmdShowNewSupplementVisitorCsReq => "CmdShowNewSupplementVisitorCsReq",
            Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainVisitorTypeNone" => Some(Self::None),
            "CmdShowNewSupplementVisitorScRsp" => {
                Some(Self::CmdShowNewSupplementVisitorScRsp)
            }
            "CmdTrainVisitorBehaviorFinishScRsp" => {
                Some(Self::CmdTrainVisitorBehaviorFinishScRsp)
            }
            "CmdGetTrainVisitorRegisterCsReq" => {
                Some(Self::CmdGetTrainVisitorRegisterCsReq)
            }
            "CmdTrainVisitorBehaviorFinishCsReq" => {
                Some(Self::CmdTrainVisitorBehaviorFinishCsReq)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq)
            }
            "CmdGetTrainVisitorRegisterScRsp" => {
                Some(Self::CmdGetTrainVisitorRegisterScRsp)
            }
            "CmdTrainVisitorRewardSendNotify" => {
                Some(Self::CmdTrainVisitorRewardSendNotify)
            }
            "CmdTrainRefreshTimeNotify" => Some(Self::CmdTrainRefreshTimeNotify),
            "CmdGetTrainVisitorBehaviorScRsp" => {
                Some(Self::CmdGetTrainVisitorBehaviorScRsp)
            }
            "CmdGetTrainVisitorBehaviorCsReq" => {
                Some(Self::CmdGetTrainVisitorBehaviorCsReq)
            }
            "CmdShowNewSupplementVisitorCsReq" => {
                Some(Self::CmdShowNewSupplementVisitorCsReq)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kgkhooemong {
    TrainVisitorRewardSendNone = 0,
    TrainVisitorRewardSendRegister = 1,
    TrainVisitorRewardSendMission = 2,
}
impl Kgkhooemong {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRewardSendNone => "TRAIN_VISITOR_REWARD_SEND_NONE",
            Self::TrainVisitorRewardSendRegister => "TRAIN_VISITOR_REWARD_SEND_REGISTER",
            Self::TrainVisitorRewardSendMission => "TRAIN_VISITOR_REWARD_SEND_MISSION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REWARD_SEND_NONE" => Some(Self::TrainVisitorRewardSendNone),
            "TRAIN_VISITOR_REWARD_SEND_REGISTER" => {
                Some(Self::TrainVisitorRewardSendRegister)
            }
            "TRAIN_VISITOR_REWARD_SEND_MISSION" => {
                Some(Self::TrainVisitorRewardSendMission)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Njidiopgohm {
    TrainVisitorStatusNone = 0,
    TrainVisitorStatusInit = 1,
    TrainVisitorStatusGetOn = 2,
    TrainVisitorStatusGetOff = 3,
}
impl Njidiopgohm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorStatusNone => "TRAIN_VISITOR_STATUS_NONE",
            Self::TrainVisitorStatusInit => "TRAIN_VISITOR_STATUS_INIT",
            Self::TrainVisitorStatusGetOn => "TRAIN_VISITOR_STATUS_GET_ON",
            Self::TrainVisitorStatusGetOff => "TRAIN_VISITOR_STATUS_GET_OFF",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_STATUS_NONE" => Some(Self::TrainVisitorStatusNone),
            "TRAIN_VISITOR_STATUS_INIT" => Some(Self::TrainVisitorStatusInit),
            "TRAIN_VISITOR_STATUS_GET_ON" => Some(Self::TrainVisitorStatusGetOn),
            "TRAIN_VISITOR_STATUS_GET_OFF" => Some(Self::TrainVisitorStatusGetOff),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bicoakmamik {
    TrainVisitorRegisterGetTypeNone = 0,
    TrainVisitorRegisterGetTypeAuto = 1,
    TrainVisitorRegisterGetTypeManual = 2,
}
impl Bicoakmamik {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TrainVisitorRegisterGetTypeNone => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE"
            }
            Self::TrainVisitorRegisterGetTypeAuto => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO"
            }
            Self::TrainVisitorRegisterGetTypeManual => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE" => {
                Some(Self::TrainVisitorRegisterGetTypeNone)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO" => {
                Some(Self::TrainVisitorRegisterGetTypeAuto)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL" => {
                Some(Self::TrainVisitorRegisterGetTypeManual)
            }
            _ => None,
        }
    }
}
/// AGAKPONCBBE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTravelBrochure {
    None = 0,
    PageResetScRsp = 6425,
    ApplyPasterListScRsp = 6433,
    SetCustomValueCsReq = 6448,
    ApplyPasterCsReq = 6434,
    UpdatePasterPosCsReq = 6447,
    SelectMessageScRsp = 6453,
    RemovePasterScRsp = 6416,
    GetPasterScNotify = 6430,
    UpdatePasterPosScRsp = 6474,
    GetDataCsReq = 6459,
    SelectMessageCsReq = 6439,
    ApplyPasterListCsReq = 6429,
    SetCustomValueScRsp = 6490,
    PageResetCsReq = 6461,
    RemovePasterCsReq = 6480,
    GetDataScRsp = 6420,
    SetPageDescStatusCsReq = 6479,
    PageUnlockScNotify = 6403,
    SetPageDescStatusScRsp = 6419,
    ApplyPasterScRsp = 6437,
}
impl CmdTravelBrochure {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTravelBrochureNone",
            Self::PageResetScRsp => "CmdTravelBrochurePageResetScRsp",
            Self::ApplyPasterListScRsp => "CmdTravelBrochureApplyPasterListScRsp",
            Self::SetCustomValueCsReq => "CmdTravelBrochureSetCustomValueCsReq",
            Self::ApplyPasterCsReq => "CmdTravelBrochureApplyPasterCsReq",
            Self::UpdatePasterPosCsReq => "CmdTravelBrochureUpdatePasterPosCsReq",
            Self::SelectMessageScRsp => "CmdTravelBrochureSelectMessageScRsp",
            Self::RemovePasterScRsp => "CmdTravelBrochureRemovePasterScRsp",
            Self::GetPasterScNotify => "CmdTravelBrochureGetPasterScNotify",
            Self::UpdatePasterPosScRsp => "CmdTravelBrochureUpdatePasterPosScRsp",
            Self::GetDataCsReq => "CmdTravelBrochureGetDataCsReq",
            Self::SelectMessageCsReq => "CmdTravelBrochureSelectMessageCsReq",
            Self::ApplyPasterListCsReq => "CmdTravelBrochureApplyPasterListCsReq",
            Self::SetCustomValueScRsp => "CmdTravelBrochureSetCustomValueScRsp",
            Self::PageResetCsReq => "CmdTravelBrochurePageResetCsReq",
            Self::RemovePasterCsReq => "CmdTravelBrochureRemovePasterCsReq",
            Self::GetDataScRsp => "CmdTravelBrochureGetDataScRsp",
            Self::SetPageDescStatusCsReq => "CmdTravelBrochureSetPageDescStatusCsReq",
            Self::PageUnlockScNotify => "CmdTravelBrochurePageUnlockScNotify",
            Self::SetPageDescStatusScRsp => "CmdTravelBrochureSetPageDescStatusScRsp",
            Self::ApplyPasterScRsp => "CmdTravelBrochureApplyPasterScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTravelBrochureNone" => Some(Self::None),
            "CmdTravelBrochurePageResetScRsp" => Some(Self::PageResetScRsp),
            "CmdTravelBrochureApplyPasterListScRsp" => Some(Self::ApplyPasterListScRsp),
            "CmdTravelBrochureSetCustomValueCsReq" => Some(Self::SetCustomValueCsReq),
            "CmdTravelBrochureApplyPasterCsReq" => Some(Self::ApplyPasterCsReq),
            "CmdTravelBrochureUpdatePasterPosCsReq" => Some(Self::UpdatePasterPosCsReq),
            "CmdTravelBrochureSelectMessageScRsp" => Some(Self::SelectMessageScRsp),
            "CmdTravelBrochureRemovePasterScRsp" => Some(Self::RemovePasterScRsp),
            "CmdTravelBrochureGetPasterScNotify" => Some(Self::GetPasterScNotify),
            "CmdTravelBrochureUpdatePasterPosScRsp" => Some(Self::UpdatePasterPosScRsp),
            "CmdTravelBrochureGetDataCsReq" => Some(Self::GetDataCsReq),
            "CmdTravelBrochureSelectMessageCsReq" => Some(Self::SelectMessageCsReq),
            "CmdTravelBrochureApplyPasterListCsReq" => Some(Self::ApplyPasterListCsReq),
            "CmdTravelBrochureSetCustomValueScRsp" => Some(Self::SetCustomValueScRsp),
            "CmdTravelBrochurePageResetCsReq" => Some(Self::PageResetCsReq),
            "CmdTravelBrochureRemovePasterCsReq" => Some(Self::RemovePasterCsReq),
            "CmdTravelBrochureGetDataScRsp" => Some(Self::GetDataScRsp),
            "CmdTravelBrochureSetPageDescStatusCsReq" => {
                Some(Self::SetPageDescStatusCsReq)
            }
            "CmdTravelBrochurePageUnlockScNotify" => Some(Self::PageUnlockScNotify),
            "CmdTravelBrochureSetPageDescStatusScRsp" => {
                Some(Self::SetPageDescStatusScRsp)
            }
            "CmdTravelBrochureApplyPasterScRsp" => Some(Self::ApplyPasterScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bbikdnakpoi {
    PageNone = 0,
    PageUnlocked = 1,
    PageInteracted = 2,
}
impl Bbikdnakpoi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageNone => "PAGE_NONE",
            Self::PageUnlocked => "PAGE_UNLOCKED",
            Self::PageInteracted => "PAGE_INTERACTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_NONE" => Some(Self::PageNone),
            "PAGE_UNLOCKED" => Some(Self::PageUnlocked),
            "PAGE_INTERACTED" => Some(Self::PageInteracted),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aemfkjfclab {
    PageDescNone = 0,
    PageDescShowDetail = 1,
    PageDescCollapse = 2,
}
impl Aemfkjfclab {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PageDescNone => "PAGE_DESC_NONE",
            Self::PageDescShowDetail => "PAGE_DESC_SHOW_DETAIL",
            Self::PageDescCollapse => "PAGE_DESC_COLLAPSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_DESC_NONE" => Some(Self::PageDescNone),
            "PAGE_DESC_SHOW_DETAIL" => Some(Self::PageDescShowDetail),
            "PAGE_DESC_COLLAPSE" => Some(Self::PageDescCollapse),
            _ => None,
        }
    }
}
/// GDLGLGDHNGK
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTreasureDungeonType {
    None = 0,
    CmdOpenTreasureDungeonGridCsReq = 4448,
    CmdTreasureDungeonDataScNotify = 4459,
    CmdUseTreasureDungeonItemScRsp = 4433,
    CmdGetTreasureDungeonActivityDataScRsp = 4474,
    CmdQuitTreasureDungeonScRsp = 4473,
    CmdGetTreasureDungeonActivityDataCsReq = 4447,
    CmdEnterTreasureDungeonCsReq = 4430,
    CmdFightTreasureDungeonMonsterCsReq = 4479,
    CmdTreasureDungeonFinishScNotify = 4420,
    CmdEnterTreasureDungeonScRsp = 4475,
    CmdFightTreasureDungeonMonsterScRsp = 4419,
    CmdOpenTreasureDungeonGridScRsp = 4490,
    CmdInteractTreasureDungeonGridScRsp = 4425,
    CmdInteractTreasureDungeonGridCsReq = 4461,
    CmdQuitTreasureDungeonCsReq = 4451,
    CmdUseTreasureDungeonItemCsReq = 4429,
}
impl CmdTreasureDungeonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTreasureDungeonTypeNone",
            Self::CmdOpenTreasureDungeonGridCsReq => "CmdOpenTreasureDungeonGridCsReq",
            Self::CmdTreasureDungeonDataScNotify => "CmdTreasureDungeonDataScNotify",
            Self::CmdUseTreasureDungeonItemScRsp => "CmdUseTreasureDungeonItemScRsp",
            Self::CmdGetTreasureDungeonActivityDataScRsp => {
                "CmdGetTreasureDungeonActivityDataScRsp"
            }
            Self::CmdQuitTreasureDungeonScRsp => "CmdQuitTreasureDungeonScRsp",
            Self::CmdGetTreasureDungeonActivityDataCsReq => {
                "CmdGetTreasureDungeonActivityDataCsReq"
            }
            Self::CmdEnterTreasureDungeonCsReq => "CmdEnterTreasureDungeonCsReq",
            Self::CmdFightTreasureDungeonMonsterCsReq => {
                "CmdFightTreasureDungeonMonsterCsReq"
            }
            Self::CmdTreasureDungeonFinishScNotify => "CmdTreasureDungeonFinishScNotify",
            Self::CmdEnterTreasureDungeonScRsp => "CmdEnterTreasureDungeonScRsp",
            Self::CmdFightTreasureDungeonMonsterScRsp => {
                "CmdFightTreasureDungeonMonsterScRsp"
            }
            Self::CmdOpenTreasureDungeonGridScRsp => "CmdOpenTreasureDungeonGridScRsp",
            Self::CmdInteractTreasureDungeonGridScRsp => {
                "CmdInteractTreasureDungeonGridScRsp"
            }
            Self::CmdInteractTreasureDungeonGridCsReq => {
                "CmdInteractTreasureDungeonGridCsReq"
            }
            Self::CmdQuitTreasureDungeonCsReq => "CmdQuitTreasureDungeonCsReq",
            Self::CmdUseTreasureDungeonItemCsReq => "CmdUseTreasureDungeonItemCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTreasureDungeonTypeNone" => Some(Self::None),
            "CmdOpenTreasureDungeonGridCsReq" => {
                Some(Self::CmdOpenTreasureDungeonGridCsReq)
            }
            "CmdTreasureDungeonDataScNotify" => {
                Some(Self::CmdTreasureDungeonDataScNotify)
            }
            "CmdUseTreasureDungeonItemScRsp" => {
                Some(Self::CmdUseTreasureDungeonItemScRsp)
            }
            "CmdGetTreasureDungeonActivityDataScRsp" => {
                Some(Self::CmdGetTreasureDungeonActivityDataScRsp)
            }
            "CmdQuitTreasureDungeonScRsp" => Some(Self::CmdQuitTreasureDungeonScRsp),
            "CmdGetTreasureDungeonActivityDataCsReq" => {
                Some(Self::CmdGetTreasureDungeonActivityDataCsReq)
            }
            "CmdEnterTreasureDungeonCsReq" => Some(Self::CmdEnterTreasureDungeonCsReq),
            "CmdFightTreasureDungeonMonsterCsReq" => {
                Some(Self::CmdFightTreasureDungeonMonsterCsReq)
            }
            "CmdTreasureDungeonFinishScNotify" => {
                Some(Self::CmdTreasureDungeonFinishScNotify)
            }
            "CmdEnterTreasureDungeonScRsp" => Some(Self::CmdEnterTreasureDungeonScRsp),
            "CmdFightTreasureDungeonMonsterScRsp" => {
                Some(Self::CmdFightTreasureDungeonMonsterScRsp)
            }
            "CmdOpenTreasureDungeonGridScRsp" => {
                Some(Self::CmdOpenTreasureDungeonGridScRsp)
            }
            "CmdInteractTreasureDungeonGridScRsp" => {
                Some(Self::CmdInteractTreasureDungeonGridScRsp)
            }
            "CmdInteractTreasureDungeonGridCsReq" => {
                Some(Self::CmdInteractTreasureDungeonGridCsReq)
            }
            "CmdQuitTreasureDungeonCsReq" => Some(Self::CmdQuitTreasureDungeonCsReq),
            "CmdUseTreasureDungeonItemCsReq" => {
                Some(Self::CmdUseTreasureDungeonItemCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Habjkjofgpi {
    TreasureDungeonRecordNone = 0,
    TreasureDungeonRecordAddHp = 1,
    TreasureDungeonRecordSubHp = 2,
    TreasureDungeonRecordSubHpNoExplore = 3,
    TreasureDungeonRecordAddAttack = 5,
    TreasureDungeonRecordAddDefence = 6,
    TreasureDungeonRecordAddExplore = 9,
    TreasureDungeonRecordSubExplore = 10,
    TreasureDungeonRecordAddExploreOverflow = 11,
    TreasureDungeonRecordSummon = 15,
    TreasureDungeonRecordKill = 16,
    TreasureDungeonRecordAddTrialAvatar = 20,
    TreasureDungeonRecordAddBuff = 24,
    TreasureDungeonRecordUnlockDoor = 25,
    TreasureDungeonRecordEnemyEnhance = 27,
    TreasureDungeonRecordEnemyWeaken = 28,
    TreasureDungeonRecordEnemyAuraRemove = 29,
    TreasureDungeonRecordSpecialMonsterRun = 30,
    TreasureDungeonRecordSpecialMonsterKill = 31,
    TreasureDungeonRecordBattleBuffTriggerSuccess = 33,
    TreasureDungeonRecordBattleBuffTriggerFail = 34,
    TreasureDungeonRecordBattleBuffAddExplore = 35,
    TreasureDungeonRecordBattleBuffOpenGrid = 36,
    TreasureDungeonRecordBattleBuffAddItem = 37,
    TreasureDungeonRecordAvatarDead = 40,
    TreasureDungeonRecordTrialAvatarDead = 41,
    TreasureDungeonRecordAllAvatarDead = 42,
    TreasureDungeonRecordOpenItemChest = 43,
}
impl Habjkjofgpi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TreasureDungeonRecordNone => "TREASURE_DUNGEON_RECORD_NONE",
            Self::TreasureDungeonRecordAddHp => "TREASURE_DUNGEON_RECORD_ADD_HP",
            Self::TreasureDungeonRecordSubHp => "TREASURE_DUNGEON_RECORD_SUB_HP",
            Self::TreasureDungeonRecordSubHpNoExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE"
            }
            Self::TreasureDungeonRecordAddAttack => "TREASURE_DUNGEON_RECORD_ADD_ATTACK",
            Self::TreasureDungeonRecordAddDefence => {
                "TREASURE_DUNGEON_RECORD_ADD_DEFENCE"
            }
            Self::TreasureDungeonRecordAddExplore => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordSubExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_EXPLORE"
            }
            Self::TreasureDungeonRecordAddExploreOverflow => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW"
            }
            Self::TreasureDungeonRecordSummon => "TREASURE_DUNGEON_RECORD_SUMMON",
            Self::TreasureDungeonRecordKill => "TREASURE_DUNGEON_RECORD_KILL",
            Self::TreasureDungeonRecordAddTrialAvatar => {
                "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR"
            }
            Self::TreasureDungeonRecordAddBuff => "TREASURE_DUNGEON_RECORD_ADD_BUFF",
            Self::TreasureDungeonRecordUnlockDoor => {
                "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR"
            }
            Self::TreasureDungeonRecordEnemyEnhance => {
                "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE"
            }
            Self::TreasureDungeonRecordEnemyWeaken => {
                "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN"
            }
            Self::TreasureDungeonRecordEnemyAuraRemove => {
                "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE"
            }
            Self::TreasureDungeonRecordSpecialMonsterRun => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN"
            }
            Self::TreasureDungeonRecordSpecialMonsterKill => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerSuccess => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS"
            }
            Self::TreasureDungeonRecordBattleBuffTriggerFail => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL"
            }
            Self::TreasureDungeonRecordBattleBuffAddExplore => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE"
            }
            Self::TreasureDungeonRecordBattleBuffOpenGrid => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID"
            }
            Self::TreasureDungeonRecordBattleBuffAddItem => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM"
            }
            Self::TreasureDungeonRecordAvatarDead => {
                "TREASURE_DUNGEON_RECORD_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordTrialAvatarDead => {
                "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordAllAvatarDead => {
                "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD"
            }
            Self::TreasureDungeonRecordOpenItemChest => {
                "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TREASURE_DUNGEON_RECORD_NONE" => Some(Self::TreasureDungeonRecordNone),
            "TREASURE_DUNGEON_RECORD_ADD_HP" => Some(Self::TreasureDungeonRecordAddHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP" => Some(Self::TreasureDungeonRecordSubHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubHpNoExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_ATTACK" => {
                Some(Self::TreasureDungeonRecordAddAttack)
            }
            "TREASURE_DUNGEON_RECORD_ADD_DEFENCE" => {
                Some(Self::TreasureDungeonRecordAddDefence)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_SUB_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW" => {
                Some(Self::TreasureDungeonRecordAddExploreOverflow)
            }
            "TREASURE_DUNGEON_RECORD_SUMMON" => Some(Self::TreasureDungeonRecordSummon),
            "TREASURE_DUNGEON_RECORD_KILL" => Some(Self::TreasureDungeonRecordKill),
            "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR" => {
                Some(Self::TreasureDungeonRecordAddTrialAvatar)
            }
            "TREASURE_DUNGEON_RECORD_ADD_BUFF" => {
                Some(Self::TreasureDungeonRecordAddBuff)
            }
            "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR" => {
                Some(Self::TreasureDungeonRecordUnlockDoor)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE" => {
                Some(Self::TreasureDungeonRecordEnemyEnhance)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN" => {
                Some(Self::TreasureDungeonRecordEnemyWeaken)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE" => {
                Some(Self::TreasureDungeonRecordEnemyAuraRemove)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterRun)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterKill)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerSuccess)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerFail)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID" => {
                Some(Self::TreasureDungeonRecordBattleBuffOpenGrid)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddItem)
            }
            "TREASURE_DUNGEON_RECORD_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordTrialAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAllAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST" => {
                Some(Self::TreasureDungeonRecordOpenItemChest)
            }
            _ => None,
        }
    }
}
/// IMMKEHKKJOE
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTutorialType {
    None = 0,
    CmdUnlockTutorialGuideScRsp = 1637,
    CmdGetTutorialGuideCsReq = 1603,
    CmdFinishTutorialGuideScRsp = 1674,
    CmdFinishTutorialGuideCsReq = 1647,
    CmdGetTutorialScRsp = 1620,
    CmdGetTutorialCsReq = 1659,
    CmdFinishTutorialScRsp = 1616,
    CmdUnlockTutorialScRsp = 1653,
    CmdUnlockTutorialGuideCsReq = 1634,
    CmdGetTutorialGuideScRsp = 1646,
    CmdFinishTutorialCsReq = 1680,
    CmdUnlockTutorialCsReq = 1639,
}
impl CmdTutorialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdTutorialTypeNone",
            Self::CmdUnlockTutorialGuideScRsp => "CmdUnlockTutorialGuideScRsp",
            Self::CmdGetTutorialGuideCsReq => "CmdGetTutorialGuideCsReq",
            Self::CmdFinishTutorialGuideScRsp => "CmdFinishTutorialGuideScRsp",
            Self::CmdFinishTutorialGuideCsReq => "CmdFinishTutorialGuideCsReq",
            Self::CmdGetTutorialScRsp => "CmdGetTutorialScRsp",
            Self::CmdGetTutorialCsReq => "CmdGetTutorialCsReq",
            Self::CmdFinishTutorialScRsp => "CmdFinishTutorialScRsp",
            Self::CmdUnlockTutorialScRsp => "CmdUnlockTutorialScRsp",
            Self::CmdUnlockTutorialGuideCsReq => "CmdUnlockTutorialGuideCsReq",
            Self::CmdGetTutorialGuideScRsp => "CmdGetTutorialGuideScRsp",
            Self::CmdFinishTutorialCsReq => "CmdFinishTutorialCsReq",
            Self::CmdUnlockTutorialCsReq => "CmdUnlockTutorialCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTutorialTypeNone" => Some(Self::None),
            "CmdUnlockTutorialGuideScRsp" => Some(Self::CmdUnlockTutorialGuideScRsp),
            "CmdGetTutorialGuideCsReq" => Some(Self::CmdGetTutorialGuideCsReq),
            "CmdFinishTutorialGuideScRsp" => Some(Self::CmdFinishTutorialGuideScRsp),
            "CmdFinishTutorialGuideCsReq" => Some(Self::CmdFinishTutorialGuideCsReq),
            "CmdGetTutorialScRsp" => Some(Self::CmdGetTutorialScRsp),
            "CmdGetTutorialCsReq" => Some(Self::CmdGetTutorialCsReq),
            "CmdFinishTutorialScRsp" => Some(Self::CmdFinishTutorialScRsp),
            "CmdUnlockTutorialScRsp" => Some(Self::CmdUnlockTutorialScRsp),
            "CmdUnlockTutorialGuideCsReq" => Some(Self::CmdUnlockTutorialGuideCsReq),
            "CmdGetTutorialGuideScRsp" => Some(Self::CmdGetTutorialGuideScRsp),
            "CmdFinishTutorialCsReq" => Some(Self::CmdFinishTutorialCsReq),
            "CmdUnlockTutorialCsReq" => Some(Self::CmdUnlockTutorialCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TutorialStatus {
    TutorialNone = 0,
    TutorialUnlock = 1,
    TutorialFinish = 2,
}
impl TutorialStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::TutorialNone => "TUTORIAL_NONE",
            Self::TutorialUnlock => "TUTORIAL_UNLOCK",
            Self::TutorialFinish => "TUTORIAL_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TUTORIAL_NONE" => Some(Self::TutorialNone),
            "TUTORIAL_UNLOCK" => Some(Self::TutorialUnlock),
            "TUTORIAL_FINISH" => Some(Self::TutorialFinish),
            _ => None,
        }
    }
}
/// KKPEMHIGEAL
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWaypointType {
    None = 0,
    CmdWaypointShowNewCsNotify = 434,
    CmdSetCurWaypointCsReq = 403,
    CmdGetChapterScRsp = 453,
    CmdTakeChapterRewardCsReq = 437,
    CmdGetWaypointScRsp = 420,
    CmdSetCurWaypointScRsp = 446,
    CmdGetChapterCsReq = 439,
    CmdTakeChapterRewardScRsp = 480,
    CmdGetWaypointCsReq = 459,
}
impl CmdWaypointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWaypointTypeNone",
            Self::CmdWaypointShowNewCsNotify => "CmdWaypointShowNewCsNotify",
            Self::CmdSetCurWaypointCsReq => "CmdSetCurWaypointCsReq",
            Self::CmdGetChapterScRsp => "CmdGetChapterScRsp",
            Self::CmdTakeChapterRewardCsReq => "CmdTakeChapterRewardCsReq",
            Self::CmdGetWaypointScRsp => "CmdGetWaypointScRsp",
            Self::CmdSetCurWaypointScRsp => "CmdSetCurWaypointScRsp",
            Self::CmdGetChapterCsReq => "CmdGetChapterCsReq",
            Self::CmdTakeChapterRewardScRsp => "CmdTakeChapterRewardScRsp",
            Self::CmdGetWaypointCsReq => "CmdGetWaypointCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWaypointTypeNone" => Some(Self::None),
            "CmdWaypointShowNewCsNotify" => Some(Self::CmdWaypointShowNewCsNotify),
            "CmdSetCurWaypointCsReq" => Some(Self::CmdSetCurWaypointCsReq),
            "CmdGetChapterScRsp" => Some(Self::CmdGetChapterScRsp),
            "CmdTakeChapterRewardCsReq" => Some(Self::CmdTakeChapterRewardCsReq),
            "CmdGetWaypointScRsp" => Some(Self::CmdGetWaypointScRsp),
            "CmdSetCurWaypointScRsp" => Some(Self::CmdSetCurWaypointScRsp),
            "CmdGetChapterCsReq" => Some(Self::CmdGetChapterCsReq),
            "CmdTakeChapterRewardScRsp" => Some(Self::CmdTakeChapterRewardScRsp),
            "CmdGetWaypointCsReq" => Some(Self::CmdGetWaypointCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Opmlfnhbbka {
    WaypointTypeNone = 0,
    WaypointTypeStage = 1,
    WaypointTypePlot = 2,
}
impl Opmlfnhbbka {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointTypeNone => "WAYPOINT_TYPE_NONE",
            Self::WaypointTypeStage => "WAYPOINT_TYPE_STAGE",
            Self::WaypointTypePlot => "WAYPOINT_TYPE_PLOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_TYPE_NONE" => Some(Self::WaypointTypeNone),
            "WAYPOINT_TYPE_STAGE" => Some(Self::WaypointTypeStage),
            "WAYPOINT_TYPE_PLOT" => Some(Self::WaypointTypePlot),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pacojlgjmfa {
    WaypointUnlockNone = 0,
    WaypointUnlockPre = 1,
    WaypointUnlockLevel = 2,
}
impl Pacojlgjmfa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::WaypointUnlockNone => "WAYPOINT_UNLOCK_NONE",
            Self::WaypointUnlockPre => "WAYPOINT_UNLOCK_PRE",
            Self::WaypointUnlockLevel => "WAYPOINT_UNLOCK_LEVEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_UNLOCK_NONE" => Some(Self::WaypointUnlockNone),
            "WAYPOINT_UNLOCK_PRE" => Some(Self::WaypointUnlockPre),
            "WAYPOINT_UNLOCK_LEVEL" => Some(Self::WaypointUnlockLevel),
            _ => None,
        }
    }
}
/// HEOJPKLJCCG
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWolfBroType {
    None = 0,
    CmdRestoreWolfBroGameArchiveScRsp = 6553,
    CmdWolfBroGameUseBulletScRsp = 6530,
    CmdWolfBroGamePickupBulletScRsp = 6548,
    CmdWolfBroGameExplodeMonsterScRsp = 6561,
    CmdGetWolfBroGameDataScRsp = 6516,
    CmdArchiveWolfBroGameScRsp = 6546,
    CmdRestoreWolfBroGameArchiveCsReq = 6539,
    CmdWolfBroGameActivateBulletCsReq = 6590,
    CmdStartWolfBroGameCsReq = 6559,
    CmdGetWolfBroGameDataCsReq = 6580,
    CmdQuitWolfBroGameScRsp = 6537,
    CmdWolfBroGameExplodeMonsterCsReq = 6519,
    CmdWolfBroGameDataChangeScNotify = 6547,
    CmdWolfBroGameUseBulletCsReq = 6574,
    CmdWolfBroGamePickupBulletCsReq = 6575,
    CmdWolfBroGameActivateBulletScRsp = 6579,
    CmdStartWolfBroGameScRsp = 6520,
    CmdArchiveWolfBroGameCsReq = 6503,
    CmdQuitWolfBroGameCsReq = 6534,
}
impl CmdWolfBroType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CmdWolfBroTypeNone",
            Self::CmdRestoreWolfBroGameArchiveScRsp => {
                "CmdRestoreWolfBroGameArchiveScRsp"
            }
            Self::CmdWolfBroGameUseBulletScRsp => "CmdWolfBroGameUseBulletScRsp",
            Self::CmdWolfBroGamePickupBulletScRsp => "CmdWolfBroGamePickupBulletScRsp",
            Self::CmdWolfBroGameExplodeMonsterScRsp => {
                "CmdWolfBroGameExplodeMonsterScRsp"
            }
            Self::CmdGetWolfBroGameDataScRsp => "CmdGetWolfBroGameDataScRsp",
            Self::CmdArchiveWolfBroGameScRsp => "CmdArchiveWolfBroGameScRsp",
            Self::CmdRestoreWolfBroGameArchiveCsReq => {
                "CmdRestoreWolfBroGameArchiveCsReq"
            }
            Self::CmdWolfBroGameActivateBulletCsReq => {
                "CmdWolfBroGameActivateBulletCsReq"
            }
            Self::CmdStartWolfBroGameCsReq => "CmdStartWolfBroGameCsReq",
            Self::CmdGetWolfBroGameDataCsReq => "CmdGetWolfBroGameDataCsReq",
            Self::CmdQuitWolfBroGameScRsp => "CmdQuitWolfBroGameScRsp",
            Self::CmdWolfBroGameExplodeMonsterCsReq => {
                "CmdWolfBroGameExplodeMonsterCsReq"
            }
            Self::CmdWolfBroGameDataChangeScNotify => "CmdWolfBroGameDataChangeScNotify",
            Self::CmdWolfBroGameUseBulletCsReq => "CmdWolfBroGameUseBulletCsReq",
            Self::CmdWolfBroGamePickupBulletCsReq => "CmdWolfBroGamePickupBulletCsReq",
            Self::CmdWolfBroGameActivateBulletScRsp => {
                "CmdWolfBroGameActivateBulletScRsp"
            }
            Self::CmdStartWolfBroGameScRsp => "CmdStartWolfBroGameScRsp",
            Self::CmdArchiveWolfBroGameCsReq => "CmdArchiveWolfBroGameCsReq",
            Self::CmdQuitWolfBroGameCsReq => "CmdQuitWolfBroGameCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWolfBroTypeNone" => Some(Self::None),
            "CmdRestoreWolfBroGameArchiveScRsp" => {
                Some(Self::CmdRestoreWolfBroGameArchiveScRsp)
            }
            "CmdWolfBroGameUseBulletScRsp" => Some(Self::CmdWolfBroGameUseBulletScRsp),
            "CmdWolfBroGamePickupBulletScRsp" => {
                Some(Self::CmdWolfBroGamePickupBulletScRsp)
            }
            "CmdWolfBroGameExplodeMonsterScRsp" => {
                Some(Self::CmdWolfBroGameExplodeMonsterScRsp)
            }
            "CmdGetWolfBroGameDataScRsp" => Some(Self::CmdGetWolfBroGameDataScRsp),
            "CmdArchiveWolfBroGameScRsp" => Some(Self::CmdArchiveWolfBroGameScRsp),
            "CmdRestoreWolfBroGameArchiveCsReq" => {
                Some(Self::CmdRestoreWolfBroGameArchiveCsReq)
            }
            "CmdWolfBroGameActivateBulletCsReq" => {
                Some(Self::CmdWolfBroGameActivateBulletCsReq)
            }
            "CmdStartWolfBroGameCsReq" => Some(Self::CmdStartWolfBroGameCsReq),
            "CmdGetWolfBroGameDataCsReq" => Some(Self::CmdGetWolfBroGameDataCsReq),
            "CmdQuitWolfBroGameScRsp" => Some(Self::CmdQuitWolfBroGameScRsp),
            "CmdWolfBroGameExplodeMonsterCsReq" => {
                Some(Self::CmdWolfBroGameExplodeMonsterCsReq)
            }
            "CmdWolfBroGameDataChangeScNotify" => {
                Some(Self::CmdWolfBroGameDataChangeScNotify)
            }
            "CmdWolfBroGameUseBulletCsReq" => Some(Self::CmdWolfBroGameUseBulletCsReq),
            "CmdWolfBroGamePickupBulletCsReq" => {
                Some(Self::CmdWolfBroGamePickupBulletCsReq)
            }
            "CmdWolfBroGameActivateBulletScRsp" => {
                Some(Self::CmdWolfBroGameActivateBulletScRsp)
            }
            "CmdStartWolfBroGameScRsp" => Some(Self::CmdStartWolfBroGameScRsp),
            "CmdArchiveWolfBroGameCsReq" => Some(Self::CmdArchiveWolfBroGameCsReq),
            "CmdQuitWolfBroGameCsReq" => Some(Self::CmdQuitWolfBroGameCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hiflobgnabo {
    DispatchTypeNone = 0,
    DispatchTypeByAddr = 1,
    DispatchTypeByMod = 2,
    DispatchTypeByRand = 3,
    DispatchTypeByChash = 4,
    DispatchTypeByStickySession = 5,
    DispatchTypeByObject = 6,
}
impl Hiflobgnabo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::DispatchTypeNone => "DISPATCH_TYPE_NONE",
            Self::DispatchTypeByAddr => "DISPATCH_TYPE_BY_ADDR",
            Self::DispatchTypeByMod => "DISPATCH_TYPE_BY_MOD",
            Self::DispatchTypeByRand => "DISPATCH_TYPE_BY_RAND",
            Self::DispatchTypeByChash => "DISPATCH_TYPE_BY_CHASH",
            Self::DispatchTypeByStickySession => "DISPATCH_TYPE_BY_STICKY_SESSION",
            Self::DispatchTypeByObject => "DISPATCH_TYPE_BY_OBJECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISPATCH_TYPE_NONE" => Some(Self::DispatchTypeNone),
            "DISPATCH_TYPE_BY_ADDR" => Some(Self::DispatchTypeByAddr),
            "DISPATCH_TYPE_BY_MOD" => Some(Self::DispatchTypeByMod),
            "DISPATCH_TYPE_BY_RAND" => Some(Self::DispatchTypeByRand),
            "DISPATCH_TYPE_BY_CHASH" => Some(Self::DispatchTypeByChash),
            "DISPATCH_TYPE_BY_STICKY_SESSION" => Some(Self::DispatchTypeByStickySession),
            "DISPATCH_TYPE_BY_OBJECT" => Some(Self::DispatchTypeByObject),
            _ => None,
        }
    }
}
